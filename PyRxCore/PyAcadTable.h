#pragma once
#include "PyAcadEntity.h"

//----------------------------------------------------------------------------------------
//PyAcadTable
void makePyAcadTableWrapper();

class PyAcadTable : public PyAcadEntity
{
public:
    PyAcadTable() = default;
    PyAcadTable(std::shared_ptr<PyIAcadTableImpl> ptr);
    virtual ~PyAcadTable() override = default;

    std::string             styleName() const;
    void                    setStyleName(const std::string val) const;
    int                     rows() const;
    void                    setRows(int val) const;
    int                     columns() const;
    void                    setColumns(int val) const;
    PyAcTableDirection      flowDirection() const;
    void                    setFlowDirection(PyAcTableDirection val) const;
    double                  width() const;
    void                    setWidth(double val) const;
    double                  height() const;
    void                    setHeight(double val) const;
    double                  vertCellMargin() const;
    void                    setVertCellMargin(double val) const;
    double                  horzCellMargin() const;
    void                    setHorzCellMargin(double val) const;
    AcGePoint3d             insertionPoint() const;
    void                    setInsertionPoint(const AcGePoint3d val) const;
    double                  columnWidth(int col) const;
    void                    setColumnWidth1(double val) const;
    void                    setColumnWidth2(int col, double val) const;
    double                  rowHeight(int row) const;
    void                    setRowHeight1(double val) const;
    void                    setRowHeight2(int row, double val) const;
    double                  minimumColumnWidth(int col) const;
    double                  minimumRowHeight(int row) const;
    double                  minimumTableWidth() const;
    double                  minimumTableHeight() const;
    AcGeVector3d            direction() const;
    void                    setDirection(const AcGeVector3d val) const;
    bool                    titleSuppressed() const;
    void                    setTitleSuppressed(bool val) const;
    bool                    headerSuppressed() const;
    void                    setHeaderSuppressed(bool val) const;
    boost::python::list     tableStyleOverrides() const;
    void                    clearTableStyleOverrides(int flag) const;
    PyAcCellType            cellType(int row, int col) const;
    void                    setCellType(int row, int col, PyAcCellType val) const;
    boost::python::list     cellExtents(int row, int col, bool bOuterCell) const;
    AcGePoint3d             attachmentPoint(int row, int col) const;
    PyAcCellAlignment       cellAlignment(int row, int col) const;
    void                    setCellAlignment(int row, int col, PyAcCellAlignment val) const;
    bool                    cellBackgroundColorNone(int row, int col) const;
    void                    setCellBackgroundColorNone(int row, int col, bool val) const;
    PyAcadAcCmColor         cellBackgroundColor(int row, int col) const;
    void                    setCellBackgroundColor(int row, int col, const PyAcadAcCmColor& val) const;
    PyAcadAcCmColor         cellContentColor(int row, int col) const;
    void                    setCellContentColor(int row, int col, const PyAcadAcCmColor& val) const;
    boost::python::list     cellStyleOverrides(int row, int col) const;
    void                    deleteCellContent(int row, int col) const;
    PyAcRowType             rowType(int row) const;
    std::string             text(int row, int col) const;
    void                    setText(int row, int col, const std::string& val) const;
    std::string             cellTextStyle(int row, int col) const;
    void                    setCellTextStyle(int row, int col, const std::string& val) const;
    double                  cellTextHeight(int row, int col) const;
    void                    setCellTextHeight(int row, int col, double val) const;
    PyAcRotationAngle       textRotation(int row, int col) const;
    void                    setTextRotation(int row, int col, PyAcRotationAngle val) const;
    bool                    autoScale(int row, int col) const;
    void                    setAutoScale(int row, int col, bool val) const;
    PyDbObjectId            blockTableRecordId1(int row, int col) const;
    PyDbObjectId            blockTableRecordId2(int row, int col, int nContent) const;
    void                    setBlockTableRecordId1(int row, int col, const PyDbObjectId& val, bool autoScale) const;
    void                    setBlockTableRecordId2(int row, int col, int nContent, const PyDbObjectId& val, bool autoScale) const;
    double                  blockScale(int row, int col) const;
    void                    setBlockScale(int row, int col, double val) const;
    double                  blockRotation(int row, int col) const;
    void                    setBlockRotation(int row, int col, double val) const;
    std::string             blockAttributeValue1(int row, int col, const PyDbObjectId& val) const;
    std::string             blockAttributeValue2(int row, int col, int nContent, const PyDbObjectId& val) const;
    void                    setBlockAttributeValue1(int row, int col, const PyDbObjectId& id, const std::string& val) const;
    void                    setBlockAttributeValue2(int row, int col, int nContent, const PyDbObjectId& id, const std::string& val) const;
    PyAcLineWeight          cellGridLineWeight(int row, int col, PyAcCellEdgeMask mask) const;
    void                    setCellGridLineWeight(int row, int col, PyAcCellEdgeMask mask, PyAcLineWeight lw) const;
    PyAcadAcCmColor         cellGridColor(int row, int col, PyAcCellEdgeMask mask) const;
    void                    setCellGridColor(int row, int col, PyAcCellEdgeMask mask, const PyAcadAcCmColor& val) const;
    bool                    cellGridVisibility(int row, int col, PyAcCellEdgeMask mask) const;
    void                    setCellGridVisibility(int row, int col, PyAcCellEdgeMask mask, bool val) const;
    void                    insertColumns(int col, double width, int cols) const;
    void                    deleteColumns(int col, int cols) const;
    void                    insertRows(int row, double width, int rows) const;
    void                    deleteRows(int row, int rows) const;
    void                    mergeCells(int minRow, int maxRow, int minCol, int maxCol) const;
    void                    unmergeCells(int minRow, int maxRow, int minCol, int maxCol) const;
    boost::python::tuple    isMergedCell(int row, int col) const;
    PyDbObjectId            fieldId1(int row, int col) const;
    PyDbObjectId            fieldId2(int row, int col, int nContent) const;
    void                    setFieldId1(int row, int col, const PyDbObjectId& id) const;
    void                    setFieldId2(int row, int col, int nContent, const PyDbObjectId& val, PyAcCellOption nflag) const;
    void                    generateLayout() const;
    void                    recomputeTableBlock(bool bForceUpdate) const;
    boost::python::tuple    hitTest(const AcGePoint3d& wpt, const AcGeVector3d& wviewVec) const;
    boost::python::tuple    select(const AcGePoint3d& wpt, const AcGeVector3d& wvwVec, const AcGeVector3d& wvwxVec, double wxaper, double wyaper, bool allowOutside) const;
    boost::python::tuple    selectSubRegion(const AcGePoint3d& wpt1, const AcGePoint3d& wpt2, const AcGeVector3d& wvwVec, const AcGeVector3d& wvwxVec, PyAcSelectType seltype, bool bIncludeCurrent) const;
    boost::python::tuple    subSelection() const;
    void                    setSubSelection(int minRow, int maxRow, int minCol, int maxCol) const;
    void                    reselectSubRegion() const;
    void                    clearSubSelection() const;
    bool                    hasSubSelection() const;
    bool                    regenerateTableSuppressed() const;
    void                    setRegenerateTableSuppressed(bool val) const;
    std::string             formatValue(int row, int col, PyAcFormatOption fmt) const;
    boost::python::tuple    cellDataType(int row, int col) const;
    void                    setCellDataType(int row, int col, PyAcValueDataType dataType, PyAcValueUnitType unitType) const;
    std::string             cellFormat(int row, int col) const;
    void                    setCellFormat(int row, int col, const std::string& val) const;
    PyDbAcValue             cellValue(int row, int col) const;
    void                    setCellValue(int row, int col, const PyDbAcValue& val) const;
    void                    setCellValueFromText(int row, int col, const std::string& val, PyAcParseOption nOption) const;
    void                    resetCellValue(int row, int col) const;
    bool                    isEmpty(int row, int col) const;
    int                     createContent(int row, int col, int nIndex) const;
    void                    moveContent(int row, int col, int nFromIndex, int nToIndex) const;
    void                    deleteContent(int row, int col) const;
    PyDbAcValue             value(int row, int col, int nContent) const;
    void                    setValue(int row, int col, int nContent, const PyDbAcValue& val) const;
    void                    setValueFromText(int row, int col, int nContent, const std::string& val, PyAcParseOption nOption) const;
    std::string             dataFormat(int row, int col, int nContent) const;
    void                    setDataFormat(int row, int col, int nContent, const std::string& val) const;
    std::string             textString(int row, int col, int nContent) const;
    void                    setTextString(int row, int col, int nContent, const std::string& val) const;
    PyDbAcValue             customData(int row, int col, const std::string& key) const;
    void                    setCustomData(int row, int col, const std::string& key, const PyDbAcValue& val) const;
    std::string             cellStyle(int row, int col) const;
    void                    setCellStyle(int row, int col, const std::string& val) const;
    PyAcadAcCmColor         contentColor2(int row, int col, int nContent) const;
    void                    setContentColor2(int row, int col, int nContent, const PyAcadAcCmColor& val) const;
    boost::python::tuple    dataType2(int row, int col, int nContent) const;
    void                    setDataType2(int row, int col, int nContent, PyAcValueDataType dataType, PyAcValueUnitType unitType) const;
    std::string             textStyle2(int row, int col, int nContent) const;
    void                    setTextStyle2(int row, int col, int nContent, const std::string& val) const;
    double                  textHeight2(int row, int col, int nContent) const;
    void                    setTextHeight2(int row, int col, int nContent, double val) const;
    double                  rotation(int row, int col, int nContent) const;
    void                    setRotation(int row, int col, int nContent, double val) const;
    bool                    autoScale2(int row, int col, int nContent) const;
    void                    setAutoScale2(int row, int col, int nContent, bool val) const;
    double                  scale(int row, int col, int nContent) const;
    void                    setScale(int row, int col, int nContent, double val) const;
    void                    removeAllOverrides(int row, int col) const;
    PyAcLineWeight          gridLineWeight2(int row, int col, PyAcGridLineType lt) const;
    void                    setGridLineWeight2(int row, int col, PyAcGridLineType lt, PyAcLineWeight lw) const;
    PyDbObjectId            gridLinetype(int row, int col, PyAcGridLineType lt) const;
    void                    setGridLinetype(int row, int col, PyAcGridLineType lt, const PyDbObjectId& val) const;
    PyAcadAcCmColor         gridColor2(int row, int col, PyAcGridLineType lt) const;
    void                    setGridColor2(int row, int col, PyAcGridLineType lt, const PyAcadAcCmColor& val) const;
    bool                    gridVisibility2(int row, int col, PyAcGridLineType lt) const;
    void                    setGridVisibility2(int row, int col, PyAcGridLineType lt, bool val) const;
    double                  gridDoubleLineSpacing(int row, int col, PyAcGridLineType lt) const;
    void                    setGridDoubleLineSpacing(int row, int col, PyAcGridLineType lt, double val) const;
    void                    setEnableBreak(bool val) const;
    double                  breakHeight(int nIndex) const;
    void                    setBreakHeight(int nIndex, double val) const;
    PyAcCellContentType     contentType(int row, int col) const;
    double                  margin(int row, int col, PyAcCellMargin margin) const;
    void                    setMargin(int row, int col, PyAcCellMargin margin, double val) const;
    PyAcCellContentLayout   contentLayout(int row, int col) const;
    void                    setContentLayout(int row, int col, PyAcCellContentLayout val) const;
    PyAcCellProperty        _override(int row, int col, int nContent) const;
    void                    setOverride(int row, int col, int nContent, PyAcCellProperty val) const;
    PyAcGridLineStyle       gridLineStyle(int row, int col, PyAcGridLineType lt) const;
    void                    setGridLineStyle(int row, int col, PyAcGridLineType lt, PyAcGridLineStyle val) const;
    void                    insertRowsAndInherit(int nIndex, int nInheritFrom, int nNumRows) const;
    void                    insertColumnsAndInherit(int nIndex, int nInheritFrom, int nNumCols) const;
    bool                    hasFormula(int row, int col, int nContent) const;
    std::string             formula(int row, int col, int nContent) const;
    void                    setFormula(int row, int col, int nContent, const std::string& val) const;
    bool                    isContentEditable(int row, int col) const;
    bool                    isFormatEditable(int row, int col) const;
    PyAcCellState           cellState(int row, int col) const;
    void                    setCellState(int row, int col, PyAcCellState val) const;
    void                    enableMergeAll(int row, int col, bool val) const;
    bool                    isMergeAllEnabled(int row, int col) const;
    bool                    breaksEnabled() const;
    void                    setBreaksEnabled(bool val) const;
    bool                    repeatTopLabels() const;
    void                    setRepeatTopLabels(bool val) const;
    bool                    repeatBottomLabels() const;
    void                    setRepeatBottomLabels(bool val) const;
    PyAcTableFlowDirection  tableBreakFlowDirection() const;
    void                    setTableBreakFlowDirection(PyAcTableFlowDirection val) const;
    bool                    allowManualPositions() const;
    void                    setAllowManualPositions(bool val) const;
    bool                    allowManualHeights() const;
    void                    setAllowManualHeights(bool val) const;
    double                  tableBreakHeight() const;
    void                    setTableBreakHeight(double val) const;
    double                  breakSpacing() const;
    void                    setBreakSpacing(double val) const;
    std::string             columnName(int col) const;
    void                    setColumnName(int col, const std::string& val) const;
    void                    setToolTip(int row, int col, const std::string& val) const;

    static PyAcadTable cast(const PyAcadObject& src);
    static std::string className();
public:
    PyIAcadTableImpl* impObj(const std::source_location& src = std::source_location::current()) const;
};

