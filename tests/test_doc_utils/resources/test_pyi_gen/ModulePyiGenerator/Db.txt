from __future__ import annotations
from typing import Any, ClassVar, Collection, Iterator, Self, overload
from pyrx import Ap as PyAp
from pyrx import Ax as PyAx
from pyrx import Br as PyBr
from pyrx import Db as PyDb
from pyrx import Ed as PyEd
from pyrx import Ge as PyGe
from pyrx import Gi as PyGi
from pyrx import Gs as PyGs
from pyrx import Pl as PyPl
from pyrx import Rx as PyRx
from pyrx import Sm as PySm
import wx
from pyrx.doc_utils.boost_meta import _BoostPythonEnum
# (...) #
kForReadAndAllShare: DatabaseOpenMode  # 3
# (...) #
class AbstractViewTableRecord(PyDb.SymbolTableRecord):
    def __init__(self, id: PyDb.ObjectId, mode: PyDb.OpenMode = PyDb.OpenMode.kForRead, /) -> None:
        """
        This class is the base class for the AcDbViewTableRecord and AcDbViewportTableRecord
        classes.
        """
# (...) #
    def __reduce__(self, /) -> Any: ...
# (...) #
    def centerPoint(self, /) -> PyGe.Point2d:
        """
        This function returns the center point of the view in DCS coordinates. The center point
        value is used for DXF group code 10 in the AcDbViewTableRecord class and group code 12 in
        the AcDbViewportTableRecord class.
        """
# (...) #
class ErrorStatusException(RuntimeError):
    code: PyDb.ErrorStatus
    message: str
    fullmessage: str
# (...) #
class OpenMode(_BoostPythonEnum):
    ForRead: ClassVar[Self]  # 0
    ForWrite: ClassVar[Self]  # 1
    ForNotify: ClassVar[Self]  # 2
    kForRead: ClassVar[Self]  # 0
    kForWrite: ClassVar[Self]  # 1
    kForNotify: ClassVar[Self]  # 2
# (...) #
def curDb(*args) -> Database:
    """
    curDb() -> Database :

    C++ signature :
        class PyDbDatabase curDb()
    """
# (...) #
def setWorkingDb(*args) -> None:
    """
    setWorkingDb( (Database)arg1) -> None :

    C++ signature :
        void setWorkingDb(class PyDbDatabase {lvalue})
    """
# (...) #
def workingDb(*args) -> Database:
    """
    workingDb() -> Database :

    C++ signature :
        class PyDbDatabase workingDb()
    """
