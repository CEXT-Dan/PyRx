from _typeshed import Incomplete
from win32com.client import CoClassBaseClass, DispatchBaseClass

makepy_version: str
python_version: int
defaultNamedOptArg: Incomplete
defaultNamedNotOptArg: Incomplete
defaultUnnamedArg: Incomplete
CLSID: Incomplete
MajorVersion: int
MinorVersion: int
LibraryFlags: int
LCID: int

class constants:
    acCubicSpline3DPoly: int
    acQuadSpline3DPoly: int
    acSimple3DPoly: int
    acDemanLoadDisable: int
    acDemandLoadCmdInvoke: int
    acDemandLoadOnObjectDetect: int
    acModelSpace: int
    acPaperSpace: int
    acAlignmentAligned: int
    acAlignmentBottomCenter: int
    acAlignmentBottomLeft: int
    acAlignmentBottomRight: int
    acAlignmentCenter: int
    acAlignmentFit: int
    acAlignmentLeft: int
    acAlignmentMiddle: int
    acAlignmentMiddleCenter: int
    acAlignmentMiddleLeft: int
    acAlignmentMiddleRight: int
    acAlignmentRight: int
    acAlignmentTopCenter: int
    acAlignmentTopLeft: int
    acAlignmentTopRight: int
    acAlignPntAcquisitionAutomatic: int
    acAlignPntAcquisitionShiftToAcquire: int
    acDegreeMinuteSeconds: int
    acDegrees: int
    acGrads: int
    acRadians: int
    acAttachmentPointBottomCenter: int
    acAttachmentPointBottomLeft: int
    acAttachmentPointBottomRight: int
    acAttachmentPointMiddleCenter: int
    acAttachmentPointMiddleLeft: int
    acAttachmentPointMiddleRight: int
    acAttachmentPointTopCenter: int
    acAttachmentPointTopLeft: int
    acAttachmentPointTopRight: int
    acAttributeModeConstant: int
    acAttributeModeInvisible: int
    acAttributeModeLockPosition: int
    acAttributeModeMultipleLine: int
    acAttributeModeNormal: int
    acAttributeModePreset: int
    acAttributeModeVerify: int
    acConnectBase: int
    acConnectExtents: int
    acAny: int
    acUniform: int
    acFalse: int
    acTrue: int
    acIntersection: int
    acSubtraction: int
    acUnion: int
    acBottomCenter: int
    acBottomLeft: int
    acBottomRight: int
    acMiddleCenter: int
    acMiddleLeft: int
    acMiddleRight: int
    acTopCenter: int
    acTopLeft: int
    acTopRight: int
    acCellContentLayoutFlow: int
    acCellContentLayoutStackedHorizontal: int
    acCellContentLayoutStackedVertical: int
    acCellContentTypeBlock: int
    acCellContentTypeField: int
    acCellContentTypeUnknown: int
    acCellContentTypeValue: int
    acBottomMask: int
    acLeftMask: int
    acRightMask: int
    acTopMask: int
    acCellMarginBottom: int
    acCellMarginHorzSpacing: int
    acCellMarginLeft: int
    acCellMarginRight: int
    acCellMarginTop: int
    acCellMarginVertSpacing: int
    kCellOptionNone: int
    kInheritCellFormat: int
    acAlignmentProperty: int
    acAllCellProperties: int
    acAutoScale: int
    acBackgroundColor: int
    acBitProperties: int
    acContentColor: int
    acContentLayout: int
    acContentProperties: int
    acDataFormat: int
    acDataType: int
    acDataTypeAndFormat: int
    acEnableBackgroundColor: int
    acFlowDirBtoT: int
    acInvalidCellProperty: int
    acLock: int
    acMarginBottom: int
    acMarginLeft: int
    acMarginRight: int
    acMarginTop: int
    acMergeAll: int
    acRotation: int
    acScale: int
    acTextHeight: int
    acTextStyle: int
    acCellStateContentLocked: int
    acCellStateContentModified: int
    acCellStateContentReadOnly: int
    acCellStateFormatLocked: int
    acCellStateFormatModified: int
    acCellStateFormatReadOnly: int
    acCellStateLinked: int
    acCellStateNone: int
    acBlockCell: int
    acTextCell: int
    acUnknownCell: int
    acBlue: int
    acByBlock: int
    acByLayer: int
    acCyan: int
    acGreen: int
    acMagenta: int
    acRed: int
    acWhite: int
    acYellow: int
    acColorMethodByACI: int
    acColorMethodByBlock: int
    acColorMethodByLayer: int
    acColorMethodByRGB: int
    acColorMethodForeground: int
    acDisplayDCS: int
    acOCS: int
    acPaperSpaceDCS: int
    acUCS: int
    acWorld: int
    acUpdateDataFromSource: int
    acUpdateSourceFromData: int
    acUpdateOptionIncludeXrefs: int
    acUpdateOptionNone: int
    acUpdateOptionOverwriteContentModifiedAfterUpdate: int
    acUpdateOptionOverwriteFormatModifiedAfterUpdate: int
    acUpdateOptionUpdateFullSourceRange: int
    acSymAbove: int
    acSymInFront: int
    acSymNone: int
    acArrowArchTick: int
    acArrowBoxBlank: int
    acArrowBoxFilled: int
    acArrowClosed: int
    acArrowClosedBlank: int
    acArrowDatumBlank: int
    acArrowDatumFilled: int
    acArrowDefault: int
    acArrowDot: int
    acArrowDotBlank: int
    acArrowDotSmall: int
    acArrowIntegral: int
    acArrowNone: int
    acArrowOblique: int
    acArrowOpen: int
    acArrowOpen30: int
    acArrowOpen90: int
    acArrowOrigin: int
    acArrowOrigin2: int
    acArrowSmall: int
    acArrowUserDefined: int
    acCenterLine: int
    acCenterMark: int
    acCenterNone: int
    acArrowsOnly: int
    acBestFit: int
    acTextAndArrows: int
    acTextOnly: int
    acDiagonal: int
    acHorizontal: int
    acNotStacked: int
    acFirstExtensionLine: int
    acHorzCentered: int
    acOverFirstExtension: int
    acOverSecondExtension: int
    acSecondExtensionLine: int
    acDimLArchitectural: int
    acDimLDecimal: int
    acDimLEngineering: int
    acDimLFractional: int
    acDimLScientific: int
    acDimLWindowsDesktop: int
    acDimPrecisionEight: int
    acDimPrecisionFive: int
    acDimPrecisionFour: int
    acDimPrecisionOne: int
    acDimPrecisionSeven: int
    acDimPrecisionSix: int
    acDimPrecisionThree: int
    acDimPrecisionTwo: int
    acDimPrecisionZero: int
    acDimLineWithText: int
    acMoveTextAddLeader: int
    acMoveTextNoLeader: int
    acTolBottom: int
    acTolMiddle: int
    acTolTop: int
    acTolBasic: int
    acTolDeviation: int
    acTolLimits: int
    acTolNone: int
    acTolSymmetrical: int
    acDimArchitectural: int
    acDimArchitecturalStacked: int
    acDimDecimal: int
    acDimEngineering: int
    acDimFractional: int
    acDimFractionalStacked: int
    acDimScientific: int
    acDimWindowsDesktop: int
    acAbove: int
    acJIS: int
    acOutside: int
    acUnder: int
    acVertCentered: int
    acDragDisplayAutomatically: int
    acDragDisplayOnRequest: int
    acDragDoNotDisplay: int
    acDrawLeaderHeadFirst: int
    acDrawLeaderTailFirst: int
    acDrawContentFirst: int
    acDrawLeaderFirst: int
    acEnableSCM: int
    acEnableSCMOptions: int
    acEnter: int
    acRepeatLastCommand: int
    acSCM: int
    acEdRepeatLastCommand: int
    acEdSCM: int
    acNoDrawingAreaShortCutMenu: int
    acUseDefaultDrawingAreaShortCutMenu: int
    acBottomToTop: int
    acByStyle: int
    acLeftToRight: int
    acRightToLeft: int
    acTopToBottom: int
    acAngular: int
    acArea: int
    acDistance: int
    acNoUnits: int
    ac3dFace: int
    ac3dPolyline: int
    ac3dSolid: int
    acArc: int
    acAttribute: int
    acAttributeReference: int
    acBlockReference: int
    acCircle: int
    acDgnUnderlay: int
    acDim3PointAngular: int
    acDimAligned: int
    acDimAngular: int
    acDimArcLength: int
    acDimDiametric: int
    acDimOrdinate: int
    acDimRadial: int
    acDimRadialLarge: int
    acDimRotated: int
    acDwfUnderlay: int
    acEllipse: int
    acExternalReference: int
    acGroup: int
    acHatch: int
    acLeader: int
    acLine: int
    acMInsertBlock: int
    acMLeader: int
    acMLine: int
    acMtext: int
    acNurbSurface: int
    acPViewport: int
    acPdfUnderlay: int
    acPoint: int
    acPolyfaceMesh: int
    acPolyline: int
    acPolylineLight: int
    acPolymesh: int
    acRaster: int
    acRay: int
    acRegion: int
    acShape: int
    acSolid: int
    acSpline: int
    acSubDMesh: int
    acTable: int
    acText: int
    acTolerance: int
    acTrace: int
    acXline: int
    acExtendBoth: int
    acExtendNone: int
    acExtendOtherEntity: int
    acExtendThisEntity: int
    acForEditing: int
    acForExpression: int
    acIgnoreMtextFormat: int
    acUseMaximumPrecision: int
    kFormatOptionNone: int
    acPreDefinedGradient: int
    acUserDefinedGradient: int
    acGridLineStyleDouble: int
    acGridLineStyleSingle: int
    acHorzBottom: int
    acHorzInside: int
    acHorzTop: int
    acInvalidGridLine: int
    acVertInside: int
    acVertLeft: int
    acVertRight: int
    acGradientObject: int
    acHatchObject: int
    acHatchStyleIgnore: int
    acHatchStyleNormal: int
    acHatchStyleOuter: int
    acHeight: int
    acTurnHeight: int
    acTurns: int
    acCCW: int
    acCW: int
    acHorizontalAlignmentAligned: int
    acHorizontalAlignmentCenter: int
    acHorizontalAlignmentFit: int
    acHorizontalAlignmentLeft: int
    acHorizontalAlignmentMiddle: int
    acHorizontalAlignmentRight: int
    acPenWidth013: int
    acPenWidth018: int
    acPenWidth025: int
    acPenWidth035: int
    acPenWidth050: int
    acPenWidth070: int
    acPenWidth100: int
    acPenWidth140: int
    acPenWidth200: int
    acPenWidthUnk: int
    acInsertUnitsAngstroms: int
    acInsertUnitsAstronomicalUnits: int
    acInsertUnitsCentimeters: int
    acInsertUnitsDecameters: int
    acInsertUnitsDecimeters: int
    acInsertUnitsFeet: int
    acInsertUnitsGigameters: int
    acInsertUnitsHectometers: int
    acInsertUnitsInches: int
    acInsertUnitsKilometers: int
    acInsertUnitsLightYears: int
    acInsertUnitsMeters: int
    acInsertUnitsMicroinches: int
    acInsertUnitsMicrons: int
    acInsertUnitsMiles: int
    acInsertUnitsMillimeters: int
    acInsertUnitsMils: int
    acInsertUnitsNanometers: int
    acInsertUnitsParsecs: int
    acInsertUnitsUSSurveyFeet: int
    acInsertUnitsUSSurveyInch: int
    acInsertUnitsUSSurveyMile: int
    acInsertUnitsUSSurveyYard: int
    acInsertUnitsUnitless: int
    acInsertUnitsYards: int
    acInsertUnitsAutoAssign: int
    acInsertUnitsPrompt: int
    acPreferenceClassic: int
    acPreferenceCustom: int
    acKeyboardEntry: int
    acKeyboardEntryExceptScripts: int
    acKeyboardRunningObjSnap: int
    acLsAll: int
    acLsColor: int
    acLsFrozen: int
    acLsLineType: int
    acLsLineWeight: int
    acLsLocked: int
    acLsNewViewport: int
    acLsNone: int
    acLsOn: int
    acLsPlot: int
    acLsPlotStyle: int
    acLineNoArrow: int
    acLineWithArrow: int
    acSplineNoArrow: int
    acSplineWithArrow: int
    acLineSpacingStyleAtLeast: int
    acLineSpacingStyleExactly: int
    acLnWt000: int
    acLnWt005: int
    acLnWt009: int
    acLnWt013: int
    acLnWt015: int
    acLnWt018: int
    acLnWt020: int
    acLnWt025: int
    acLnWt030: int
    acLnWt035: int
    acLnWt040: int
    acLnWt050: int
    acLnWt053: int
    acLnWt060: int
    acLnWt070: int
    acLnWt080: int
    acLnWt090: int
    acLnWt100: int
    acLnWt106: int
    acLnWt120: int
    acLnWt140: int
    acLnWt158: int
    acLnWt200: int
    acLnWt211: int
    acLnWtByBlock: int
    acLnWtByLayer: int
    acLnWtByLwDefault: int
    acPaletteByDrawing: int
    acPaletteBySession: int
    acAllNormal: int
    acEndsNormal: int
    acFirstNormal: int
    acLastNormal: int
    acRuled: int
    acSmooth: int
    acUseDraftAngles: int
    acHatchLoopTypeDefault: int
    acHatchLoopTypeDerived: int
    acHatchLoopTypeExternal: int
    acHatchLoopTypePolyline: int
    acHatchLoopTypeTextbox: int
    acBlockContent: int
    acMTextContent: int
    acNoneContent: int
    acInVisibleLeader: int
    acSplineLeader: int
    acStraightLeader: int
    acBottom: int
    acTop: int
    acZero: int
    acEnglish: int
    acMetric: int
    acMenuFileCompiled: int
    acMenuFileSource: int
    acBaseMenuGroup: int
    acPartialMenuGroup: int
    acMenuItem: int
    acMenuSeparator: int
    acMenuSubMenu: int
    acMergeCellStyleConvertDuplicatesToOverrides: int
    acMergeCellStyleCopyDuplicates: int
    acMergeCellStyleIgnoreNewStyles: int
    acMergeCellStyleNone: int
    acMergeCellStyleOverwriteDuplicates: int
    acAlwaysCrease: int
    acCreaseByLevel: int
    acNoneCrease: int
    acOPQHighGraphics: int
    acOPQLowGraphics: int
    acOPQMonochrome: int
    acOQGraphics: int
    acOQHighPhoto: int
    acOQLineArt: int
    acOQPhoto: int
    acOQText: int
    acOTEmbedded: int
    acOTLink: int
    acOTStatic: int
    acOff: int
    acOn: int
    acParseOptionNone: int
    acPreserveMtextFormat: int
    acSetDefaultFormat: int
    acHatchPatternTypeCustomDefined: int
    acHatchPatternTypePreDefined: int
    acHatchPatternTypeUserDefined: int
    acPlotOrientationLandscape: int
    acPlotOrientationPortrait: int
    acInches: int
    acMillimeters: int
    acPixels: int
    acPolicyLegacy: int
    acPolicyNamed: int
    acPolicyLegacyDefault: int
    acPolicyLegacyLegacy: int
    acPolicyLegacyQuery: int
    acPolicyNewDefault: int
    acPolicyNewLegacy: int
    ac0degrees: int
    ac180degrees: int
    ac270degrees: int
    ac90degrees: int
    ac100_1: int
    ac10_1: int
    ac1_1: int
    ac1_10: int
    ac1_100: int
    ac1_128in_1ft: int
    ac1_16: int
    ac1_16in_1ft: int
    ac1_2: int
    ac1_20: int
    ac1_2in_1ft: int
    ac1_30: int
    ac1_32in_1ft: int
    ac1_4: int
    ac1_40: int
    ac1_4in_1ft: int
    ac1_5: int
    ac1_50: int
    ac1_64in_1ft: int
    ac1_8: int
    ac1_8in_1ft: int
    ac1ft_1ft: int
    ac1in_1ft: int
    ac2_1: int
    ac3_16in_1ft: int
    ac3_32in_1ft: int
    ac3_4in_1ft: int
    ac3_8in_1ft: int
    ac3in_1ft: int
    ac4_1: int
    ac6in_1ft: int
    ac8_1: int
    acScaleToFit: int
    acDisplay: int
    acExtents: int
    acLayout: int
    acLimits: int
    acView: int
    acWindow: int
    acByColor: int
    acTrueColor: int
    acClassification: int
    acElevation: int
    acIntensities: int
    acNormals: int
    acObject: int
    acRGB: int
    acIntensityBlue: int
    acIntensityEditableFlag: int
    acIntensityGrayscale: int
    acIntensityGreen: int
    acIntensityRainbow: int
    acIntensityRed: int
    acIntensity: int
    acNormal: int
    acObjectColor: int
    acScanColor: int
    acCubicSplinePoly: int
    acFitCurvePoly: int
    acQuadSplinePoly: int
    acSimplePoly: int
    acBezierSurfaceMesh: int
    acCubicSurfaceMesh: int
    acQuadSurfaceMesh: int
    acSimpleMesh: int
    acBlockBox: int
    acBlockCircle: int
    acBlockHexagon: int
    acBlockImperial: int
    acBlockSlot: int
    acBlockTriangle: int
    acBlockUserDefined: int
    acFullPreview: int
    acPartialPreview: int
    acPrinterAlertOnce: int
    acPrinterAlwaysAlert: int
    acPrinterNeverAlert: int
    acPrinterNeverAlertLogOnce: int
    acProxyBoundingBox: int
    acProxyNotShow: int
    acProxyShow: int
    acActiveViewport: int
    acAllViewports: int
    acDegrees000: int
    acDegrees090: int
    acDegrees180: int
    acDegrees270: int
    acDegreesUnknown: int
    acDataRow: int
    acHeaderRow: int
    acTitleRow: int
    acUnknownRow: int
    ac2000_Template: int
    ac2000_dwg: int
    ac2000_dxf: int
    ac2004_Template: int
    ac2004_dwg: int
    ac2004_dxf: int
    ac2007_Template: int
    ac2007_dwg: int
    ac2007_dxf: int
    ac2010_Template: int
    ac2010_dwg: int
    ac2010_dxf: int
    ac2013_Template: int
    ac2013_dwg: int
    ac2013_dxf: int
    ac2018_Template: int
    ac2018_dwg: int
    ac2018_dxf: int
    acNative: int
    acR12_dxf: int
    acR13_dwg: int
    acR13_dxf: int
    acR14_dwg: int
    acR14_dxf: int
    acR15_Template: int
    acR15_dwg: int
    acR15_dxf: int
    acR18_Template: int
    acR18_dwg: int
    acR18_dxf: int
    acUnknown: int
    acSectionGenerationDestinationFile: int
    acSectionGenerationDestinationNewBlock: int
    acSectionGenerationDestinationReplaceBlock: int
    acSectionGenerationSourceAllObjects: int
    acSectionGenerationSourceSelectedObjects: int
    acSectionStateBoundary: int
    acSectionStatePlane: int
    acSectionStateVolume: int
    acSectionState2Boundary: int
    acSectionState2Plane: int
    acSectionState2Slice: int
    acSectionState2Volume: int
    acSectionSubItemBackLine: int
    acSectionSubItemBackLineBottom: int
    acSectionSubItemBackLineTop: int
    acSectionSubItemSectionLine: int
    acSectionSubItemSectionLineBottom: int
    acSectionSubItemSectionLineTop: int
    acSectionSubItemVerticalLineBottom: int
    acSectionSubItemVerticalLineTop: int
    acSectionSubItemkNone: int
    acSectionType2dSection: int
    acSectionType3dSection: int
    acSectionTypeLiveSection: int
    acDegrees15: int
    acDegrees30: int
    acDegrees45: int
    acDegrees60: int
    acDegrees90: int
    acDegreesAny: int
    acDegreesHorz: int
    acSelectionSetAll: int
    acSelectionSetCrossing: int
    acSelectionSetCrossingPolygon: int
    acSelectionSetFence: int
    acSelectionSetLast: int
    acSelectionSetPrevious: int
    acSelectionSetWindow: int
    acSelectionSetWindowPolygon: int
    acTableSelectCrossing: int
    acTableSelectWindow: int
    acShadePlotAsDisplayed: int
    acShadePlotHidden: int
    acShadePlotRendered: int
    acShadePlotWireframe: int
    acCastsAndReceivesShadows: int
    acCastsShadows: int
    acIgnoreShadows: int
    acReceivesShadows: int
    acHide: int
    acShow: int
    acChord: int
    acCustomParameterization: int
    acSqrtChord: int
    acUniformParam: int
    acControlVertices: int
    acFit: int
    acTableBottomToTop: int
    acTableTopToBottom: int
    acTableFlowDownOrUp: int
    acTableFlowLeft: int
    acTableFlowRight: int
    acCellAlign: int
    acCellBackgroundColor: int
    acCellBackgroundFillNone: int
    acCellBottomGridColor: int
    acCellBottomGridLineWeight: int
    acCellBottomVisibility: int
    acCellContentColor: int
    acCellDataType: int
    acCellLeftGridColor: int
    acCellLeftGridLineWeight: int
    acCellLeftVisibility: int
    acCellRightGridColor: int
    acCellRightGridLineWeight: int
    acCellRightVisibility: int
    acCellTextHeight: int
    acCellTextStyle: int
    acCellTopGridColor: int
    acCellTopGridLineWeight: int
    acCellTopVisibility: int
    acDataHorzBottomColor: int
    acDataHorzBottomLineWeight: int
    acDataHorzBottomVisibility: int
    acDataHorzInsideColor: int
    acDataHorzInsideLineWeight: int
    acDataHorzInsideVisibility: int
    acDataHorzTopColor: int
    acDataHorzTopLineWeight: int
    acDataHorzTopVisibility: int
    acDataRowAlignment: int
    acDataRowColor: int
    acDataRowDataType: int
    acDataRowFillColor: int
    acDataRowFillNone: int
    acDataRowTextHeight: int
    acDataRowTextStyle: int
    acDataVertInsideColor: int
    acDataVertInsideLineWeight: int
    acDataVertInsideVisibility: int
    acDataVertLeftColor: int
    acDataVertLeftLineWeight: int
    acDataVertLeftVisibility: int
    acDataVertRightColor: int
    acDataVertRightLineWeight: int
    acDataVertRightVisibility: int
    acFlowDirection: int
    acHeaderHorzBottomColor: int
    acHeaderHorzBottomLineWeight: int
    acHeaderHorzBottomVisibility: int
    acHeaderHorzInsideColor: int
    acHeaderHorzInsideLineWeight: int
    acHeaderHorzInsideVisibility: int
    acHeaderHorzTopColor: int
    acHeaderHorzTopLineWeight: int
    acHeaderHorzTopVisibility: int
    acHeaderRowAlignment: int
    acHeaderRowColor: int
    acHeaderRowDataType: int
    acHeaderRowFillColor: int
    acHeaderRowFillNone: int
    acHeaderRowTextHeight: int
    acHeaderRowTextStyle: int
    acHeaderSuppressed: int
    acHeaderVertInsideColor: int
    acHeaderVertInsideLineWeight: int
    acHeaderVertInsideVisibility: int
    acHeaderVertLeftColor: int
    acHeaderVertLeftLineWeight: int
    acHeaderVertLeftVisibility: int
    acHeaderVertRightColor: int
    acHeaderVertRightLineWeight: int
    acHeaderVertRightVisibility: int
    acHorzCellMargin: int
    acTitleHorzBottomColor: int
    acTitleHorzBottomLineWeight: int
    acTitleHorzBottomVisibility: int
    acTitleHorzInsideColor: int
    acTitleHorzInsideLineWeight: int
    acTitleHorzInsideVisibility: int
    acTitleHorzTopColor: int
    acTitleHorzTopLineWeight: int
    acTitleHorzTopVisibility: int
    acTitleRowAlignment: int
    acTitleRowColor: int
    acTitleRowDataType: int
    acTitleRowFillColor: int
    acTitleRowFillNone: int
    acTitleRowTextHeight: int
    acTitleRowTextStyle: int
    acTitleSuppressed: int
    acTitleVertInsideColor: int
    acTitleVertInsideLineWeight: int
    acTitleVertInsideVisibility: int
    acTitleVertLeftColor: int
    acTitleVertLeftLineWeight: int
    acTitleVertLeftVisibility: int
    acTitleVertRightColor: int
    acTitleVertRightLineWeight: int
    acTitleVertRightVisibility: int
    acVertCellMargin: int
    acCenterAlignment: int
    acLeftAlignment: int
    acRightAlignment: int
    acAlwaysRightReadingAngle: int
    acHorizontalAngle: int
    acInsertAngle: int
    acAttachmentHorizontal: int
    acAttachmentVertical: int
    acAttachmentAllLine: int
    acAttachmentBottomLine: int
    acAttachmentBottomOfBottom: int
    acAttachmentBottomOfTop: int
    acAttachmentBottomOfTopLine: int
    acAttachmentMiddle: int
    acAttachmentMiddleOfBottom: int
    acAttachmentMiddleOfTop: int
    acAttachmentTopOfTop: int
    acFontBold: int
    acFontBoldItalic: int
    acFontItalic: int
    acFontRegular: int
    acTextFlagBackward: int
    acTextFlagUpsideDown: int
    acToolbarDockBottom: int
    acToolbarDockLeft: int
    acToolbarDockRight: int
    acToolbarDockTop: int
    acToolbarFloating: int
    acToolbarButton: int
    acToolbarControl: int
    acToolbarFlyout: int
    acToolbarSeparator: int
    acApplied: int
    acNoOverrides: int
    acArchitectural: int
    acDecimal: int
    acDefaultUnits: int
    acEngineering: int
    acFractional: int
    acScientific: int
    acBuffer: int
    acDate: int
    acDouble: int
    acGeneral: int
    acLong: int
    acObjectId: int
    acPoint2d: int
    acPoint3d: int
    acResbuf: int
    acString: int
    acUnknownDataType: int
    acUnitAngle: int
    acUnitArea: int
    acUnitDistance: int
    acUnitVolume: int
    acUnitless: int
    acVerticalAlignmentBaseline: int
    acVerticalAlignmentBottom: int
    acVerticalAlignmentMiddle: int
    acVerticalAlignmentTop: int
    acAttachmentCenter: int
    acAttachmentLinedCenter: int
    acVp100_1: int
    acVp10_1: int
    acVp1_1: int
    acVp1_10: int
    acVp1_100: int
    acVp1_128in_1ft: int
    acVp1_16: int
    acVp1_16in_1ft: int
    acVp1_2: int
    acVp1_20: int
    acVp1_2in_1ft: int
    acVp1_30: int
    acVp1_32in_1ft: int
    acVp1_4: int
    acVp1_40: int
    acVp1_4in_1ft: int
    acVp1_5: int
    acVp1_50: int
    acVp1_64in_1ft: int
    acVp1_8: int
    acVp1_8in_1ft: int
    acVp1and1_2in_1ft: int
    acVp1ft_1ft: int
    acVp1in_1ft: int
    acVp2_1: int
    acVp3_16in_1ft: int
    acVp3_32in_1ft: int
    acVp3_4in_1ft: int
    acVp3_8in_1ft: int
    acVp3in_1ft: int
    acVp4_1: int
    acVp6in_1ft: int
    acVp8_1: int
    acVpCustomScale: int
    acVpScaleToFit: int
    acViewport2Horizontal: int
    acViewport2Vertical: int
    acViewport3Above: int
    acViewport3Below: int
    acViewport3Horizontal: int
    acViewport3Left: int
    acViewport3Right: int
    acViewport3Vertical: int
    acViewport4: int
    acMax: int
    acMin: int
    acNorm: int
    acIsolines: int
    acIsoparms: int
    acDemandLoadDisabled: int
    acDemandLoadEnabled: int
    acDemandLoadEnabledWithCopy: int
    acZoomScaledAbsolute: int
    acZoomScaledRelative: int
    acZoomScaledRelativePSpace: int
    ACADSECURITYPARAMS_ALGID_RC4: int
    ACADSECURITYPARAMS_ADD_TIMESTAMP: int
    ACADSECURITYPARAMS_ENCRYPT_DATA: int
    ACADSECURITYPARAMS_ENCRYPT_PROPS: int
    ACADSECURITYPARAMS_SIGN_DATA: int

class IAcad3DFace(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Coordinate(self, Index=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetInvisibleEdge(self, Index=...): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetCoordinate(self, Index=..., arg1=...): ...
    def SetInvisibleEdge(self, Index=..., State=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	@property
	def Application(self)->IAcadApplication: ...
	@property
	def Database(self)->IAcadDatabase: ...
	@property
	def Document(self)->IAcadDocument: ...
	@property
	def EntityName(self): ...
	@property
	def EntityTransparency(self): ...
	@property
	def EntityType(self): ...
	@property
	def Handle(self): ...
	@property
	def HasExtensionDictionary(self): ...
	@property
	def Hyperlinks(self): ...
	@property
	def Layer(self): ...
	@property
	def Linetype(self): ...
	@property
	def LinetypeScale(self): ...
	@property
	def Lineweight(self): ...
	@property
	def Material(self): ...
	@property
	def ObjectID(self): ...
	@property
	def ObjectName(self): ...
	@property
	def OwnerID(self): ...
	@property
	def PlotStyleName(self): ...
	@property
	def TrueColor(self): ...
	@property
	def Visible(self): ...
	@property
	def color(self): ...
	@property
	def Coordinates(self): ...
	@Coordinates.setter
    def Coordinates(self, value) -> None: ...
	@EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
	@Layer.setter
    def Layer(self, value) -> None: ...
	@Linetype.setter
    def Linetype(self, value) -> None: ...
	@LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
	@Lineweight.setter
    def Lineweight(self, value) -> None: ...
	@Material.setter
    def Material(self, value) -> None: ...
	@PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
	@TrueColor.setter
    def TrueColor(self, value) -> None: ...
	@Visible.setter
    def Visible(self, value) -> None: ...
	@color.setter
    def color(self, value) -> None: ...
	
class IAcad3DPolyline(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def AppendVertex(self, vertex=...): ...
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Coordinate(self, Index=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def Explode(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetCoordinate(self, Index=..., arg1=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
	@property
    def Coordinates(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...
	@Coordinates.setter
    def Coordinates(self, value) -> None: ...

class IAcad3DSolid(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Boolean(self, Operation=..., SolidObject=...): ...
    def CheckInterference(self, Object=..., CreateInterferenceSolid=..., SolidsInterfere=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SectionSolid(self, Point1=..., Point2=..., point3=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def SliceSolid(self, Point1=..., Point2=..., point3=..., Negative=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadAcCmColor(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Delete(self): ...
    def SetColorBookColor(self, BookName=..., ColorName=...): ...
    def SetNames(self, ColorName=..., BookName=...): ...
    def SetRGB(self, Red=..., Green=..., Blue=...): ...
    def __iter__(self): ...
	@property
	def Blue(self): ...
	@property
	def BookName(self): ...
	@property
	def ColorIndex(self): ...
	@property
	def ColorMethod(self): ...
	@property
	def ColorName(self): ...
	@property
	def EntityColor(self): ...
	@property
	def Green(self): ...
	@property
	def Red(self): ...
	@ColorIndex.setter
    def ColorIndex(self, value) -> None: ...
	@ColorMethod.setter
    def ColorMethod(self, value) -> None: ...
	@EntityColor.setter
    def EntityColor(self, value) -> None: ...

class IAcadApplication(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Eval(self, Expression=...): ...
    def GetAcadState(self): ...
    def GetInterfaceObject(self, ProgID=...): ...
    def ListArx(self): ...
    def LoadArx(self, Name=...): ...
    def LoadDVB(self, Name=...): ...
    def Quit(self): ...
    def RunMacro(self, MacroPath=...): ...
    def StatusId(self, VportObj=...): ...
    def UnloadArx(self, Name=...): ...
    def UnloadDVB(self, Name=...): ...
    def Update(self): ...
    def Zoom(self, Type=..., vParams=...): ...
    def ZoomAll(self): ...
    def ZoomCenter(self, Center=..., Magnify=...): ...
    def ZoomExtents(self): ...
    def ZoomPickWindow(self): ...
    def ZoomPrevious(self): ...
    def ZoomScaled(self, scale=..., ScaleType=...): ...
    def ZoomWindow(self, LowerLeft=..., UpperRight=...): ...
    def __iter__(self): ...
	@property
	def ActiveDocument(self): ...
	@property
	def Application(self): ...
	@property
	def Caption(self): ...
	@property
	def Documents(self): ...
	@property
	def FullName(self): ...
	@property
	def HWND(self): ...
	@property
	def Height(self): ...
	@property
	def LocaleId(self): ...
	@property
	def MenuBar(self): ...
	@property
	def MenuGroups(self): ...
	@property
	def Name(self): ...
	@property
	def Path(self): ...
	@property
	def Preferences(self): ...
	@property
	def VBE(self): ...
	@property
	def Version(self): ...
	@property
	def Visible(self): ...
	@property
	def Width(self): ...
	@property
	def WindowLeft(self): ...
	@property
	def WindowState(self): ...
	@property
	def WindowTop(self): ...
	@ActiveDocument.setter
    def ActiveDocument(self, value) -> None: ...
	@Height.setter
    def Height(self, value) -> None: ...
	@Visible.setter
    def Visible(self, value) -> None: ...
	@Width.setter
    def Width(self, value) -> None: ...
	@WindowLeft.setter
    def WindowLeft(self, value) -> None: ...
	@WindowState.setter
    def WindowState(self, value) -> None: ...
    @WindowTop.setter
    def WindowTop(self, value) -> None: ...

class IAcadArc(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Offset(self, Distance=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadAttribute(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def UpdateMTextAttribute(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadAttributeReference(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def UpdateMTextAttribute(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadBlock(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add3DFace(self, Point1=..., Point2=..., point3=..., Point4=...): ...
    def Add3DMesh(self, M=..., N=..., PointsMatrix=...): ...
    def Add3DPoly(self, PointsArray=...): ...
    def AddArc(self, Center=..., Radius=..., StartAngle=..., EndAngle=...): ...
    def AddAttribute(self, Height=..., Mode=..., Prompt=..., InsertionPoint=..., Tag=..., Value=...): ...
    def AddBox(self, Origin=..., Length=..., Width=..., Height=...): ...
    def AddCircle(self, Center=..., Radius=...): ...
    def AddCone(self, Center=..., BaseRadius=..., Height=...): ...
    def AddCustomObject(self, ClassName=...): ...
    def AddCylinder(self, Center=..., Radius=..., Height=...): ...
    def AddDim3PointAngular(self, AngleVertex=..., FirstEndPoint=..., SecondEndPoint=..., TextPoint=...): ...
    def AddDimAligned(self, ExtLine1Point=..., ExtLine2Point=..., TextPosition=...): ...
    def AddDimAngular(self, AngleVertex=..., FirstEndPoint=..., SecondEndPoint=..., TextPoint=...): ...
    def AddDimArc(self, ArcCenter=..., FirstEndPoint=..., SecondEndPoint=..., ArcPoint=...): ...
    def AddDimDiametric(self, ChordPoint=..., FarChordPoint=..., LeaderLength=...): ...
    def AddDimOrdinate(self, DefinitionPoint=..., LeaderEndPoint=..., UseXAxis=...): ...
    def AddDimRadial(self, Center=..., ChordPoint=..., LeaderLength=...): ...
    def AddDimRadialLarge(self, Center=..., ChordPoint=..., OverrideCenter=..., JogPoint=..., JogAngle=...): ...
    def AddDimRotated(self, ExtLine1Point=..., ExtLine2Point=..., DimLineLocation=..., RotationAngle=...): ...
    def AddEllipse(self, Center=..., MajorAxis=..., RadiusRatio=...): ...
    def AddEllipticalCone(self, Center=..., MajorRadius=..., MinorRadius=..., Height=...): ...
    def AddEllipticalCylinder(self, Center=..., MajorRadius=..., MinorRadius=..., Height=...): ...
    def AddExtrudedSolid(self, Profile=..., Height=..., TaperAngle=...): ...
    def AddExtrudedSolidAlongPath(self, Profile=..., Path=...): ...
    def AddHatch(self, PatternType=..., PatternName=..., Associativity=..., HatchObjectType=...): ...
    def AddLeader(self, PointsArray=..., Annotation=..., Type=...): ...
    def AddLightWeightPolyline(self, VerticesList=...): ...
    def AddLine(self, StartPoint=..., EndPoint=...): ...
    def AddMInsertBlock(self, InsertionPoint=..., Name=..., Xscale=..., Yscale=..., Zscale=..., Rotation=..., NumRows=..., NumColumns=..., RowSpacing=..., ColumnSpacing=..., Password=...): ...
    def AddMLeader(self, PointsArray=..., leaderLineIndex=...): ...
    def AddMLine(self, VertexList=...): ...
    def AddMText(self, InsertionPoint=..., Width=..., Text=...): ...
    def AddPoint(self, Point=...): ...
    def AddPolyfaceMesh(self, VertexList=..., FaceList=...): ...
    def AddPolyline(self, VerticesList=...): ...
    def AddRaster(self, imageFileName=..., InsertionPoint=..., ScaleFactor=..., RotationAngle=...): ...
    def AddRay(self, Point1=..., Point2=...): ...
    def AddRegion(self, ObjectList=...): ...
    def AddRevolvedSolid(self, Profile=..., AxisPoint=..., AxisDir=..., Angle=...): ...
    def AddSection(self, FromPoint=..., ToPoint=..., planeVector=...): ...
    def AddShape(self, Name=..., InsertionPoint=..., ScaleFactor=..., RotationAngle=...): ...
    def AddSolid(self, Point1=..., Point2=..., point3=..., Point4=...): ...
    def AddSphere(self, Center=..., Radius=...): ...
    def AddSpline(self, PointsArray=..., StartTangent=..., EndTangent=...): ...
    def AddTable(self, InsertionPoint=..., NumRows=..., NumColumns=..., RowHeight=..., ColWidth=...): ...
    def AddText(self, TextString=..., InsertionPoint=..., Height=...): ...
    def AddTolerance(self, Text=..., InsertionPoint=..., Direction=...): ...
    def AddTorus(self, Center=..., TorusRadius=..., TubeRadius=...): ...
    def AddTrace(self, PointsArray=...): ...
    def AddWedge(self, Center=..., Length=..., Width=..., Height=...): ...
    def AddXline(self, Point1=..., Point2=...): ...
    def AttachExternalReference(self, PathName=..., Name=..., InsertionPoint=..., Xscale=..., Yscale=..., Zscale=..., Rotation=..., bOverlay=..., Password=...): ...
    def Bind(self, bPrefixName=...): ...
    def Delete(self): ...
    def Detach(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def InsertBlock(self, InsertionPoint=..., Name=..., Xscale=..., Yscale=..., Zscale=..., Rotation=..., Password=...): ...
    def Item(self, Index=...): ...
    def Reload(self): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def Unload(self): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def BlockScaling(self): ...
	@property
    def Comments(self): ...
	@property
    def Count(self): ...
	@property
    def Database(self)->IAcadDatabase: ...
	@property
    def Document(self)->IAcadDocument: ...
    @property
    def Explodable(self): ...
	@property
    def Handle(self): ...
	@property
    def HasExtensionDictionary(self): ...
	@property
    def IsDynamicBlock(self): ...
	@property
    def IsLayout(self): ...
    @property
    def IsXRef(self): ...
	@property
    def Layout(self)->IAcadLayout: ...
	@property
    def Name(self): ...
	@property
    def ObjectID(self): ...
	@property
    def ObjectName(self): ...
    @property
    def Origin(self): ...
	@property
    def OwnerID(self): ...
	@property
    def Path(self): ...
	@property
    def Units(self): ...
	@property
    def XRefDatabase(self)->IAcadDatabase: ...
	#begin setters
    @BlockScaling.setter
    def BlockScaling(self, value) -> None: ...
    @Comments.setter
    def Comments(self, value) -> None: ...
	@Explodable.setter
    def Explodable(self, value) -> None: ...
    @Name.setter
    def Name(self, value) -> None: ...
    @Origin.setter
    def Origin(self, value) -> None: ...
    @Path.setter
    def Path(self, value) -> None: ...
    @Units.setter
    def Units(self, value) -> None: ...


class IAcadBlockReference(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def ConvertToAnonymousBlock(self): ...
    def ConvertToStaticBlock(self, newBlockName=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def Explode(self): ...
    def GetAttributes(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetConstantAttributes(self): ...
    def GetDynamicBlockProperties(self): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def ResetBlock(self): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadBlocks(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, InsertionPoint=..., Name=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Item(self, Index=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...

class IAcadCircle(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Offset(self, Distance=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadComparedReference(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def ConvertToAnonymousBlock(self): ...
    def ConvertToStaticBlock(self, newBlockName=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def Explode(self): ...
    def GetAttributes(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetConstantAttributes(self): ...
    def GetDynamicBlockProperties(self): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def ResetBlock(self): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadDatabase(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def CopyObjects(self, Objects=..., Owner=..., IdPairs=...): ...
    def HandleToObject(self, Handle=...): ...
    def ObjectIdToObject(self, ObjectID=...): ...
    def __iter__(self): ...
	#begin props
	@property
    def Blocks(self): ...
    @property
    def Dictionaries(self): ...
    @property
    def DimStyles(self): ...
    @property
    def ElevationModelSpace(self): ...
	@property
    def ElevationPaperSpace(self): ...
    @property
    def Groups(self): ...
    @property
    def Layers(self): ...	
    @property
    def Layouts(self): ...	
    @property
    def Limits(self): ...	
	@property
    def Linetypes(self): ...
    @property
    def Materials(self): ...
    @property
    def ModelSpace(self)->IAcadModelSpace: ...
    @property
    def PaperSpace(self)->IAcadPaperSpace: ...
	@property
    def PlotConfigurations(self): ...
    @property
    def Preferences(self): ...
    @property
    def RegisteredApplications(self): ...	
    @property
    def SectionManager(self): ...	
    @property
    def SummaryInfo(self): ...	
	@property
    def TextStyles(self): ...
    @property
    def UserCoordinateSystems(self): ...
    @property
    def Viewports(self): ...
    @property
    def Views(self): ...
	#begin setters
    @ElevationModelSpace.setter
    def ElevationModelSpace(self, value) -> None: ...
	@ElevationPaperSpace.setter
    def ElevationPaperSpace(self, value) -> None: ...
	@Limits.setter
    def Limits(self, value) -> None: ...

	
class IAcadDatabasePreferences(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def __iter__(self): ...

class IAcadDictionaries(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, Name=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Item(self, Index=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...

class IAcadDictionary(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def AddObject(self, Keyword=..., ObjectName=...): ...
    def AddXRecord(self, Keyword=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self): ...
    def GetName(self, Object=...): ...
    def GetObject(self, Name=...): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Item(self, Index=...): ...
    def Remove(self, Name=...): ...
    def Rename(self, OldName=..., NewName=...): ...
    def Replace(self, OldName=..., pObj=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...

class IAcadDim3PointAngular(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadDimAligned(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadDimAngular(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadDimArcLength(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadDimDiametric(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadDimOrdinate(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadDimRadial(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadDimRadialLarge(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadDimRotated(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadDimStyle(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def CopyFrom(self, StyleSource=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __iter__(self): ...

class IAcadDimStyles(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, Name=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Item(self, Index=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...

class IAcadDimension(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadDocument(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Activate(self): ...
    def AuditInfo(self, FixErr=...): ...
    def Close(self, SaveChanges=..., FileName=...): ...
    def CopyObjects(self, Objects=..., Owner=..., IdPairs=...): ...
    def EndUndoMark(self): ...
    def Export(self, FileName=..., Extension=..., SelectionSet=...): ...
    def GetVariable(self, Name=...): ...
    def HandleToObject(self, Handle=...): ...
    def Import(self, FileName=..., InsertionPoint=..., ScaleFactor=...): ...
    def LoadShapeFile(self, FullName=...): ...
    def New(self, TemplateFileName=...): ...
    def ObjectIdToObject(self, ObjectID=...): ...
    def Open(self, FullName=..., Password=...): ...
    def PostCommand(self, Command=...): ...
    def PurgeAll(self): ...
    def Regen(self, WhichViewports=...): ...
    def Save(self): ...
    def SaveAs(self, FullFileName=..., SaveAsType=..., vSecurityParams=...): ...
    def SendCommand(self, Command=...): ...
    def SetVariable(self, Name=..., Value=...): ...
    def StartUndoMark(self): ...
    def Wblock(self, FileName=..., SelectionSet=...): ...
    def __iter__(self): ...
	#begin props
	@property
    def Active(self): ...
	@property
    def ActiveDimStyle(self)->IAcadDimStyle: ...
	@property
    def ActiveLayer(self)->IAcadLayer: ...
	@property
    def ActiveLayout(self)->IAcadLayout: ...
    @property
    def ActiveLinetype(self)->IAcadLineType: ...
	@property
    def ActiveMaterial(self)->IAcadMaterial: ...
	@property
    def ActivePViewport(self)->IAcadPViewport: ...
	@property
    def ActiveSelectionSet(self)->IAcadSelectionSet: ...
    @property
    def ActiveSpace(self): ...
	@property
    def ActiveTextStyle(self)->IAcadTextStyle: ...
	@property
    def ActiveUCS(self)->IAcadUCS: ...
	@property
    def ActiveViewport(self)->IAcadViewport: ...
    @property
    def Application(self)->IAcadApplication: ...
	@property
    def Blocks(self)->IAcadBlocks: ...
	@property
    def Database(self)->IAcadDatabase: ...
	@property
    def Dictionaries(self)->IAcadDictionaries: ...
	@property
    def DimStyles(self)->IAcadDimStyles: ...
	@property
    def ElevationModelSpace(self): ...
	@property
    def ElevationPaperSpace(self): ...
	@property
    def FullName(self): ...
    @property
    def Groups(self): ...
	@property
    def HWND(self): ...
	@property
    def Height(self): ...
	@property
    def Layers(self)->IAcadLayers: ...
    @property
    def Layouts(self)->IAcadLayouts: ...
	@property
    def Limits(self): ...
	@property
    def Linetypes(self)->IAcadLineTypes: ...
	@property
    def MSpace(self): ...
    @property
    def Materials(self)->IAcadMaterials: ...
	@property
    def ModelSpace(self)->IAcadModelSpace: ...
	@property
    def Name(self): ...
	@property
    def PaperSpace(self)->IAcadPaperSpace: ...
    @property
    def Path(self): ...
	@property
    def PickfirstSelectionSet(self)->IAcadSelectionSet: ...
	@property
    def Plot(self): ...
	@property
    def PlotConfigurations(self)->IAcadPlotConfigurations: ...
    @property
    def Preferences(self)->IAcadDatabasePreferences: ...
	@property
    def ReadOnly(self): ...
	@property
    def RegisteredApplications(self)->IAcadRegisteredApplications: ...
	@property
    def Saved(self): ...
    @property
    def SectionManager(self): ...
	@property
    def SelectionSets(self)->IAcadSelectionSets: ...
	@property
    def SummaryInfo(self)->IAcadSummaryInfo: ...
	@property
    def TextStyles(self)->IAcadTextStyles: ...
    @property
    def UserCoordinateSystems(self)->IAcadUCSs: ...
	@property
    def Utility(self)->IAcadUtility: ...
	@property
    def Viewports(self)->IAcadViewports: ...
	@property
    def Views(self)->IAcadViews: ...
	@property
    def Width(self): ...
	@property
    def WindowState(self): ...
	@property
    def WindowTitle(self): ...
	#begin setters
    @ActiveDimStyle.setter
    def ActiveDimStyle(self, value) -> None: ...
    @ActiveLayer.setter
    def ActiveLayer(self, value) -> None: ...
    @ActiveLayout.setter
    def ActiveLayout(self, value) -> None: ...	
    @ActiveLinetype.setter
    def ActiveLinetype(self, value) -> None: ...	
    @ActiveMaterial.setter
    def ActiveMaterial(self, value) -> None: ...	
    @ActivePViewport.setter
    def ActivePViewport(self, value) -> None: ...	
    @ActiveSpace.setter
    def ActiveSpace(self, value) -> None: ...	
    @ActiveTextStyle.setter
    def ActiveTextStyle(self, value) -> None: ...	
    @ActiveUCS.setter
    def ActiveUCS(self, value) -> None: ...
    @ActiveViewport.setter
    def ActiveViewport(self, value) -> None: ...
    @ElevationModelSpace.setter
    def ElevationModelSpace(self, value) -> None: ...
    @ElevationPaperSpace.setter
    def ElevationPaperSpace(self, value) -> None: ...
	@Height.setter
    def Height(self, value) -> None: ...
	@Limits.setter
    def Limits(self, value) -> None: ...
	@MSpace.setter
    def MSpace(self, value) -> None: ...
	@ObjectSnapMode.setter
    def ObjectSnapMode(self, value) -> None: ...
	@Width.setter
    def Width(self, value) -> None: ...
	@WindowState.setter
    def WindowState(self, value) -> None: ...

class IAcadDocuments(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, TemplateName=...): ...
    def Close(self): ...
    def Item(self, Index=...): ...
    def Open(self, Name=..., ReadOnly=..., Password=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...

class IAcadDwfUnderlay(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def ClipBoundary(self, boundry=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadDynamicBlockReferenceProperty(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def __call__(self): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...

class IAcadEllipse(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Offset(self, Distance=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadEntity(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadExternalReference(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def ConvertToAnonymousBlock(self): ...
    def ConvertToStaticBlock(self, newBlockName=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def Explode(self): ...
    def GetAttributes(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetConstantAttributes(self): ...
    def GetDynamicBlockProperties(self): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def ResetBlock(self): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadExtrudedSurface(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadGeoPositionMarker(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadGeomapImage(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def ClipBoundary(self, boundry=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadGroup(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def AppendItems(self, Objects=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def Item(self, Index=...): ...
    def RemoveItems(self, Objects=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def Update(self): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...

class IAcadGroups(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, Name=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Item(self, Index=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...

class IAcadHatch(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def AppendInnerLoop(self, ObjectArray=...): ...
    def AppendOuterLoop(self, ObjectArray=...): ...
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def Evaluate(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetLoopAt(self, Index=..., ObjectArray=...): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def InsertLoopAt(self, Index=..., LoopType=..., ObjectArray=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetPattern(self, PatternType=..., PatternName=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadHelix(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadHyperlink(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Delete(self): ...
    def __iter__(self): ...

class IAcadHyperlinks(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, Name=..., Description=..., NamedLocation=...): ...
    def Item(self, Index=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...

class IAcadIdPair(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def __call__(self): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...

class IAcadLWPolyline(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def AddVertex(self, Index=..., vertex=...): ...
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Coordinate(self, Index=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def Explode(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetBulge(self, Index=...): ...
    def GetExtensionDictionary(self): ...
    def GetWidth(self, Index=..., StartWidth=..., EndWidth=...): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Offset(self, Distance=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetBulge(self, Index=..., bulge=...): ...
    def SetCoordinate(self, Index=..., arg1=...): ...
    def SetWidth(self, Index=..., StartWidth=..., EndWidth=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadLayer(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __iter__(self): ...

class IAcadLayerStateManager(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Delete(self, bsName=...): ...
    def Export(self, bsName=..., bsFilename=...): ...
    def Import(self, bsFilename=...): ...
    def Mask(self, bsName=...): ...
    def Rename(self, bsName=..., bsNewName=...): ...
    def Restore(self, bsName=...): ...
    def Save(self, bsName=..., eMask=...): ...
    def SetDatabase(self, iHostDb=...): ...
    def SetMask(self, bsName=..., arg1=...): ...
    def __iter__(self): ...

class IAcadLayers(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, Name=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GenerateUsageData(self): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Item(self, Index=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...

class IAcadLayout(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def CopyFrom(self, pPlotConfig=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetCanonicalMediaNames(self): ...
    def GetCustomScale(self, Numerator=..., Denominator=...): ...
    def GetExtensionDictionary(self): ...
    def GetLocaleMediaName(self, Name=...): ...
    def GetPaperMargins(self, LowerLeft=..., UpperRight=...): ...
    def GetPaperSize(self, Width=..., Height=...): ...
    def GetPlotDeviceNames(self): ...
    def GetPlotStyleTableNames(self): ...
    def GetWindowToPlot(self, LowerLeft=..., UpperRight=...): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def RefreshPlotDeviceInfo(self): ...
    def SetCustomScale(self, Numerator=..., Denominator=...): ...
    def SetWindowToPlot(self, LowerLeft=..., UpperRight=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __iter__(self): ...

class IAcadLayouts(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, Name=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Item(self, Index=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...

class IAcadLeader(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Coordinate(self, Index=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def Evaluate(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetCoordinate(self, Index=..., arg1=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadLine(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Offset(self, Distance=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadLineType(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __iter__(self): ...

class IAcadLineTypes(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, Name=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Item(self, Index=...): ...
    def Load(self, Name=..., FileName=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...

class IAcadLoftedSurface(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadMInsertBlock(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def ConvertToAnonymousBlock(self): ...
    def ConvertToStaticBlock(self, newBlockName=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def Explode(self): ...
    def GetAttributes(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetConstantAttributes(self): ...
    def GetDynamicBlockProperties(self): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def ResetBlock(self): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadMLeader(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def AddLeader(self): ...
    def AddLeaderLine(self, leaderIndex=..., pointArray=...): ...
    def AddLeaderLineEx(self, pointArray=...): ...
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBlockAttributeValue(self, attdefId=...): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetDoglegDirection(self, leaderIndex=...): ...
    def GetExtensionDictionary(self): ...
    def GetLeaderIndex(self, leaderLineIndex=...): ...
    def GetLeaderLineIndexes(self, leaderIndex=...): ...
    def GetLeaderLineVertices(self, leaderLineIndex=...): ...
    def GetVertexCount(self, leaderLineIndex=...): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def RemoveLeader(self, leaderIndex=...): ...
    def RemoveLeaderLine(self, leaderLineIndex=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetBlockAttributeValue(self, attdefId=..., Value=...): ...
    def SetDoglegDirection(self, leaderIndex=..., dirVec=...): ...
    def SetLeaderLineVertices(self, leaderLineIndex=..., pointArray=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadMLeaderLeader(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def OnModified(self): ...
    def __iter__(self): ...

class IAcadMLeaderStyle(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __iter__(self): ...

class IAcadMLine(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadMText(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def FieldCode(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadMaterial(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __iter__(self): ...

class IAcadMaterials(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, Name=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Item(self, Index=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...

class IAcadMenuBar(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Item(self, Index=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...

class IAcadMenuGroup(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Save(self, MenuFileType=...): ...
    def SaveAs(self, MenuFileName=..., MenuFileType=...): ...
    def Unload(self): ...
    def __iter__(self): ...

class IAcadMenuGroups(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Item(self, Index=...): ...
    def Load(self, MenuFileName=..., BaseMenu=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...

class IAcadModelSpace(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add3DFace(self, Point1=..., Point2=..., point3=..., Point4=...): ...
    def Add3DMesh(self, M=..., N=..., PointsMatrix=...): ...
    def Add3DPoly(self, PointsArray=...): ...
    def AddArc(self, Center=..., Radius=..., StartAngle=..., EndAngle=...): ...
    def AddAttribute(self, Height=..., Mode=..., Prompt=..., InsertionPoint=..., Tag=..., Value=...): ...
    def AddBox(self, Origin=..., Length=..., Width=..., Height=...): ...
    def AddCircle(self, Center=..., Radius=...): ...
    def AddCone(self, Center=..., BaseRadius=..., Height=...): ...
    def AddCustomObject(self, ClassName=...): ...
    def AddCylinder(self, Center=..., Radius=..., Height=...): ...
    def AddDim3PointAngular(self, AngleVertex=..., FirstEndPoint=..., SecondEndPoint=..., TextPoint=...): ...
    def AddDimAligned(self, ExtLine1Point=..., ExtLine2Point=..., TextPosition=...): ...
    def AddDimAngular(self, AngleVertex=..., FirstEndPoint=..., SecondEndPoint=..., TextPoint=...): ...
    def AddDimArc(self, ArcCenter=..., FirstEndPoint=..., SecondEndPoint=..., ArcPoint=...): ...
    def AddDimDiametric(self, ChordPoint=..., FarChordPoint=..., LeaderLength=...): ...
    def AddDimOrdinate(self, DefinitionPoint=..., LeaderEndPoint=..., UseXAxis=...): ...
    def AddDimRadial(self, Center=..., ChordPoint=..., LeaderLength=...): ...
    def AddDimRadialLarge(self, Center=..., ChordPoint=..., OverrideCenter=..., JogPoint=..., JogAngle=...): ...
    def AddDimRotated(self, ExtLine1Point=..., ExtLine2Point=..., DimLineLocation=..., RotationAngle=...): ...
    def AddEllipse(self, Center=..., MajorAxis=..., RadiusRatio=...): ...
    def AddEllipticalCone(self, Center=..., MajorRadius=..., MinorRadius=..., Height=...): ...
    def AddEllipticalCylinder(self, Center=..., MajorRadius=..., MinorRadius=..., Height=...): ...
    def AddExtrudedSolid(self, Profile=..., Height=..., TaperAngle=...): ...
    def AddExtrudedSolidAlongPath(self, Profile=..., Path=...): ...
    def AddHatch(self, PatternType=..., PatternName=..., Associativity=..., HatchObjectType=...): ...
    def AddLeader(self, PointsArray=..., Annotation=..., Type=...): ...
    def AddLightWeightPolyline(self, VerticesList=...): ...
    def AddLine(self, StartPoint=..., EndPoint=...): ...
    def AddMInsertBlock(self, InsertionPoint=..., Name=..., Xscale=..., Yscale=..., Zscale=..., Rotation=..., NumRows=..., NumColumns=..., RowSpacing=..., ColumnSpacing=..., Password=...): ...
    def AddMLeader(self, PointsArray=..., leaderLineIndex=...): ...
    def AddMLine(self, VertexList=...): ...
    def AddMText(self, InsertionPoint=..., Width=..., Text=...): ...
    def AddPoint(self, Point=...): ...
    def AddPolyfaceMesh(self, VertexList=..., FaceList=...): ...
    def AddPolyline(self, VerticesList=...): ...
    def AddRaster(self, imageFileName=..., InsertionPoint=..., ScaleFactor=..., RotationAngle=...): ...
    def AddRay(self, Point1=..., Point2=...): ...
    def AddRegion(self, ObjectList=...): ...
    def AddRevolvedSolid(self, Profile=..., AxisPoint=..., AxisDir=..., Angle=...): ...
    def AddSection(self, FromPoint=..., ToPoint=..., planeVector=...): ...
    def AddShape(self, Name=..., InsertionPoint=..., ScaleFactor=..., RotationAngle=...): ...
    def AddSolid(self, Point1=..., Point2=..., point3=..., Point4=...): ...
    def AddSphere(self, Center=..., Radius=...): ...
    def AddSpline(self, PointsArray=..., StartTangent=..., EndTangent=...): ...
    def AddTable(self, InsertionPoint=..., NumRows=..., NumColumns=..., RowHeight=..., ColWidth=...): ...
    def AddText(self, TextString=..., InsertionPoint=..., Height=...): ...
    def AddTolerance(self, Text=..., InsertionPoint=..., Direction=...): ...
    def AddTorus(self, Center=..., TorusRadius=..., TubeRadius=...): ...
    def AddTrace(self, PointsArray=...): ...
    def AddWedge(self, Center=..., Length=..., Width=..., Height=...): ...
    def AddXline(self, Point1=..., Point2=...): ...
    def AttachExternalReference(self, PathName=..., Name=..., InsertionPoint=..., Xscale=..., Yscale=..., Zscale=..., Rotation=..., bOverlay=..., Password=...): ...
    def Bind(self, bPrefixName=...): ...
    def Delete(self): ...
    def Detach(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def InsertBlock(self, InsertionPoint=..., Name=..., Xscale=..., Yscale=..., Zscale=..., Rotation=..., Password=...): ...
    def Item(self, Index=...): ...
    def Reload(self): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def Unload(self): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def BlockScaling(self): ...
	@property
    def Comments(self): ...
	@property
    def Count(self): ...
	@property
    def Database(self)->IAcadDatabase: ...
	@property
    def Document(self)->IAcadDocument: ...
    @property
    def Explodable(self): ...
	@property
    def Handle(self): ...
	@property
    def HasExtensionDictionary(self): ...
	@property
    def IsDynamicBlock(self): ...
	@property
    def IsLayout(self): ...
    @property
    def IsXRef(self): ...
	@property
    def Layout(self)->IAcadLayout: ...
	@property
    def Name(self): ...
	@property
    def ObjectID(self): ...
	@property
    def ObjectName(self): ...
    @property
    def Origin(self): ...
	@property
    def OwnerID(self): ...
	@property
    def Path(self): ...
	@property
    def Units(self): ...
	@property
    def XRefDatabase(self)->IAcadDatabase: ...
	#begin setters
    @BlockScaling.setter
    def BlockScaling(self, value) -> None: ...
    @Comments.setter
    def Comments(self, value) -> None: ...
	@Explodable.setter
    def Explodable(self, value) -> None: ...
    @Name.setter
    def Name(self, value) -> None: ...
    @Origin.setter
    def Origin(self, value) -> None: ...
    @Path.setter
    def Path(self, value) -> None: ...
    @Units.setter
    def Units(self, value) -> None: ...


class IAcadNurbSurface(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadObject(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __iter__(self): ...

class IAcadOle(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...

class IAcadPViewport(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Display(self, bStatus=...): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetGridSpacing(self, XSpacing=..., YSpacing=...): ...
    def GetSnapSpacing(self, XSpacing=..., YSpacing=...): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetGridSpacing(self, XSpacing=..., YSpacing=...): ...
    def SetSnapSpacing(self, XSpacing=..., YSpacing=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def SyncModelView(self): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...

class IAcadPaperSpace(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add3DFace(self, Point1=..., Point2=..., point3=..., Point4=...): ...
    def Add3DMesh(self, M=..., N=..., PointsMatrix=...): ...
    def Add3DPoly(self, PointsArray=...): ...
    def AddArc(self, Center=..., Radius=..., StartAngle=..., EndAngle=...): ...
    def AddAttribute(self, Height=..., Mode=..., Prompt=..., InsertionPoint=..., Tag=..., Value=...): ...
    def AddBox(self, Origin=..., Length=..., Width=..., Height=...): ...
    def AddCircle(self, Center=..., Radius=...): ...
    def AddCone(self, Center=..., BaseRadius=..., Height=...): ...
    def AddCustomObject(self, ClassName=...): ...
    def AddCylinder(self, Center=..., Radius=..., Height=...): ...
    def AddDim3PointAngular(self, AngleVertex=..., FirstEndPoint=..., SecondEndPoint=..., TextPoint=...): ...
    def AddDimAligned(self, ExtLine1Point=..., ExtLine2Point=..., TextPosition=...): ...
    def AddDimAngular(self, AngleVertex=..., FirstEndPoint=..., SecondEndPoint=..., TextPoint=...): ...
    def AddDimArc(self, ArcCenter=..., FirstEndPoint=..., SecondEndPoint=..., ArcPoint=...): ...
    def AddDimDiametric(self, ChordPoint=..., FarChordPoint=..., LeaderLength=...): ...
    def AddDimOrdinate(self, DefinitionPoint=..., LeaderEndPoint=..., UseXAxis=...): ...
    def AddDimRadial(self, Center=..., ChordPoint=..., LeaderLength=...): ...
    def AddDimRadialLarge(self, Center=..., ChordPoint=..., OverrideCenter=..., JogPoint=..., JogAngle=...): ...
    def AddDimRotated(self, ExtLine1Point=..., ExtLine2Point=..., DimLineLocation=..., RotationAngle=...): ...
    def AddEllipse(self, Center=..., MajorAxis=..., RadiusRatio=...): ...
    def AddEllipticalCone(self, Center=..., MajorRadius=..., MinorRadius=..., Height=...): ...
    def AddEllipticalCylinder(self, Center=..., MajorRadius=..., MinorRadius=..., Height=...): ...
    def AddExtrudedSolid(self, Profile=..., Height=..., TaperAngle=...): ...
    def AddExtrudedSolidAlongPath(self, Profile=..., Path=...): ...
    def AddHatch(self, PatternType=..., PatternName=..., Associativity=..., HatchObjectType=...): ...
    def AddLeader(self, PointsArray=..., Annotation=..., Type=...): ...
    def AddLightWeightPolyline(self, VerticesList=...): ...
    def AddLine(self, StartPoint=..., EndPoint=...): ...
    def AddMInsertBlock(self, InsertionPoint=..., Name=..., Xscale=..., Yscale=..., Zscale=..., Rotation=..., NumRows=..., NumColumns=..., RowSpacing=..., ColumnSpacing=..., Password=...): ...
    def AddMLeader(self, PointsArray=..., leaderLineIndex=...): ...
    def AddMLine(self, VertexList=...): ...
    def AddMText(self, InsertionPoint=..., Width=..., Text=...): ...
    def AddPViewport(self, Center=..., Width=..., Height=...): ...
    def AddPoint(self, Point=...): ...
    def AddPolyfaceMesh(self, VertexList=..., FaceList=...): ...
    def AddPolyline(self, VerticesList=...): ...
    def AddRaster(self, imageFileName=..., InsertionPoint=..., ScaleFactor=..., RotationAngle=...): ...
    def AddRay(self, Point1=..., Point2=...): ...
    def AddRegion(self, ObjectList=...): ...
    def AddRevolvedSolid(self, Profile=..., AxisPoint=..., AxisDir=..., Angle=...): ...
    def AddSection(self, FromPoint=..., ToPoint=..., planeVector=...): ...
    def AddShape(self, Name=..., InsertionPoint=..., ScaleFactor=..., RotationAngle=...): ...
    def AddSolid(self, Point1=..., Point2=..., point3=..., Point4=...): ...
    def AddSphere(self, Center=..., Radius=...): ...
    def AddSpline(self, PointsArray=..., StartTangent=..., EndTangent=...): ...
    def AddTable(self, InsertionPoint=..., NumRows=..., NumColumns=..., RowHeight=..., ColWidth=...): ...
    def AddText(self, TextString=..., InsertionPoint=..., Height=...): ...
    def AddTolerance(self, Text=..., InsertionPoint=..., Direction=...): ...
    def AddTorus(self, Center=..., TorusRadius=..., TubeRadius=...): ...
    def AddTrace(self, PointsArray=...): ...
    def AddWedge(self, Center=..., Length=..., Width=..., Height=...): ...
    def AddXline(self, Point1=..., Point2=...): ...
    def AttachExternalReference(self, PathName=..., Name=..., InsertionPoint=..., Xscale=..., Yscale=..., Zscale=..., Rotation=..., bOverlay=..., Password=...): ...
    def Bind(self, bPrefixName=...): ...
    def Delete(self): ...
    def Detach(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def InsertBlock(self, InsertionPoint=..., Name=..., Xscale=..., Yscale=..., Zscale=..., Rotation=..., Password=...): ...
    def Item(self, Index=...): ...
    def Reload(self): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def Unload(self): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...

class IAcadPlaneSurface(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...

class IAcadPlot(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def DisplayPlotPreview(self, Preview=...): ...
    def PlotToDevice(self, plotConfig=...): ...
    def PlotToFile(self, plotFile=..., plotConfig=...): ...
    def SetLayoutsToPlot(self, layoutList=...): ...
    def StartBatchMode(self, entryCount=...): ...
    def __iter__(self): ...

class IAcadPlotConfiguration(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def CopyFrom(self, pPlotConfig=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetCanonicalMediaNames(self): ...
    def GetCustomScale(self, Numerator=..., Denominator=...): ...
    def GetExtensionDictionary(self): ...
    def GetLocaleMediaName(self, Name=...): ...
    def GetPaperMargins(self, LowerLeft=..., UpperRight=...): ...
    def GetPaperSize(self, Width=..., Height=...): ...
    def GetPlotDeviceNames(self): ...
    def GetPlotStyleTableNames(self): ...
    def GetWindowToPlot(self, LowerLeft=..., UpperRight=...): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def RefreshPlotDeviceInfo(self): ...
    def SetCustomScale(self, Numerator=..., Denominator=...): ...
    def SetWindowToPlot(self, LowerLeft=..., UpperRight=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __iter__(self): ...

class IAcadPlotConfigurations(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, Name=..., ModelType=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Item(self, Index=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...

class IAcadPoint(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadPointCloud(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadPointCloudEx(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadPointCloudEx2(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadPolyfaceMesh(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Coordinate(self, Index=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetCoordinate(self, Index=..., arg1=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadPolygonMesh(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def AppendVertex(self, vertex=...): ...
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Coordinate(self, Index=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def Explode(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetCoordinate(self, Index=..., arg1=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadPolyline(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def AppendVertex(self, vertex=...): ...
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Coordinate(self, Index=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def Explode(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetBulge(self, Index=...): ...
    def GetExtensionDictionary(self): ...
    def GetWidth(self, Index=..., StartWidth=..., EndWidth=...): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Offset(self, Distance=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetBulge(self, Index=..., bulge=...): ...
    def SetCoordinate(self, Index=..., arg1=...): ...
    def SetWidth(self, Index=..., StartWidth=..., EndWidth=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadPopupMenu(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def AddMenuItem(self, Index=..., Label=..., Macro=...): ...
    def AddSeparator(self, Index=...): ...
    def AddSubMenu(self, Index=..., Label=...): ...
    def InsertInMenuBar(self, Index=...): ...
    def Item(self, Index=...): ...
    def RemoveFromMenuBar(self): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...

class IAcadPopupMenuItem(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Delete(self): ...
    def __iter__(self): ...

class IAcadPopupMenus(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, MenuName=...): ...
    def InsertMenuInMenuBar(self, MenuName=..., Index=...): ...
    def Item(self, Index=...): ...
    def RemoveMenuFromMenuBar(self, Index=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...

class IAcadPreferences(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def __iter__(self): ...

class IAcadPreferencesDisplay(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def __iter__(self): ...

class IAcadPreferencesDrafting(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def __iter__(self): ...

class IAcadPreferencesFiles(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def GetProjectFilePath(self, ProjectName=...): ...
    def SetProjectFilePath(self, ProjectName=..., ProjectFilePath=...): ...
    def __call__(self): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...

class IAcadPreferencesOpenSave(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def __iter__(self): ...

class IAcadPreferencesOutput(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def __iter__(self): ...

class IAcadPreferencesProfiles(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def CopyProfile(self, oldProfileName=..., newProfileName=...): ...
    def DeleteProfile(self, ProfileName=...): ...
    def ExportProfile(self, ProfileName=..., RegFile=...): ...
    def GetAllProfileNames(self, pNames=...): ...
    def ImportProfile(self, ProfileName=..., RegFile=..., IncludePathInfo=...): ...
    def RenameProfile(self, origProfileName=..., newProfileName=...): ...
    def ResetProfile(self, Profile=...): ...
    def __iter__(self): ...

class IAcadPreferencesSelection(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def __iter__(self): ...

class IAcadPreferencesSystem(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def __iter__(self): ...

class IAcadPreferencesUser(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def __iter__(self): ...

class IAcadRasterImage(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def ClipBoundary(self, boundry=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadRay(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadRegion(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Boolean(self, Operation=..., Object=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def Explode(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadRegisteredApplication(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __iter__(self): ...

class IAcadRegisteredApplications(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, Name=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Item(self, Index=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...

class IAcadRevolvedSurface(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadSection(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def AddVertex(self, nIndex=..., val=...): ...
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Coordinate(self, Index=...): ...
    def Copy(self): ...
    def CreateJog(self, varPt=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GenerateSectionGeometry(self, pEntity=..., pIntersectionBoundaryObjs=..., pIntersectionFillObjs=..., pBackgroudnObjs=..., pForegroudObjs=..., pCurveTangencyObjs=...): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def HitTest(self, varPtHit=..., pHit=..., pSegmentIndex=..., pPtOnSegment=..., pSubItem=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def RemoveVertex(self, nIndex=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetCoordinate(self, Index=..., arg1=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadSection2(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def AddVertex(self, nIndex=..., val=...): ...
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Coordinate(self, Index=...): ...
    def Copy(self): ...
    def CreateJog(self, varPt=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GenerateSectionGeometry(self, pEntity=..., pIntersectionBoundaryObjs=..., pIntersectionFillObjs=..., pBackgroudnObjs=..., pForegroudObjs=..., pCurveTangencyObjs=...): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def HitTest(self, varPtHit=..., pHit=..., pSegmentIndex=..., pPtOnSegment=..., pSubItem=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def RemoveVertex(self, nIndex=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetCoordinate(self, Index=..., arg1=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadSectionManager(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self): ...
    def GetLiveSection(self): ...
    def GetUniqueSectionName(self, pBaseName=...): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Item(self, Index=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...

class IAcadSectionSettings(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self): ...
    def GetSectionTypeSettings(self, secType=...): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __iter__(self): ...

class IAcadSectionTypeSettings(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def __iter__(self): ...

class IAcadSectionTypeSettings2(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def __iter__(self): ...

class IAcadSecurityParams(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def __iter__(self): ...

class IAcadSelectionSet(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def AddItems(self, pSelSet=...): ...
    def Clear(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def Highlight(self, bFlag=...): ...
    def Item(self, Index=...): ...
    def RemoveItems(self, Objects=...): ...
    def Select(self, Mode=..., Point1=..., Point2=..., FilterType=..., FilterData=...): ...
    def SelectAtPoint(self, Point=..., FilterType=..., FilterData=...): ...
    def SelectByPolygon(self, Mode=..., PointsList=..., FilterType=..., FilterData=...): ...
    def SelectOnScreen(self, FilterType=..., FilterData=...): ...
    def Update(self): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...

class IAcadSelectionSets(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, Name=...): ...
    def Item(self, Index=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...

class IAcadShadowDisplay(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def __iter__(self): ...

class IAcadShape(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadSolid(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Coordinate(self, Index=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetCoordinate(self, Index=..., arg1=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadSortentsTable(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Block(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self): ...
    def GetFullDrawOrder(self, Objects=..., honorSortentsSysvar=...): ...
    def GetRelativeDrawOrder(self, Objects=..., honorSortentsSysvar=...): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def MoveAbove(self, Objects=..., Target=...): ...
    def MoveBelow(self, Objects=..., Target=...): ...
    def MoveToBottom(self, Objects=...): ...
    def MoveToTop(self, Objects=...): ...
    def SetRelativeDrawOrder(self, Objects=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def SwapOrder(self, Object1=..., Object2=...): ...
    def __iter__(self): ...

class IAcadSpline(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def AddFitPoint(self, Index=..., fitPoint=...): ...
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def DeleteFitPoint(self, Index=...): ...
    def ElevateOrder(self, Order=...): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetControlPoint(self, Index=...): ...
    def GetExtensionDictionary(self): ...
    def GetFitPoint(self, Index=...): ...
    def GetWeight(self, Index=...): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Offset(self, Distance=...): ...
    def PurgeFitData(self): ...
    def Reverse(self): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetControlPoint(self, Index=..., controlPoint=...): ...
    def SetFitPoint(self, Index=..., fitPoint=...): ...
    def SetWeight(self, Index=..., weight=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadState(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def __iter__(self): ...

class IAcadSubDMesh(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Coordinate(self, Index=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetCoordinate(self, Index=..., arg1=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadSubDMeshEdge(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def OnModified(self): ...
    def __iter__(self): ...

class IAcadSubDMeshFace(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def OnModified(self): ...
    def __iter__(self): ...

class IAcadSubDMeshVertex(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def OnModified(self): ...
    def __iter__(self): ...

class IAcadSubEntSolidEdge(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def OnModified(self): ...
    def __iter__(self): ...

class IAcadSubEntSolidFace(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def OnModified(self): ...
    def __iter__(self): ...

class IAcadSubEntSolidNode(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def OnModified(self): ...
    def __iter__(self): ...

class IAcadSubEntSolidVertex(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def OnModified(self): ...
    def __iter__(self): ...

class IAcadSubEntity(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def OnModified(self): ...
    def __iter__(self): ...

class IAcadSummaryInfo(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def AddCustomInfo(self, key=..., Value=...): ...
    def GetCustomByIndex(self, Index=..., pKey=..., pValue=...): ...
    def GetCustomByKey(self, key=..., pValue=...): ...
    def NumCustomInfo(self): ...
    def RemoveCustomByIndex(self, Index=...): ...
    def RemoveCustomByKey(self, key=...): ...
    def SetCustomByIndex(self, Index=..., key=..., Value=...): ...
    def SetCustomByKey(self, key=..., Value=...): ...
    def __iter__(self): ...

class IAcadSurface(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadSweptSurface(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadTable(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def ClearSubSelection(self): ...
    def ClearTableStyleOverrides(self, flag=...): ...
    def Copy(self): ...
    def CreateContent(self, nRow=..., nCol=..., nIndex=...): ...
    def Delete(self): ...
    def DeleteCellContent(self, row=..., col=...): ...
    def DeleteColumns(self, col=..., cols=...): ...
    def DeleteContent(self, nRow=..., nCol=...): ...
    def DeleteRows(self, row=..., Rows=...): ...
    def EnableMergeAll(self, nRow=..., nCol=..., bEnable=...): ...
    def Erase(self): ...
    def FormatValue(self, row=..., col=..., nOption=..., pVal=...): ...
    def GenerateLayout(self): ...
    def GetAlignment(self, rowType=...): ...
    def GetAttachmentPoint(self, row=..., col=...): ...
    def GetAutoScale(self, row=..., col=...): ...
    def GetAutoScale2(self, nRow=..., nCol=..., nContent=...): ...
    def GetBackgroundColor(self, rowType=...): ...
    def GetBackgroundColorNone(self, rowType=...): ...
    def GetBlockAttributeValue(self, row=..., col=..., attdefId=...): ...
    def GetBlockAttributeValue2(self, nRow=..., nCol=..., nContent=..., blkId=...): ...
    def GetBlockRotation(self, row=..., col=...): ...
    def GetBlockScale(self, row=..., col=...): ...
    def GetBlockTableRecordId(self, row=..., col=...): ...
    def GetBlockTableRecordId2(self, nRow=..., nCol=..., nContent=...): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetBreakHeight(self, nIndex=...): ...
    def GetCellAlignment(self, row=..., col=...): ...
    def GetCellBackgroundColor(self, row=..., col=...): ...
    def GetCellBackgroundColorNone(self, row=..., col=...): ...
    def GetCellContentColor(self, row=..., col=...): ...
    def GetCellDataType(self, row=..., col=..., pDataType=..., pUnitType=...): ...
    def GetCellExtents(self, row=..., col=..., bOuterCell=...): ...
    def GetCellFormat(self, row=..., col=...): ...
    def GetCellGridColor(self, row=..., col=..., edge=...): ...
    def GetCellGridLineWeight(self, row=..., col=..., edge=...): ...
    def GetCellGridVisibility(self, row=..., col=..., edge=...): ...
    def GetCellState(self, nRow=..., nCol=...): ...
    def GetCellStyle(self, nRow=..., nCol=...): ...
    def GetCellStyleOverrides(self, row=..., col=...): ...
    def GetCellTextHeight(self, row=..., col=...): ...
    def GetCellTextStyle(self, row=..., col=...): ...
    def GetCellType(self, row=..., col=...): ...
    def GetCellValue(self, row=..., col=...): ...
    def GetColumnName(self, nIndex=...): ...
    def GetColumnWidth(self, col=...): ...
    def GetContentColor(self, rowType=...): ...
    def GetContentColor2(self, nRow=..., nCol=..., nContent=...): ...
    def GetContentLayout(self, row=..., col=...): ...
    def GetContentType(self, nRow=..., nCol=...): ...
    def GetCustomData(self, nRow=..., nCol=..., szKey=..., pData=...): ...
    def GetDataFormat(self, nRow=..., nCol=..., nContent=...): ...
    def GetDataType(self, rowType=..., pDataType=..., pUnitType=...): ...
    def GetDataType2(self, nRow=..., nCol=..., nContent=..., pDataType=..., pUnitType=...): ...
    def GetExtensionDictionary(self): ...
    def GetFieldId(self, row=..., col=...): ...
    def GetFieldId2(self, nRow=..., nCol=..., nContent=...): ...
    def GetFormat(self, rowType=...): ...
    def GetFormula(self, nRow=..., nCol=..., nContent=...): ...
    def GetGridColor(self, gridLineType=..., rowType=...): ...
    def GetGridColor2(self, nRow=..., nCol=..., nGridLineType=...): ...
    def GetGridDoubleLineSpacing(self, nRow=..., nCol=..., nGridLineType=...): ...
    def GetGridLineStyle(self, nRow=..., nCol=..., nGridLineType=...): ...
    def GetGridLineWeight(self, gridLineType=..., rowType=...): ...
    def GetGridLineWeight2(self, nRow=..., nCol=..., nGridLineType=...): ...
    def GetGridLinetype(self, nRow=..., nCol=..., nGridLineType=...): ...
    def GetGridVisibility(self, gridLineType=..., rowType=...): ...
    def GetGridVisibility2(self, nRow=..., nCol=..., nGridLineType=...): ...
    def GetHasFormula(self, nRow=..., nCol=..., nContent=...): ...
    def GetMargin(self, nRow=..., nCol=..., nMargin=...): ...
    def GetMinimumColumnWidth(self, col=...): ...
    def GetMinimumRowHeight(self, row=...): ...
    def GetOverride(self, nRow=..., nCol=..., nContent=...): ...
    def GetRotation(self, nRow=..., nCol=..., nContent=...): ...
    def GetRowHeight(self, row=...): ...
    def GetRowType(self, row=...): ...
    def GetScale(self, nRow=..., nCol=..., nContent=...): ...
    def GetSubSelection(self, rowMin=..., rowMax=..., colMin=..., colMax=...): ...
    def GetText(self, row=..., col=...): ...
    def GetTextHeight(self, rowType=...): ...
    def GetTextHeight2(self, nRow=..., nCol=..., nContent=...): ...
    def GetTextRotation(self, row=..., col=...): ...
    def GetTextString(self, nRow=..., nCol=..., nContent=...): ...
    def GetTextStyle(self, rowType=...): ...
    def GetTextStyle2(self, nRow=..., nCol=..., nContent=...): ...
    def GetValue(self, nRow=..., nCol=..., nContent=...): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def HitTest(self, wpt=..., wviewVec=..., resultRowIndex=..., resultColumnIndex=...): ...
    def InsertColumns(self, col=..., Width=..., cols=...): ...
    def InsertColumnsAndInherit(self, col=..., nInheritFrom=..., nNumCols=...): ...
    def InsertRows(self, row=..., Height=..., Rows=...): ...
    def InsertRowsAndInherit(self, nIndex=..., nInheritFrom=..., nNumRows=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def IsContentEditable(self, nRow=..., nCol=...): ...
    def IsEmpty(self, nRow=..., nCol=...): ...
    def IsFormatEditable(self, nRow=..., nCol=...): ...
    def IsMergeAllEnabled(self, nRow=..., nCol=...): ...
    def IsMergedCell(self, row=..., col=..., minRow=..., maxRow=..., minCol=..., maxCol=...): ...
    def MergeCells(self, minRow=..., maxRow=..., minCol=..., maxCol=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def MoveContent(self, nRow=..., nCol=..., nFromIndex=..., nToIndex=...): ...
    def RecomputeTableBlock(self, bForceUpdate=...): ...
    def RemoveAllOverrides(self, nRow=..., nCol=...): ...
    def ReselectSubRegion(self): ...
    def ResetCellValue(self, row=..., col=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def Select(self, wpt=..., wvwVec=..., wvwxVec=..., wxaper=..., wyaper=..., allowOutside=..., resultRowIndex=..., resultColumnIndex=...): ...
    def SelectSubRegion(self, wpt1=..., wpt2=..., wvwVec=..., wvwxVec=..., seltype=..., bIncludeCurrentSelection=..., rowMin=..., rowMax=..., colMin=..., colMax=...): ...
    def SetAlignment(self, rowTypes=..., cellAlignment=...): ...
    def SetAutoScale(self, row=..., col=..., bValue=...): ...
    def SetAutoScale2(self, nRow=..., nCol=..., nContent=..., bAutoFit=...): ...
    def SetBackgroundColor(self, rowTypes=..., pColor=...): ...
    def SetBackgroundColorNone(self, rowTypes=..., bValue=...): ...
    def SetBlockAttributeValue(self, row=..., col=..., attdefId=..., bstrValue=...): ...
    def SetBlockAttributeValue2(self, nRow=..., nCol=..., nContent=..., blkId=..., Value=...): ...
    def SetBlockRotation(self, row=..., col=..., blkRotation=...): ...
    def SetBlockScale(self, row=..., col=..., blkScale=...): ...
    def SetBlockTableRecordId(self, row=..., col=..., blkId=..., bAutoFit=...): ...
    def SetBlockTableRecordId2(self, nRow=..., nCol=..., nContent=..., blkId=..., autoFit=...): ...
    def SetBreakHeight(self, nIndex=..., Height=...): ...
    def SetCellAlignment(self, row=..., col=..., cellAlignment=...): ...
    def SetCellBackgroundColor(self, row=..., col=..., pColor=...): ...
    def SetCellBackgroundColorNone(self, row=..., col=..., bValue=...): ...
    def SetCellContentColor(self, row=..., col=..., pColor=...): ...
    def SetCellDataType(self, row=..., col=..., dataType=..., unitType=...): ...
    def SetCellFormat(self, row=..., col=..., pFormat=...): ...
    def SetCellGridColor(self, row=..., col=..., edges=..., pColor=...): ...
    def SetCellGridLineWeight(self, row=..., col=..., edges=..., Lineweight=...): ...
    def SetCellGridVisibility(self, row=..., col=..., edges=..., bValue=...): ...
    def SetCellState(self, nRow=..., nCol=..., nLock=...): ...
    def SetCellStyle(self, nRow=..., nCol=..., szCellStyle=...): ...
    def SetCellTextHeight(self, row=..., col=..., TextHeight=...): ...
    def SetCellTextStyle(self, row=..., col=..., bstrName=...): ...
    def SetCellType(self, row=..., col=..., CellType=...): ...
    def SetCellValue(self, row=..., col=..., val=...): ...
    def SetCellValueFromText(self, row=..., col=..., val=..., nOption=...): ...
    def SetColumnName(self, nIndex=..., Name=...): ...
    def SetColumnWidth(self, col=..., Width=...): ...
    def SetContentColor(self, rowTypes=..., pColor=...): ...
    def SetContentColor2(self, nRow=..., nCol=..., nContent=..., pColor=...): ...
    def SetContentLayout(self, row=..., col=..., nLayout=...): ...
    def SetCustomData(self, nRow=..., nCol=..., szKey=..., data=...): ...
    def SetDataFormat(self, nRow=..., nCol=..., nContent=..., szFormat=...): ...
    def SetDataType(self, rowTypes=..., dataType=..., unitType=...): ...
    def SetDataType2(self, nRow=..., nCol=..., nContent=..., dataType=..., unitType=...): ...
    def SetFieldId(self, row=..., col=..., fieldId=...): ...
    def SetFieldId2(self, nRow=..., nCol=..., nContent=..., acDbObjectId=..., nflag=...): ...
    def SetFormat(self, rowTypes=..., pFormat=...): ...
    def SetFormula(self, nRow=..., nCol=..., nContent=..., pszFormula=...): ...
    def SetGridColor(self, gridLineTypes=..., rowTypes=..., pColor=...): ...
    def SetGridColor2(self, nRow=..., nCol=..., nGridLineType=..., pColor=...): ...
    def SetGridDoubleLineSpacing(self, nRow=..., nCol=..., nGridLineType=..., fSpacing=...): ...
    def SetGridLineStyle(self, nRow=..., nCol=..., nGridLineTypes=..., nLineStyle=...): ...
    def SetGridLineWeight(self, gridLineTypes=..., rowTypes=..., Lineweight=...): ...
    def SetGridLineWeight2(self, nRow=..., nCol=..., nGridLineType=..., Lineweight=...): ...
    def SetGridLinetype(self, nRow=..., nCol=..., nGridLineType=..., idLinetype=...): ...
    def SetGridVisibility(self, gridLineTypes=..., rowTypes=..., bValue=...): ...
    def SetGridVisibility2(self, nRow=..., nCol=..., nGridLineType=..., bVisible=...): ...
    def SetMargin(self, nRow=..., nCol=..., nMargins=..., fMargin=...): ...
    def SetOverride(self, nRow=..., nCol=..., nContent=..., nProp=...): ...
    def SetRotation(self, nRow=..., nCol=..., nContent=..., Value=...): ...
    def SetRowHeight(self, row=..., Height=...): ...
    def SetScale(self, nRow=..., nCol=..., nContent=..., scale=...): ...
    def SetSubSelection(self, rowMin=..., rowMax=..., colMin=..., colMax=...): ...
    def SetText(self, row=..., col=..., pStr=...): ...
    def SetTextHeight(self, rowTypes=..., TextHeight=...): ...
    def SetTextHeight2(self, nRow=..., nCol=..., nContent=..., Height=...): ...
    def SetTextRotation(self, row=..., col=..., TextRotation=...): ...
    def SetTextString(self, nRow=..., nCol=..., nContent=..., Text=...): ...
    def SetTextStyle(self, rowTypes=..., bstrName=...): ...
    def SetTextStyle2(self, nRow=..., nCol=..., nContent=..., bstrStyleName=...): ...
    def SetToolTip(self, nRow=..., nCol=..., tip=...): ...
    def SetValue(self, nRow=..., nCol=..., nContent=..., acValue=...): ...
    def SetValueFromText(self, nRow=..., nCol=..., nContent=..., szText=..., nOption=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def UnmergeCells(self, minRow=..., maxRow=..., minCol=..., maxCol=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadTableStyle(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def CreateCellStyle(self, bstrCellStyle=...): ...
    def CreateCellStyleFromStyle(self, bstrCellStyle=..., bstrSourceCellStyle=...): ...
    def Delete(self): ...
    def DeleteCellStyle(self, bstrCellStyle=...): ...
    def EnableMergeAll(self, bstrCellStyle=..., bEnable=...): ...
    def Erase(self): ...
    def GetAlignment(self, rowType=...): ...
    def GetAlignment2(self, bstrCellStyle=...): ...
    def GetBackgroundColor(self, rowType=...): ...
    def GetBackgroundColor2(self, bstrCellStyle=...): ...
    def GetBackgroundColorNone(self, rowType=...): ...
    def GetCellClass(self, bstrCellStyle=...): ...
    def GetCellStyles(self, cellStylesArray=...): ...
    def GetColor(self, rowType=...): ...
    def GetColor2(self, bstrCellStyle=...): ...
    def GetDataType(self, rowType=..., pDataType=..., pUnitType=...): ...
    def GetDataType2(self, bstrCellStyle=..., pDataType=..., pUnitType=...): ...
    def GetExtensionDictionary(self): ...
    def GetFormat(self, rowType=...): ...
    def GetFormat2(self, bstrCellStyle=..., pbstrFormat=...): ...
    def GetGridColor(self, gridLineType=..., rowType=...): ...
    def GetGridColor2(self, bstrCellStyle=..., gridLineType=...): ...
    def GetGridLineWeight(self, gridLineType=..., rowType=...): ...
    def GetGridLineWeight2(self, bstrCellStyle=..., gridLineType=...): ...
    def GetGridVisibility(self, gridLineType=..., rowType=...): ...
    def GetGridVisibility2(self, bstrCellStyle=..., gridLineType=...): ...
    def GetIsCellStyleInUse(self, pszCellStyle=...): ...
    def GetIsMergeAllEnabled(self, bstrCellStyle=...): ...
    def GetRotation(self, bstrCellStyle=...): ...
    def GetTextHeight(self, rowType=...): ...
    def GetTextHeight2(self, bstrCellStyle=...): ...
    def GetTextStyle(self, rowType=...): ...
    def GetTextStyleId(self, bstrCellStyle=...): ...
    def GetUniqueCellStyleName(self, pszBaseName=...): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def RenameCellStyle(self, bstrOldName=..., bstrNewName=...): ...
    def SetAlignment(self, rowTypes=..., cellAlignment=...): ...
    def SetAlignment2(self, bstrCellStyle=..., cellAlignment=...): ...
    def SetBackgroundColor(self, rowTypes=..., pColor=...): ...
    def SetBackgroundColor2(self, bstrCellStyle=..., color=...): ...
    def SetBackgroundColorNone(self, rowTypes=..., bValue=...): ...
    def SetCellClass(self, bstrCellStyle=..., cellClass=...): ...
    def SetColor(self, rowTypes=..., pColor=...): ...
    def SetColor2(self, bstrCellStyle=..., color=...): ...
    def SetDataType(self, rowTypes=..., nDataType=..., nUnitType=...): ...
    def SetDataType2(self, bstrCellStyle=..., nDataType=..., nUnitType=...): ...
    def SetFormat(self, rowTypes=..., val=...): ...
    def SetFormat2(self, bstrCellStyle=..., bstrFormat=...): ...
    def SetGridColor(self, gridLineTypes=..., rowTypes=..., pColor=...): ...
    def SetGridColor2(self, bstrCellStyle=..., gridLineTypes=..., pColor=...): ...
    def SetGridLineWeight(self, gridLineTypes=..., rowTypes=..., Lineweight=...): ...
    def SetGridLineWeight2(self, bstrCellStyle=..., gridLineTypes=..., Lineweight=...): ...
    def SetGridVisibility(self, gridLineTypes=..., rowTypes=..., bValue=...): ...
    def SetGridVisibility2(self, bstrCellStyle=..., gridLineTypes=..., bValue=...): ...
    def SetRotation(self, bstrCellStyle=..., Rotation=...): ...
    def SetTemplateId(self, val=..., option=...): ...
    def SetTextHeight(self, rowTypes=..., TextHeight=...): ...
    def SetTextHeight2(self, bstrCellStyle=..., Height=...): ...
    def SetTextStyle(self, rowTypes=..., bstrName=...): ...
    def SetTextStyleId(self, bstrCellStyle=..., val=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __iter__(self): ...

class IAcadText(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def FieldCode(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadTextStyle(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self): ...
    def GetFont(self, TypeFace=..., Bold=..., Italic=..., Charset=..., PitchAndFamily=...): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def SetFont(self, TypeFace=..., Bold=..., Italic=..., Charset=..., PitchAndFamily=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __iter__(self): ...

class IAcadTextStyles(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, Name=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Item(self, Index=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...

class IAcadTolerance(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...

class IAcadToolbar(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def AddSeparator(self, Index=...): ...
    def AddToolbarButton(self, Index=..., Name=..., HelpString=..., Macro=..., FlyoutButton=...): ...
    def Delete(self): ...
    def Dock(self, Side=...): ...
    def Float(self, top=..., left=..., NumberFloatRows=...): ...
    def Item(self, Index=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...

class IAcadToolbarItem(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def AttachToolbarToFlyout(self, MenuGroupName=..., ToolbarName=...): ...
    def Delete(self): ...
    def GetBitmaps(self, SmallIconName=..., LargeIconName=...): ...
    def SetBitmaps(self, SmallIconName=..., LargeIconName=...): ...
    def __iter__(self): ...

class IAcadToolbars(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, ToolbarName=...): ...
    def Item(self, Index=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...

class IAcadTrace(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Coordinate(self, Index=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetCoordinate(self, Index=..., arg1=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadUCS(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self): ...
    def GetUCSMatrix(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __iter__(self): ...

class IAcadUCSs(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, Origin=..., XAxisPoint=..., YAxisPoint=..., Name=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Item(self, Index=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...

class IAcadUnderlay(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def ClipBoundary(self, boundry=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadUtility(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def AngleFromXAxis(self, StartPoint=..., EndPoint=...): ...
    def AngleToReal(self, Angle=..., Unit=...): ...
    def AngleToString(self, Angle=..., Unit=..., precision=...): ...
    def CreateTypedArray(self, *args): ...
    def DistanceToReal(self, Distance=..., Unit=...): ...
    def GetAngle(self, Point=..., Prompt=...): ...
    def GetCorner(self, Point=..., Prompt=...): ...
    def GetDistance(self, Point=..., Prompt=...): ...
    def GetEntity(self, Object=..., PickedPoint=..., Prompt=...): ...
    def GetInput(self): ...
    def GetInteger(self, Prompt=...): ...
    def GetKeyword(self, Prompt=...): ...
    def GetObjectIdString(self, Object=..., bHex=...): ...
    def GetOrientation(self, Point=..., Prompt=...): ...
    def GetPoint(self, Point=..., Prompt=...): ...
    def GetReal(self, Prompt=...): ...
    def GetRemoteFile(self, URL=..., LocalFile=..., IgnoreCache=...): ...
    def GetString(self, HasSpaces=..., Prompt=...): ...
    def GetSubEntity(self, Object=..., PickedPoint=..., transMatrix=..., ContextData=..., Prompt=...): ...
    def InitializeUserInput(self, Bits=..., KeyWordList=...): ...
    def IsRemoteFile(self, LocalFile=..., URL=...): ...
    def IsURL(self, URL=...): ...
    def LaunchBrowserDialog(self, SelectedURL=..., DialogTitle=..., OpenButtonCaption=..., StartPageURL=..., RegistryRootKey=..., OpenButtonAlwaysEnabled=...): ...
    def PolarPoint(self, Point=..., Angle=..., Distance=...): ...
    def Prompt(self, Message=...): ...
    def PutRemoteFile(self, URL=..., LocalFile=...): ...
    def RealToString(self, Value=..., Unit=..., precision=...): ...
    def SendModelessOperationEnded(self, Context=...): ...
    def SendModelessOperationStart(self, Context=...): ...
    def TranslateCoordinates(self, Point=..., FromCoordSystem=..., ToCoordSystem=..., Displacement=..., OCSNormal=...): ...
    def __iter__(self): ...

class IAcadView(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __iter__(self): ...

class IAcadViewport(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self): ...
    def GetGridSpacing(self, XSpacing=..., YSpacing=...): ...
    def GetSnapSpacing(self, XSpacing=..., YSpacing=...): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def SetGridSpacing(self, XSpacing=..., YSpacing=...): ...
    def SetSnapSpacing(self, XSpacing=..., YSpacing=...): ...
    def SetView(self, View=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def Split(self, NumWins=...): ...
    def __iter__(self): ...

class IAcadViewports(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, Name=...): ...
    def Delete(self): ...
    def DeleteConfiguration(self, Name=...): ...
    def Erase(self): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Item(self, Index=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...

class IAcadViews(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Add(self, Name=...): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Item(self, Index=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def __call__(self, Index=...): ...
    def __int__(self, *args) -> int: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __nonzero__(self): ...

class IAcadWipeout(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def ClipBoundary(self, boundry=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class IAcadXRecord(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def Delete(self): ...
    def Erase(self): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def GetXRecordData(self, XRecordDataType=..., XRecordDataValue=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def SetXRecordData(self, XRecordDataType=..., XRecordDataValue=...): ...
    def __iter__(self): ...

class IAcadXline(DispatchBaseClass):
    CLSID: Incomplete
    coclass_clsid: Incomplete
    def ArrayPolar(self, NumberOfObjects=..., AngleToFill=..., CenterPoint=...): ...
    def ArrayRectangular(self, NumberOfRows=..., NumberOfColumns=..., NumberOfLevels=..., DistBetweenRows=..., DistBetweenCols=..., DistBetweenLevels=...): ...
    def Copy(self): ...
    def Delete(self): ...
    def Erase(self): ...
    def GetBoundingBox(self, MinPoint=..., MaxPoint=...): ...
    def GetExtensionDictionary(self): ...
    def GetXData(self, AppName=..., XDataType=..., XDataValue=...): ...
    def Highlight(self, HighlightFlag=...): ...
    def IntersectWith(self, IntersectObject=..., option=...): ...
    def Mirror(self, Point1=..., Point2=...): ...
    def Mirror3D(self, Point1=..., Point2=..., point3=...): ...
    def Move(self, FromPoint=..., ToPoint=...): ...
    def Offset(self, Distance=...): ...
    def Rotate(self, BasePoint=..., RotationAngle=...): ...
    def Rotate3D(self, Point1=..., Point2=..., RotationAngle=...): ...
    def ScaleEntity(self, BasePoint=..., ScaleFactor=...): ...
    def SetXData(self, XDataType=..., XDataValue=...): ...
    def TransformBy(self, TransformationMatrix=...): ...
    def Update(self): ...
    def __iter__(self): ...
	#begin props
    @property
    def Application(self)->IAcadApplication: ...
    @property
    def Database(self)->IAcadDatabase: ...
    @property
    def Document(self)->IAcadDocument: ...
    @property
    def EntityName(self): ...
    @property
    def EntityTransparency(self): ...
    @property
    def EntityType(self): ...
    @property
    def Handle(self): ...
    @property
    def HasExtensionDictionary(self): ...
    @property
    def Hyperlinks(self): ...
    @property
    def Layer(self): ...
    @property
    def Linetype(self): ...
    @property
    def LinetypeScale(self): ...
    @property
    def Lineweight(self): ...
    @property
    def Material(self): ...
    @property
    def ObjectID(self): ...
    @property
    def ObjectName(self): ...
    @property
    def OwnerID(self): ...
    @property
    def PlotStyleName(self): ...
    @property
    def TrueColor(self): ...
    @property
    def Visible(self): ...
    @property
    def color(self): ...
    #begin setters
    @EntityTransparency.setter
    def EntityTransparency(self, value) -> None: ...
    @Layer.setter
    def Layer(self, value) -> None: ...
    @Linetype.setter
    def Linetype(self, value) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value) -> None: ...
    @Lineweight.setter
    def Lineweight(self, value) -> None: ...
    @Material.setter
    def Material(self, value) -> None: ...
    @PlotStyleName.setter
    def PlotStyleName(self, value) -> None: ...
    @TrueColor.setter
    def TrueColor(self, value) -> None: ...
    @Visible.setter
    def Visible(self, value) -> None: ...
    @color.setter
    def color(self, value) -> None: ...

class _DAcadApplicationEvents:
    CLSID: Incomplete
    CLSID_Sink: Incomplete
    coclass_clsid: Incomplete
    def __init__(self, oobj: Incomplete | None = ...) -> None: ...
    def __del__(self) -> None: ...
    def close(self) -> None: ...

class _DAcadDocumentEvents:
    CLSID: Incomplete
    CLSID_Sink: Incomplete
    coclass_clsid: Incomplete
    def __init__(self, oobj: Incomplete | None = ...) -> None: ...
    def __del__(self) -> None: ...
    def close(self) -> None: ...

class Acad3DFace(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcad3DFace

class Acad3DPolyline(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcad3DPolyline

class Acad3DSolid(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcad3DSolid

class AcadAcCmColor(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadAcCmColor

class AcadApplication(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    default_source: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadApplication

class AcadArc(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadArc

class AcadAttribute(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadAttribute

class AcadAttributeReference(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadAttributeReference

class AcadBlock(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadBlock

class AcadBlockReference(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadBlockReference

class AcadBlocks(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadBlocks

class AcadCircle(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadCircle

class AcadComparedReference(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadComparedReference

class AcadDatabase(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDatabase

class AcadDatabasePreferences(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDatabasePreferences

class AcadDgnUnderlay(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadUnderlay

class AcadDictionaries(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDictionaries

class AcadDictionary(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDictionary

class AcadDim3PointAngular(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDim3PointAngular

class AcadDimAligned(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDimAligned

class AcadDimAngular(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDimAngular

class AcadDimArcLength(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDimArcLength

class AcadDimDiametric(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDimDiametric

class AcadDimOrdinate(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDimOrdinate

class AcadDimRadial(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDimRadial

class AcadDimRadialLarge(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDimRadialLarge

class AcadDimRotated(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDimRotated

class AcadDimStyle(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDimStyle

class AcadDimStyles(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDimStyles

class AcadDimension(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDimension

class AcadDocument(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    default_source: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDocument

class AcadDocuments(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDocuments

class AcadDwfUnderlay(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadUnderlay

class AcadDynamicBlockReferenceProperty(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadDynamicBlockReferenceProperty

class AcadEllipse(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadEllipse

class AcadEntity(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadEntity

class AcadExternalReference(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadExternalReference

class AcadExtrudedSurface(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadExtrudedSurface

class AcadGeoPositionMarker(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadGeoPositionMarker

class AcadGeomapImage(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadGeomapImage

class AcadGroup(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadGroup

class AcadGroups(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadGroups

class AcadHatch(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadHatch

class AcadHelix(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadHelix

class AcadHyperlink(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadHyperlink

class AcadHyperlinks(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadHyperlinks

class AcadIdPair(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadIdPair

class AcadLWPolyline(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadLWPolyline

class AcadLayer(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadLayer

class AcadLayerStateManager(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadLayerStateManager

class AcadLayers(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadLayers

class AcadLayout(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadLayout

class AcadLayouts(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadLayouts

class AcadLeader(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadLeader

class AcadLine(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadLine

class AcadLineType(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadLineType

class AcadLineTypes(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadLineTypes

class AcadLoftedSurface(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadLoftedSurface

class AcadMInsertBlock(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadMInsertBlock

class AcadMLeader(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadMLeader

class AcadMLeaderLeader(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadMLeaderLeader

class AcadMLeaderStyle(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadMLeaderStyle

class AcadMLine(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadMLine

class AcadMText(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadMText

class AcadMaterial(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadMaterial

class AcadMaterials(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadMaterials

class AcadMenuBar(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadMenuBar

class AcadMenuGroup(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadMenuGroup

class AcadMenuGroups(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadMenuGroups

class AcadModelSpace(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadModelSpace

class AcadNurbSurface(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadNurbSurface

class AcadObject(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadObject

class AcadOle(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadOle

class AcadPViewport(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPViewport

class AcadPaperSpace(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPaperSpace

class AcadPdfUnderlay(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadUnderlay

class AcadPlaneSurface(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPlaneSurface

class AcadPlot(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPlot

class AcadPlotConfiguration(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPlotConfiguration

class AcadPlotConfigurations(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPlotConfigurations

class AcadPoint(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPoint

class AcadPointCloud(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPointCloud

class AcadPointCloudEx(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPointCloudEx2

class AcadPolyfaceMesh(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPolyfaceMesh

class AcadPolygonMesh(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPolygonMesh

class AcadPolyline(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPolyline

class AcadPopupMenu(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPopupMenu

class AcadPopupMenuItem(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPopupMenuItem

class AcadPopupMenus(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPopupMenus

class AcadPreferences(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPreferences

class AcadPreferencesDisplay(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPreferencesDisplay

class AcadPreferencesDrafting(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPreferencesDrafting

class AcadPreferencesFiles(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPreferencesFiles

class AcadPreferencesOpenSave(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPreferencesOpenSave

class AcadPreferencesOutput(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPreferencesOutput

class AcadPreferencesProfiles(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPreferencesProfiles

class AcadPreferencesSelection(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPreferencesSelection

class AcadPreferencesSystem(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPreferencesSystem

class AcadPreferencesUser(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadPreferencesUser

class AcadRasterImage(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadRasterImage

class AcadRay(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadRay

class AcadRegion(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadRegion

class AcadRegisteredApplication(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadRegisteredApplication

class AcadRegisteredApplications(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadRegisteredApplications

class AcadRevolvedSurface(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadRevolvedSurface

class AcadSection(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSection2

class AcadSectionManager(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSectionManager

class AcadSectionSettings(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSectionSettings

class AcadSectionTypeSettings(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSectionTypeSettings2

class AcadSecurityParams(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSecurityParams

class AcadSelectionSet(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSelectionSet

class AcadSelectionSets(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSelectionSets

class AcadShape(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadShape

class AcadSolid(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSolid

class AcadSortentsTable(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSortentsTable

class AcadSpline(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSpline

class AcadState(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadState

class AcadSubDMesh(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSubDMesh

class AcadSubDMeshEdge(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSubDMeshEdge

class AcadSubDMeshFace(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSubDMeshFace

class AcadSubDMeshVertex(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSubDMeshVertex

class AcadSubEntSolidEdge(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSubEntSolidEdge

class AcadSubEntSolidFace(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSubEntSolidFace

class AcadSubEntSolidNode(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSubEntSolidNode

class AcadSubEntSolidVertex(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSubEntSolidVertex

class AcadSubEntity(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSubEntity

class AcadSummaryInfo(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSummaryInfo

class AcadSurface(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSurface

class AcadSweptSurface(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadSweptSurface

class AcadTable(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadTable

class AcadTableStyle(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadTableStyle

class AcadText(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadText

class AcadTextStyle(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadTextStyle

class AcadTextStyles(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadTextStyles

class AcadTolerance(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadTolerance

class AcadToolbar(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadToolbar

class AcadToolbarItem(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadToolbarItem

class AcadToolbars(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadToolbars

class AcadTrace(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadTrace

class AcadUCS(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadUCS

class AcadUCSs(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadUCSs

class AcadUtility(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadUtility

class AcadView(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadView

class AcadViewport(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadViewport

class AcadViewports(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadViewports

class AcadViews(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadViews

class AcadWipeout(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadWipeout

class AcadXRecord(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadXRecord

class AcadXline(CoClassBaseClass):
    CLSID: Incomplete
    coclass_sources: Incomplete
    coclass_interfaces: Incomplete
    default_interface = IAcadXline

IAcad3DFace_vtables_dispatch_: int
IAcad3DFace_vtables_: Incomplete
IAcad3DPolyline_vtables_dispatch_: int
IAcad3DPolyline_vtables_: Incomplete
IAcad3DSolid_vtables_dispatch_: int
IAcad3DSolid_vtables_: Incomplete
IAcadAcCmColor_vtables_dispatch_: int
IAcadAcCmColor_vtables_: Incomplete
IAcadApplication_vtables_dispatch_: int
IAcadApplication_vtables_: Incomplete
IAcadArc_vtables_dispatch_: int
IAcadArc_vtables_: Incomplete
IAcadAttribute_vtables_dispatch_: int
IAcadAttribute_vtables_: Incomplete
IAcadAttributeReference_vtables_dispatch_: int
IAcadAttributeReference_vtables_: Incomplete
IAcadBlock_vtables_dispatch_: int
IAcadBlock_vtables_: Incomplete
IAcadBlockReference_vtables_dispatch_: int
IAcadBlockReference_vtables_: Incomplete
IAcadBlocks_vtables_dispatch_: int
IAcadBlocks_vtables_: Incomplete
IAcadCircle_vtables_dispatch_: int
IAcadCircle_vtables_: Incomplete
IAcadComparedReference_vtables_dispatch_: int
IAcadComparedReference_vtables_: Incomplete
IAcadDatabase_vtables_dispatch_: int
IAcadDatabase_vtables_: Incomplete
IAcadDatabasePreferences_vtables_dispatch_: int
IAcadDatabasePreferences_vtables_: Incomplete
IAcadDictionaries_vtables_dispatch_: int
IAcadDictionaries_vtables_: Incomplete
IAcadDictionary_vtables_dispatch_: int
IAcadDictionary_vtables_: Incomplete
IAcadDim3PointAngular_vtables_dispatch_: int
IAcadDim3PointAngular_vtables_: Incomplete
IAcadDimAligned_vtables_dispatch_: int
IAcadDimAligned_vtables_: Incomplete
IAcadDimAngular_vtables_dispatch_: int
IAcadDimAngular_vtables_: Incomplete
IAcadDimArcLength_vtables_dispatch_: int
IAcadDimArcLength_vtables_: Incomplete
IAcadDimDiametric_vtables_dispatch_: int
IAcadDimDiametric_vtables_: Incomplete
IAcadDimOrdinate_vtables_dispatch_: int
IAcadDimOrdinate_vtables_: Incomplete
IAcadDimRadial_vtables_dispatch_: int
IAcadDimRadial_vtables_: Incomplete
IAcadDimRadialLarge_vtables_dispatch_: int
IAcadDimRadialLarge_vtables_: Incomplete
IAcadDimRotated_vtables_dispatch_: int
IAcadDimRotated_vtables_: Incomplete
IAcadDimStyle_vtables_dispatch_: int
IAcadDimStyle_vtables_: Incomplete
IAcadDimStyles_vtables_dispatch_: int
IAcadDimStyles_vtables_: Incomplete
IAcadDimension_vtables_dispatch_: int
IAcadDimension_vtables_: Incomplete
IAcadDocument_vtables_dispatch_: int
IAcadDocument_vtables_: Incomplete
IAcadDocuments_vtables_dispatch_: int
IAcadDocuments_vtables_: Incomplete
IAcadDwfUnderlay_vtables_dispatch_: int
IAcadDwfUnderlay_vtables_: Incomplete
IAcadDynamicBlockReferenceProperty_vtables_dispatch_: int
IAcadDynamicBlockReferenceProperty_vtables_: Incomplete
IAcadEllipse_vtables_dispatch_: int
IAcadEllipse_vtables_: Incomplete
IAcadEntity_vtables_dispatch_: int
IAcadEntity_vtables_: Incomplete
IAcadExternalReference_vtables_dispatch_: int
IAcadExternalReference_vtables_: Incomplete
IAcadExtrudedSurface_vtables_dispatch_: int
IAcadExtrudedSurface_vtables_: Incomplete
IAcadGeoPositionMarker_vtables_dispatch_: int
IAcadGeoPositionMarker_vtables_: Incomplete
IAcadGeomapImage_vtables_dispatch_: int
IAcadGeomapImage_vtables_: Incomplete
IAcadGroup_vtables_dispatch_: int
IAcadGroup_vtables_: Incomplete
IAcadGroups_vtables_dispatch_: int
IAcadGroups_vtables_: Incomplete
IAcadHatch_vtables_dispatch_: int
IAcadHatch_vtables_: Incomplete
IAcadHelix_vtables_dispatch_: int
IAcadHelix_vtables_: Incomplete
IAcadHyperlink_vtables_dispatch_: int
IAcadHyperlink_vtables_: Incomplete
IAcadHyperlinks_vtables_dispatch_: int
IAcadHyperlinks_vtables_: Incomplete
IAcadIdPair_vtables_dispatch_: int
IAcadIdPair_vtables_: Incomplete
IAcadLWPolyline_vtables_dispatch_: int
IAcadLWPolyline_vtables_: Incomplete
IAcadLayer_vtables_dispatch_: int
IAcadLayer_vtables_: Incomplete
IAcadLayerStateManager_vtables_dispatch_: int
IAcadLayerStateManager_vtables_: Incomplete
IAcadLayers_vtables_dispatch_: int
IAcadLayers_vtables_: Incomplete
IAcadLayout_vtables_dispatch_: int
IAcadLayout_vtables_: Incomplete
IAcadLayouts_vtables_dispatch_: int
IAcadLayouts_vtables_: Incomplete
IAcadLeader_vtables_dispatch_: int
IAcadLeader_vtables_: Incomplete
IAcadLine_vtables_dispatch_: int
IAcadLine_vtables_: Incomplete
IAcadLineType_vtables_dispatch_: int
IAcadLineType_vtables_: Incomplete
IAcadLineTypes_vtables_dispatch_: int
IAcadLineTypes_vtables_: Incomplete
IAcadLoftedSurface_vtables_dispatch_: int
IAcadLoftedSurface_vtables_: Incomplete
IAcadMInsertBlock_vtables_dispatch_: int
IAcadMInsertBlock_vtables_: Incomplete
IAcadMLeader_vtables_dispatch_: int
IAcadMLeader_vtables_: Incomplete
IAcadMLeaderLeader_vtables_dispatch_: int
IAcadMLeaderLeader_vtables_: Incomplete
IAcadMLeaderStyle_vtables_dispatch_: int
IAcadMLeaderStyle_vtables_: Incomplete
IAcadMLine_vtables_dispatch_: int
IAcadMLine_vtables_: Incomplete
IAcadMText_vtables_dispatch_: int
IAcadMText_vtables_: Incomplete
IAcadMaterial_vtables_dispatch_: int
IAcadMaterial_vtables_: Incomplete
IAcadMaterials_vtables_dispatch_: int
IAcadMaterials_vtables_: Incomplete
IAcadMenuBar_vtables_dispatch_: int
IAcadMenuBar_vtables_: Incomplete
IAcadMenuGroup_vtables_dispatch_: int
IAcadMenuGroup_vtables_: Incomplete
IAcadMenuGroups_vtables_dispatch_: int
IAcadMenuGroups_vtables_: Incomplete
IAcadModelSpace_vtables_dispatch_: int
IAcadModelSpace_vtables_: Incomplete
IAcadNurbSurface_vtables_dispatch_: int
IAcadNurbSurface_vtables_: Incomplete
IAcadObject_vtables_dispatch_: int
IAcadObject_vtables_: Incomplete
IAcadObjectEvents_vtables_dispatch_: int
IAcadObjectEvents_vtables_: Incomplete
IAcadOle_vtables_dispatch_: int
IAcadOle_vtables_: Incomplete
IAcadPViewport_vtables_dispatch_: int
IAcadPViewport_vtables_: Incomplete
IAcadPaperSpace_vtables_dispatch_: int
IAcadPaperSpace_vtables_: Incomplete
IAcadPlaneSurface_vtables_dispatch_: int
IAcadPlaneSurface_vtables_: Incomplete
IAcadPlot_vtables_dispatch_: int
IAcadPlot_vtables_: Incomplete
IAcadPlotConfiguration_vtables_dispatch_: int
IAcadPlotConfiguration_vtables_: Incomplete
IAcadPlotConfigurations_vtables_dispatch_: int
IAcadPlotConfigurations_vtables_: Incomplete
IAcadPoint_vtables_dispatch_: int
IAcadPoint_vtables_: Incomplete
IAcadPointCloud_vtables_dispatch_: int
IAcadPointCloud_vtables_: Incomplete
IAcadPointCloudEx_vtables_dispatch_: int
IAcadPointCloudEx_vtables_: Incomplete
IAcadPointCloudEx2_vtables_dispatch_: int
IAcadPointCloudEx2_vtables_: Incomplete
IAcadPolyfaceMesh_vtables_dispatch_: int
IAcadPolyfaceMesh_vtables_: Incomplete
IAcadPolygonMesh_vtables_dispatch_: int
IAcadPolygonMesh_vtables_: Incomplete
IAcadPolyline_vtables_dispatch_: int
IAcadPolyline_vtables_: Incomplete
IAcadPopupMenu_vtables_dispatch_: int
IAcadPopupMenu_vtables_: Incomplete
IAcadPopupMenuItem_vtables_dispatch_: int
IAcadPopupMenuItem_vtables_: Incomplete
IAcadPopupMenus_vtables_dispatch_: int
IAcadPopupMenus_vtables_: Incomplete
IAcadPreferences_vtables_dispatch_: int
IAcadPreferences_vtables_: Incomplete
IAcadPreferencesDisplay_vtables_dispatch_: int
IAcadPreferencesDisplay_vtables_: Incomplete
IAcadPreferencesDrafting_vtables_dispatch_: int
IAcadPreferencesDrafting_vtables_: Incomplete
IAcadPreferencesFiles_vtables_dispatch_: int
IAcadPreferencesFiles_vtables_: Incomplete
IAcadPreferencesOpenSave_vtables_dispatch_: int
IAcadPreferencesOpenSave_vtables_: Incomplete
IAcadPreferencesOutput_vtables_dispatch_: int
IAcadPreferencesOutput_vtables_: Incomplete
IAcadPreferencesProfiles_vtables_dispatch_: int
IAcadPreferencesProfiles_vtables_: Incomplete
IAcadPreferencesSelection_vtables_dispatch_: int
IAcadPreferencesSelection_vtables_: Incomplete
IAcadPreferencesSystem_vtables_dispatch_: int
IAcadPreferencesSystem_vtables_: Incomplete
IAcadPreferencesUser_vtables_dispatch_: int
IAcadPreferencesUser_vtables_: Incomplete
IAcadRasterImage_vtables_dispatch_: int
IAcadRasterImage_vtables_: Incomplete
IAcadRay_vtables_dispatch_: int
IAcadRay_vtables_: Incomplete
IAcadRegion_vtables_dispatch_: int
IAcadRegion_vtables_: Incomplete
IAcadRegisteredApplication_vtables_dispatch_: int
IAcadRegisteredApplication_vtables_: Incomplete
IAcadRegisteredApplications_vtables_dispatch_: int
IAcadRegisteredApplications_vtables_: Incomplete
IAcadRevolvedSurface_vtables_dispatch_: int
IAcadRevolvedSurface_vtables_: Incomplete
IAcadSection_vtables_dispatch_: int
IAcadSection_vtables_: Incomplete
IAcadSection2_vtables_dispatch_: int
IAcadSection2_vtables_: Incomplete
IAcadSectionManager_vtables_dispatch_: int
IAcadSectionManager_vtables_: Incomplete
IAcadSectionSettings_vtables_dispatch_: int
IAcadSectionSettings_vtables_: Incomplete
IAcadSectionTypeSettings_vtables_dispatch_: int
IAcadSectionTypeSettings_vtables_: Incomplete
IAcadSectionTypeSettings2_vtables_dispatch_: int
IAcadSectionTypeSettings2_vtables_: Incomplete
IAcadSecurityParams_vtables_dispatch_: int
IAcadSecurityParams_vtables_: Incomplete
IAcadSelectionSet_vtables_dispatch_: int
IAcadSelectionSet_vtables_: Incomplete
IAcadSelectionSets_vtables_dispatch_: int
IAcadSelectionSets_vtables_: Incomplete
IAcadShadowDisplay_vtables_dispatch_: int
IAcadShadowDisplay_vtables_: Incomplete
IAcadShape_vtables_dispatch_: int
IAcadShape_vtables_: Incomplete
IAcadSolid_vtables_dispatch_: int
IAcadSolid_vtables_: Incomplete
IAcadSortentsTable_vtables_dispatch_: int
IAcadSortentsTable_vtables_: Incomplete
IAcadSpline_vtables_dispatch_: int
IAcadSpline_vtables_: Incomplete
IAcadState_vtables_dispatch_: int
IAcadState_vtables_: Incomplete
IAcadSubDMesh_vtables_dispatch_: int
IAcadSubDMesh_vtables_: Incomplete
IAcadSubDMeshEdge_vtables_dispatch_: int
IAcadSubDMeshEdge_vtables_: Incomplete
IAcadSubDMeshFace_vtables_dispatch_: int
IAcadSubDMeshFace_vtables_: Incomplete
IAcadSubDMeshVertex_vtables_dispatch_: int
IAcadSubDMeshVertex_vtables_: Incomplete
IAcadSubEntSolidEdge_vtables_dispatch_: int
IAcadSubEntSolidEdge_vtables_: Incomplete
IAcadSubEntSolidFace_vtables_dispatch_: int
IAcadSubEntSolidFace_vtables_: Incomplete
IAcadSubEntSolidNode_vtables_dispatch_: int
IAcadSubEntSolidNode_vtables_: Incomplete
IAcadSubEntSolidVertex_vtables_dispatch_: int
IAcadSubEntSolidVertex_vtables_: Incomplete
IAcadSubEntity_vtables_dispatch_: int
IAcadSubEntity_vtables_: Incomplete
IAcadSummaryInfo_vtables_dispatch_: int
IAcadSummaryInfo_vtables_: Incomplete
IAcadSurface_vtables_dispatch_: int
IAcadSurface_vtables_: Incomplete
IAcadSweptSurface_vtables_dispatch_: int
IAcadSweptSurface_vtables_: Incomplete
IAcadTable_vtables_dispatch_: int
IAcadTable_vtables_: Incomplete
IAcadTableStyle_vtables_dispatch_: int
IAcadTableStyle_vtables_: Incomplete
IAcadText_vtables_dispatch_: int
IAcadText_vtables_: Incomplete
IAcadTextStyle_vtables_dispatch_: int
IAcadTextStyle_vtables_: Incomplete
IAcadTextStyles_vtables_dispatch_: int
IAcadTextStyles_vtables_: Incomplete
IAcadTolerance_vtables_dispatch_: int
IAcadTolerance_vtables_: Incomplete
IAcadToolbar_vtables_dispatch_: int
IAcadToolbar_vtables_: Incomplete
IAcadToolbarItem_vtables_dispatch_: int
IAcadToolbarItem_vtables_: Incomplete
IAcadToolbars_vtables_dispatch_: int
IAcadToolbars_vtables_: Incomplete
IAcadTrace_vtables_dispatch_: int
IAcadTrace_vtables_: Incomplete
IAcadUCS_vtables_dispatch_: int
IAcadUCS_vtables_: Incomplete
IAcadUCSs_vtables_dispatch_: int
IAcadUCSs_vtables_: Incomplete
IAcadUnderlay_vtables_dispatch_: int
IAcadUnderlay_vtables_: Incomplete
IAcadUtility_vtables_dispatch_: int
IAcadUtility_vtables_: Incomplete
IAcadView_vtables_dispatch_: int
IAcadView_vtables_: Incomplete
IAcadViewport_vtables_dispatch_: int
IAcadViewport_vtables_: Incomplete
IAcadViewports_vtables_dispatch_: int
IAcadViewports_vtables_: Incomplete
IAcadViews_vtables_dispatch_: int
IAcadViews_vtables_: Incomplete
IAcadWipeout_vtables_dispatch_: int
IAcadWipeout_vtables_: Incomplete
IAcadXRecord_vtables_dispatch_: int
IAcadXRecord_vtables_: Incomplete
IAcadXline_vtables_dispatch_: int
IAcadXline_vtables_: Incomplete
RecordMap: Incomplete
CLSIDToClassMap: Incomplete
CLSIDToPackageMap: Incomplete
VTablesToPackageMap: Incomplete
VTablesToClassMap: Incomplete
NamesToIIDMap: Incomplete
