import PyRx
import PyGe
import PyGi
import PyGs
import PyDb
import PyAp
import PyEd
import PyPl

class ACIcolorMethod:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kACIbyBlock (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kACIbyLayer (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kACIclear (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kACIforeground (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kACIfrozenLayer (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kACImaximum (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kACIminimum (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kACInone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kACIstandard (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class AbstractViewTable:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def add (self, *args, **kwargs)-> PyDb.ObjectId :
      '''add( (AbstractViewTable)arg1, (AbstractViewTableRecord)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId add(class PyDbAbstractViewTable {lvalue},class PyDbAbstractViewTableRecord)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.AbstractViewTable :
      '''cast( (RxObject)arg1) -> AbstractViewTable :

    C++ signature :
        class PyDbAbstractViewTable cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.AbstractViewTable :
      '''cloneFrom( (RxObject)arg1) -> AbstractViewTable :

    C++ signature :
        class PyDbAbstractViewTable cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getAt (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getAt( (SymbolTable)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getAt(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has (self, *args, **kwargs)-> bool :
      '''has( (SymbolTable)arg1, (str)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

has( (SymbolTable)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class PyDbObjectId)'''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def recordIds (self, *args, **kwargs)-> list :
      '''recordIds( (SymbolTable)arg1) -> list :

    C++ signature :
        class boost::python::list recordIds(class PyDbSymbolTable {lvalue})'''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def toDict (self, *args, **kwargs)-> dict :
      '''toDict( (SymbolTable)arg1) -> dict :

    C++ signature :
        class boost::python::dict toDict(class PyDbSymbolTable {lvalue})'''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class AbstractViewTableRecord:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def ambientLightColor (self: AbstractViewTableRecord)-> PyDb.Color :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def backClipDistance (self: AbstractViewTableRecord)-> float :
      '''                             '''
    ...
    def backClipEnabled (self: AbstractViewTableRecord)-> bool :
      '''                             '''
    ...
    def background (self: AbstractViewTableRecord)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def brightness (self: AbstractViewTableRecord)-> float :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.AbstractViewTableRecord :
      '''                             '''
    ...
    def centerPoint (self: AbstractViewTableRecord)-> PyGe.Point2d :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.AbstractViewTableRecord :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def contrast (self: AbstractViewTableRecord)-> float :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def defaultLightingType (self: AbstractViewTableRecord)-> object :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevation (self: AbstractViewTableRecord)-> float :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def frontClipAtEye (self: AbstractViewTableRecord)-> bool :
      '''                             '''
    ...
    def frontClipDistance (self: AbstractViewTableRecord)-> float :
      '''                             '''
    ...
    def frontClipEnabled (self: AbstractViewTableRecord)-> bool :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getName (self: SymbolTableRecord)-> str :
      '''                             '''
    ...
    def getUcs (self: AbstractViewTableRecord)-> tuple :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def height (self: AbstractViewTableRecord)-> float :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isDefaultLightingOn (self: AbstractViewTableRecord)-> bool :
      '''                             '''
    ...
    def isDependent (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isRenamable (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isResolved (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUcsOrthographic (self: AbstractViewTableRecord)-> tuple :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isViewOrthographic (self: AbstractViewTableRecord)-> tuple :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def lensLength (self: AbstractViewTableRecord)-> float :
      '''                             '''
    ...
    def name (self: SymbolTableRecord)-> str :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def perspectiveEnabled (self: AbstractViewTableRecord)-> bool :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAmbientLightColor (self: AbstractViewTableRecord,val : PyDb.Color)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBackClipDistance (self: AbstractViewTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setBackClipEnabled (self: AbstractViewTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setBackground (self: AbstractViewTableRecord,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setBrightness (self: AbstractViewTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setCenterPoint (self: AbstractViewTableRecord,val : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setContrast (self: AbstractViewTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setDefaultLightingOn (self: AbstractViewTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setDefaultLightingType (self, *args, **kwargs)-> None :
      '''setDefaultLightingType( (AbstractViewTableRecord)arg1, (object)arg2) -> None :

    C++ signature :
        void setDefaultLightingType(class PyDbAbstractViewTableRecord {lvalue},enum AcGiViewportTraits::DefaultLightingType)'''
    ...
    def setElevation (self: AbstractViewTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setFrontClipAtEye (self: AbstractViewTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setFrontClipDistance (self: AbstractViewTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setFrontClipEnabled (self: AbstractViewTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setHeight (self: AbstractViewTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setLensLength (self: AbstractViewTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setName (self: SymbolTableRecord,name: str)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPerspectiveEnabled (self: AbstractViewTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setSun (self: AbstractViewTableRecord,retId : PyDb.ObjectId,pSun : PyDb.Object,eraseOldSun : bool=True)-> None :
      '''                             '''
    ...
    def setTarget (self: AbstractViewTableRecord,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setUcs (self, *args, **kwargs)-> None :
      '''setUcs( (AbstractViewTableRecord)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> None :

    C++ signature :
        void setUcs(class PyDbAbstractViewTableRecord {lvalue},class AcGePoint3d,class AcGeVector3d,class AcGeVector3d)

setUcs( (AbstractViewTableRecord)arg1, (OrthographicView)arg2) -> None :

    C++ signature :
        void setUcs(class PyDbAbstractViewTableRecord {lvalue},enum AcDb::OrthographicView)

setUcs( (AbstractViewTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setUcs(class PyDbAbstractViewTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setUcsToWorld (self: AbstractViewTableRecord)-> None :
      '''                             '''
    ...
    def setViewDirection (self, *args, **kwargs)-> None :
      '''setViewDirection( (AbstractViewTableRecord)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setViewDirection(class PyDbAbstractViewTableRecord {lvalue},class AcGeVector3d)

setViewDirection( (AbstractViewTableRecord)arg1, (OrthographicView)arg2) -> None :

    C++ signature :
        void setViewDirection(class PyDbAbstractViewTableRecord {lvalue},enum AcDb::OrthographicView)'''
    ...
    def setViewTwist (self: AbstractViewTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setVisualStyle (self: AbstractViewTableRecord,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setWidth (self: AbstractViewTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def sunId (self: AbstractViewTableRecord)-> PyDb.ObjectId :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def target (self: AbstractViewTableRecord)-> PyGe.Point3d :
      '''                             '''
    ...
    def ucsName (self: AbstractViewTableRecord)-> PyDb.ObjectId :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewDirection (self: AbstractViewTableRecord)-> PyGe.Vector3d :
      '''                             '''
    ...
    def viewTwist (self: AbstractViewTableRecord)-> float :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visualStyle (self: AbstractViewTableRecord)-> PyDb.ObjectId :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def width (self: AbstractViewTableRecord)-> float :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class AcCmDialogTabs:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kACITab (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kColorBookTab (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTrueColorTab (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class AcGeoMapResolution:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kCoarse (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kFine (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kFiner (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOptimal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class AcGeoMapType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kAerial (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHybrid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNoMap (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kRoad (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class AdsName:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def fromObjectId (self, *args, **kwargs)-> None :
      '''fromObjectId( (AdsName)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void fromObjectId(class AdsName {lvalue},class PyDbObjectId)'''
    ...
    def toObjectId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''toObjectId( (AdsName)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId toObjectId(class AdsName {lvalue})'''
    ...

class AlignedDimension:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (str)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (str)arg5, (ObjectId)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def altSuppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altSuppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altSuppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def altSuppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def alternatePrefix (self: Dimension)-> str :
      '''                             '''
    ...
    def alternateSuffix (self: Dimension)-> str :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockTransform (self: Dimension)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.AlignedDimension :
      '''cast( (RxObject)arg1) -> AlignedDimension :

    C++ signature :
        class PyDbAlignedDimension cast(class PyRxObject)'''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def centerMarkSize (self: Dimension)-> float :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.AlignedDimension :
      '''cloneFrom( (RxObject)arg1) -> AlignedDimension :

    C++ signature :
        class PyDbAlignedDimension cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimBlockPosition (self: Dimension)-> PyGe.Point3d :
      '''                             '''
    ...
    def dimExt1Linetype (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimExt2Linetype (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimLineLinetype (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimLinePoint (self, *args, **kwargs)-> PyGe.Point3d :
      '''dimLinePoint( (AlignedDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimLinePoint(class PyDbAlignedDimension {lvalue})'''
    ...
    def dimensionStyle (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimensionText (self: Dimension)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevation (self: Dimension)-> float :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def fieldFromMText (self: Dimension,ref : PyDb.MText)-> None :
      '''                             '''
    ...
    def fieldToMText (self: Dimension,ref : PyDb.MText)-> None :
      '''                             '''
    ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self: Dimension)-> None :
      '''                             '''
    ...
    def getArrowFirstIsFlipped (self: Dimension)-> bool :
      '''                             '''
    ...
    def getArrowSecondIsFlipped (self: Dimension)-> bool :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDimstyleData (self: Dimension)-> PyDb.DimStyleTableRecord :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def horizontalRotation (self: Dimension)-> float :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def inspection (self: Dimension)-> bool :
      '''                             '''
    ...
    def inspectionFrame (self: Dimension)-> int :
      '''                             '''
    ...
    def inspectionLabel (self: Dimension)-> str :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self: Dimension)-> bool :
      '''                             '''
    ...
    def isConstraintObject (self: Dimension)-> tuple :
      '''                             '''
    ...
    def isDynamicDimension (self: Dimension)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self: Dimension)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self: Dimension)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def jogSymbolOn (self, *args, **kwargs)-> bool :
      '''jogSymbolOn( (AlignedDimension)arg1) -> bool :

    C++ signature :
        bool jogSymbolOn(class PyDbAlignedDimension {lvalue})'''
    ...
    def jogSymbolPosition (self, *args, **kwargs)-> PyGe.Point3d :
      '''jogSymbolPosition( (AlignedDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d jogSymbolPosition(class PyDbAlignedDimension {lvalue})'''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def measurement (self: Dimension)-> float :
      '''                             '''
    ...
    def normal (self: Dimension)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def oblique (self, *args, **kwargs)-> float :
      '''oblique( (AlignedDimension)arg1) -> float :

    C++ signature :
        double oblique(class PyDbAlignedDimension {lvalue})'''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def prefix (self: Dimension)-> str :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recomputeDimBlock (self: Dimension,force : bool=False)-> None :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def removeTextField (self: Dimension)-> None :
      '''                             '''
    ...
    def resetTextDefinedSize (self: Dimension)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAltSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAlternatePrefix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setAlternateSuffix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setArrowFirstIsFlipped (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setArrowSecondIsFlipped (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setConstraintDynamic (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDimBlockId (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimBlockPosition (self: Dimension,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setDimExt1Linetype (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimExt2Linetype (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimLineLinetype (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimLinePoint (self, *args, **kwargs)-> None :
      '''setDimLinePoint( (AlignedDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setDimLinePoint(class PyDbAlignedDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimensionStyle (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimensionText (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setDimstyleData (self, *args, **kwargs)-> None :
      '''setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setElevation (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setHorizontalRefTextRotation (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setHorizontalRotation (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setInspection (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setInspectionFrame (self: Dimension,val : int)-> None :
      '''                             '''
    ...
    def setInspectionLabel (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setJogSymbolOn (self, *args, **kwargs)-> None :
      '''setJogSymbolOn( (AlignedDimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setJogSymbolOn(class PyDbAlignedDimension {lvalue},bool)'''
    ...
    def setJogSymbolPosition (self, *args, **kwargs)-> None :
      '''setJogSymbolPosition( (AlignedDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setJogSymbolPosition(class PyDbAlignedDimension {lvalue},class AcGePoint3d)'''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self: Dimension,val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOblique (self, *args, **kwargs)-> None :
      '''setOblique( (AlignedDimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setOblique(class PyDbAlignedDimension {lvalue},double)'''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setShouldParticipateInOPM (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuffix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setSuppressAngularTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setTextAttachment (self: Dimension,val : PyDb.MTextAttachmentPoint)-> None :
      '''                             '''
    ...
    def setTextDefinedSize (self: Dimension,width : float,height : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingFactor (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingStyle (self: Dimension,val : PyDb.LineSpacingStyle)-> None :
      '''                             '''
    ...
    def setTextPosition (self: Dimension,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setTextRotation (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setToleranceSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setUsingDefaultTextPosition (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def setXLine1Point (self, *args, **kwargs)-> None :
      '''setXLine1Point( (AlignedDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setXLine1Point(class PyDbAlignedDimension {lvalue},class AcGePoint3d)'''
    ...
    def setXLine2Point (self, *args, **kwargs)-> None :
      '''setXLine2Point( (AlignedDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setXLine2Point(class PyDbAlignedDimension {lvalue},class AcGePoint3d)'''
    ...
    def shouldParticipateInOPM (self: Dimension)-> bool :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def suffix (self: Dimension)-> str :
      '''                             '''
    ...
    def suppressAngularLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressAngularTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAttachment (self: Dimension)-> PyDb.MTextAttachmentPoint :
      '''                             '''
    ...
    def textDefinedSize (self: Dimension)-> tuple :
      '''                             '''
    ...
    def textLineSpacingFactor (self: Dimension)-> float :
      '''                             '''
    ...
    def textLineSpacingStyle (self: Dimension)-> PyDb.LineSpacingStyle :
      '''                             '''
    ...
    def textPosition (self: Dimension)-> PyGe.Point3d :
      '''                             '''
    ...
    def textRotation (self: Dimension)-> float :
      '''                             '''
    ...
    def toleranceSuppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def toleranceSuppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def useDefaultTextPosition (self: Dimension)-> None :
      '''                             '''
    ...
    def useSetTextPosition (self: Dimension)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xLine1Point (self, *args, **kwargs)-> PyGe.Point3d :
      '''xLine1Point( (AlignedDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine1Point(class PyDbAlignedDimension {lvalue})'''
    ...
    def xLine2Point (self, *args, **kwargs)-> PyGe.Point3d :
      '''xLine2Point( (AlignedDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine2Point(class PyDbAlignedDimension {lvalue})'''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class AnnoType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kBlockRef (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kFcf (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMText (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNoAnno (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class AnnotationScale:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...

    @staticmethod
    def cast (otherObject: PyDb.ObjectContext)-> PyDb.AnnotationScale :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def collectionName (self: ObjectContext)-> str :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: AnnotationScale,otherObject: PyRx.RxObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def getDrawingUnits (self: AnnotationScale)-> float :
      '''                             '''
    ...
    def getIsTemporaryScale (self: AnnotationScale)-> bool :
      '''                             '''
    ...
    def getName (self: ObjectContext)-> str :
      '''                             '''
    ...
    def getPaperUnits (self: AnnotationScale)-> float :
      '''                             '''
    ...
    def getScale (self: AnnotationScale)-> float :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def matchScaleId (self: AnnotationScale,val : int)-> bool :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def setDrawingUnits (self: AnnotationScale,val : float)-> None :
      '''                             '''
    ...
    def setName (self: ObjectContext,name : str)-> None :
      '''                             '''
    ...
    def setPaperUnits (self: AnnotationScale,val : float)-> None :
      '''                             '''
    ...
    def uniqueIdentifier (self: ObjectContext)-> int :
      '''                             '''
    ...

class AnnotativeStates:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kFalse (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNotApplicable (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTrue (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class Arc:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (float)arg3, (float)arg4, (float)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,double,double,double)

__init__( (object)arg1, (Point3d)arg2, (Vector3d)arg3, (float)arg4, (float)arg5, (float)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGeVector3d,double,double,double)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: RxObject)-> PyDb.Arc :
      '''                             '''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def center (self: Arc)-> PyGe.Point3d :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: RxObject)-> PyDb.Arc :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def createFromAcGeCurve (curve: PyGe.Curve3d,normal: PyGe.Vector3d = kZAxis,tol: Tol = default)-> PyDb.Curve :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def endAngle (self: Arc)-> float :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> None :
      '''extend( (Curve)arg1, (float)arg2) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getAcGeCurve (self: Arc,tol: Tol = default)-> PyGe.CircArc3d :
      '''                             '''
    ...
    def getArea (self: Curve)-> float :
      '''                             '''
    ...
    def getClosestPointTo (self: Curve,point3d: PyGe.Point3d,direction: PyGe.Vector3d=None,extend: bool=False)-> PyGe.Point3d :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDistAtParam (self: Curve,param: float)-> float :
      '''                             '''
    ...
    def getDistAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEndParam (self: Curve)-> float :
      '''                             '''
    ...
    def getEndPoint (self: Curve)-> PyGe.Point3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self: Curve,param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getOffsetCurves (self: Curve,dist: float)-> list :
      '''                             '''
    ...
    def getOffsetCurvesGivenPlaneNormal (self: Curve,normal: PyGe.Vector3d,dist: float)-> list :
      '''                             '''
    ...
    def getOrthoProjectedCurve (self: Curve,plane: PyGe.Plane)-> PyDb.Curve :
      '''                             '''
    ...
    def getParamAtDist (self: Curve,dist: float)-> float :
      '''                             '''
    ...
    def getParamAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getPointAtDist (self: Curve,dist: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getPointAtParam (self: Curve,param: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getProjectedCurve (self: Curve,plane: PyGe.Plane,projDir: PyGe.Vector3d)-> PyDb.Curve :
      '''                             '''
    ...
    def getSecondDeriv (self: Curve,param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getSpline (self: Curve)-> PyDb.Spline :
      '''                             '''
    ...
    def getSplitCurves (self: Curve,paramsOrPoints: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParam (self: Curve,param: float)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParams (self: Curve,params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoint (self: Curve,point: PyGe.Point3d)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoints (self: Curve,points: list)-> list :
      '''                             '''
    ...
    def getStartParam (self: Curve)-> float :
      '''                             '''
    ...
    def getStartPoint (self: Curve)-> PyGe.Point3d :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isClosed (self: Curve)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPeriodic (self: Curve)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def length (self: Arc)-> float :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def normal (self: Arc)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def radius (self: Arc)-> float :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def reverseCurve (self: Curve)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setCenter (self: Arc,val:PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setEndAngle (self: Arc,val:float)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setFromAcGeCurve (self: Curve,curve: PyGe.Curve3d,normal: PyGe.Vector3d = kZAxis,tol: Tol = default)-> None :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self: Arc,val:PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setRadius (self: Arc,val:float)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setStartAngle (self: Arc,val:float)-> None :
      '''                             '''
    ...
    def setThickness (self: Arc,val:float)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def startAngle (self: Arc)-> float :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def thickness (self: Arc)-> float :
      '''                             '''
    ...
    def totalAngle (self: Arc)-> float :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class ArcDimension:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (str)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (str)arg6, (ObjectId)arg7) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def altSuppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altSuppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altSuppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def altSuppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def alternatePrefix (self: Dimension)-> str :
      '''                             '''
    ...
    def alternateSuffix (self: Dimension)-> str :
      '''                             '''
    ...
    def arcEndParam (self, *args, **kwargs)-> float :
      '''arcEndParam( (ArcDimension)arg1) -> float :

    C++ signature :
        double arcEndParam(class PyDbArcDimension {lvalue})'''
    ...
    def arcPoint (self, *args, **kwargs)-> PyGe.Point3d :
      '''arcPoint( (ArcDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d arcPoint(class PyDbArcDimension {lvalue})'''
    ...
    def arcStartParam (self, *args, **kwargs)-> float :
      '''arcStartParam( (ArcDimension)arg1) -> float :

    C++ signature :
        double arcStartParam(class PyDbArcDimension {lvalue})'''
    ...
    def arcSymbolType (self, *args, **kwargs)-> int :
      '''arcSymbolType( (ArcDimension)arg1) -> int :

    C++ signature :
        int arcSymbolType(class PyDbArcDimension {lvalue})'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockTransform (self: Dimension)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.ArcDimension :
      '''cast( (RxObject)arg1) -> ArcDimension :

    C++ signature :
        class PyDbArcDimension cast(class PyRxObject)'''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def centerMarkSize (self: Dimension)-> float :
      '''                             '''
    ...
    def centerPoint (self, *args, **kwargs)-> PyGe.Point3d :
      '''centerPoint( (ArcDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d centerPoint(class PyDbArcDimension {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.ArcDimension :
      '''cloneFrom( (RxObject)arg1) -> ArcDimension :

    C++ signature :
        class PyDbArcDimension cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimBlockPosition (self: Dimension)-> PyGe.Point3d :
      '''                             '''
    ...
    def dimExt1Linetype (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimExt2Linetype (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimLineLinetype (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimensionStyle (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimensionText (self: Dimension)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevation (self: Dimension)-> float :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def fieldFromMText (self: Dimension,ref : PyDb.MText)-> None :
      '''                             '''
    ...
    def fieldToMText (self: Dimension,ref : PyDb.MText)-> None :
      '''                             '''
    ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self: Dimension)-> None :
      '''                             '''
    ...
    def getArrowFirstIsFlipped (self: Dimension)-> bool :
      '''                             '''
    ...
    def getArrowSecondIsFlipped (self: Dimension)-> bool :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDimstyleData (self: Dimension)-> PyDb.DimStyleTableRecord :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasLeader (self, *args, **kwargs)-> bool :
      '''hasLeader( (ArcDimension)arg1) -> bool :

    C++ signature :
        bool hasLeader(class PyDbArcDimension {lvalue})'''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def horizontalRotation (self: Dimension)-> float :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def inspection (self: Dimension)-> bool :
      '''                             '''
    ...
    def inspectionFrame (self: Dimension)-> int :
      '''                             '''
    ...
    def inspectionLabel (self: Dimension)-> str :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self: Dimension)-> bool :
      '''                             '''
    ...
    def isConstraintObject (self: Dimension)-> tuple :
      '''                             '''
    ...
    def isDynamicDimension (self: Dimension)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self: Dimension)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPartial (self, *args, **kwargs)-> bool :
      '''isPartial( (ArcDimension)arg1) -> bool :

    C++ signature :
        bool isPartial(class PyDbArcDimension {lvalue})'''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self: Dimension)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def leader1Point (self, *args, **kwargs)-> PyGe.Point3d :
      '''leader1Point( (ArcDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d leader1Point(class PyDbArcDimension {lvalue})'''
    ...
    def leader2Point (self, *args, **kwargs)-> PyGe.Point3d :
      '''leader2Point( (ArcDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d leader2Point(class PyDbArcDimension {lvalue})'''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def measurement (self: Dimension)-> float :
      '''                             '''
    ...
    def normal (self: Dimension)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def prefix (self: Dimension)-> str :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recomputeDimBlock (self: Dimension,force : bool=False)-> None :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def removeTextField (self: Dimension)-> None :
      '''                             '''
    ...
    def resetTextDefinedSize (self: Dimension)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAltSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAlternatePrefix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setAlternateSuffix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setArcEndParam (self, *args, **kwargs)-> None :
      '''setArcEndParam( (ArcDimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setArcEndParam(class PyDbArcDimension {lvalue},double)'''
    ...
    def setArcPoint (self, *args, **kwargs)-> None :
      '''setArcPoint( (ArcDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setArcPoint(class PyDbArcDimension {lvalue},class AcGePoint3d)'''
    ...
    def setArcStartParam (self, *args, **kwargs)-> None :
      '''setArcStartParam( (ArcDimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setArcStartParam(class PyDbArcDimension {lvalue},double)'''
    ...
    def setArcSymbolType (self, *args, **kwargs)-> None :
      '''setArcSymbolType( (ArcDimension)arg1, (int)arg2) -> None :

    C++ signature :
        void setArcSymbolType(class PyDbArcDimension {lvalue},int)'''
    ...
    def setArrowFirstIsFlipped (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setArrowSecondIsFlipped (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setCenterPoint (self, *args, **kwargs)-> None :
      '''setCenterPoint( (ArcDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setCenterPoint(class PyDbArcDimension {lvalue},class AcGePoint3d)'''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setConstraintDynamic (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDimBlockId (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimBlockPosition (self: Dimension,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setDimExt1Linetype (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimExt2Linetype (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimLineLinetype (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimensionStyle (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimensionText (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setDimstyleData (self, *args, **kwargs)-> None :
      '''setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setElevation (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setHasLeader (self, *args, **kwargs)-> None :
      '''setHasLeader( (ArcDimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHasLeader(class PyDbArcDimension {lvalue},bool)'''
    ...
    def setHorizontalRefTextRotation (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setHorizontalRotation (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setInspection (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setInspectionFrame (self: Dimension,val : int)-> None :
      '''                             '''
    ...
    def setInspectionLabel (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setIsPartial (self, *args, **kwargs)-> None :
      '''setIsPartial( (ArcDimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsPartial(class PyDbArcDimension {lvalue},bool)'''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLeader1Point (self, *args, **kwargs)-> None :
      '''setLeader1Point( (ArcDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setLeader1Point(class PyDbArcDimension {lvalue},class AcGePoint3d)'''
    ...
    def setLeader2Point (self, *args, **kwargs)-> None :
      '''setLeader2Point( (ArcDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setLeader2Point(class PyDbArcDimension {lvalue},class AcGePoint3d)'''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self: Dimension,val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setShouldParticipateInOPM (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuffix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setSuppressAngularTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setTextAttachment (self: Dimension,val : PyDb.MTextAttachmentPoint)-> None :
      '''                             '''
    ...
    def setTextDefinedSize (self: Dimension,width : float,height : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingFactor (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingStyle (self: Dimension,val : PyDb.LineSpacingStyle)-> None :
      '''                             '''
    ...
    def setTextPosition (self: Dimension,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setTextRotation (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setToleranceSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setUsingDefaultTextPosition (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def setXLine1Point (self, *args, **kwargs)-> None :
      '''setXLine1Point( (ArcDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setXLine1Point(class PyDbArcDimension {lvalue},class AcGePoint3d)'''
    ...
    def setXLine2Point (self, *args, **kwargs)-> None :
      '''setXLine2Point( (ArcDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setXLine2Point(class PyDbArcDimension {lvalue},class AcGePoint3d)'''
    ...
    def shouldParticipateInOPM (self: Dimension)-> bool :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def suffix (self: Dimension)-> str :
      '''                             '''
    ...
    def suppressAngularLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressAngularTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAttachment (self: Dimension)-> PyDb.MTextAttachmentPoint :
      '''                             '''
    ...
    def textDefinedSize (self: Dimension)-> tuple :
      '''                             '''
    ...
    def textLineSpacingFactor (self: Dimension)-> float :
      '''                             '''
    ...
    def textLineSpacingStyle (self: Dimension)-> PyDb.LineSpacingStyle :
      '''                             '''
    ...
    def textPosition (self: Dimension)-> PyGe.Point3d :
      '''                             '''
    ...
    def textRotation (self: Dimension)-> float :
      '''                             '''
    ...
    def toleranceSuppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def toleranceSuppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def useDefaultTextPosition (self: Dimension)-> None :
      '''                             '''
    ...
    def useSetTextPosition (self: Dimension)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xLine1Point (self, *args, **kwargs)-> PyGe.Point3d :
      '''xLine1Point( (ArcDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine1Point(class PyDbArcDimension {lvalue})'''
    ...
    def xLine2Point (self, *args, **kwargs)-> PyGe.Point3d :
      '''xLine2Point( (ArcDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine2Point(class PyDbArcDimension {lvalue})'''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class AssocFlags:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kFirstPointRef (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kFourthPointRef (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSecondPointRef (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kThirdPointRef (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class AttributeDefinition:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2, (str)arg3, (str)arg4, (str)arg5, (ObjectId)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def adjustAlignment (self: AttributeDefinition,val : Database)-> None :
      '''                             '''
    ...
    def alignmentPoint (self: Text)-> PyGe.Point3d :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: RxObject)-> PyDb.AttributeDefinition :
      '''                             '''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: RxObject)-> PyDb.AttributeDefinition :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def convertFieldToText (self: Text)-> None :
      '''                             '''
    ...
    def convertIntoMTextAttributeDefinition (self: AttributeDefinition,val : bool)-> None :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def correctSpelling (self: Text)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def fieldLength (self: AttributeDefinition)-> int :
      '''                             '''
    ...
    def getBoundingPoints (self: Text)-> list :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getMTextAttributeDefinition (self: AttributeDefinition)-> PyDb.MText :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def height (self: Text)-> float :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def hitTest (self: Text,val : PyGe.Point3d)-> bool :
      '''                             '''
    ...
    def horizontalMode (self: Text)-> PyDb.TextHorzMode :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isConstant (self: AttributeDefinition)-> bool :
      '''                             '''
    ...
    def isDefaultAlignment (self: Text)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isInvisible (self: AttributeDefinition)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isMTextAttributeDefinition (self: AttributeDefinition)-> bool :
      '''                             '''
    ...
    def isMirroredInX (self: Text)-> bool :
      '''                             '''
    ...
    def isMirroredInY (self: Text)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isPreset (self: AttributeDefinition)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isVerifiable (self: AttributeDefinition)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def justification (self: Text)-> PyDb.TextAlignment :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def lockPositionInBlock (self: AttributeDefinition)-> bool :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def mirrorInX (self: Text,val : bool)-> None :
      '''                             '''
    ...
    def mirrorInY (self: Text,val : bool)-> None :
      '''                             '''
    ...
    def normal (self: Text)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def oblique (self: Text)-> float :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def position (self: Text)-> PyGe.Point3d :
      '''                             '''
    ...
    def prompt (self: AttributeDefinition)-> str :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self: Text)-> float :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAlignmentPoint (self: Text,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setConstant (self: AttributeDefinition,val : bool)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setFieldLength (self: AttributeDefinition,val : int)-> None :
      '''                             '''
    ...
    def setHeight (self: Text,val : float)-> None :
      '''                             '''
    ...
    def setHorizontalMode (self: Text,val : TextHorzMode)-> None :
      '''                             '''
    ...
    def setInvisible (self: AttributeDefinition,val : bool)-> None :
      '''                             '''
    ...
    def setJustification (self: Text,val : TextAlignment)-> None :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLockPositionInBlock (self: AttributeDefinition,val : bool)-> None :
      '''                             '''
    ...
    def setMTextAttributeDefinition (self: AttributeDefinition,val : MText)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self: Text,val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOblique (self: Text,val : float)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self: Text,pos : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPreset (self: AttributeDefinition,val : bool)-> None :
      '''                             '''
    ...
    def setPrompt (self: AttributeDefinition,val : str)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setRotation (self: Text,val : float)-> None :
      '''                             '''
    ...
    def setTag (self: AttributeDefinition,val : str)-> None :
      '''                             '''
    ...
    def setTextString (self: Text,val : str)-> None :
      '''                             '''
    ...
    def setTextStyle (self: Text,val : ObjectId)-> None :
      '''                             '''
    ...
    def setThickness (self: Text,val : float)-> None :
      '''                             '''
    ...
    def setVerifiable (self: AttributeDefinition,val : bool)-> None :
      '''                             '''
    ...
    def setVerticalMode (self: Text,val : TextVertMode)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setWidthFactor (self: Text,val : float)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def tag (self: AttributeDefinition)-> str :
      '''                             '''
    ...
    def textString (self: Text)-> str :
      '''                             '''
    ...
    def textStyle (self: Text)-> PyDb.ObjectId :
      '''                             '''
    ...
    def thickness (self: Text)-> float :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def updateMTextAttributeDefinition (self: AttributeDefinition)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def verticalMode (self: Text)-> PyDb.TextHorzMode :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def widthFactor (self: Text)-> float :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class AttributeReference:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2, (str)arg3, (str)arg4, (ObjectId)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def adjustAlignment (self: Text,val : Database)-> None :
      '''                             '''
    ...
    def alignmentPoint (self: Text)-> PyGe.Point3d :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: RxObject)-> PyDb.AttributeReference :
      '''                             '''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: RxObject)-> PyDb.AttributeReference :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def convertFieldToText (self: Text)-> None :
      '''                             '''
    ...
    def convertIntoMTextAttribute (self: AttributeReference,val : bool)-> None :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def correctSpelling (self: Text)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def fieldLength (self: AttributeReference)-> int :
      '''                             '''
    ...
    def getBoundingPoints (self: Text)-> list :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getMTextAttribute (self: AttributeReference)-> PyDb.MText :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def height (self: Text)-> float :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def hitTest (self: Text,val : PyGe.Point3d)-> bool :
      '''                             '''
    ...
    def horizontalMode (self: Text)-> PyDb.TextHorzMode :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isConstant (self: AttributeReference)-> bool :
      '''                             '''
    ...
    def isDefaultAlignment (self: Text)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isInvisible (self: AttributeReference)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isMTextAttribute (self: AttributeReference)-> bool :
      '''                             '''
    ...
    def isMirroredInX (self: Text)-> bool :
      '''                             '''
    ...
    def isMirroredInY (self: Text)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isPreset (self: AttributeReference)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyLocked (self: AttributeReference)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isVerifiable (self: AttributeReference)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def justification (self: Text)-> PyDb.TextAlignment :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def lockPositionInBlock (self: AttributeReference)-> bool :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def mirrorInX (self: Text,val : bool)-> None :
      '''                             '''
    ...
    def mirrorInY (self: Text,val : bool)-> None :
      '''                             '''
    ...
    def normal (self: Text)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def oblique (self: Text)-> float :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def position (self: Text)-> PyGe.Point3d :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self: Text)-> float :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAlignmentPoint (self: Text,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributeFromBlock (self, *args, **kwargs)-> None :
      '''setAttributeFromBlock( (AttributeReference)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void setAttributeFromBlock(class PyDbAttribute {lvalue},class AcGeMatrix3d)

setAttributeFromBlock( (AttributeReference)arg1, (AttributeDefinition)arg2, (Matrix3d)arg3) -> None :

    C++ signature :
        void setAttributeFromBlock(class PyDbAttribute {lvalue},class PyDbAttributeDefinition,class AcGeMatrix3d)'''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setFieldLength (self: AttributeReference,val : int)-> None :
      '''                             '''
    ...
    def setHeight (self: Text,val : float)-> None :
      '''                             '''
    ...
    def setHorizontalMode (self: Text,val : TextHorzMode)-> None :
      '''                             '''
    ...
    def setInvisible (self: AttributeReference,val : bool)-> None :
      '''                             '''
    ...
    def setJustification (self: Text,val : TextAlignment)-> None :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLockPositionInBlock (self: AttributeReference,val : bool)-> None :
      '''                             '''
    ...
    def setMTextAttribute (self: AttributeReference,val : MText)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self: Text,val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOblique (self: Text,val : float)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self: Text,pos : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setRotation (self: Text,val : float)-> None :
      '''                             '''
    ...
    def setTag (self: AttributeReference,val : str)-> None :
      '''                             '''
    ...
    def setTextString (self: Text,val : str)-> None :
      '''                             '''
    ...
    def setTextStyle (self: Text,val : ObjectId)-> None :
      '''                             '''
    ...
    def setThickness (self: Text,val : float)-> None :
      '''                             '''
    ...
    def setVerticalMode (self: Text,val : TextVertMode)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setWidthFactor (self: Text,val : float)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def tag (self: AttributeReference)-> str :
      '''                             '''
    ...
    def textString (self: Text)-> str :
      '''                             '''
    ...
    def textStyle (self: Text)-> PyDb.ObjectId :
      '''                             '''
    ...
    def thickness (self: Text)-> float :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def updateMTextAttribute (self: AttributeReference)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def verticalMode (self: Text)-> PyDb.TextHorzMode :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def widthFactor (self: Text)-> float :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class BlockBegin:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.BlockBegin :
      '''cast( (RxObject)arg1) -> BlockBegin :

    C++ signature :
        class PyDbBlockBegin cast(class PyRxObject)'''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.BlockBegin :
      '''cloneFrom( (RxObject)arg1) -> BlockBegin :

    C++ signature :
        class PyDbBlockBegin cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class BlockEnd:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.BlockEnd :
      '''cast( (RxObject)arg1) -> BlockEnd :

    C++ signature :
        class PyDbBlockEnd cast(class PyRxObject)'''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.BlockEnd :
      '''cloneFrom( (RxObject)arg1) -> BlockEnd :

    C++ signature :
        class PyDbBlockEnd cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class BlockReference:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class PyDbObjectId)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def appendAttribute (self: BlockReference,val : Attribute)-> PyDb.ObjectId :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def attributeIds (self: BlockReference)-> list :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockTableRecord (self: BlockReference)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockTransform (self: BlockReference)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: RxObject)-> PyDb.BlockReference :
      '''                             '''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: RxObject)-> PyDb.BlockReference :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def explodeToOwnerSpace (self: BlockReference)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def geomExtentsBestFit (self: BlockReference,val : PyGe.Matrix3d=kIdentity)-> PyDb.Extents :
      '''                             '''
    ...
    def getBlockName (self: BlockReference)-> str :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def nonAnnotationBlockTransform (self: BlockReference)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def nonAnnotationScaleFactors (self: BlockReference)-> PyGe.Scale3d :
      '''                             '''
    ...
    def normal (self: BlockReference)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def position (self: BlockReference)-> PyGe.Point3d :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self: BlockReference)-> float :
      '''                             '''
    ...
    def scaleFactors (self: BlockReference)-> PyGe.Scale3d :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBlockTableRecord (self: BlockReference,val : ObjectId)-> None :
      '''                             '''
    ...
    def setBlockTransform (self: BlockReference,val : PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self: BlockReference,val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self: BlockReference,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setRotation (self: BlockReference,val : float)-> None :
      '''                             '''
    ...
    def setScaleFactors (self: BlockReference,val : PyGe.Scale3d)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def treatAsAcDbBlockRefForExplode (self: BlockReference)-> bool :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class BlockScaling:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kAny (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUniform (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class BlockTable:
    def __init__ (self: BlockTable,id: ObjectId,mode: OpenMode=kForRead)-> None :
      '''                             '''
    ...
    def add (self: BlockTable,block : BlockTableRecord)-> PyDb.ObjectId :
      '''                             '''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.BlockTable :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.BlockTable :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getAt (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getAt( (SymbolTable)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getAt(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has (self, *args, **kwargs)-> bool :
      '''has( (SymbolTable)arg1, (str)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

has( (SymbolTable)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class PyDbObjectId)'''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def recordIds (self, *args, **kwargs)-> list :
      '''recordIds( (SymbolTable)arg1) -> list :

    C++ signature :
        class boost::python::list recordIds(class PyDbSymbolTable {lvalue})'''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def toDict (self, *args, **kwargs)-> dict :
      '''toDict( (SymbolTable)arg1) -> dict :

    C++ signature :
        class boost::python::dict toDict(class PyDbSymbolTable {lvalue})'''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class BlockTableRecord:
    def __init__ (self: BlockTableRecord,id: ObjectId=kNull,mode: PyDb.OpenMode=kForRead)-> None :
      '''                             '''
    ...
    def addAnnoScalestoBlkRefs (self: BlockTableRecord,scale : bool)-> None :
      '''                             '''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def appendAcDbEntities (self: BlockTableRecord,entities : list[PyDb.Entity])-> list :
      '''                             '''
    ...
    def appendAcDbEntity (self: BlockTableRecord,entity : PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assumeOwnershipOf (self: BlockTableRecord,entities : list[PyDb.Entity])-> None :
      '''                             '''
    ...
    def blockInsertUnits (self: BlockTableRecord)-> PyDb.UnitsValue :
      '''                             '''
    ...
    def blockScaling (self: BlockTableRecord)-> PyDb.BlockScaling :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.BlockTableRecord :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def clearPreviewIcon (self: BlockTableRecord)-> None :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.BlockTableRecord :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comments (self: BlockTableRecord)-> str :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explodable (self: BlockTableRecord)-> bool :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getBlockReferenceIds (self: BlockTableRecord,directOnly : bool = True,bForceValidity : bool = False)-> list :
      '''                             '''
    ...
    def getErasedBlockReferenceIds (self: BlockTableRecord)-> list :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getLayoutId (self: BlockTableRecord)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getName (self: SymbolTableRecord)-> str :
      '''                             '''
    ...
    def getPreviewIcon (self: BlockTableRecord)-> object :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasAttributeDefinitions (self: BlockTableRecord)-> bool :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasPreviewIcon (self: BlockTableRecord)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isAnonymous (self: BlockTableRecord)-> bool :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isDependent (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isFromExternalReference (self: BlockTableRecord)-> bool :
      '''                             '''
    ...
    def isFromOverlayReference (self: BlockTableRecord)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isLayout (self: BlockTableRecord)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isRenamable (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isResolved (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUnloaded (self: BlockTableRecord)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def name (self: SymbolTableRecord)-> str :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectIds (self: BlockTableRecord,desc:PyRx.RxClass=PyDb.Entity)-> list :
      '''                             '''
    ...
    def openBlockBegin (self: BlockTableRecord,val: PyDb.BlockBegin,mode: PyDb.OpenMode)-> None :
      '''                             '''
    ...
    def openBlockEnd (self: BlockTableRecord,val: PyDb.BlockEnd,mode: PyDb.OpenMode)-> None :
      '''                             '''
    ...
    def origin (self: BlockTableRecord)-> PyGe.Point3d :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def pathName (self: BlockTableRecord)-> str :
      '''                             '''
    ...
    def postProcessAnnotativeBTR (self: BlockTableRecord,bqueryOnly  : bool = False,bScale : bool = True)-> int :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBlockInsertUnits (self: BlockTableRecord,val : PyDb.UnitsValue)-> None :
      '''                             '''
    ...
    def setBlockScaling (self: BlockTableRecord,val : PyDb.BlockScaling)-> None :
      '''                             '''
    ...
    def setComments (self: BlockTableRecord,val : str)-> None :
      '''                             '''
    ...
    def setExplodable (self: BlockTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setIsFromOverlayReference (self: BlockTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setIsUnloaded (self: BlockTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setLayoutId (self: BlockTableRecord,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setName (self: SymbolTableRecord,name: str)-> None :
      '''                             '''
    ...
    def setOrigin (self: BlockTableRecord,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPathName (self: BlockTableRecord,val : str)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def xrefDatabase (self: BlockTableRecord,val : bool)-> PyDb.Database :
      '''                             '''
    ...
    def xrefStatus (self: BlockTableRecord)-> PyDb.XrefStatus :
      '''                             '''
    ...

class Body:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.Body :
      '''cast( (RxObject)arg1) -> Body :

    C++ signature :
        class PyDbBody cast(class PyRxObject)'''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.Body :
      '''cloneFrom( (RxObject)arg1) -> Body :

    C++ signature :
        class PyDbBody cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class BoolOperType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kBoolIntersect (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBoolSubtract (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBoolUnite (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class Cell:
    def __init__ (self: Cell,row : int=-1,column : int=-1)-> None :
      '''                             '''
    ...
    def column (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def row (self, *args, **kwargs)-> None :
      '''None'''
    ...

class CellAlignment:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kBottomCenter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBottomLeft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBottomRight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMiddleCenter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMiddleLeft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMiddleRight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTopCenter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTopLeft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTopRight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class CellContentLayout:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kCellContentLayoutStackedHorizontal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellContentLayoutStackedVertical (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellStateNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class CellContentType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kCellContentTypeBlock (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellContentTypeField (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellContentTypeUnknown (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellContentTypeValue (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class CellEdgeMask:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kBottomMask (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLeftMask (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kRightMask (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTopMask (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class CellMargin:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kCellMarginBottom (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellMarginHorzSpacing (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellMarginLeft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellMarginRight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellMarginTop (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellMarginVertSpacing (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class CellProperty:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kCellPropAlignment (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropAll (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropAutoScale (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropBackgroundColor (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropBitProperties (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropContent (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropContentColor (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropContentLayout (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropDataFormat (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropDataType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropDataTypeAndFormat (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropFlowDirBtoT (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropInvalid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropMarginBottom (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropMarginHorzSpacing (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropMarginLeft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropMarginRight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropMarginTop (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropMarginVertSpacing (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropMergeAll (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropRotation (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropScale (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropTextHeight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropTextStyle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class CellRange:
    def __init__ (self: CellRange,topRow : int=-1,leftColumn : int=-1,bottomRow : int=-1,rightColumn : int=-1)-> None :
      '''                             '''
    ...
    def bottomRow (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def leftColumn (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def rightColumn (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def topRow (self, *args, **kwargs)-> None :
      '''None'''
    ...

class CellState:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kAllCellStates (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellStateContentLocked (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellStateContentModifiedAfterUpdate (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellStateContentReadOnly (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellStateFormatLocked (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellStateFormatModifiedAfterUpdate (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellStateFormatReadOnly (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellStateLinked (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellStateNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class CellType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kBlockCell (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMultipleContentCell (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextCell (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnknownCell (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class CenterMarkType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kLine (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMark (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class Circle:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Vector3d)arg3, (float)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGeVector3d,double)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: RxObject)-> PyDb.Circle :
      '''                             '''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def center (self: Circle)-> PyGe.Point3d :
      '''                             '''
    ...
    def circumference (self: Circle)-> float :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: RxObject)-> PyDb.Circle :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def createFromAcGeCurve (curve: PyGe.Curve3d,normal: PyGe.Vector3d = kZAxis,tol: Tol = default)-> PyDb.Curve :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def diameter (self: Circle)-> float :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> None :
      '''extend( (Curve)arg1, (float)arg2) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getAcGeCurve (self: Circle,tol: Tol = default)-> PyGe.CircArc3d :
      '''                             '''
    ...
    def getArea (self: Curve)-> float :
      '''                             '''
    ...
    def getClosestPointTo (self: Curve,point3d: PyGe.Point3d,direction: PyGe.Vector3d=None,extend: bool=False)-> PyGe.Point3d :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDistAtParam (self: Curve,param: float)-> float :
      '''                             '''
    ...
    def getDistAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEndParam (self: Curve)-> float :
      '''                             '''
    ...
    def getEndPoint (self: Curve)-> PyGe.Point3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self: Curve,param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getOffsetCurves (self: Curve,dist: float)-> list :
      '''                             '''
    ...
    def getOffsetCurvesGivenPlaneNormal (self: Curve,normal: PyGe.Vector3d,dist: float)-> list :
      '''                             '''
    ...
    def getOrthoProjectedCurve (self: Curve,plane: PyGe.Plane)-> PyDb.Curve :
      '''                             '''
    ...
    def getParamAtDist (self: Curve,dist: float)-> float :
      '''                             '''
    ...
    def getParamAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getPointAtDist (self: Curve,dist: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getPointAtParam (self: Curve,param: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getProjectedCurve (self: Curve,plane: PyGe.Plane,projDir: PyGe.Vector3d)-> PyDb.Curve :
      '''                             '''
    ...
    def getSecondDeriv (self: Curve,param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getSpline (self: Curve)-> PyDb.Spline :
      '''                             '''
    ...
    def getSplitCurves (self: Curve,paramsOrPoints: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParam (self: Curve,param: float)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParams (self: Curve,params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoint (self: Curve,point: PyGe.Point3d)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoints (self: Curve,points: list)-> list :
      '''                             '''
    ...
    def getStartParam (self: Curve)-> float :
      '''                             '''
    ...
    def getStartPoint (self: Curve)-> PyGe.Point3d :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isClosed (self: Curve)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPeriodic (self: Curve)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def normal (self: Circle)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def radius (self: Circle)-> float :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def reverseCurve (self: Curve)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setCenter (self: Circle,val:PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setCircumference (self: Circle,val:float)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDiameter (self: Circle,val:float)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setFromAcGeCurve (self: Curve,curve: PyGe.Curve3d,normal: PyGe.Vector3d = kZAxis,tol: Tol = default)-> None :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self: Circle,val:PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setRadius (self: Circle,val:float)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setThickness (self: Circle,val:float)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def thickness (self: Circle)-> float :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class ClipBoundaryType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kInvalid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPoly (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kRect (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class CollisionType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kCollisionTypeNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCollisionTypeSolid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class Color:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def blue (self: Color)-> int :
      '''                             '''
    ...
    def colorIndex (self: Color)-> int :
      '''                             '''
    ...
    def entityColor (self: Color)-> PyDb.EntityColor :
      '''                             '''
    ...
    def green (self: Color)-> int :
      '''                             '''
    ...
    def isByACI (self: Color)-> bool :
      '''                             '''
    ...
    def isByBlock (self: Color)-> bool :
      '''                             '''
    ...
    def isByColor (self: Color)-> bool :
      '''                             '''
    ...
    def isByLayer (self: Color)-> bool :
      '''                             '''
    ...
    def isByPen (self: Color)-> bool :
      '''                             '''
    ...
    def isForeground (self: Color)-> bool :
      '''                             '''
    ...
    def isNone (self: Color)-> bool :
      '''                             '''
    ...
    def penIndex (self: Color)-> int :
      '''                             '''
    ...
    def red (self: Color)-> int :
      '''                             '''
    ...
    def setColorIndex (self: Color,val : int)-> PyDb.ErrorStatus :
      '''                             '''
    ...
    def setPenIndex (self: Color,val : int)-> PyDb.ErrorStatus :
      '''                             '''
    ...
    def setRGB (self: Color,red : int,green : int,blue : int)-> PyDb.ErrorStatus :
      '''                             '''
    ...

class ColorMethod:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kByACI (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kByBlock (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kByColor (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kByLayer (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kByPen (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kForeground (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLayerFrozen (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLayerOff (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class Core:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...

    @staticmethod
    def activeDatabaseArray ()-> list :
      '''                             '''
    ...

    @staticmethod
    def angToF (value:str,unit:int)-> float :
      '''                             '''
    ...

    @staticmethod
    def angToS (value:float,unit:int,prec:int)-> str :
      '''                             '''
    ...

    @staticmethod
    def assignGelibCurveToAcDbCurve (geCurve:PyGe.Curve3d,dbCurve:PyDb.Curve,norm:PyGe.Vector3d=kZAxis,tol:PyGe.Tol=tol)-> None :
      '''                             '''
    ...
    def attachPointCloudExEntity (self: Core,path: str,pos: PyGe.Point3d,scale: float,rotation: float,db: PyDb.Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def attachXref (self, *args, **kwargs)-> None :
      '''attachXref( (Database)arg1, (str)arg2, (str)arg3, (ObjectId)arg4) -> None :

    C++ signature :
        void attachXref(class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId {lvalue})'''
    ...
    def bindXrefs (self, *args, **kwargs)-> None :
      '''bindXrefs( (Database)arg1, (list)arg2, (bool)arg3) -> None :

    C++ signature :
        void bindXrefs(class PyDbDatabase {lvalue},class boost::python::list,bool)

bindXrefs( (Database)arg1, (list)arg2, (bool)arg3, (bool)arg4, (bool)arg5) -> None :

    C++ signature :
        void bindXrefs(class PyDbDatabase {lvalue},class boost::python::list,bool,bool,bool)'''
    ...
    def canonicalToSystemRange (self, *args, **kwargs)-> str :
      '''canonicalToSystemRange( (int)arg1, (str)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > canonicalToSystemRange(int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def clearSetupForLayouts (self, *args, **kwargs)-> None :
      '''clearSetupForLayouts( (int)arg1) -> None :

    C++ signature :
        void clearSetupForLayouts(unsigned __int64)'''
    ...

    @staticmethod
    def convertAcDbCurveToGelibCurve (geCurve:PyGe.Curve2d,tol:PyGe.Tol=tol)-> PyGe.Curve3d :
      '''                             '''
    ...

    @staticmethod
    def convertGelibCurveToAcDbCurve (geCurve:PyGe.Curve3d,norm:PyGe.Vector3d=kZAxis,tol:PyGe.Tol=tol)-> PyDb.Curve :
      '''                             '''
    ...
    def createViewByViewport (self, *args, **kwargs)-> PyDb.ObjectId :
      '''createViewByViewport( (Database)arg1, (ObjectId)arg2, (str)arg3, (str)arg4, (ObjectId)arg5) -> ObjectId :

    C++ signature :
        class PyDbObjectId createViewByViewport(class PyDbDatabase {lvalue},class PyDbObjectId,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def detachXref (self, *args, **kwargs)-> None :
      '''detachXref( (Database)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void detachXref(class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def dictAdd (self, *args, **kwargs)-> bool :
      '''dictAdd( (ObjectId)arg1, (str)arg2, (ObjectId)arg3) -> bool :

    C++ signature :
        bool dictAdd(class PyDbObjectId,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def dictNext (self, *args, **kwargs)-> list :
      '''dictNext( (ObjectId)arg1, (int)arg2) -> list :

    C++ signature :
        class boost::python::list dictNext(class PyDbObjectId,int)'''
    ...
    def dictRemove (self, *args, **kwargs)-> bool :
      '''dictRemove( (ObjectId)arg1, (str)arg2) -> bool :

    C++ signature :
        bool dictRemove(class PyDbObjectId,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def dictRename (self, *args, **kwargs)-> bool :
      '''dictRename( (ObjectId)arg1, (str)arg2, (str)arg3) -> bool :

    C++ signature :
        bool dictRename(class PyDbObjectId,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def dictSearch (self, *args, **kwargs)-> list :
      '''dictSearch( (ObjectId)arg1, (str)arg2, (int)arg3) -> list :

    C++ signature :
        class boost::python::list dictSearch(class PyDbObjectId,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,int)'''
    ...
    def disToF (self, *args, **kwargs)-> float :
      '''disToF( (str)arg1, (int)arg2) -> float :

    C++ signature :
        double disToF(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,int)'''
    ...
    def displayPreviewFromDwg (self, *args, **kwargs)-> bool :
      '''displayPreviewFromDwg( (str)arg1, (int)arg2) -> bool :

    C++ signature :
        bool displayPreviewFromDwg(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned __int64)'''
    ...
    def doSetupForLayouts (self, *args, **kwargs)-> int :
      '''doSetupForLayouts( (Database)arg1) -> int :

    C++ signature :
        unsigned __int64 doSetupForLayouts(class PyDbDatabase {lvalue})'''
    ...
    def dwkFileExists (self, *args, **kwargs)-> bool :
      '''dwkFileExists( (str)arg1) -> bool :

    C++ signature :
        bool dwkFileExists(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def dxfOutAs2000 (self, *args, **kwargs)-> None :
      '''dxfOutAs2000( (Database)arg1, (str)arg2, (int)arg3) -> None :

    C++ signature :
        void dxfOutAs2000(class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,int)'''
    ...
    def dxfOutAs2004 (self, *args, **kwargs)-> None :
      '''dxfOutAs2004( (Database)arg1, (str)arg2, (int)arg3) -> None :

    C++ signature :
        void dxfOutAs2004(class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,int)'''
    ...
    def dxfOutAsR12 (self, *args, **kwargs)-> None :
      '''dxfOutAsR12( (Database)arg1, (str)arg2, (int)arg3) -> None :

    C++ signature :
        void dxfOutAsR12(class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,int)'''
    ...
    def ecs2Wcs (self, *args, **kwargs)-> bool :
      '''ecs2Wcs( (Point3d)arg1, (Vector3d)arg2, (Point3d)arg3) -> bool :

    C++ signature :
        bool ecs2Wcs(class AcGePoint3d,class AcGeVector3d,class AcGePoint3d {lvalue})

ecs2Wcs( (Vector3d)arg1, (Vector3d)arg2, (Vector3d)arg3) -> bool :

    C++ signature :
        bool ecs2Wcs(class AcGeVector3d,class AcGeVector3d,class AcGeVector3d {lvalue})'''
    ...

    @staticmethod
    def entDel (id : PyDb.ObjectId)-> bool :
      '''                             '''
    ...

    @staticmethod
    def entGet (id : PyDb.ObjectId)-> list :
      '''                             '''
    ...

    @staticmethod
    def entGetX (id : PyDb.ObjectId,xdata : list)-> list :
      '''                             '''
    ...

    @staticmethod
    def entLast ()-> PyDb.ObjectId :
      '''                             '''
    ...

    @staticmethod
    def entMake (resultBuffer : list)-> bool :
      '''                             '''
    ...

    @staticmethod
    def entMakeX (resultBuffer : list)-> PyDb.ObjectId :
      '''                             '''
    ...

    @staticmethod
    def entMod (resultBuffer : list)-> bool :
      '''                             '''
    ...

    @staticmethod
    def entNext (id : PyDb.ObjectId)-> PyDb.ObjectId :
      '''                             '''
    ...

    @staticmethod
    def entUpd (id : PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def fail (self, *args, **kwargs)-> None :
      '''fail( (str)arg1) -> None :

    C++ signature :
        void fail(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def findField (self, *args, **kwargs)-> tuple :
      '''findField( (str)arg1, (int)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple findField(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,int)'''
    ...
    def forceTextAdjust (self, *args, **kwargs)-> None :
      '''forceTextAdjust( (list)arg1) -> None :

    C++ signature :
        void forceTextAdjust(class boost::python::list)'''
    ...
    def getCurUserViewportId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getCurUserViewportId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getCurUserViewportId(class PyDbDatabase {lvalue})'''
    ...
    def getCurVportId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getCurVportId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getCurVportId(class PyDbDatabase {lvalue})'''
    ...
    def getCurVportTableRecordId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getCurVportTableRecordId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getCurVportTableRecordId(class PyDbDatabase {lvalue})'''
    ...
    def getDimAssocId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getDimAssocId( (ObjectId)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getDimAssocId(class PyDbObjectId)'''
    ...
    def getDimAssocIds (self, *args, **kwargs)-> list :
      '''getDimAssocIds( (ObjectId)arg1) -> list :

    C++ signature :
        class boost::python::list getDimAssocIds(class PyDbObjectId)'''
    ...
    def getDimStyleId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getDimStyleId( (Database)arg1, (str)arg2, (str)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId getDimStyleId(class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...

    @staticmethod
    def getDynDimStyleId (db: PyDb.Database)-> PyDb.ObjectId :
      '''                             '''
    ...

    @staticmethod
    def getGeoDataObjId (db: PyDb.Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getMappedFontName (self, *args, **kwargs)-> str :
      '''getMappedFontName( (str)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getMappedFontName(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getProxyInfo (self, *args, **kwargs)-> tuple :
      '''getProxyInfo( (DbObject)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getProxyInfo(class PyDbObject)'''
    ...
    def getReservedString (self, *args, **kwargs)-> str :
      '''getReservedString( (ReservedStringEnumType)arg1, (bool)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getReservedString(enum AcDb::reservedStringEnumType,bool)'''
    ...
    def getSummaryInfo (self, *args, **kwargs)-> PyDb.DatabaseSummaryInfo :
      '''getSummaryInfo( (Database)arg1) -> DatabaseSummaryInfo :

    C++ signature :
        class PyDbDatabaseSummaryInfo getSummaryInfo(class PyDbDatabase {lvalue})'''
    ...
    def getUnitsConversion (self, *args, **kwargs)-> float :
      '''getUnitsConversion( (UnitsValue)arg1, (UnitsValue)arg2) -> float :

    C++ signature :
        double getUnitsConversion(enum AcDb::UnitsValue,enum AcDb::UnitsValue)'''
    ...
    def getViewportVisualStyle (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getViewportVisualStyle() -> ObjectId :

    C++ signature :
        class PyDbObjectId getViewportVisualStyle()'''
    ...
    def handEnt (self, *args, **kwargs)-> PyDb.ObjectId :
      '''handEnt( (str)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId handEnt(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def hasGeoData (self, *args, **kwargs)-> bool :
      '''hasGeoData( (Database)arg1) -> bool :

    C++ signature :
        bool hasGeoData(class PyDbDatabase {lvalue})'''
    ...
    def inters (self, *args, **kwargs)-> PyGe.Point3d :
      '''inters( (Point3d)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (int)arg5) -> Point3d :

    C++ signature :
        class AcGePoint3d inters(class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,int)'''
    ...
    def isReservedString (self, *args, **kwargs)-> bool :
      '''isReservedString( (str)arg1, (ReservedStringEnumType)arg2) -> bool :

    C++ signature :
        bool isReservedString(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,enum AcDb::reservedStringEnumType)'''
    ...
    def loadLineTypeFile (self, *args, **kwargs)-> None :
      '''loadLineTypeFile( (str)arg1, (str)arg2, (Database)arg3) -> None :

    C++ signature :
        void loadLineTypeFile(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase {lvalue})'''
    ...
    def loadMlineStyleFile (self, *args, **kwargs)-> None :
      '''loadMlineStyleFile( (str)arg1, (str)arg2) -> None :

    C++ signature :
        void loadMlineStyleFile(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def namedObjDict (self, *args, **kwargs)-> PyDb.ObjectId :
      '''namedObjDict() -> ObjectId :

    C++ signature :
        class PyDbObjectId namedObjDict()'''
    ...

    @staticmethod
    def openDbEntities (ids: list[PyDb.ObjectId],mode: OpenMode=kForRead,erased: bool=False)-> list :
      '''                             '''
    ...
    def openDbEntity (self, *args, **kwargs)-> PyDb.Entity :
      '''openDbEntity( (ObjectId)arg1, (OpenMode)arg2, (bool)arg3) -> Entity :

    C++ signature :
        class PyDbEntity openDbEntity(class PyDbObjectId,enum AcDb::OpenMode,bool)'''
    ...
    def openDbObject (self, *args, **kwargs)-> PyDb.DbObject :
      '''openDbObject( (ObjectId)arg1, (OpenMode)arg2, (bool)arg3) -> DbObject :

    C++ signature :
        class PyDbObject openDbObject(class PyDbObjectId,enum AcDb::OpenMode,bool)'''
    ...

    @staticmethod
    def openDbObjects (ids: list[PyDb.ObjectId],mode: OpenMode=kForRead,erased: bool=False)-> list :
      '''                             '''
    ...
    def postDimAssoc (self, *args, **kwargs)-> PyDb.ObjectId :
      '''postDimAssoc( (ObjectId)arg1, (DimAssoc)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId postDimAssoc(class PyDbObjectId,class PyDbDimAssoc {lvalue})

postDimAssoc( (ObjectId)arg1, (DimAssoc)arg2, (bool)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId postDimAssoc(class PyDbObjectId,class PyDbDimAssoc {lvalue},bool)'''
    ...
    def putSummaryInfo (self, *args, **kwargs)-> None :
      '''putSummaryInfo( (DatabaseSummaryInfo)arg1, (Database)arg2) -> None :

    C++ signature :
        void putSummaryInfo(class PyDbDatabaseSummaryInfo {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def queueAnnotationEntitiesForRegen (self, *args, **kwargs)-> None :
      '''queueAnnotationEntitiesForRegen( (Database)arg1) -> None :

    C++ signature :
        void queueAnnotationEntitiesForRegen(class PyDbDatabase {lvalue})'''
    ...
    def queueForRegen (self, *args, **kwargs)-> int :
      '''queueForRegen( (list)arg1) -> int :

    C++ signature :
        int queueForRegen(class boost::python::list)'''
    ...
    def regApp (self, *args, **kwargs)-> bool :
      '''regApp( (str)arg1) -> bool :

    C++ signature :
        bool regApp(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def reloadXrefs (self, *args, **kwargs)-> None :
      '''reloadXrefs( (Core)arg1, (Database)arg2, (list)arg3) -> None :

    C++ signature :
        void reloadXrefs(class DbCore {lvalue},class PyDbDatabase {lvalue},class boost::python::list)

reloadXrefs( (Core)arg1, (Database)arg2, (list)arg3, (bool)arg4) -> None :

    C++ signature :
        void reloadXrefs(class DbCore {lvalue},class PyDbDatabase {lvalue},class boost::python::list,bool)'''
    ...
    def resbufTest (self, *args, **kwargs)-> list :
      '''resbufTest( (list)arg1) -> list :

    C++ signature :
        class boost::python::list resbufTest(class boost::python::list)'''
    ...
    def rtos (self, *args, **kwargs)-> str :
      '''rtos( (float)arg1, (int)arg2, (int)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > rtos(double,int,int)'''
    ...
    def snValid (self, *args, **kwargs)-> bool :
      '''snValid( (str)arg1, (int)arg2) -> bool :

    C++ signature :
        bool snValid(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,int)'''
    ...
    def symUtil (self, *args, **kwargs)-> PyDb.SymUtilServices :
      '''symUtil() -> SymUtilServices :

    C++ signature :
        class PyDbSymUtilServices symUtil()'''
    ...
    def tblNext (self, *args, **kwargs)-> list :
      '''tblNext( (str)arg1, (int)arg2) -> list :

    C++ signature :
        class boost::python::list tblNext(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,int)'''
    ...
    def tblObjName (self, *args, **kwargs)-> PyDb.ObjectId :
      '''tblObjName( (str)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId tblObjName(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def tblSearch (self, *args, **kwargs)-> list :
      '''tblSearch( (str)arg1, (str)arg2, (int)arg3) -> list :

    C++ signature :
        class boost::python::list tblSearch(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,int)'''
    ...
    def textFind (self, *args, **kwargs)-> list :
      '''textFind( (Database)arg1, (str)arg2) -> list :

    C++ signature :
        class boost::python::list textFind(class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

textFind( (Database)arg1, (str)arg2, (str)arg3, (int)arg4, (list)arg5) -> list :

    C++ signature :
        class boost::python::list textFind(class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned char,class boost::python::list)'''
    ...
    def transactionManager (self, *args, **kwargs)-> PyAp.TransactionManager :
      '''transactionManager() -> TransactionManager :

    C++ signature :
        class PyDbTransactionManager transactionManager()'''
    ...
    def ucs2Wcs (self, *args, **kwargs)-> bool :
      '''ucs2Wcs( (Point3d)arg1, (Point3d)arg2) -> bool :

    C++ signature :
        bool ucs2Wcs(class AcGePoint3d,class AcGePoint3d {lvalue})

ucs2Wcs( (Vector3d)arg1, (Vector3d)arg2) -> bool :

    C++ signature :
        bool ucs2Wcs(class AcGeVector3d,class AcGeVector3d {lvalue})'''
    ...
    def ucsMatrix (self, *args, **kwargs)-> PyGe.Matrix3d :
      '''ucsMatrix( (Database)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d ucsMatrix(class PyDbDatabase {lvalue})'''
    ...
    def unloadXrefs (self, *args, **kwargs)-> None :
      '''unloadXrefs( (Database)arg1, (list)arg2) -> None :

    C++ signature :
        void unloadXrefs(class PyDbDatabase {lvalue},class boost::python::list)

unloadXrefs( (Database)arg1, (list)arg2, (bool)arg3) -> None :

    C++ signature :
        void unloadXrefs(class PyDbDatabase {lvalue},class boost::python::list,bool)'''
    ...
    def updateDimension (self, *args, **kwargs)-> None :
      '''updateDimension( (ObjectId)arg1) -> None :

    C++ signature :
        void updateDimension(class PyDbObjectId)'''
    ...
    def validateCustomSummaryInfoKey (self, *args, **kwargs)-> bool :
      '''validateCustomSummaryInfoKey( (str)arg1, (DatabaseSummaryInfo)arg2) -> bool :

    C++ signature :
        bool validateCustomSummaryInfoKey(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabaseSummaryInfo {lvalue})'''
    ...
    def wcs2Ecs (self, *args, **kwargs)-> bool :
      '''wcs2Ecs( (Point3d)arg1, (Vector3d)arg2, (Point3d)arg3) -> bool :

    C++ signature :
        bool wcs2Ecs(class AcGePoint3d,class AcGeVector3d,class AcGePoint3d {lvalue})

wcs2Ecs( (Vector3d)arg1, (Vector3d)arg2, (Vector3d)arg3) -> bool :

    C++ signature :
        bool wcs2Ecs(class AcGeVector3d,class AcGeVector3d,class AcGeVector3d {lvalue})'''
    ...
    def wcs2Ucs (self, *args, **kwargs)-> bool :
      '''wcs2Ucs( (Point3d)arg1, (Point3d)arg2) -> bool :

    C++ signature :
        bool wcs2Ucs(class AcGePoint3d,class AcGePoint3d {lvalue})

wcs2Ucs( (Vector3d)arg1, (Vector3d)arg2) -> bool :

    C++ signature :
        bool wcs2Ucs(class AcGeVector3d,class AcGeVector3d {lvalue})'''
    ...

class Curve:
    def __init__ (self: Curve,id: ObjectId,mode: OpenMode=kForRead,erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Curve :
      '''                             '''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Curve :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def createFromAcGeCurve (curve: PyGe.Curve3d,normal: PyGe.Vector3d = kZAxis,tol: Tol = default)-> PyDb.Curve :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> None :
      '''extend( (Curve)arg1, (float)arg2) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getAcGeCurve (self: Curve,tol: Tol = default)-> PyGe.Curve3d :
      '''                             '''
    ...
    def getArea (self: Curve)-> float :
      '''                             '''
    ...
    def getClosestPointTo (self: Curve,point3d: PyGe.Point3d,direction: PyGe.Vector3d=None,extend: bool=False)-> PyGe.Point3d :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDistAtParam (self: Curve,param: float)-> float :
      '''                             '''
    ...
    def getDistAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEndParam (self: Curve)-> float :
      '''                             '''
    ...
    def getEndPoint (self: Curve)-> PyGe.Point3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self: Curve,param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getOffsetCurves (self: Curve,dist: float)-> list :
      '''                             '''
    ...
    def getOffsetCurvesGivenPlaneNormal (self: Curve,normal: PyGe.Vector3d,dist: float)-> list :
      '''                             '''
    ...
    def getOrthoProjectedCurve (self: Curve,plane: PyGe.Plane)-> PyDb.Curve :
      '''                             '''
    ...
    def getParamAtDist (self: Curve,dist: float)-> float :
      '''                             '''
    ...
    def getParamAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getPointAtDist (self: Curve,dist: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getPointAtParam (self: Curve,param: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getProjectedCurve (self: Curve,plane: PyGe.Plane,projDir: PyGe.Vector3d)-> PyDb.Curve :
      '''                             '''
    ...
    def getSecondDeriv (self: Curve,param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getSpline (self: Curve)-> PyDb.Spline :
      '''                             '''
    ...
    def getSplitCurves (self: Curve,paramsOrPoints: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParam (self: Curve,param: float)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParams (self: Curve,params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoint (self: Curve,point: PyGe.Point3d)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoints (self: Curve,points: list)-> list :
      '''                             '''
    ...
    def getStartParam (self: Curve)-> float :
      '''                             '''
    ...
    def getStartPoint (self: Curve)-> PyGe.Point3d :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isClosed (self: Curve)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPeriodic (self: Curve)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def reverseCurve (self: Curve)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setFromAcGeCurve (self: Curve,curve: PyGe.Curve3d,normal: PyGe.Vector3d = kZAxis,tol: Tol = default)-> None :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class Database:
    def UCSTableId (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def __init__ (self: Database,buildDefaultDrawing : bool=True,noDocument: bool=False)-> None :
      '''                             '''
    ...
    def abortDeepClone (self: Database,idmap:PyDb.IdMapping)-> None :
      '''                             '''
    ...
    def addObject (self: Database,object : PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def addReactor (self: Database,reactor : PyDb.DatabaseReactor)-> None :
      '''                             '''
    ...
    def addToBlock (self: Database,btrid : PyDb.ObjectId,entity : PyDb.Entity | list[PyDb.Entity])-> PyDb.ObjectId :
      '''                             '''
    ...
    def addToModelspace (self: Database,entity : PyDb.Entity | list[PyDb.Entity])-> PyDb.ObjectId :
      '''                             '''
    ...
    def angbase (self: Database)-> float :
      '''                             '''
    ...
    def angdir (self: Database)-> bool :
      '''                             '''
    ...
    def annoAllVisible (self: Database)-> bool :
      '''                             '''
    ...
    def annotativeDwg (self: Database)-> bool :
      '''                             '''
    ...
    def approxNumObjects (self: Database)-> int :
      '''                             '''
    ...
    def attmode (self: Database)-> int :
      '''                             '''
    ...
    def aunits (self: Database)-> int :
      '''                             '''
    ...
    def auprec (self: Database)-> int :
      '''                             '''
    ...
    def blipmode (self: Database)-> bool :
      '''                             '''
    ...
    def blockTableId (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def byBlockLinetype (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def byBlockMaterial (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def byLayerLinetype (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def byLayerMaterial (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def cDynDisplayMode (self: Database)-> int :
      '''                             '''
    ...
    def cameraDisplay (self: Database)-> bool :
      '''                             '''
    ...
    def cameraHeight (self: Database)-> float :
      '''                             '''
    ...
    def celtscale (self: Database)-> float :
      '''                             '''
    ...
    def celtype (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def celweight (self: Database)-> PyDb.LineWeight :
      '''                             '''
    ...
    def chamfera (self: Database)-> float :
      '''                             '''
    ...
    def chamferb (self: Database)-> float :
      '''                             '''
    ...
    def chamferc (self: Database)-> float :
      '''                             '''
    ...
    def chamferd (self: Database)-> float :
      '''                             '''
    ...
    def classDxfName (self: Database,pClass : PyRx.RxClass)-> str :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def clayer (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def closeInput (self: Database,close : bool)-> None :
      '''                             '''
    ...
    def cmaterial (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def cmljust (self: Database)-> int :
      '''                             '''
    ...
    def cmlscale (self: Database)-> float :
      '''                             '''
    ...
    def cmlstyleID (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def colorDictionaryId (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def continuousLinetype (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def coords (self: Database)-> int :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def countEmptyObjects (self: Database,flag : int)-> int :
      '''                             '''
    ...
    def currentSpaceId (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def deepCloneObjects (self: Database,ids:list[PyDb.ObjectId],owner:PyDb.ObjectId,idmap:PyDb.IdMapping,deferXlation:bool=False)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def detailViewStyle (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def detailViewStyleDictionaryId (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimAssoc (self: Database)-> int :
      '''                             '''
    ...
    def dimStyleTableId (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimapost (self: Database)-> str :
      '''                             '''
    ...
    def dimaso (self: Database)-> bool :
      '''                             '''
    ...
    def dimblk (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimblk1 (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimblk2 (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimfit (self: Database)-> int :
      '''                             '''
    ...
    def dimpost (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimsho (self: Database)-> bool :
      '''                             '''
    ...
    def dimstyle (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimunit (self: Database)-> int :
      '''                             '''
    ...
    def disablePartialOpen (self: Database)-> None :
      '''                             '''
    ...
    def disableUndoRecording (self: Database,disable : bool)-> None :
      '''                             '''
    ...
    def dispSilh (self: Database)-> bool :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def dragVisStyle (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dragmode (self: Database)-> int :
      '''                             '''
    ...
    def drawOrderCtl (self: Database)-> int :
      '''                             '''
    ...
    def dwfframe (self: Database)-> int :
      '''                             '''
    ...
    def dwgFileWasSavedByAutodeskSoftware (self: Database)-> bool :
      '''                             '''
    ...
    def dxfIn (self: Database,filename : str)-> None :
      '''                             '''
    ...
    def dxfOut (self: Database,filename : str)-> None :
      '''                             '''
    ...
    def elevation (self: Database)-> float :
      '''                             '''
    ...
    def eraseEmptyObjects (self: Database,flag : int)-> int :
      '''                             '''
    ...
    def extmax (self: Database)-> PyGe.Point3d :
      '''                             '''
    ...
    def extmin (self: Database)-> PyGe.Point3d :
      '''                             '''
    ...
    def facetres (self: Database)-> float :
      '''                             '''
    ...
    def filletrad (self: Database)-> float :
      '''                             '''
    ...
    def fillmode (self: Database)-> bool :
      '''                             '''
    ...
    def forceWblockDatabaseCopy (self: Database)-> None :
      '''                             '''
    ...
    def geoCoordinateSystemId (self: Database)-> str :
      '''                             '''
    ...
    def geoMarkerVisibility (self: Database)-> bool :
      '''                             '''
    ...
    def get3dDwfPrec (self: Database)-> float :
      '''                             '''
    ...
    def getCePlotStyleNameId (self: Database)-> PyDb.PlotStyleNameType :
      '''                             '''
    ...
    def getDimstyleParentId (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFilename (self: Database)-> str :
      '''                             '''
    ...

    @staticmethod
    def getNearestLineWeight (weight : int)-> PyDb.LineWeight :
      '''                             '''
    ...
    def getObjectId (self: Database,createIfNotFound : bool,objHandle : Handle,xRefId : int=0)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getViewportArray (self: Database)-> list :
      '''                             '''
    ...
    def getVisualStyleList (self: Database)-> list :
      '''                             '''
    ...
    def globalMaterial (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def groupDictionaryId (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def haloGap (self: Database)-> int :
      '''                             '''
    ...
    def handseed (self: Database)-> PyDb.Handle :
      '''                             '''
    ...
    def hasClass (self: Database,pClass : PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def hideText (self: Database)-> int :
      '''                             '''
    ...
    def hpInherit (self: Database)-> bool :
      '''                             '''
    ...
    def hpOrigin (self: Database)-> PyGe.Point2d :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def insert (self, *args, **kwargs)-> None :
      '''insert( (Database)arg1, (ObjectId)arg2, (str)arg3, (Database)arg4, (bool)arg5) -> None :

    C++ signature :
        void insert(class PyDbDatabase {lvalue},class PyDbObjectId {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase {lvalue},bool)

insert( (Database)arg1, (ObjectId)arg2, (str)arg3, (str)arg4, (Database)arg5, (bool)arg6) -> None :

    C++ signature :
        void insert(class PyDbDatabase {lvalue},class PyDbObjectId {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase {lvalue},bool)

insert( (Database)arg1, (Matrix3d)arg2, (Database)arg3, (bool)arg4) -> None :

    C++ signature :
        void insert(class PyDbDatabase {lvalue},class AcGeMatrix3d,class PyDbDatabase {lvalue},bool)'''
    ...
    def insunits (self: Database)-> PyDb.UnitsValue :
      '''                             '''
    ...
    def interfereVpVisStyle (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def intersectColor (self: Database)-> int :
      '''                             '''
    ...
    def intersectDisplay (self: Database)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAppRegistered (self: Database,pszAppName : str)-> bool :
      '''                             '''
    ...
    def isBeingDestroyed (self: Database)-> bool :
      '''                             '''
    ...
    def isEMR (self: Database)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...

    @staticmethod
    def isObjectNonPersistent (id : ObjectId)-> bool :
      '''                             '''
    ...
    def isPartiallyOpened (self: Database)-> bool :
      '''                             '''
    ...
    def isPucsOrthographic (self: Database,orthoView : OrthographicView)-> bool :
      '''                             '''
    ...
    def isUcsOrthographic (self: Database,orthoView : OrthographicView)-> bool :
      '''                             '''
    ...

    @staticmethod
    def isValidLineWeight (weight : int)-> bool :
      '''                             '''
    ...
    def isolines (self: Database)-> int :
      '''                             '''
    ...
    def joinStyle (self: Database)-> PyDb.JoinStyle :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def lastSavedAsMaintenanceVersion (self: Database)-> int :
      '''                             '''
    ...
    def lastSavedAsVersion (self: Database)-> int :
      '''                             '''
    ...
    def latitude (self: Database)-> float :
      '''                             '''
    ...
    def layerEval (self: Database)-> int :
      '''                             '''
    ...
    def layerNotify (self: Database)-> int :
      '''                             '''
    ...
    def layerTableId (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def layerZero (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def layoutDictionaryId (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lensLength (self: Database)-> float :
      '''                             '''
    ...
    def lightGlyphDisplay (self: Database)-> int :
      '''                             '''
    ...
    def lightingUnits (self: Database)-> int :
      '''                             '''
    ...
    def lightsInBlocks (self: Database)-> bool :
      '''                             '''
    ...
    def limcheck (self: Database)-> bool :
      '''                             '''
    ...
    def limmax (self: Database)-> PyGe.Point2d :
      '''                             '''
    ...
    def limmin (self: Database)-> PyGe.Point2d :
      '''                             '''
    ...
    def lineWeightDisplay (self: Database)-> bool :
      '''                             '''
    ...
    def linetypeTableId (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def loadLineTypeFile (self: Database,ltn : str,filename : str)-> None :
      '''                             '''
    ...
    def loftAng1 (self: Database)-> float :
      '''                             '''
    ...
    def loftAng2 (self: Database)-> float :
      '''                             '''
    ...
    def loftMag1 (self: Database)-> float :
      '''                             '''
    ...
    def loftMag2 (self: Database)-> float :
      '''                             '''
    ...
    def loftNormals (self: Database)-> int :
      '''                             '''
    ...
    def loftParam (self: Database)-> int :
      '''                             '''
    ...
    def longitude (self: Database)-> float :
      '''                             '''
    ...
    def ltscale (self: Database)-> float :
      '''                             '''
    ...
    def lunits (self: Database)-> int :
      '''                             '''
    ...
    def luprec (self: Database)-> int :
      '''                             '''
    ...
    def mLStyleDictionaryId (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def maintenanceReleaseVersion (self: Database)-> int :
      '''                             '''
    ...

    @staticmethod
    def markObjectNonPersistent (id : ObjectId,value : bool)-> None :
      '''                             '''
    ...
    def materialDictionaryId (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def maxactvp (self: Database)-> int :
      '''                             '''
    ...
    def measurement (self: Database)-> PyDb.MeasurementValue :
      '''                             '''
    ...
    def mirrtext (self: Database)-> bool :
      '''                             '''
    ...
    def mleaderStyleDictionaryId (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def mleaderscale (self: Database)-> float :
      '''                             '''
    ...
    def mleaderstyle (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def modelSpaceId (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def msOleScale (self: Database)-> float :
      '''                             '''
    ...
    def msltscale (self: Database)-> bool :
      '''                             '''
    ...
    def namedObjectsDictionaryId (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def needsRecovery (self: Database)-> bool :
      '''                             '''
    ...
    def northDirection (self: Database)-> float :
      '''                             '''
    ...
    def numberOfSaves (self: Database)-> int :
      '''                             '''
    ...
    def objectContextManager (self: Database)-> PyDb.ObjectContextManager :
      '''                             '''
    ...
    def objectIds (self: Database,desc:PyRx.RxClass=PyDb.DbObject)-> list :
      '''                             '''
    ...
    def obscuredColor (self: Database)-> int :
      '''                             '''
    ...
    def obscuredLineType (self: Database)-> int :
      '''                             '''
    ...
    def oleStartUp (self: Database)-> bool :
      '''                             '''
    ...
    def originalFileMaintenanceVersion (self: Database)-> int :
      '''                             '''
    ...
    def originalFileName (self: Database)-> str :
      '''                             '''
    ...
    def originalFileSavedByMaintenanceVersion (self: Database)-> int :
      '''                             '''
    ...
    def originalFileSavedByVersion (self: Database)-> int :
      '''                             '''
    ...
    def originalFileVersion (self: Database)-> int :
      '''                             '''
    ...
    def orthomode (self: Database)-> bool :
      '''                             '''
    ...
    def paperSpaceVportId (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def pdfframe (self: Database)-> int :
      '''                             '''
    ...
    def pdmode (self: Database)-> int :
      '''                             '''
    ...
    def pdsize (self: Database)-> float :
      '''                             '''
    ...
    def pextmax (self: Database)-> PyGe.Point3d :
      '''                             '''
    ...
    def pextmin (self: Database)-> PyGe.Point3d :
      '''                             '''
    ...
    def pickstyle (self: Database)-> int :
      '''                             '''
    ...
    def pinsbase (self: Database)-> PyGe.Point3d :
      '''                             '''
    ...
    def plimcheck (self: Database)-> bool :
      '''                             '''
    ...
    def plimmax (self: Database)-> PyGe.Point2d :
      '''                             '''
    ...
    def plimmin (self: Database)-> PyGe.Point2d :
      '''                             '''
    ...
    def plineEllipse (self: Database)-> bool :
      '''                             '''
    ...
    def plinegen (self: Database)-> bool :
      '''                             '''
    ...
    def plinewid (self: Database)-> float :
      '''                             '''
    ...
    def plotSettingsDictionaryId (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleMode (self: Database)-> bool :
      '''                             '''
    ...
    def plotStyleNameDictionaryId (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def previewType (self: Database)-> int :
      '''                             '''
    ...
    def psltscale (self: Database)-> bool :
      '''                             '''
    ...
    def psolHeight (self: Database)-> float :
      '''                             '''
    ...
    def psolWidth (self: Database)-> float :
      '''                             '''
    ...
    def pucsBase (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def pucsname (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def pucsorg (self: Database)-> PyGe.Point3d :
      '''                             '''
    ...
    def pucsxdir (self: Database)-> PyGe.Vector3d :
      '''                             '''
    ...
    def pucsydir (self: Database)-> PyGe.Vector3d :
      '''                             '''
    ...
    def purge (self: Database)-> list :
      '''                             '''
    ...
    def qtextmode (self: Database)-> bool :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def readDwgFile (self: Database,fileName:str,mode:int=kForReadAndReadShare,bAllowCPConversion:bool=False,password:str=empty)-> None :
      '''                             '''
    ...
    def reclaimMemoryFromErasedObjects (self: Database,ids : list[PyDb.ObjectId])-> None :
      '''                             '''
    ...
    def regAppTableId (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def regenmode (self: Database)-> bool :
      '''                             '''
    ...
    def registerApp (self: Database,appName : str)-> None :
      '''                             '''
    ...
    def removeReactor (self: Database,reactor : PyDb.DatabaseReactor)-> None :
      '''                             '''
    ...
    def resetTimes (self: Database)-> None :
      '''                             '''
    ...
    def restoreForwardingXrefSymbols (self: Database)-> None :
      '''                             '''
    ...
    def restoreOriginalXrefSymbols (self: Database)-> None :
      '''                             '''
    ...
    def retainOriginalThumbnailBitmap (self: Database)-> bool :
      '''                             '''
    ...
    def saveAs (self: Database,filename: str,bBakAndRename: bool = False,dwgVer: PyDb.DwgVersion = kDHL_CURRENT)-> None :
      '''                             '''
    ...
    def saveproxygraphics (self: Database)-> int :
      '''                             '''
    ...
    def scaleListDictionaryId (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def sectionViewStyle (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def sectionViewStyleDictionaryId (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def set3dDwfPrec (self: Database,dwfPrec : float)-> None :
      '''                             '''
    ...
    def setAngbase (self: Database,angle : float)-> None :
      '''                             '''
    ...
    def setAngdir (self: Database,dir : bool)-> None :
      '''                             '''
    ...
    def setAnnoAllVisible (self: Database,allvis : bool)-> None :
      '''                             '''
    ...
    def setAttdia (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setAttmode (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setAttreq (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setAunits (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setAuprec (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setBlipmode (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setCDynDisplayMode (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setCameraDisplay (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setCameraHeight (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setCannoscale (self: Database,val : AnnotationScale)-> None :
      '''                             '''
    ...
    def setCePlotStyleName (self: Database,val : PlotStyleNameType,id : ObjectId)-> None :
      '''                             '''
    ...
    def setCecolor (self: Database,val : Color)-> None :
      '''                             '''
    ...
    def setCeltscale (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setCeltype (self: Database,val : ObjectId)-> None :
      '''                             '''
    ...
    def setCelweight (self: Database,val : LineWeight)-> None :
      '''                             '''
    ...
    def setCetransparency (self: Database,val : Transparency)-> None :
      '''                             '''
    ...
    def setChamfera (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setChamferb (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setChamferc (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setChamferd (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setClayer (self: Database,val : ObjectId)-> None :
      '''                             '''
    ...
    def setCmaterial (self: Database,val : ObjectId)-> None :
      '''                             '''
    ...
    def setCmljust (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setCmlscale (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setCmlstyleID (self: Database,val : ObjectId)-> None :
      '''                             '''
    ...
    def setCoords (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setCshadow (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setDelUsedObj (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setDgnframe (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setDimAssoc (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setDimaso (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setDimfit (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setDimsho (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setDimstyle (self: Database,val : ObjectId)-> None :
      '''                             '''
    ...
    def setDimstyleData (self: Database,val : DimStyleTableRecord | ObjectId)-> None :
      '''                             '''
    ...
    def setDimunit (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setDispSilh (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setDragVisStyle (self: Database,val : ObjectId)-> None :
      '''                             '''
    ...
    def setDragmode (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setDrawOrderCtl (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setDwfframe (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setElevation (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setEndCaps (self: Database,val : EndCaps)-> None :
      '''                             '''
    ...
    def setExtmax (self: Database,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setExtmin (self: Database,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setFacetres (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setFilletrad (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setFillmode (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setFingerprintGuid (self: Database,guid : str)-> None :
      '''                             '''
    ...
    def setFullSaveRequired (self: Database)-> None :
      '''                             '''
    ...
    def setGeoMarkerVisibility (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setHaloGap (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setHandseed (self: Database,val : Handle)-> None :
      '''                             '''
    ...
    def setHideText (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setHpInherit (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setHpOrigin (self: Database,val : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setHyperlinkBase (self: Database,val : str)-> None :
      '''                             '''
    ...
    def setIndexctl (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setInsbase (self: Database,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setInsunits (self: Database,val : UnitsValue)-> None :
      '''                             '''
    ...
    def setInterfereColor (self: Database,val : Color)-> None :
      '''                             '''
    ...
    def setInterfereObjVisStyle (self: Database,val : ObjectId)-> None :
      '''                             '''
    ...
    def setInterfereVpVisStyle (self: Database,val : ObjectId)-> None :
      '''                             '''
    ...
    def setIntersectColor (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setIntersectDisplay (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setIsolines (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setJoinStyle (self: Database,val : JoinStyle)-> None :
      '''                             '''
    ...
    def setLatitude (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setLayerEval (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setLayerNotify (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setLensLength (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setLightGlyphDisplay (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setLightingUnits (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setLightsInBlocks (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setLimcheck (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setLimmax (self: Database,val : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setLimmin (self: Database,val : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setLineWeightDisplay (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setLoftAng1 (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setLoftAng2 (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setLoftMag1 (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setLoftMag2 (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setLoftNormals (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setLoftParam (self: Database,flags : int)-> None :
      '''                             '''
    ...
    def setLongitude (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setLtscale (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setLunits (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setLuprec (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setMLeaderscale (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setMLeaderstyle (self: Database,val : ObjectId)-> None :
      '''                             '''
    ...
    def setMaxactvp (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setMeasurement (self: Database,val : MeasurementValue)-> None :
      '''                             '''
    ...
    def setMirrtext (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setMsOleScale (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setMsltscale (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setNorthDirection (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setObscuredColor (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setObscuredLineType (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setOleStartUp (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setOrthomode (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setPdfframe (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setPdmode (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setPdsize (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setPelevation (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setPextmax (self: Database,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPextmin (self: Database,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPickstyle (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setPinsbase (self: Database,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPlimcheck (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setPlimmax (self: Database,val : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setPlimmin (self: Database,val : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setPlineEllipse (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setPlinegen (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setPlinewid (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setPreviewType (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setProjectName (self: Database,val : str)-> None :
      '''                             '''
    ...
    def setPsltscale (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setPsolHeight (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setPsolWidth (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setPucs (self: Database,ucsOrigin : PyGe.Point3d,ucsXDir : PyGe.Vector3d,ucsYDir : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setPucsBase (self: Database,ucsid : ObjectId)-> None :
      '''                             '''
    ...
    def setPucsname (self: Database,ucsrec : ObjectId)-> None :
      '''                             '''
    ...
    def setQtextmode (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setRealWorldScale (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setRegenmode (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setRetainOriginalThumbnailBitmap (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setSaveproxygraphics (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setSectionViewStyle (self: Database,val : ObjectId)-> None :
      '''                             '''
    ...
    def setShadedge (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setShadedif (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setShadowPlaneLocation (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setShowHist (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setSketchinc (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setSkpoly (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setSolidHist (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setSortEnts (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setSplframe (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setSplinesegs (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setSplinetype (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setStepSize (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setStepsPerSec (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setStyleSheet (self: Database,val : str)-> None :
      '''                             '''
    ...
    def setSurftab1 (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setSurftab2 (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setSurftype (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setSurfu (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setSurfv (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setTStackAlign (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setTStackSize (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setTablestyle (self: Database,val : ObjectId)-> None :
      '''                             '''
    ...
    def setTextsize (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setTextstyle (self: Database,val : ObjectId)-> None :
      '''                             '''
    ...
    def setThickness (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setTilemode (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setTimeZone (self: Database,val : TimeZone)-> None :
      '''                             '''
    ...
    def setTimeZoneAsUtcOffset (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setTracewid (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setTreedepth (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setUcs (self: Database,ucsOrigin : PyGe.Point3d,ucsXDir : PyGe.Vector3d,ucsYDir : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setUcsBase (self: Database,ucsid : ObjectId)-> None :
      '''                             '''
    ...
    def setUcsname (self: Database,ucsrecId : ObjectId)-> None :
      '''                             '''
    ...
    def setUnitmode (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setUpdateThumbnail (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setUseri1 (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setUseri2 (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setUseri3 (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setUseri4 (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setUseri5 (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setUserr1 (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setUserr2 (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setUserr3 (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setUserr4 (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setUserr5 (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setUsrtimer (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setVersionGuid (self: Database,val : str)-> None :
      '''                             '''
    ...
    def setViewportScaleDefault (self: Database,val : float)-> None :
      '''                             '''
    ...
    def setVisretain (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setWorldPucsBaseOrigin (self: Database,ucsOrigin : PyGe.Point3d,orthoView : OrthographicView)-> None :
      '''                             '''
    ...
    def setWorldUcsBaseOrigin (self: Database,ucsOrigin : PyGe.Point3d,orthoView : OrthographicView)-> None :
      '''                             '''
    ...
    def setWorldview (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def setXclipFrame (self: Database,val : int)-> None :
      '''                             '''
    ...
    def setXrefEditEnabled (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def shadedge (self: Database)-> int :
      '''                             '''
    ...
    def shadedif (self: Database)-> int :
      '''                             '''
    ...
    def shadowPlaneLocation (self: Database)-> float :
      '''                             '''
    ...
    def showHist (self: Database)-> int :
      '''                             '''
    ...
    def sketchinc (self: Database)-> float :
      '''                             '''
    ...
    def skpoly (self: Database)-> bool :
      '''                             '''
    ...
    def solidHist (self: Database)-> int :
      '''                             '''
    ...
    def sortEnts (self: Database)-> int :
      '''                             '''
    ...
    def splframe (self: Database)-> bool :
      '''                             '''
    ...
    def splinesegs (self: Database)-> int :
      '''                             '''
    ...
    def splinetype (self: Database)-> int :
      '''                             '''
    ...
    def stepSize (self: Database)-> float :
      '''                             '''
    ...
    def stepsPerSec (self: Database)-> float :
      '''                             '''
    ...
    def surftab1 (self: Database)-> int :
      '''                             '''
    ...
    def surftab2 (self: Database)-> int :
      '''                             '''
    ...
    def surftype (self: Database)-> int :
      '''                             '''
    ...
    def surfu (self: Database)-> int :
      '''                             '''
    ...
    def surfv (self: Database)-> int :
      '''                             '''
    ...
    def tableStyleDictionaryId (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def tablestyle (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def tdcreate (self: Database)-> PyDb.Date :
      '''                             '''
    ...
    def tdindwg (self: Database)-> PyDb.Date :
      '''                             '''
    ...
    def tducreate (self: Database)-> PyDb.Date :
      '''                             '''
    ...
    def tdupdate (self: Database)-> PyDb.Date :
      '''                             '''
    ...
    def tdusrtimer (self: Database)-> PyDb.Date :
      '''                             '''
    ...
    def tduupdate (self: Database)-> PyDb.Date :
      '''                             '''
    ...
    def textStyleTableId (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def textsize (self: Database)-> float :
      '''                             '''
    ...
    def textstyle (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def thickness (self: Database)-> float :
      '''                             '''
    ...
    def tileModeLightSynch (self: Database)-> int :
      '''                             '''
    ...
    def tilemode (self: Database)-> bool :
      '''                             '''
    ...
    def timeZone (self: Database)-> PyDb.TimeZone :
      '''                             '''
    ...
    def tracewid (self: Database)-> float :
      '''                             '''
    ...
    def transactionManager (self: Database)-> PyAp.TransactionManager :
      '''                             '''
    ...
    def treedepth (self: Database)-> int :
      '''                             '''
    ...
    def tryGetObjectId (self: Database,createIfNotFound : bool,objHandle : Handle,xRefId : int=0)-> PyDb.ObjectId :
      '''                             '''
    ...
    def tstackalign (self: Database)-> int :
      '''                             '''
    ...
    def tstacksize (self: Database)-> int :
      '''                             '''
    ...
    def ucsBase (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ucsname (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ucsorg (self: Database)-> PyGe.Point3d :
      '''                             '''
    ...
    def ucsxdir (self: Database)-> PyGe.Vector3d :
      '''                             '''
    ...
    def ucsydir (self: Database)-> PyGe.Vector3d :
      '''                             '''
    ...
    def undoRecording (self: Database)-> bool :
      '''                             '''
    ...
    def unitmode (self: Database)-> int :
      '''                             '''
    ...
    def updateDataLink (self: Database,nDir : UpdateDirection,opt : UpdateOption)-> None :
      '''                             '''
    ...
    def updateExt (self: Database,val : bool)-> None :
      '''                             '''
    ...
    def updateThumbnail (self: Database)-> int :
      '''                             '''
    ...
    def useri1 (self: Database)-> int :
      '''                             '''
    ...
    def useri2 (self: Database)-> int :
      '''                             '''
    ...
    def useri3 (self: Database)-> int :
      '''                             '''
    ...
    def useri4 (self: Database)-> int :
      '''                             '''
    ...
    def useri5 (self: Database)-> int :
      '''                             '''
    ...
    def userr1 (self: Database)-> float :
      '''                             '''
    ...
    def userr2 (self: Database)-> float :
      '''                             '''
    ...
    def userr3 (self: Database)-> float :
      '''                             '''
    ...
    def userr4 (self: Database)-> float :
      '''                             '''
    ...
    def userr5 (self: Database)-> float :
      '''                             '''
    ...
    def usrtimer (self: Database)-> bool :
      '''                             '''
    ...
    def viewTableId (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def viewportScaleDefault (self: Database)-> float :
      '''                             '''
    ...
    def viewportTableId (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def visretain (self: Database)-> bool :
      '''                             '''
    ...
    def visualStyleDictionaryId (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def wblock (self, *args, **kwargs)-> None :
      '''wblock( (Database)arg1, (Database)arg2, (list)arg3, (Point3d)arg4, (DuplicateRecordCloning)arg5) -> None :

    C++ signature :
        void wblock(class PyDbDatabase {lvalue},class PyDbDatabase {lvalue},class boost::python::list,class AcGePoint3d,enum AcDb::DuplicateRecordCloning)

wblock( (Database)arg1, (list)arg2, (Point3d)arg3) -> Database :

    C++ signature :
        class PyDbDatabase wblock(class PyDbDatabase {lvalue},class boost::python::list,class AcGePoint3d)

wblock( (Database)arg1 [, (ObjectId)arg2]) -> Database :

    C++ signature :
        class PyDbDatabase wblock(class PyDbDatabase {lvalue} [,class PyDbObjectId])'''
    ...
    def wblockCloneObjects (self: Database,ids:list[PyDb.ObjectId],owner:PyDb.ObjectId,idmap:PyDb.IdMapping,drc:DuplicateRecordCloning,deferXlation:bool=False)-> None :
      '''                             '''
    ...
    def worldPucsBaseOrigin (self: Database,view : OrthographicView)-> PyGe.Point3d :
      '''                             '''
    ...
    def worldUcsBaseOrigin (self: Database,view : OrthographicView)-> PyGe.Point3d :
      '''                             '''
    ...
    def worldview (self: Database)-> bool :
      '''                             '''
    ...
    def xclipFrame (self: Database)-> int :
      '''                             '''
    ...
    def xrefBlockId (self: Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def xrefEditEnabled (self: Database)-> bool :
      '''                             '''
    ...

class DatabaseReactor:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def goodbye (self: DatabaseReactor,db: PyDb.Database)-> None :
      '''                             '''
    ...
    def headerSysVarChanged (self: DatabaseReactor,db: PyDb.Database,name: str,success: bool)-> None :
      '''                             '''
    ...
    def headerSysVarWillChange (self: DatabaseReactor,db: PyDb.Database,name: str)-> None :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def objectAppended (self: DatabaseReactor,db: PyDb.Database,obj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def objectErased (self: DatabaseReactor,db: PyDb.Database,obj: PyDb.DbObject,erased: bool)-> None :
      '''                             '''
    ...
    def objectModified (self: DatabaseReactor,db: PyDb.Database,obj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def objectOpenedForModify (self: DatabaseReactor,db: PyDb.Database,obj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def objectReAppended (self: DatabaseReactor,db: PyDb.Database,obj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def objectUnAppended (self: DatabaseReactor,db: PyDb.Database,obj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def proxyResurrectionCompleted (self: DatabaseReactor,db: PyDb.Database,name: str,ids: list[PyDb.ObjectId])-> None :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...

class DatabaseSummaryInfo:
    def __init__ (self, *args, **kwargs)-> None :
      '''Raises an exception
This class cannot be instantiated from Python'''
    ...
    def addCustomSummaryInfo (self, *args, **kwargs)-> None :
      '''addCustomSummaryInfo( (DatabaseSummaryInfo)arg1, (str)arg2, (str)arg3) -> None :

    C++ signature :
        void addCustomSummaryInfo(class PyDbDatabaseSummaryInfo {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def asDict (self, *args, **kwargs)-> dict :
      '''asDict( (DatabaseSummaryInfo)arg1) -> dict :

    C++ signature :
        class boost::python::dict asDict(class PyDbDatabaseSummaryInfo {lvalue})'''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def deleteCustomSummaryInfo (self, *args, **kwargs)-> None :
      '''deleteCustomSummaryInfo( (DatabaseSummaryInfo)arg1, (int)arg2) -> None :

    C++ signature :
        void deleteCustomSummaryInfo(class PyDbDatabaseSummaryInfo {lvalue},int)

deleteCustomSummaryInfo( (DatabaseSummaryInfo)arg1, (str)arg2) -> None :

    C++ signature :
        void deleteCustomSummaryInfo(class PyDbDatabaseSummaryInfo {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def getAuthor (self, *args, **kwargs)-> str :
      '''getAuthor( (DatabaseSummaryInfo)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getAuthor(class PyDbDatabaseSummaryInfo {lvalue})'''
    ...
    def getComments (self, *args, **kwargs)-> str :
      '''getComments( (DatabaseSummaryInfo)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getComments(class PyDbDatabaseSummaryInfo {lvalue})'''
    ...
    def getCustomSummaryInfo (self, *args, **kwargs)-> tuple :
      '''getCustomSummaryInfo( (DatabaseSummaryInfo)arg1, (str)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple getCustomSummaryInfo(class PyDbDatabaseSummaryInfo {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

getCustomSummaryInfo( (DatabaseSummaryInfo)arg1, (int)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple getCustomSummaryInfo(class PyDbDatabaseSummaryInfo {lvalue},int)'''
    ...
    def getHyperlinkBase (self, *args, **kwargs)-> str :
      '''getHyperlinkBase( (DatabaseSummaryInfo)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getHyperlinkBase(class PyDbDatabaseSummaryInfo {lvalue})'''
    ...
    def getKeywords (self, *args, **kwargs)-> str :
      '''getKeywords( (DatabaseSummaryInfo)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getKeywords(class PyDbDatabaseSummaryInfo {lvalue})'''
    ...
    def getLastSavedBy (self, *args, **kwargs)-> str :
      '''getLastSavedBy( (DatabaseSummaryInfo)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getLastSavedBy(class PyDbDatabaseSummaryInfo {lvalue})'''
    ...
    def getRevisionNumber (self, *args, **kwargs)-> str :
      '''getRevisionNumber( (DatabaseSummaryInfo)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getRevisionNumber(class PyDbDatabaseSummaryInfo {lvalue})'''
    ...
    def getSubject (self, *args, **kwargs)-> str :
      '''getSubject( (DatabaseSummaryInfo)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getSubject(class PyDbDatabaseSummaryInfo {lvalue})'''
    ...
    def getTitle (self, *args, **kwargs)-> str :
      '''getTitle( (DatabaseSummaryInfo)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getTitle(class PyDbDatabaseSummaryInfo {lvalue})'''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def numCustomInfo (self, *args, **kwargs)-> int :
      '''numCustomInfo( (DatabaseSummaryInfo)arg1) -> int :

    C++ signature :
        int numCustomInfo(class PyDbDatabaseSummaryInfo {lvalue})'''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def setAuthor (self, *args, **kwargs)-> None :
      '''setAuthor( (DatabaseSummaryInfo)arg1, (str)arg2) -> None :

    C++ signature :
        void setAuthor(class PyDbDatabaseSummaryInfo {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setComments (self, *args, **kwargs)-> None :
      '''setComments( (DatabaseSummaryInfo)arg1, (str)arg2) -> None :

    C++ signature :
        void setComments(class PyDbDatabaseSummaryInfo {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setCustomSummaryFromDict (self, *args, **kwargs)-> None :
      '''setCustomSummaryFromDict( (DatabaseSummaryInfo)arg1, (dict)arg2) -> None :

    C++ signature :
        void setCustomSummaryFromDict(class PyDbDatabaseSummaryInfo {lvalue},class boost::python::dict {lvalue})'''
    ...
    def setCustomSummaryInfo (self, *args, **kwargs)-> None :
      '''setCustomSummaryInfo( (DatabaseSummaryInfo)arg1, (str)arg2, (str)arg3) -> None :

    C++ signature :
        void setCustomSummaryInfo(class PyDbDatabaseSummaryInfo {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setCustomSummaryInfo( (DatabaseSummaryInfo)arg1, (int)arg2, (str)arg3, (str)arg4) -> None :

    C++ signature :
        void setCustomSummaryInfo(class PyDbDatabaseSummaryInfo {lvalue},int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setHyperlinkBase (self, *args, **kwargs)-> None :
      '''setHyperlinkBase( (DatabaseSummaryInfo)arg1, (str)arg2) -> None :

    C++ signature :
        void setHyperlinkBase(class PyDbDatabaseSummaryInfo {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setKeywords (self, *args, **kwargs)-> None :
      '''setKeywords( (DatabaseSummaryInfo)arg1, (str)arg2) -> None :

    C++ signature :
        void setKeywords(class PyDbDatabaseSummaryInfo {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setLastSavedBy (self, *args, **kwargs)-> None :
      '''setLastSavedBy( (DatabaseSummaryInfo)arg1, (str)arg2) -> None :

    C++ signature :
        void setLastSavedBy(class PyDbDatabaseSummaryInfo {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setRevisionNumber (self, *args, **kwargs)-> None :
      '''setRevisionNumber( (DatabaseSummaryInfo)arg1, (str)arg2) -> None :

    C++ signature :
        void setRevisionNumber(class PyDbDatabaseSummaryInfo {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setSubject (self, *args, **kwargs)-> None :
      '''setSubject( (DatabaseSummaryInfo)arg1, (str)arg2) -> None :

    C++ signature :
        void setSubject(class PyDbDatabaseSummaryInfo {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setTitle (self, *args, **kwargs)-> None :
      '''setTitle( (DatabaseSummaryInfo)arg1, (str)arg2) -> None :

    C++ signature :
        void setTitle(class PyDbDatabaseSummaryInfo {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...

class Date:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...

    @staticmethod
    def className ()-> object :
      '''                             '''
    ...
    def day (self: Date)-> int :
      '''                             '''
    ...
    def getDate (self: Date)-> tuple :
      '''                             '''
    ...
    def getLocalDisplayString (self: Date)-> str :
      '''                             '''
    ...
    def getLocalTime (self: Date)-> None :
      '''                             '''
    ...
    def getTime (self: Date)-> tuple :
      '''                             '''
    ...
    def getUniversalTime (self: Date)-> None :
      '''                             '''
    ...
    def hour (self: Date)-> int :
      '''                             '''
    ...
    def julianDay (self: Date)-> int :
      '''                             '''
    ...
    def julianFraction (self: Date)-> float :
      '''                             '''
    ...
    def localToUniversal (self: Date)-> None :
      '''                             '''
    ...
    def microsecond (self: Date)-> int :
      '''                             '''
    ...
    def millisecond (self: Date)-> int :
      '''                             '''
    ...
    def minute (self: Date)-> int :
      '''                             '''
    ...
    def month (self: Date)-> int :
      '''                             '''
    ...
    def msecsPastMidnight (self: Date)-> int :
      '''                             '''
    ...
    def second (self: Date)-> int :
      '''                             '''
    ...
    def setDate (self: Date,month : int,day : int,year : int)-> None :
      '''                             '''
    ...
    def setDay (self: Date,day : int)-> None :
      '''                             '''
    ...
    def setHour (self: Date,hour : int)-> None :
      '''                             '''
    ...
    def setJulianDate (self: Date,julianDay : int,msec : int)-> None :
      '''                             '''
    ...
    def setJulianDay (self: Date,day : int)-> None :
      '''                             '''
    ...
    def setJulianFraction (self: Date,val : float)-> None :
      '''                             '''
    ...
    def setMillisecond (self: Date,msec : int)-> None :
      '''                             '''
    ...
    def setMinute (self: Date,min : int)-> None :
      '''                             '''
    ...
    def setMonth (self: Date,month : int)-> None :
      '''                             '''
    ...
    def setMsecsPastMidnight (self: Date,msec : int)-> None :
      '''                             '''
    ...
    def setSecond (self: Date,sec : int)-> None :
      '''                             '''
    ...
    def setTime (self: Date,hour : int,min : int,sec : int,msec : int)-> None :
      '''                             '''
    ...
    def setToZero (self: Date)-> None :
      '''                             '''
    ...
    def setYear (self: Date,year : int)-> None :
      '''                             '''
    ...
    def timestamp (self: Date)-> float :
      '''                             '''
    ...
    def universalToLocal (self: Date)-> None :
      '''                             '''
    ...
    def year (self: Date)-> int :
      '''                             '''
    ...

class DbObject:
    def __init__ (self: PyDb.DbObject,id: PyDb.ObjectId,mode: OpenMode=kForRead,erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.DbObject :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class DbObjectOverrule:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def addOverrule (self, *args, **kwargs)-> None :
      '''addOverrule( (RxClass)arg1, (Overrule)arg2) -> None :

    C++ signature :
        void addOverrule(class PyRxClass {lvalue},class PyRxOverrule {lvalue})'''
    ...
    def addOverruleLast (self, *args, **kwargs)-> None :
      '''addOverruleLast( (RxClass)arg1, (Overrule)arg2, (bool)arg3) -> None :

    C++ signature :
        void addOverruleLast(class PyRxClass {lvalue},class PyRxOverrule {lvalue},bool)'''
    ...
    def baseCancel (self: DbObjectOverrule,object: PyDb.DbObject)-> PyDb.ErrorStatus :
      '''                             '''
    ...
    def baseClose (self: DbObjectOverrule,object: PyDb.DbObject)-> PyDb.ErrorStatus :
      '''                             '''
    ...
    def baseDeepClone (self: DbObjectOverrule,subject: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary : bool)-> PyDb.DbObject :
      '''                             '''
    ...
    def baseErase (self: DbObjectOverrule,object: PyDb.DbObject,erased : bool)-> PyDb.ErrorStatus :
      '''                             '''
    ...
    def baseOpen (self: DbObjectOverrule,object: PyDb.DbObject,mode: OpenMode)-> PyDb.ErrorStatus :
      '''                             '''
    ...
    def baseWblockClone (self: DbObjectOverrule,subject: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary : bool)-> PyDb.DbObject :
      '''                             '''
    ...
    def cancel (self: DbObjectOverrule,object: PyDb.DbObject)-> PyDb.ErrorStatus :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self: DbObjectOverrule,object: PyDb.DbObject)-> PyDb.ErrorStatus :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def deepClone (self: DbObjectOverrule,subject: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary : bool)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def erase (self: DbObjectOverrule,object: PyDb.DbObject,erased : bool)-> PyDb.ErrorStatus :
      '''                             '''
    ...
    def hasOverrule (self, *args, **kwargs)-> bool :
      '''hasOverrule( (RxObject)arg1, (RxClass)arg2) -> bool :

    C++ signature :
        bool hasOverrule(class PyRxObject {lvalue},class PyRxClass {lvalue})'''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isApplicable (self: DbObjectOverrule,object: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isOverruling (self, *args, **kwargs)-> bool :
      '''isOverruling() -> bool :

    C++ signature :
        bool isOverruling()'''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def open (self: DbObjectOverrule,object: PyDb.DbObject,mode: OpenMode)-> PyDb.ErrorStatus :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def removeOverrule (self, *args, **kwargs)-> None :
      '''removeOverrule( (RxClass)arg1, (Overrule)arg2) -> None :

    C++ signature :
        void removeOverrule(class PyRxClass {lvalue},class PyRxOverrule {lvalue})'''
    ...
    def setIsOverruling (self, *args, **kwargs)-> None :
      '''setIsOverruling( (bool)arg1) -> None :

    C++ signature :
        void setIsOverruling(bool)'''
    ...
    def wblockClone (self: DbObjectOverrule,subject: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary : bool)-> PyDb.DbObject :
      '''                             '''
    ...

class DbObjectReactor:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def cancelled (self: DbObjectReactor,obj: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copied (self: DbObjectReactor,obj: PyDb.DbObject,newObj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def erased (self: DbObjectReactor,obj: PyDb.DbObject,flag: bool)-> None :
      '''                             '''
    ...
    def goodbye (self: DbObjectReactor,obj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def modified (self: DbObjectReactor,obj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def modifiedXData (self: DbObjectReactor,obj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def modifyUndone (self: DbObjectReactor,obj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def objectClosed (self: DbObjectReactor,obj: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def openedForModify (self: DbObjectReactor,obj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def reappended (self: DbObjectReactor,obj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def subObjModified (self: DbObjectReactor,obj: PyDb.DbObject,subObj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def unappended (self: DbObjectReactor,obj: PyDb.DbObject)-> None :
      '''                             '''
    ...

class DeepCloneType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kDcBlock (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDcCopy (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDcExplode (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDcInsert (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDcInsertCopy (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDcObjects (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDcSymTableMerge (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDcWblkObjects (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDcWblock (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDcXrefBind (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDcXrefInsert (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class DiametricDimension:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (float)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,double)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (float)arg4, (str)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (float)arg4, (str)arg5, (ObjectId)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def altSuppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altSuppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altSuppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def altSuppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def alternatePrefix (self: Dimension)-> str :
      '''                             '''
    ...
    def alternateSuffix (self: Dimension)-> str :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockTransform (self: Dimension)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.DiametricDimension :
      '''cast( (RxObject)arg1) -> DiametricDimension :

    C++ signature :
        class PyDbDiametricDimension cast(class PyRxObject)'''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def centerMarkSize (self: Dimension)-> float :
      '''                             '''
    ...
    def chordPoint (self, *args, **kwargs)-> PyGe.Point3d :
      '''chordPoint( (DiametricDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d chordPoint(class PyDbDiametricDimension {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.DiametricDimension :
      '''cloneFrom( (RxObject)arg1) -> DiametricDimension :

    C++ signature :
        class PyDbDiametricDimension cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimBlockPosition (self: Dimension)-> PyGe.Point3d :
      '''                             '''
    ...
    def dimExt1Linetype (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimExt2Linetype (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimLineLinetype (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimensionStyle (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimensionText (self: Dimension)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevation (self: Dimension)-> float :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extArcEndAngle (self, *args, **kwargs)-> float :
      '''extArcEndAngle( (DiametricDimension)arg1) -> float :

    C++ signature :
        double extArcEndAngle(class PyDbDiametricDimension {lvalue})'''
    ...
    def extArcStartAngle (self, *args, **kwargs)-> float :
      '''extArcStartAngle( (DiametricDimension)arg1) -> float :

    C++ signature :
        double extArcStartAngle(class PyDbDiametricDimension {lvalue})'''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def farChordPoint (self, *args, **kwargs)-> PyGe.Point3d :
      '''farChordPoint( (DiametricDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d farChordPoint(class PyDbDiametricDimension {lvalue})'''
    ...
    def fieldFromMText (self: Dimension,ref : PyDb.MText)-> None :
      '''                             '''
    ...
    def fieldToMText (self: Dimension,ref : PyDb.MText)-> None :
      '''                             '''
    ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self: Dimension)-> None :
      '''                             '''
    ...
    def getArrowFirstIsFlipped (self: Dimension)-> bool :
      '''                             '''
    ...
    def getArrowSecondIsFlipped (self: Dimension)-> bool :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDimstyleData (self: Dimension)-> PyDb.DimStyleTableRecord :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def horizontalRotation (self: Dimension)-> float :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def inspection (self: Dimension)-> bool :
      '''                             '''
    ...
    def inspectionFrame (self: Dimension)-> int :
      '''                             '''
    ...
    def inspectionLabel (self: Dimension)-> str :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self: Dimension)-> bool :
      '''                             '''
    ...
    def isConstraintObject (self: Dimension)-> tuple :
      '''                             '''
    ...
    def isDynamicDimension (self: Dimension)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self: Dimension)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self: Dimension)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def leaderLength (self, *args, **kwargs)-> float :
      '''leaderLength( (DiametricDimension)arg1) -> float :

    C++ signature :
        double leaderLength(class PyDbDiametricDimension {lvalue})'''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def measurement (self: Dimension)-> float :
      '''                             '''
    ...
    def normal (self: Dimension)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def prefix (self: Dimension)-> str :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recomputeDimBlock (self: Dimension,force : bool=False)-> None :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def removeTextField (self: Dimension)-> None :
      '''                             '''
    ...
    def resetTextDefinedSize (self: Dimension)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAltSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAlternatePrefix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setAlternateSuffix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setArrowFirstIsFlipped (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setArrowSecondIsFlipped (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setChordPoint (self, *args, **kwargs)-> None :
      '''setChordPoint( (DiametricDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setChordPoint(class PyDbDiametricDimension {lvalue},class AcGePoint3d)'''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setConstraintDynamic (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDimBlockId (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimBlockPosition (self: Dimension,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setDimExt1Linetype (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimExt2Linetype (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimLineLinetype (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimensionStyle (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimensionText (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setDimstyleData (self, *args, **kwargs)-> None :
      '''setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setElevation (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setExtArcEndAngle (self, *args, **kwargs)-> None :
      '''setExtArcEndAngle( (DiametricDimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setExtArcEndAngle(class PyDbDiametricDimension {lvalue},double)'''
    ...
    def setExtArcStartAngle (self, *args, **kwargs)-> None :
      '''setExtArcStartAngle( (DiametricDimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setExtArcStartAngle(class PyDbDiametricDimension {lvalue},double)'''
    ...
    def setFarChordPoint (self, *args, **kwargs)-> None :
      '''setFarChordPoint( (DiametricDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setFarChordPoint(class PyDbDiametricDimension {lvalue},class AcGePoint3d)'''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setHorizontalRefTextRotation (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setHorizontalRotation (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setInspection (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setInspectionFrame (self: Dimension,val : int)-> None :
      '''                             '''
    ...
    def setInspectionLabel (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLeaderLength (self, *args, **kwargs)-> None :
      '''setLeaderLength( (DiametricDimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setLeaderLength(class PyDbDiametricDimension {lvalue},double)'''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self: Dimension,val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setShouldParticipateInOPM (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuffix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setSuppressAngularTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setTextAttachment (self: Dimension,val : PyDb.MTextAttachmentPoint)-> None :
      '''                             '''
    ...
    def setTextDefinedSize (self: Dimension,width : float,height : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingFactor (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingStyle (self: Dimension,val : PyDb.LineSpacingStyle)-> None :
      '''                             '''
    ...
    def setTextPosition (self: Dimension,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setTextRotation (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setToleranceSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setUsingDefaultTextPosition (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def shouldParticipateInOPM (self: Dimension)-> bool :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def suffix (self: Dimension)-> str :
      '''                             '''
    ...
    def suppressAngularLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressAngularTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAttachment (self: Dimension)-> PyDb.MTextAttachmentPoint :
      '''                             '''
    ...
    def textDefinedSize (self: Dimension)-> tuple :
      '''                             '''
    ...
    def textLineSpacingFactor (self: Dimension)-> float :
      '''                             '''
    ...
    def textLineSpacingStyle (self: Dimension)-> PyDb.LineSpacingStyle :
      '''                             '''
    ...
    def textPosition (self: Dimension)-> PyGe.Point3d :
      '''                             '''
    ...
    def textRotation (self: Dimension)-> float :
      '''                             '''
    ...
    def toleranceSuppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def toleranceSuppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def useDefaultTextPosition (self: Dimension)-> None :
      '''                             '''
    ...
    def useSetTextPosition (self: Dimension)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class DictUtil:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def dictionaryGetAt (self, *args, **kwargs)-> PyDb.ObjectId :
      '''dictionaryGetAt( (str)arg1, (ObjectId)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId dictionaryGetAt(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def dictionaryNameAt (self, *args, **kwargs)-> str :
      '''dictionaryNameAt( (ObjectId)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dictionaryNameAt(class PyDbObjectId)

dictionaryNameAt( (ObjectId)arg1, (ObjectId)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dictionaryNameAt(class PyDbObjectId,class PyDbObjectId)'''
    ...
    def getColorName (self, *args, **kwargs)-> str :
      '''getColorName( (ObjectId)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getColorName(class PyDbObjectId)'''
    ...
    def getGroupId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getGroupId( (str)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getGroupId(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def getGroupName (self, *args, **kwargs)-> str :
      '''getGroupName( (ObjectId)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getGroupName(class PyDbObjectId)'''
    ...
    def getLayoutId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getLayoutId( (str)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getLayoutId(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def getLayoutName (self, *args, **kwargs)-> str :
      '''getLayoutName( (ObjectId)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getLayoutName(class PyDbObjectId)'''
    ...
    def getMLStyleId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getMLStyleId( (str)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getMLStyleId(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def getMLStyleName (self, *args, **kwargs)-> str :
      '''getMLStyleName( (ObjectId)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getMLStyleName(class PyDbObjectId)'''
    ...
    def getMaterialId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getMaterialId( (str)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getMaterialId(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def getMaterialName (self, *args, **kwargs)-> str :
      '''getMaterialName( (ObjectId)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getMaterialName(class PyDbObjectId)'''
    ...
    def getPlotSettingsId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getPlotSettingsId( (str)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotSettingsId(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def getPlotSettingsName (self, *args, **kwargs)-> str :
      '''getPlotSettingsName( (ObjectId)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getPlotSettingsName(class PyDbObjectId)'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getPlotStyleNameId( (str)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def getPlotStyleNameName (self, *args, **kwargs)-> str :
      '''getPlotStyleNameName( (ObjectId)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getPlotStyleNameName(class PyDbObjectId)'''
    ...
    def getTableStyleId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getTableStyleId( (str)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getTableStyleId(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def getTableStyleName (self, *args, **kwargs)-> str :
      '''getTableStyleName( (ObjectId)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getTableStyleName(class PyDbObjectId)'''
    ...
    def getVisualStyleId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getVisualStyleId( (str)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getVisualStyleId(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def getVisualStyleName (self, *args, **kwargs)-> str :
      '''getVisualStyleName( (ObjectId)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getVisualStyleName(class PyDbObjectId)'''
    ...
    def hasColor (self, *args, **kwargs)-> bool :
      '''hasColor( (str)arg1, (Database)arg2) -> bool :

    C++ signature :
        bool hasColor(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def hasGroup (self, *args, **kwargs)-> bool :
      '''hasGroup( (str)arg1, (Database)arg2) -> bool :

    C++ signature :
        bool hasGroup(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def hasLayout (self, *args, **kwargs)-> bool :
      '''hasLayout( (str)arg1, (Database)arg2) -> bool :

    C++ signature :
        bool hasLayout(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def hasMLStyle (self, *args, **kwargs)-> bool :
      '''hasMLStyle( (str)arg1, (Database)arg2) -> bool :

    C++ signature :
        bool hasMLStyle(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def hasMaterial (self, *args, **kwargs)-> bool :
      '''hasMaterial( (str)arg1, (Database)arg2) -> bool :

    C++ signature :
        bool hasMaterial(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def hasPlotSettings (self, *args, **kwargs)-> bool :
      '''hasPlotSettings( (str)arg1, (Database)arg2) -> bool :

    C++ signature :
        bool hasPlotSettings(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def hasPlotStyleName (self, *args, **kwargs)-> bool :
      '''hasPlotStyleName( (str)arg1, (Database)arg2) -> bool :

    C++ signature :
        bool hasPlotStyleName(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def hasTableStyle (self, *args, **kwargs)-> bool :
      '''hasTableStyle( (str)arg1, (Database)arg2) -> bool :

    C++ signature :
        bool hasTableStyle(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def hasVisualStyle (self, *args, **kwargs)-> bool :
      '''hasVisualStyle( (str)arg1, (Database)arg2) -> bool :

    C++ signature :
        bool hasVisualStyle(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...

class Dictionary:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def asDict (self: Dictionary)-> dict :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Dictionary :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Dictionary :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getAt (self: Dictionary,val : str)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has (self: Dictionary,val : str|PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def nameAt (self: Dictionary,val : PyDb.ObjectId)-> str :
      '''                             '''
    ...
    def numEntries (self: Dictionary)-> int :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def remove (self, *args, **kwargs)-> None :
      '''remove( (Dictionary)arg1, (str)arg2) -> None :

    C++ signature :
        void remove(class PyDbDictionary {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

remove( (Dictionary)arg1, (str)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void remove(class PyDbDictionary {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId {lvalue})

remove( (Dictionary)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void remove(class PyDbDictionary {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAt (self: Dictionary)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setName (self: Dictionary,old : str,new : str)-> bool :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class DimAssoc:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3, (bool)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode,bool)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def addToDimensionReactor (self, *args, **kwargs)-> None :
      '''addToDimensionReactor( (DimAssoc)arg1) -> None :

    C++ signature :
        void addToDimensionReactor(class PyDbDimAssoc {lvalue})

addToDimensionReactor( (DimAssoc)arg1, (bool)arg2) -> None :

    C++ signature :
        void addToDimensionReactor(class PyDbDimAssoc {lvalue},bool)'''
    ...
    def addToPointRefReactor (self, *args, **kwargs)-> None :
      '''addToPointRefReactor( (DimAssoc)arg1) -> None :

    C++ signature :
        void addToPointRefReactor(class PyDbDimAssoc {lvalue})'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assocFlag (self, *args, **kwargs)-> int :
      '''assocFlag( (DimAssoc)arg1) -> int :

    C++ signature :
        int assocFlag(class PyDbDimAssoc {lvalue})

assocFlag( (DimAssoc)arg1, (int)arg2) -> bool :

    C++ signature :
        bool assocFlag(class PyDbDimAssoc {lvalue},int)'''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.DimAssoc :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.DimAssoc :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dimObjId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''dimObjId( (DimAssoc)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimObjId(class PyDbDimAssoc {lvalue})'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getDimAssocGeomIds (self, *args, **kwargs)-> list :
      '''getDimAssocGeomIds( (DimAssoc)arg1) -> list :

    C++ signature :
        class boost::python::list getDimAssocGeomIds(class PyDbDimAssoc {lvalue})'''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasOopsWatcher (self, *args, **kwargs)-> bool :
      '''hasOopsWatcher( (DimAssoc)arg1) -> bool :

    C++ signature :
        bool hasOopsWatcher(class PyDbDimAssoc {lvalue})'''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAllGeomErased (self, *args, **kwargs)-> bool :
      '''isAllGeomErased( (DimAssoc)arg1) -> bool :

    C++ signature :
        bool isAllGeomErased(class PyDbDimAssoc {lvalue})'''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransSpatial (self, *args, **kwargs)-> bool :
      '''isTransSpatial( (DimAssoc)arg1) -> bool :

    C++ signature :
        bool isTransSpatial(class PyDbDimAssoc {lvalue})'''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def osnapPointRef (self, *args, **kwargs)-> PyDb.OsnapPointRef :
      '''osnapPointRef( (DimAssoc)arg1, (int)arg2) -> OsnapPointRef :

    C++ signature :
        class PyDbOsnapPointRef osnapPointRef(class PyDbDimAssoc {lvalue},int)'''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def pointRef (self, *args, **kwargs)-> PyDb.PointRef :
      '''pointRef( (DimAssoc)arg1, (int)arg2) -> PointRef :

    C++ signature :
        class PyDbPointRef pointRef(class PyDbDimAssoc {lvalue},int)'''
    ...
    def post (self, *args, **kwargs)-> PyDb.ObjectId :
      '''post( (DimAssoc)arg1, (ObjectId)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId post(class PyDbDimAssoc {lvalue},class PyDbObjectId)

post( (DimAssoc)arg1, (ObjectId)arg2, (bool)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId post(class PyDbDimAssoc {lvalue},class PyDbObjectId,bool)'''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeAssociativity (self, *args, **kwargs)-> None :
      '''removeAssociativity( (DimAssoc)arg1) -> None :

    C++ signature :
        void removeAssociativity(class PyDbDimAssoc {lvalue})

removeAssociativity( (DimAssoc)arg1, (bool)arg2) -> None :

    C++ signature :
        void removeAssociativity(class PyDbDimAssoc {lvalue},bool)'''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removeOopsWatcher (self, *args, **kwargs)-> None :
      '''removeOopsWatcher( (DimAssoc)arg1) -> None :

    C++ signature :
        void removeOopsWatcher(class PyDbDimAssoc {lvalue})'''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePointRef (self, *args, **kwargs)-> None :
      '''removePointRef( (DimAssoc)arg1, (int)arg2) -> None :

    C++ signature :
        void removePointRef(class PyDbDimAssoc {lvalue},int)'''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def restoreAssocFromOopsWatcher (self, *args, **kwargs)-> None :
      '''restoreAssocFromOopsWatcher( (DimAssoc)arg1) -> None :

    C++ signature :
        void restoreAssocFromOopsWatcher(class PyDbDimAssoc {lvalue})'''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def rotatedDimType (self, *args, **kwargs)-> PyDb.RotatedDimType :
      '''rotatedDimType( (DimAssoc)arg1) -> RotatedDimType :

    C++ signature :
        enum AcDbDimAssoc::RotatedDimType rotatedDimType(class PyDbDimAssoc {lvalue})'''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAssocFlag (self, *args, **kwargs)-> None :
      '''setAssocFlag( (DimAssoc)arg1, (int)arg2 [, (bool)arg3]) -> None :

    C++ signature :
        void setAssocFlag(class PyDbDimAssoc {lvalue},int [,bool])'''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setDimObjId (self, *args, **kwargs)-> None :
      '''setDimObjId( (DimAssoc)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimObjId(class PyDbDimAssoc {lvalue},class PyDbObjectId)'''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPointRef (self, *args, **kwargs)-> None :
      '''setPointRef( (DimAssoc)arg1, (int)arg2, (PointRef)arg3) -> None :

    C++ signature :
        void setPointRef(class PyDbDimAssoc {lvalue},int,class PyDbPointRef {lvalue})'''
    ...
    def setRotatedDimType (self, *args, **kwargs)-> None :
      '''setRotatedDimType( (DimAssoc)arg1, (RotatedDimType)arg2) -> None :

    C++ signature :
        void setRotatedDimType(class PyDbDimAssoc {lvalue},enum AcDbDimAssoc::RotatedDimType)'''
    ...
    def setTransSpatial (self, *args, **kwargs)-> None :
      '''setTransSpatial( (DimAssoc)arg1, (bool)arg2) -> None :

    C++ signature :
        void setTransSpatial(class PyDbDimAssoc {lvalue},bool)'''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def startCmdWatcher (self, *args, **kwargs)-> None :
      '''startCmdWatcher( (DimAssoc)arg1) -> None :

    C++ signature :
        void startCmdWatcher(class PyDbDimAssoc {lvalue})'''
    ...
    def startOopsWatcher (self, *args, **kwargs)-> None :
      '''startOopsWatcher( (DimAssoc)arg1) -> None :

    C++ signature :
        void startOopsWatcher(class PyDbDimAssoc {lvalue})

startOopsWatcher( (DimAssoc)arg1, (bool)arg2) -> None :

    C++ signature :
        void startOopsWatcher(class PyDbDimAssoc {lvalue},bool)'''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def swapReferences (self, *args, **kwargs)-> None :
      '''swapReferences( (DimAssoc)arg1, (IdMapping)arg2) -> None :

    C++ signature :
        void swapReferences(class PyDbDimAssoc {lvalue},class PyDbIdMapping)'''
    ...
    def updateAssociativity (self, *args, **kwargs)-> None :
      '''updateAssociativity( (DimAssoc)arg1, (list)arg2) -> None :

    C++ signature :
        void updateAssociativity(class PyDbDimAssoc {lvalue},class boost::python::list)'''
    ...
    def updateDimension (self, *args, **kwargs)-> None :
      '''updateDimension( (DimAssoc)arg1) -> None :

    C++ signature :
        void updateDimension(class PyDbDimAssoc {lvalue})

updateDimension( (DimAssoc)arg1, (bool)arg2) -> None :

    C++ signature :
        void updateDimension(class PyDbDimAssoc {lvalue},bool)

updateDimension( (DimAssoc)arg1, (bool)arg2, (bool)arg3) -> None :

    C++ signature :
        void updateDimension(class PyDbDimAssoc {lvalue},bool,bool)'''
    ...
    def updateDueToMirror (self, *args, **kwargs)-> None :
      '''updateDueToMirror( (DimAssoc)arg1, (bool)arg2) -> None :

    C++ signature :
        void updateDueToMirror(class PyDbDimAssoc {lvalue},bool)'''
    ...
    def updateFillet (self, *args, **kwargs)-> None :
      '''updateFillet( (DimAssoc)arg1, (list)arg2) -> None :

    C++ signature :
        void updateFillet(class PyDbDimAssoc {lvalue},class boost::python::list)'''
    ...
    def updateSubentPath (self, *args, **kwargs)-> None :
      '''updateSubentPath( (DimAssoc)arg1, (IdMapping)arg2) -> None :

    C++ signature :
        void updateSubentPath(class PyDbDimAssoc {lvalue},class PyDbIdMapping {lvalue})'''
    ...
    def updateXrefSubentPath (self, *args, **kwargs)-> None :
      '''updateXrefSubentPath( (DimAssoc)arg1) -> None :

    C++ signature :
        void updateXrefSubentPath(class PyDbDimAssoc {lvalue})'''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class DimAssocPointType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kAngLineEnd (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAngLineStart (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCenterPoint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kChordPoint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDefiningPoint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kFarChordPoint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kJogPoint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLeaderPoint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOriginPoint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOverrideCenterPoint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVertexPoint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kXline1End (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kXline1Point (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kXline1Start (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kXline2End (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kXline2Point (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kXline2Start (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class DimInspect:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kShapeAngular (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kShapeLabel (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kShapeNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kShapeRate (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kShapeRemove (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kShapeRound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class DimStyleTable:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def add (self, *args, **kwargs)-> PyDb.ObjectId :
      '''add( (DimStyleTable)arg1, (DimStyleTableRecord)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId add(class PyDbDimStyleTable {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.DimStyleTable :
      '''cast( (RxObject)arg1) -> DimStyleTable :

    C++ signature :
        class PyDbDimStyleTable cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.DimStyleTable :
      '''cloneFrom( (RxObject)arg1) -> DimStyleTable :

    C++ signature :
        class PyDbDimStyleTable cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getAt (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getAt( (SymbolTable)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getAt(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has (self, *args, **kwargs)-> bool :
      '''has( (SymbolTable)arg1, (str)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

has( (SymbolTable)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class PyDbObjectId)'''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def recordIds (self, *args, **kwargs)-> list :
      '''recordIds( (SymbolTable)arg1) -> list :

    C++ signature :
        class boost::python::list recordIds(class PyDbSymbolTable {lvalue})'''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def toDict (self, *args, **kwargs)-> dict :
      '''toDict( (SymbolTable)arg1) -> dict :

    C++ signature :
        class boost::python::dict toDict(class PyDbSymbolTable {lvalue})'''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class DimStyleTableRecord:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def arrowId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''arrowId( (DimStyleTableRecord)arg1, (object)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId arrowId(class PyDbDimStyleTableRecord {lvalue},enum AcDb::DimArrowFlags)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.DimStyleTableRecord :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.DimStyleTableRecord :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dimadec (self: DimStyleTableRecord)-> int :
      '''                             '''
    ...
    def dimalt (self: DimStyleTableRecord)-> bool :
      '''                             '''
    ...
    def dimaltd (self: DimStyleTableRecord)-> int :
      '''                             '''
    ...
    def dimaltf (self: DimStyleTableRecord)-> float :
      '''                             '''
    ...
    def dimaltmzf (self: DimStyleTableRecord)-> float :
      '''                             '''
    ...
    def dimaltmzs (self: DimStyleTableRecord)-> str :
      '''                             '''
    ...
    def dimaltrnd (self: DimStyleTableRecord)-> float :
      '''                             '''
    ...
    def dimalttd (self: DimStyleTableRecord)-> int :
      '''                             '''
    ...
    def dimalttz (self: DimStyleTableRecord)-> int :
      '''                             '''
    ...
    def dimaltu (self: DimStyleTableRecord)-> int :
      '''                             '''
    ...
    def dimaltz (self: DimStyleTableRecord)-> int :
      '''                             '''
    ...
    def dimapost (self: DimStyleTableRecord)-> str :
      '''                             '''
    ...
    def dimarcsym (self: DimStyleTableRecord)-> int :
      '''                             '''
    ...
    def dimasz (self: DimStyleTableRecord)-> float :
      '''                             '''
    ...
    def dimatfit (self: DimStyleTableRecord)-> int :
      '''                             '''
    ...
    def dimaunit (self: DimStyleTableRecord)-> int :
      '''                             '''
    ...
    def dimazin (self: DimStyleTableRecord)-> int :
      '''                             '''
    ...
    def dimblk (self: DimStyleTableRecord)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimblk1 (self: DimStyleTableRecord)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimblk2 (self: DimStyleTableRecord)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimcen (self: DimStyleTableRecord)-> float :
      '''                             '''
    ...
    def dimclrd (self: DimStyleTableRecord)-> PyDb.Color :
      '''                             '''
    ...
    def dimclre (self: DimStyleTableRecord)-> PyDb.Color :
      '''                             '''
    ...
    def dimclrt (self: DimStyleTableRecord)-> PyDb.Color :
      '''                             '''
    ...
    def dimdec (self: DimStyleTableRecord)-> int :
      '''                             '''
    ...
    def dimdle (self: DimStyleTableRecord)-> float :
      '''                             '''
    ...
    def dimdli (self: DimStyleTableRecord)-> float :
      '''                             '''
    ...
    def dimdsep (self: DimStyleTableRecord)-> str :
      '''                             '''
    ...
    def dimexe (self: DimStyleTableRecord)-> float :
      '''                             '''
    ...
    def dimexo (self: DimStyleTableRecord)-> float :
      '''                             '''
    ...
    def dimfrac (self: DimStyleTableRecord)-> int :
      '''                             '''
    ...
    def dimfxlen (self: DimStyleTableRecord)-> float :
      '''                             '''
    ...
    def dimfxlenOn (self: DimStyleTableRecord)-> bool :
      '''                             '''
    ...
    def dimgap (self: DimStyleTableRecord)-> float :
      '''                             '''
    ...
    def dimjogang (self: DimStyleTableRecord)-> float :
      '''                             '''
    ...
    def dimjust (self: DimStyleTableRecord)-> int :
      '''                             '''
    ...
    def dimldrblk (self: DimStyleTableRecord)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimlfac (self: DimStyleTableRecord)-> float :
      '''                             '''
    ...
    def dimlim (self: DimStyleTableRecord)-> bool :
      '''                             '''
    ...
    def dimltex1 (self: DimStyleTableRecord)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimltex2 (self: DimStyleTableRecord)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimltype (self: DimStyleTableRecord)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimlunit (self: DimStyleTableRecord)-> int :
      '''                             '''
    ...
    def dimlwd (self: DimStyleTableRecord)-> PyDb.LineWeight :
      '''                             '''
    ...
    def dimlwe (self: DimStyleTableRecord)-> PyDb.LineWeight :
      '''                             '''
    ...
    def dimmzf (self: DimStyleTableRecord)-> float :
      '''                             '''
    ...
    def dimmzs (self: DimStyleTableRecord)-> str :
      '''                             '''
    ...
    def dimpost (self: DimStyleTableRecord)-> str :
      '''                             '''
    ...
    def dimrnd (self: DimStyleTableRecord)-> float :
      '''                             '''
    ...
    def dimsah (self: DimStyleTableRecord)-> bool :
      '''                             '''
    ...
    def dimscale (self: DimStyleTableRecord)-> float :
      '''                             '''
    ...
    def dimsd1 (self: DimStyleTableRecord)-> bool :
      '''                             '''
    ...
    def dimsd2 (self: DimStyleTableRecord)-> bool :
      '''                             '''
    ...
    def dimse1 (self: DimStyleTableRecord)-> bool :
      '''                             '''
    ...
    def dimse2 (self: DimStyleTableRecord)-> bool :
      '''                             '''
    ...
    def dimsoxd (self: DimStyleTableRecord)-> bool :
      '''                             '''
    ...
    def dimtad (self: DimStyleTableRecord)-> int :
      '''                             '''
    ...
    def dimtdec (self: DimStyleTableRecord)-> int :
      '''                             '''
    ...
    def dimtfac (self: DimStyleTableRecord)-> float :
      '''                             '''
    ...
    def dimtfill (self: DimStyleTableRecord)-> int :
      '''                             '''
    ...
    def dimtfillclr (self: DimStyleTableRecord)-> PyDb.Color :
      '''                             '''
    ...
    def dimtih (self: DimStyleTableRecord)-> bool :
      '''                             '''
    ...
    def dimtix (self: DimStyleTableRecord)-> bool :
      '''                             '''
    ...
    def dimtm (self: DimStyleTableRecord)-> float :
      '''                             '''
    ...
    def dimtmove (self: DimStyleTableRecord)-> int :
      '''                             '''
    ...
    def dimtofl (self: DimStyleTableRecord)-> bool :
      '''                             '''
    ...
    def dimtoh (self: DimStyleTableRecord)-> bool :
      '''                             '''
    ...
    def dimtol (self: DimStyleTableRecord)-> bool :
      '''                             '''
    ...
    def dimtolj (self: DimStyleTableRecord)-> int :
      '''                             '''
    ...
    def dimtp (self: DimStyleTableRecord)-> float :
      '''                             '''
    ...
    def dimtsz (self: DimStyleTableRecord)-> float :
      '''                             '''
    ...
    def dimtvp (self: DimStyleTableRecord)-> float :
      '''                             '''
    ...
    def dimtxsty (self: DimStyleTableRecord)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimtxt (self: DimStyleTableRecord)-> float :
      '''                             '''
    ...
    def dimtxtdirection (self: DimStyleTableRecord)-> bool :
      '''                             '''
    ...
    def dimtzin (self: DimStyleTableRecord)-> int :
      '''                             '''
    ...
    def dimupt (self: DimStyleTableRecord)-> bool :
      '''                             '''
    ...
    def dimzin (self: DimStyleTableRecord)-> int :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getName (self: SymbolTableRecord)-> str :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isDependent (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedForRecompute (self, *args, **kwargs)-> bool :
      '''isModifiedForRecompute( (DimStyleTableRecord)arg1) -> bool :

    C++ signature :
        bool isModifiedForRecompute(class PyDbDimStyleTableRecord {lvalue})'''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isRenamable (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isResolved (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def name (self: SymbolTableRecord)-> str :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setDimadec (self: DimStyleTableRecord,val : int)-> None :
      '''                             '''
    ...
    def setDimalt (self: DimStyleTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setDimaltd (self: DimStyleTableRecord,val : int)-> None :
      '''                             '''
    ...
    def setDimaltf (self: DimStyleTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setDimaltmzf (self: DimStyleTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setDimaltmzs (self: DimStyleTableRecord,val : str)-> None :
      '''                             '''
    ...
    def setDimaltrnd (self: DimStyleTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setDimalttd (self: DimStyleTableRecord,val : int)-> None :
      '''                             '''
    ...
    def setDimalttz (self: DimStyleTableRecord,val : int)-> None :
      '''                             '''
    ...
    def setDimaltu (self: DimStyleTableRecord,val : int)-> None :
      '''                             '''
    ...
    def setDimaltz (self: DimStyleTableRecord,val : int)-> None :
      '''                             '''
    ...
    def setDimapost (self: DimStyleTableRecord,val : str)-> None :
      '''                             '''
    ...
    def setDimarcsym (self: DimStyleTableRecord,val : int)-> None :
      '''                             '''
    ...
    def setDimasz (self: DimStyleTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setDimatfit (self: DimStyleTableRecord,val : int)-> None :
      '''                             '''
    ...
    def setDimaunit (self: DimStyleTableRecord,val : int)-> None :
      '''                             '''
    ...
    def setDimazin (self: DimStyleTableRecord,val : int)-> None :
      '''                             '''
    ...
    def setDimblk (self: DimStyleTableRecord,val : str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimblk1 (self: DimStyleTableRecord,val : str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimblk2 (self: DimStyleTableRecord,val : str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimcen (self: DimStyleTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setDimclrd (self: DimStyleTableRecord,val : PyDb.AcCmColor)-> None :
      '''                             '''
    ...
    def setDimclre (self: DimStyleTableRecord,val : PyDb.AcCmColor)-> None :
      '''                             '''
    ...
    def setDimclrt (self: DimStyleTableRecord,val : PyDb.AcCmColor)-> None :
      '''                             '''
    ...
    def setDimdec (self: DimStyleTableRecord,val : int)-> None :
      '''                             '''
    ...
    def setDimdle (self: DimStyleTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setDimdli (self: DimStyleTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setDimdsep (self: DimStyleTableRecord,val : char)-> None :
      '''                             '''
    ...
    def setDimexe (self: DimStyleTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setDimexo (self: DimStyleTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setDimfrac (self: DimStyleTableRecord,val : int)-> None :
      '''                             '''
    ...
    def setDimfxlen (self: DimStyleTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setDimfxlenOn (self: DimStyleTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setDimgap (self: DimStyleTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setDimjogang (self: DimStyleTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setDimjust (self: DimStyleTableRecord,val : int)-> None :
      '''                             '''
    ...
    def setDimldrblk (self: DimStyleTableRecord,val : str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimlfac (self: DimStyleTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setDimlim (self: DimStyleTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setDimltex1 (self: DimStyleTableRecord,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimltex2 (self: DimStyleTableRecord,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimltype (self: DimStyleTableRecord,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimlunit (self: DimStyleTableRecord,val : int)-> None :
      '''                             '''
    ...
    def setDimlwd (self: DimStyleTableRecord,val :PyDb:LineWeight)-> None :
      '''                             '''
    ...
    def setDimlwe (self: DimStyleTableRecord,val :PyDb:LineWeight)-> None :
      '''                             '''
    ...
    def setDimmzf (self: DimStyleTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setDimmzs (self: DimStyleTableRecord,val : str)-> None :
      '''                             '''
    ...
    def setDimpost (self: DimStyleTableRecord,val : str)-> None :
      '''                             '''
    ...
    def setDimrnd (self: DimStyleTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setDimsah (self: DimStyleTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setDimscale (self: DimStyleTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setDimsd1 (self: DimStyleTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setDimsd2 (self: DimStyleTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setDimse1 (self: DimStyleTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setDimse2 (self: DimStyleTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setDimsoxd (self: DimStyleTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setDimtad (self: DimStyleTableRecord,val : int)-> None :
      '''                             '''
    ...
    def setDimtdec (self: DimStyleTableRecord,val : int)-> None :
      '''                             '''
    ...
    def setDimtfac (self: DimStyleTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setDimtfill (self: DimStyleTableRecord,val : int)-> None :
      '''                             '''
    ...
    def setDimtfillclr (self: DimStyleTableRecord,val : PyDb.AcCmColor)-> None :
      '''                             '''
    ...
    def setDimtih (self: DimStyleTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setDimtix (self: DimStyleTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setDimtm (self: DimStyleTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setDimtmove (self: DimStyleTableRecord,val : int)-> None :
      '''                             '''
    ...
    def setDimtofl (self: DimStyleTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setDimtoh (self: DimStyleTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setDimtol (self: DimStyleTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setDimtolj (self: DimStyleTableRecord,val : int)-> None :
      '''                             '''
    ...
    def setDimtp (self: DimStyleTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setDimtsz (self: DimStyleTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setDimtvp (self: DimStyleTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setDimtxsty (self: DimStyleTableRecord,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimtxt (self, *args, **kwargs)-> None :
      '''setDimtxt( (DimStyleTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setDimtxt(class PyDbDimStyleTableRecord {lvalue},double)'''
    ...
    def setDimtxtdirection (self: DimStyleTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setDimtzin (self: DimStyleTableRecord,val : int)-> None :
      '''                             '''
    ...
    def setDimupt (self: DimStyleTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setDimzin (self: DimStyleTableRecord,val : int)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setName (self: SymbolTableRecord,name: str)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class Dimension:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def altSuppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altSuppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altSuppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def altSuppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def alternatePrefix (self: Dimension)-> str :
      '''                             '''
    ...
    def alternateSuffix (self: Dimension)-> str :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockTransform (self: Dimension)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Dimension :
      '''                             '''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def centerMarkSize (self: Dimension)-> float :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Dimension :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dimBlockId (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimBlockPosition (self: Dimension)-> PyGe.Point3d :
      '''                             '''
    ...
    def dimExt1Linetype (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimExt2Linetype (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimLineLinetype (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimensionStyle (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimensionText (self: Dimension)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevation (self: Dimension)-> float :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def fieldFromMText (self: Dimension,ref : PyDb.MText)-> None :
      '''                             '''
    ...
    def fieldToMText (self: Dimension,ref : PyDb.MText)-> None :
      '''                             '''
    ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self: Dimension)-> None :
      '''                             '''
    ...
    def getArrowFirstIsFlipped (self: Dimension)-> bool :
      '''                             '''
    ...
    def getArrowSecondIsFlipped (self: Dimension)-> bool :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDimstyleData (self: Dimension)-> PyDb.DimStyleTableRecord :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def horizontalRotation (self: Dimension)-> float :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def inspection (self: Dimension)-> bool :
      '''                             '''
    ...
    def inspectionFrame (self: Dimension)-> int :
      '''                             '''
    ...
    def inspectionLabel (self: Dimension)-> str :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self: Dimension)-> bool :
      '''                             '''
    ...
    def isConstraintObject (self: Dimension)-> tuple :
      '''                             '''
    ...
    def isDynamicDimension (self: Dimension)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self: Dimension)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self: Dimension)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def measurement (self: Dimension)-> float :
      '''                             '''
    ...
    def normal (self: Dimension)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def prefix (self: Dimension)-> str :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recomputeDimBlock (self: Dimension,force : bool=False)-> None :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def removeTextField (self: Dimension)-> None :
      '''                             '''
    ...
    def resetTextDefinedSize (self: Dimension)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAltSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAlternatePrefix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setAlternateSuffix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setArrowFirstIsFlipped (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setArrowSecondIsFlipped (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setConstraintDynamic (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDimBlockId (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimBlockPosition (self: Dimension,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setDimExt1Linetype (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimExt2Linetype (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimLineLinetype (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimensionStyle (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimensionText (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setDimstyleData (self, *args, **kwargs)-> None :
      '''setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setElevation (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setHorizontalRefTextRotation (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setHorizontalRotation (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setInspection (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setInspectionFrame (self: Dimension,val : int)-> None :
      '''                             '''
    ...
    def setInspectionLabel (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self: Dimension,val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setShouldParticipateInOPM (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuffix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setSuppressAngularTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setTextAttachment (self: Dimension,val : PyDb.MTextAttachmentPoint)-> None :
      '''                             '''
    ...
    def setTextDefinedSize (self: Dimension,width : float,height : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingFactor (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingStyle (self: Dimension,val : PyDb.LineSpacingStyle)-> None :
      '''                             '''
    ...
    def setTextPosition (self: Dimension,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setTextRotation (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setToleranceSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setUsingDefaultTextPosition (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def shouldParticipateInOPM (self: Dimension)-> bool :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def suffix (self: Dimension)-> str :
      '''                             '''
    ...
    def suppressAngularLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressAngularTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAttachment (self: Dimension)-> PyDb.MTextAttachmentPoint :
      '''                             '''
    ...
    def textDefinedSize (self: Dimension)-> tuple :
      '''                             '''
    ...
    def textLineSpacingFactor (self: Dimension)-> float :
      '''                             '''
    ...
    def textLineSpacingStyle (self: Dimension)-> PyDb.LineSpacingStyle :
      '''                             '''
    ...
    def textPosition (self: Dimension)-> PyGe.Point3d :
      '''                             '''
    ...
    def textRotation (self: Dimension)-> float :
      '''                             '''
    ...
    def toleranceSuppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def toleranceSuppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def useDefaultTextPosition (self: Dimension)-> None :
      '''                             '''
    ...
    def useSetTextPosition (self: Dimension)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class DrawLeaderOrderType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kDrawLeaderHeadFirst (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDrawLeaderTailFirst (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class DrawMLeaderOrderType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kDrawContentFirst (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDrawLeaderFirst (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class DuplicateRecordCloning:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kDrcIgnore (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDrcMangleName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDrcNotApplicable (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDrcReplace (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDrcUnmangleName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDrcXrefMangleName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class DwgDataType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kDwg3Real (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDwgBChunk (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDwgHandle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDwgHardOwnershipId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDwgHardPointerId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDwgInt16 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDwgInt32 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDwgInt64 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDwgInt8 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDwgNotRecognized (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDwgNull (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDwgReal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDwgSoftOwnershipId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDwgSoftPointerId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDwgText (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class DwgVersion:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kDHL_1001 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1002 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1003 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1004 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1005 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1006 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1007 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1008 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1009 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1010 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1011 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1012 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1013 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1014 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1015 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1021 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1024 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1027 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1032 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1500 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1800 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1800a (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_2100a (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_2400a (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_2700a (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_3200a (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_AC1_2 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_AC1_40 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_AC1_50 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_AC2_10 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_AC2_20 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_AC2_21 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_AC2_22 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_CURRENT (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_MC0_0 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_Max (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_Newest (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_Unknown (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class DxfCode:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kDxfAlpha (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfAngle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfArbHandle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfAttributePrompt (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfAttributeTag (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfBinaryChunk (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfBlockName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfBool (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfCLShapeName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfCLShapeText (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfCircleSides (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfColor (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfColorName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfColorRGB (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfComment (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfControlString (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfDashLength (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfDefaultLightingOn (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfDefaultLightingType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfDescription (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfDimAPostStr (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfDimBlk (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfDimBlk1 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfDimBlk2 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfDimPostStr (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfDimStyleName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfDimVarHandle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfDragVisualStyleId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfEdgeStyleId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfElevation (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfEmbeddedObjectStart (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfEnd (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfFaceStyleId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfFirstEntId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfGradientAngle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfGradientColCount (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfGradientColVal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfGradientName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfGradientObjType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfGradientPatType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfGradientShift (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfGradientTintType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfGradientTintVal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfHandle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfHardOwnershipId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfHardPointerId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfHasSubentities (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfHeaderId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfInt16 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfInt32 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfInt64 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfInt8 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfInvalid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfLayerLinetype (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfLayerName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfLayoutName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfLineWeight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfLinetypeAlign (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfLinetypeElement (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfLinetypeName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfLinetypePDC (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfLinetypeProse (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfLinetypeScale (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfLiveSectionId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfLiveSectionName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfMaterialId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfMlineOffset (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfMstyleName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfNormalX (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfNormalY (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfNormalZ (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfObjVisualStyleId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfOperator (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfPReactors (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfPixelScale (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfPlotStyleNameId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfPlotStyleNameType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfReal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfRegAppFlags (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfRegAppName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfRenderMode (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfShadePlotId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfShadowFlags (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfShapeName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfShapeScale (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfShapeXOffset (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfShapeYOffset (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfSoftOwnershipId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfSoftPointerId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfStart (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfSubclass (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfSunId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfSymTableRecComments (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfSymTableRecName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfSymbolTableName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfText (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfTextBigFontFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfTextFontFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfTextStyleName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfThickness (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfTxtSize (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfTxtStyleFlags (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfTxtStylePSize (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfTxtStyleXScale (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfUCSOrg (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfUCSOriX (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfUCSOriY (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfVertexIdentifier (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewBackClip (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewBackgroundId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewBrightness (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewContrast (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewFrontClip (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewHeight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewLensLength (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewMode (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewWidth (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewportActive (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewportAspect (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewportGrid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewportGridDisplay (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewportGridMajor (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewportHeight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewportIcon (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewportNumber (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewportSnap (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewportSnapAngle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewportSnapPair (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewportSnapStyle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewportTwist (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewportVisibility (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewportZoom (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfVisibility (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfVisualStyleId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfVpVisualStyleId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXCoord (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXDataStart (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXDictionary (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXInt16 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXReal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXRefPath (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXTextString (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXXInt16 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXXXInt16 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdAsciiString (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdBinaryChunk (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdControlString (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdDist (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdHandle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdInteger16 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdInteger32 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdLayerName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdMax (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdReal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdScale (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdWorldXCoord (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdWorldXDir (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdWorldXDisp (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdWorldYCoord (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdWorldYDir (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdWorldYDisp (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdWorldZCoord (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdWorldZDir (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdWorldZDisp (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdXCoord (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdYCoord (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdZCoord (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfYCoord (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfZCoord (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class DynBlockReference:
    def __init__ (self: DynBlockReference,val : ObjectId)-> None :
      '''                             '''
    ...
    def anonymousBlockTableRecord (self: DynBlockReference)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockId (self: DynBlockReference)-> PyDb.ObjectId :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def convertToStaticBlock (self: DynBlockReference,val : str=None)-> None :
      '''                             '''
    ...
    def dynamicBlockTableRecord (self: DynBlockReference)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getBlockProperties (self: DynBlockReference)-> list :
      '''                             '''
    ...

    @staticmethod
    def getIsDynamicBlock (otherObject: ObjectId)-> bool :
      '''                             '''
    ...
    def isDynamicBlock (self: DynBlockReference)-> bool :
      '''                             '''
    ...
    def resetBlock (self: DynBlockReference)-> None :
      '''                             '''
    ...

class DynBlockReferenceProperty:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def blockId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''blockId( (DynBlockReferenceProperty)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def description (self, *args, **kwargs)-> str :
      '''description( (DynBlockReferenceProperty)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > description(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...
    def getAllowedValues (self, *args, **kwargs)-> list :
      '''getAllowedValues( (DynBlockReferenceProperty)arg1) -> list :

    C++ signature :
        class boost::python::list getAllowedValues(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...
    def propertyName (self, *args, **kwargs)-> str :
      '''propertyName( (DynBlockReferenceProperty)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > propertyName(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...
    def propertyType (self, *args, **kwargs)-> PyDb.DwgDataType :
      '''propertyType( (DynBlockReferenceProperty)arg1) -> DwgDataType :

    C++ signature :
        enum AcDb::DwgDataType propertyType(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...
    def readOnly (self, *args, **kwargs)-> bool :
      '''readOnly( (DynBlockReferenceProperty)arg1) -> bool :

    C++ signature :
        bool readOnly(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...
    def setValue (self, *args, **kwargs)-> None :
      '''setValue( (DynBlockReferenceProperty)arg1, (EvalVariant)arg2) -> None :

    C++ signature :
        void setValue(class PyDbDynBlockReferenceProperty {lvalue},class PyDbEvalVariant)'''
    ...
    def show (self, *args, **kwargs)-> bool :
      '''show( (DynBlockReferenceProperty)arg1) -> bool :

    C++ signature :
        bool show(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...
    def unitsType (self, *args, **kwargs)-> PyDb.DynUnitsType :
      '''unitsType( (DynBlockReferenceProperty)arg1) -> DynUnitsType :

    C++ signature :
        enum AcDbDynBlockReferenceProperty::UnitsType unitsType(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...
    def value (self, *args, **kwargs)-> PyDb.EvalVariant :
      '''value( (DynBlockReferenceProperty)arg1) -> EvalVariant :

    C++ signature :
        class PyDbEvalVariant value(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...
    def visibleInCurrentVisibilityState (self, *args, **kwargs)-> bool :
      '''visibleInCurrentVisibilityState( (DynBlockReferenceProperty)arg1) -> bool :

    C++ signature :
        bool visibleInCurrentVisibilityState(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...

class DynUnitsType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kAngular (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kArea (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDistance (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNoUnits (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class Ellipse:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4, (float)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGeVector3d,class AcGeVector3d,double)

__init__( (object)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4, (float)arg5, (float)arg6, (float)arg7) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGeVector3d,class AcGeVector3d,double,double,double)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3, (bool)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode,bool)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def angleAtParam (self: Ellipse,val : float)-> float :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Ellipse :
      '''                             '''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def center (self: Ellipse)-> PyGe.Point3d :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Ellipse :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def createFromAcGeCurve (curve: PyGe.Curve3d,normal: PyGe.Vector3d = kZAxis,tol: Tol = default)-> PyDb.Curve :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def endAngle (self: Ellipse)-> float :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> None :
      '''extend( (Curve)arg1, (float)arg2) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def get (self: Ellipse)-> tuple :
      '''                             '''
    ...
    def getAcGeCurve (self: Curve,tol: Tol = default)-> PyGe.Curve3d :
      '''                             '''
    ...
    def getArea (self: Curve)-> float :
      '''                             '''
    ...
    def getClosestPointTo (self: Curve,point3d: PyGe.Point3d,direction: PyGe.Vector3d=None,extend: bool=False)-> PyGe.Point3d :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDistAtParam (self: Curve,param: float)-> float :
      '''                             '''
    ...
    def getDistAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEndParam (self: Curve)-> float :
      '''                             '''
    ...
    def getEndPoint (self: Curve)-> PyGe.Point3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self: Curve,param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getOffsetCurves (self: Curve,dist: float)-> list :
      '''                             '''
    ...
    def getOffsetCurvesGivenPlaneNormal (self: Curve,normal: PyGe.Vector3d,dist: float)-> list :
      '''                             '''
    ...
    def getOrthoProjectedCurve (self: Curve,plane: PyGe.Plane)-> PyDb.Curve :
      '''                             '''
    ...
    def getParamAtDist (self: Curve,dist: float)-> float :
      '''                             '''
    ...
    def getParamAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getPointAtDist (self: Curve,dist: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getPointAtParam (self: Curve,param: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getProjectedCurve (self: Curve,plane: PyGe.Plane,projDir: PyGe.Vector3d)-> PyDb.Curve :
      '''                             '''
    ...
    def getSecondDeriv (self: Curve,param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getSpline (self: Curve)-> PyDb.Spline :
      '''                             '''
    ...
    def getSplitCurves (self: Curve,paramsOrPoints: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParam (self: Curve,param: float)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParams (self: Curve,params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoint (self: Curve,point: PyGe.Point3d)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoints (self: Curve,points: list)-> list :
      '''                             '''
    ...
    def getStartParam (self: Curve)-> float :
      '''                             '''
    ...
    def getStartPoint (self: Curve)-> PyGe.Point3d :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isClosed (self: Curve)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self: Ellipse)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPeriodic (self: Curve)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def majorAxis (self: Ellipse)-> PyGe.Vector3d :
      '''                             '''
    ...
    def majorRadius (self: Ellipse)-> float :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def minorAxis (self: Ellipse)-> PyGe.Vector3d :
      '''                             '''
    ...
    def minorRadius (self: Ellipse)-> float :
      '''                             '''
    ...
    def normal (self: Ellipse)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def paramAtAngle (self: Ellipse,val : float)-> float :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def radiusRatio (self: Ellipse)-> float :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def reverseCurve (self: Curve)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def set (self, *args, **kwargs)-> None :
      '''set( (Ellipse)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4, (float)arg5) -> None :

    C++ signature :
        void set(class PyDbEllipse {lvalue},class AcGePoint3d,class AcGeVector3d,class AcGeVector3d,double)

set( (Ellipse)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4, (float)arg5, (float)arg6, (float)arg7) -> None :

    C++ signature :
        void set(class PyDbEllipse {lvalue},class AcGePoint3d,class AcGeVector3d,class AcGeVector3d,double,double,double)'''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setCenter (self: Ellipse,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setEndAngle (self: Ellipse,val : float)-> None :
      '''                             '''
    ...
    def setEndParam (self: Ellipse,val : float)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setFromAcGeCurve (self: Curve,curve: PyGe.Curve3d,normal: PyGe.Vector3d = kZAxis,tol: Tol = default)-> None :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMajorRadius (self: Ellipse,val : float)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMinorRadius (self: Ellipse,val : float)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setRadiusRatio (self: Ellipse,val : float)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setStartAngle (self: Ellipse,val : float)-> None :
      '''                             '''
    ...
    def setStartParam (self: Ellipse,val : float)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def startAngle (self: Ellipse)-> float :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class EndCaps:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kEndCapAngle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEndCapNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEndCapRound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEndCapSquare (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class Entity:
    def __init__ (self: PyDb.Entity,id: PyDb.ObjectId,mode:  PyDb.OpenMode=kForRead,erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: RxObject)-> PyDb.Entity :
      '''                             '''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: RxObject)-> PyDb.Entity :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class EntityColor:
    def ByBlock (self: EntityColor)-> PyDb.EntityColor :
      '''                             '''
    ...
    def ByLayer (self: EntityColor)-> PyDb.EntityColor :
      '''                             '''
    ...
    def ByNone (self: EntityColor)-> PyDb.EntityColor :
      '''                             '''
    ...
    def Foreground (self: EntityColor)-> PyDb.EntityColor :
      '''                             '''
    ...

    @staticmethod
    def None ()-> PyDb.EntityColor :
      '''                             '''
    ...
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (int)arg2, (int)arg3, (int)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,unsigned char,unsigned char,unsigned char)'''
    ...
    def black (self: EntityColor)-> PyDb.EntityColor :
      '''                             '''
    ...
    def blue (self: EntityColor)-> int :
      '''                             '''
    ...
    def canResolveRGB (self: EntityColor)-> bool :
      '''                             '''
    ...
    def colorIndex (self: EntityColor)-> int :
      '''                             '''
    ...
    def colorMethod (self: EntityColor)-> PyDb.ColorMethod :
      '''                             '''
    ...
    def getCOLORREF (self: EntityColor)-> int :
      '''                             '''
    ...
    def getRGB (self: EntityColor)-> int :
      '''                             '''
    ...
    def getRGBM (self: EntityColor)-> int :
      '''                             '''
    ...
    def green (self: EntityColor)-> int :
      '''                             '''
    ...
    def isByACI (self: EntityColor)-> bool :
      '''                             '''
    ...
    def isByBlock (self: EntityColor)-> bool :
      '''                             '''
    ...
    def isByColor (self: EntityColor)-> bool :
      '''                             '''
    ...
    def isByLayer (self: EntityColor)-> bool :
      '''                             '''
    ...
    def isByPen (self: EntityColor)-> bool :
      '''                             '''
    ...
    def isForeground (self: EntityColor)-> bool :
      '''                             '''
    ...
    def isLayerFrozen (self: EntityColor)-> bool :
      '''                             '''
    ...
    def isLayerFrozenOrOff (self: EntityColor)-> bool :
      '''                             '''
    ...
    def isLayerOff (self: EntityColor)-> bool :
      '''                             '''
    ...
    def isNone (self: EntityColor)-> bool :
      '''                             '''
    ...
    def layerIndex (self: EntityColor)-> int :
      '''                             '''
    ...
    def makeTrueColor (self: EntityColor)-> PyDb.EntityColor :
      '''                             '''
    ...
    def penIndex (self: EntityColor)-> int :
      '''                             '''
    ...
    def red (self: EntityColor)-> int :
      '''                             '''
    ...
    def setByBlock (self: EntityColor)-> None :
      '''                             '''
    ...
    def setByLayer (self: EntityColor)-> None :
      '''                             '''
    ...
    def setCOLORREF (self: EntityColor,val : int)-> PyDb.ErrorStatus :
      '''                             '''
    ...
    def setColorIndex (self: EntityColor,val : int)-> PyDb.ErrorStatus :
      '''                             '''
    ...
    def setForeground (self: EntityColor)-> None :
      '''                             '''
    ...
    def setLayerIndex (self: EntityColor,val : int)-> PyDb.ErrorStatus :
      '''                             '''
    ...
    def setLayerOff (self: EntityColor)-> None :
      '''                             '''
    ...
    def setNone (self: EntityColor)-> None :
      '''                             '''
    ...
    def setPenIndex (self: EntityColor,val : int)-> PyDb.ErrorStatus :
      '''                             '''
    ...
    def setRGB (self, *args, **kwargs)-> PyDb.ErrorStatus :
      '''setRGB( (EntityColor)arg1, (SubentType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRGB(class AcCmEntityColor {lvalue},unsigned int)

setRGB( (EntityColor)arg1, (int)arg2, (int)arg3, (int)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRGB(class AcCmEntityColor {lvalue},unsigned char,unsigned char,unsigned char)'''
    ...
    def setRGBM (self: EntityColor,val : int)-> PyDb.ErrorStatus :
      '''                             '''
    ...
    def white (self: EntityColor)-> PyDb.EntityColor :
      '''                             '''
    ...

class EntityReactor:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def cancelled (self: EntityReactor,obj: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copied (self: EntityReactor,obj: PyDb.DbObject,newObj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def dragCloneToBeDeleted (self: EntityReactor,obj: PyDb.Entity,clone: PyDb.Entity)-> None :
      '''                             '''
    ...
    def erased (self: EntityReactor,obj: PyDb.DbObject,flag: bool)-> None :
      '''                             '''
    ...
    def goodbye (self: EntityReactor,obj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def modified (self: EntityReactor,obj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def modifiedGraphics (self: EntityReactor,obj: PyDb.Entity)-> None :
      '''                             '''
    ...
    def modifiedXData (self: EntityReactor,obj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def modifyUndone (self: EntityReactor,obj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def objectClosed (self: EntityReactor,obj: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def openedForModify (self: EntityReactor,obj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def reappended (self: EntityReactor,obj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def subObjModified (self: EntityReactor,obj: PyDb.DbObject,subObj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def unappended (self: EntityReactor,obj: PyDb.DbObject)-> None :
      '''                             '''
    ...

class ErrorStatus:
    def Ok (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def eAbortPreview (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eAllInSameRigidSet (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eAlreadyActive (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eAlreadyHasRepresentation (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eAlreadyInDb (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eAlreadyInGroup (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eAlreadyInactive (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eAlreadyInferred (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eAmbiguousInput (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eAmbiguousOutput (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eAnonymousEntry (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eAtMaxReaders (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBackgroundPlotInProgress (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBadColor (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBadColorIndex (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBadDwgHeader (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBadDxfFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBadDxfSequence (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBadLayerName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBadLineWeightValue (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBadLinetypeName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBadLinetypeScale (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBadMaterialName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBadPaperspaceView (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBadPlotStyleName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBadPlotStyleNameHandle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBadPlotStyleType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBadUCS (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBadVisibilityValue (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBadlyNestedAppData (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBinaryDataSizeExceeded (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBlockDefInEntitySection (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBrokenHandle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBufferTooSmall (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCannotBeErasedByCaller (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCannotBeResurrected (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCannotChangeActiveViewport (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCannotChangeColumnType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCannotExplodeEntity (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCannotNestBlockDefs (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCannotPlotToFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCannotRestoreFromAcisFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCannotScaleNonUniformly (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCantOpenFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eChangedAgainstAssociativity (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCloseFailObjectDamaged (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCloseModifyAborted (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eClosePartialFailure (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCloseWasNotifying (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCommandWasInProgress (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eContainerNotEmpty (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eConvertImageFormatFailed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCopyDoesNotExist (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCopyFailed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCopyInvalidName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCopyIsModelSpace (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCopyNameExists (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCreateFailed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCreateInvalidName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCustomSizeNotPossible (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCyclicDependency (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDataLinkAdapterNotFound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDataLinkBadConnectionString (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDataLinkConnectionFailed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDataLinkExcelNotFound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDataLinkInvalidAdapterId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDataLinkNotFound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDataLinkNotUpdatedYet (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDataLinkOtherError (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDataLinkSourceIsWriteProtected (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDataLinkSourceNotFound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDataLinkSourceUpdateNotAllowed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDataTooLarge (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDatabaseObjectsOpen (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDegenerateGeometry (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDelDoesNotExist (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDelIsModelSpace (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDelLastLayout (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDelUnableToFind (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDelUnableToSetCurrent (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDelayMore (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDeleteEntity (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDeletedEntry (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDependentOnObjectErased (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDeviceNotFound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDocumentSwitchDisabled (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDuplicateBlockDefinition (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDuplicateBlockName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDuplicateDxfField (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDuplicateIndex (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDuplicateKey (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDuplicateLayerName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDuplicateRecordName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDwgCRCDoesNotMatch (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDwgNeedsAFullSave (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDwgNotRecoverable (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDwgObjectImproperlyRead (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDwgRecoveredOK (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDwgSentinelDoesNotMatch (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDwgShareDemandLoad (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDwgShareReadAccess (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDwgShareWriteAccess (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDwkLockFileFound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDxbPartiallyRead (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDxbReadAborted (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDxfPartiallyRead (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDxfReadAborted (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eEmbeddedIntersections (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eEmptyOperand (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eEndOfFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eEndOfObject (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eEndPreview (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eEntityInInactiveLayout (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eEntityRestricedInDOF (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eExcessiveItemCount (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eExplodeBeforeTransform (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFSMError (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFailedCurveCheck (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFailedToBlend (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFailedToEvaluate (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFailedToEvaluateDependents (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFailedToSetEdgeChamfers (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFailedToSetEdgeRounds (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFailedToSetVertexRounds (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFileAccessErr (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFileExists (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFileInternalErr (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFileLockedByACAD (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFileMissingSections (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFileNotFound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFileNotInCloud (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFileSharingViolation (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFileSystemErr (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFileTooManyOpen (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFilerError (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFixedAllErrors (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eGeneralModelingFailure (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eGetAdIntImgServicesFailed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eGetImageBytesFailed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eGetImageDIBFailed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eGetPreviewImageFailed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eGraphContainsProxies (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eGraphCyclesFound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eGraphEdgeAlreadyExists (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eGraphEdgeNotFound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eGraphNodeAlreadyExists (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eGraphNodeNotFound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eGraphicsNotGenerated (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eGuidNoAddress (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eHadMultipleReaders (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eHandleExists (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eHandleInUse (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eHatchTooDense (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eIgnoredLinetypeRedef (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eIllegalEntityType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eIllegalReplacement (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInProcessOfCommitting (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eIncompatiblePlotSettings (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eIncompleteBlockDefinition (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eIncompleteComplexObject (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInconsistentConstraint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetBadPath (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetBase (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetCreateInternetSessionFailed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetDirectoryFull (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetDiskFull (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetFileAccessDenied (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetFileGenericError (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetFileNotFound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetFileOpenFailed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetGenericException (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHardwareError (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpAccessDenied (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpBadGateway (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpBadMethod (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpBadRequest (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpConflict (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpGatewayTimeout (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpLengthRequired (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpNoAcceptableResponse (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpNotSupported (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpObjectNotFound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpOpenRequestFailed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpPaymentRequired (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpPreconditionFailure (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpProxyAuthorizationRequired (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpRequestForbidden (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpRequestTooLarge (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpResourceGone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpServerError (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpServiceUnavailable (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpTimedOut (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpUnsupportedMedia (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpUriTooLong (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpVersionNotSupported (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetInCache (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetInternetError (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetInternetSessionConnectFailed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetInternetSessionOpenFailed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetInvalidAccessType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetInvalidFileHandle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetNoAcadInet (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetNoWinInet (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetNotAnURL (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetNotImplemented (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetOk (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetOldWinInet (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetProtocolNotSupported (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetSharingViolation (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetTooManyOpenFiles (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetUnknownError (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetUserCancelledTransfer (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetValidURL (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInsertAfter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidAdsName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidAxis (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidBlockName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidContext (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidDimStyle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidDwgVersion (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidDxf2dPoint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidDxf3dPoint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidDxfCode (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidDxfSectionName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidEngineState (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidExpression (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidExtents (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidFaceVertexIndex (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidFileExtension (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidFix (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidIdMap (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidIndex (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidInput (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidKey (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidLayer (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidMeshVertexIndex (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidNormal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidObjectId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidOffset (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidOpenState  (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidOwnerObject (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidParameterName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidPlotArea (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidPlotInfo (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidPreviewImage (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidProfileName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidREFIID (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidResBuf (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidStyle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidSymTableFlag (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidSymbolTableName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidTextStyle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidView (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidWindowArea (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidXrefObjectId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eIsAnEntity (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eIsReading (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eIsWriteProtected (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eIsWriting (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eIsXRefObject (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eItemCountChanged (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eIteratorDone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eKeyNotFound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eLISPActive (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eLayerGroupCodeMissing (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eLayoutNotCurrent (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eLeftErrorsUnfixed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eLoadFailed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eLockChangeInProgress (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eLockConflict (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eLockViolation (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eLongTransReferenceError (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMakeMeProxy (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMakeMeProxyAndResurrect (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMaxLayouts (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMaxNodes (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMissingBlockName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMissingDxfField (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMissingDxfSection (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMissingSymbolTable (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMissingSymbolTableRec (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eModifyingAssociativeEntity (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eModifyingDimensionWithExpression (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMustBe0to2 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMustBe0to3 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMustBe0to4 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMustBe0to5 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMustBe0to8 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMustBe1to15 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMustBe1to6 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMustBe1to8 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMustBeInteger (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMustBeNonNegative (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMustBeNonZero (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMustBePositive (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMustBePositiveInteger (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMustFirstAddBlockToDb (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMustOpenThruOwner (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMustPlotToFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNLSFileNotAvailable (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNearSizeLimit (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNegativeValueNotAllowed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoAcDbHostApplication (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoActiveTransactions (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoBlockBegin (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoClassId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoConnectedBlendSet (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoCurrentConfig (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoDatabase (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoDocument (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoEntitiesFromPersistentIds (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoErrorHandler (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoFileName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoInputFiler (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoInputPath (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoInternalSpace (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoIntersections (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoLabelBlock (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoLayout (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoMatchingMedia (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoNodeActive (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoOverride (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoPlotStyleTranslationTable (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoPreviewContext (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoRepresentation (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoStoredOverrides (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoStoredReconcileStatus (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoThumbnailBitmap (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoUnderlayHost (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoViewAssociation (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoWorkSet (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNonCoplanarGeometry (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNonPlanarEntity (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNonePlotDevice (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotAllowedForThisProxy (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotAnEntity (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotApplicable (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotAssociative (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotClonedPrimaryProxy (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotConnected (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotCurrentDatabase (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotDxfHeaderGroupCode (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotFromThisDocument (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotG1Continuous (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotHandled (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotImplementedYet (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotInBlock (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotInDatabase (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotInGroup (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotInPaperspace (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotInitializedYet (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotMultiPageCapable (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotNewlyCreated (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotOnBoundary (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotOpenForRead (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotOpenForWrite (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotShownInPropertyPalette (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotSupportedInDwgApi (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotThatKindOfClass (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotTopTransaction (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNullBlockName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNullEntityPointer (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNullExtents (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNullHandle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNullIterator (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNullNodeId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNullObjectId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNullObjectPointer (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNullPtr (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNumberOfCopiesNotSupported (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eObjectIsReferenced (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eObjectToBeDeleted (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eObsoleteFileFormat (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eOk (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eOnLockedLayer (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eOpenFileCancelled (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eOtherObjectsBusy (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eOutOfDisk (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eOutOfMemory (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eOutOfPagerMemory (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eOutOfRange (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eOverDefinedConstraint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eOwnerNotInDatabase (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eOwnerNotOpenForRead (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eOwnerNotOpenForWrite (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eOwnerNotSet (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eOwnerToBeTransformed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePCCoordSysAssignFail (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePCCoordSysReprojectFail (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePCDiskSpaceTooSmall (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePCFileDataSelectorInvalid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePCFileNotClosed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePCFileNotCreated (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePCFileNotErased (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePCFileNotFound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePCFileNotOpened (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePCFileNotWritten (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePCFileWrongFormat (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePCInProgress (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePCLargeData (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePCLastImporterUnfinished (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePCNoEngineInfo (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePCThreadTerminated (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePCUnknown (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePCUnknownFileType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePageCancelled (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePagerError (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePagerWriteError (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePermanentlyErased (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePlotAlreadyStarted (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePlotCancelled (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePlotStyleInColorDependentMode (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePointNotOnEntity (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePolyWidthLost (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePreviewFailed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eProfileDoesNotExist (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eProfileIsInUse (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eProperClassSeparatorExpected (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eReadImageBufferFailed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eRecordNotInTable (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eReferencedInEquation (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eRegappIdNotFound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eRegistryAccessError (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eRegistryCreateError (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eRenameDoesNotExist (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eRenameInvalidLayoutName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eRenameInvalidName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eRenameIsModelSpace (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eRenameLayoutAlreadyExists (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eRepeatEntity (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eRepeatedDwgRead (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eRowsMustMatchColumns (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eSecErrorCipherNotSupported (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eSecErrorComputingSignature (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eSecErrorDecryptingData (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eSecErrorEncryptingData (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eSecErrorGeneratingTimestamp (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eSecErrorReadingFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eSecErrorWritingFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eSecErrorWritingSignature (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eSecInitializationFailure (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eSecInvalidDigitalID (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eSelfIntersecting (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eSelfReference (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eSetFailed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eSilentOpenFileCancelled (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eSingularPoint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eSomeInputDataLeftUnread (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eStringNotAllowedInExpression (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eStringTooLong (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eSubSelectionSetEmpty (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eSubentitiesStillOpen (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eTargetDocNotQuiescent (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eTooFewLineTypeElements (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eTooFewVertices (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eTooManyActiveCommands (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eTooManyLineTypeElements (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eTooManyVertices (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eTransactionOpenWhileCommandEnded (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUnableToGetLabelBlock (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUnableToGetViewAssociation (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUnableToRemoveAssociation  (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUnableToRemoveOverrides (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUnableToRetrieveOverrides (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUnableToSetLabelBlock (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUnableToSetViewAssociation (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUnableToStoreOverrides (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUnableToStoreReconcileStatus (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUnableToSyncModelView (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUnableToTrimLastPiece (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUnableToTrimSurface (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUndefineShapeName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUndefinedDxfGroupCode (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUndefinedLineType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUndoNoGroupBegin (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUndoOperationNotAvailable (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUnknownDxfFileFormat (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUnknownHandle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUnrecoverableErrors (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUnsupportedFileFormat (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUserBreak (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUserUnloaded (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eVSAPIOnlyValues (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eVSAlreadyExists (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eVSFalse (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eVSIsAcadDefault (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eVSIsInUse (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eVSNotFound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eVSOneOffCreated (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eVSTrue (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eVertexAfterFace (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eVetoed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eWasErased (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eWasNotErased (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eWasNotForwarding (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eWasNotOpenForWrite (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eWasNotifying (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eWasOpenForNotify (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eWasOpenForRead (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eWasOpenForUndo (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eWasOpenForWrite (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eWriteImageBufferFailed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eWrongCellType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eWrongDatabase (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eWrongObjectType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eWrongSubentityType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eXRefDependent (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eXdataSizeExceeded (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eXrefReloadImpossibleAtThisTime (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eXrefReloaded (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class EvalVariant:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (float)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,double)

__init__( (object)arg1, (int)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,int)

__init__( (object)arg1, (str)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (Point2d)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint2d)

__init__( (object)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def clear (self, *args, **kwargs)-> None :
      '''clear( (EvalVariant)arg1) -> None :

    C++ signature :
        void clear(class PyDbEvalVariant {lvalue})'''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, *args, **kwargs)-> None :
      '''copyFrom( (EvalVariant)arg1, (RxObject)arg2) -> None :

    C++ signature :
        void copyFrom(class PyDbEvalVariant {lvalue},class PyRxObject)'''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def getDouble (self, *args, **kwargs)-> float :
      '''getDouble( (EvalVariant)arg1) -> float :

    C++ signature :
        double getDouble(class PyDbEvalVariant {lvalue})'''
    ...
    def getInt16 (self, *args, **kwargs)-> int :
      '''getInt16( (EvalVariant)arg1) -> int :

    C++ signature :
        short getInt16(class PyDbEvalVariant {lvalue})'''
    ...
    def getInt32 (self, *args, **kwargs)-> int :
      '''getInt32( (EvalVariant)arg1) -> int :

    C++ signature :
        int getInt32(class PyDbEvalVariant {lvalue})'''
    ...
    def getObjectId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getObjectId( (EvalVariant)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getObjectId(class PyDbEvalVariant {lvalue})'''
    ...
    def getPoint2d (self, *args, **kwargs)-> PyGe.Point2d :
      '''getPoint2d( (EvalVariant)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d getPoint2d(class PyDbEvalVariant {lvalue})'''
    ...
    def getPoint3d (self, *args, **kwargs)-> PyGe.Point3d :
      '''getPoint3d( (EvalVariant)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getPoint3d(class PyDbEvalVariant {lvalue})'''
    ...
    def getString (self, *args, **kwargs)-> str :
      '''getString( (EvalVariant)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getString(class PyDbEvalVariant {lvalue})'''
    ...
    def getType (self, *args, **kwargs)-> PyDb.DwgDataType :
      '''getType( (EvalVariant)arg1) -> DwgDataType :

    C++ signature :
        enum AcDb::DwgDataType getType(class PyDbEvalVariant {lvalue})'''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def setDouble (self, *args, **kwargs)-> None :
      '''setDouble( (EvalVariant)arg1, (DxfCode)arg2, (float)arg3) -> None :

    C++ signature :
        void setDouble(class PyDbEvalVariant {lvalue},short,double)'''
    ...
    def setInt16 (self, *args, **kwargs)-> None :
      '''setInt16( (EvalVariant)arg1, (DxfCode)arg2, (DxfCode)arg3) -> None :

    C++ signature :
        void setInt16(class PyDbEvalVariant {lvalue},short,short)'''
    ...
    def setInt32 (self, *args, **kwargs)-> None :
      '''setInt32( (EvalVariant)arg1, (DxfCode)arg2, (int)arg3) -> None :

    C++ signature :
        void setInt32(class PyDbEvalVariant {lvalue},short,int)'''
    ...
    def setObjectId (self, *args, **kwargs)-> None :
      '''setObjectId( (EvalVariant)arg1, (DxfCode)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void setObjectId(class PyDbEvalVariant {lvalue},short,class PyDbObjectId)'''
    ...
    def setPoint2d (self, *args, **kwargs)-> None :
      '''setPoint2d( (EvalVariant)arg1, (DxfCode)arg2, (Point2d)arg3) -> None :

    C++ signature :
        void setPoint2d(class PyDbEvalVariant {lvalue},short,class AcGePoint2d)'''
    ...
    def setPoint3d (self, *args, **kwargs)-> None :
      '''setPoint3d( (EvalVariant)arg1, (DxfCode)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void setPoint3d(class PyDbEvalVariant {lvalue},short,class AcGePoint3d)'''
    ...
    def setString (self, *args, **kwargs)-> None :
      '''setString( (EvalVariant)arg1, (DxfCode)arg2, (str)arg3) -> None :

    C++ signature :
        void setString(class PyDbEvalVariant {lvalue},short,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...

class Extents:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Extents)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcDbExtents)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d)'''
    ...
    def addExt (self, *args, **kwargs)-> None :
      '''addExt( (Extents)arg1, (Extents)arg2) -> None :

    C++ signature :
        void addExt(class AcDbExtents {lvalue},class AcDbExtents)'''
    ...
    def addPoint (self, *args, **kwargs)-> None :
      '''addPoint( (Extents)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void addPoint(class AcDbExtents {lvalue},class AcGePoint3d)'''
    ...
    def addPoints (self, *args, **kwargs)-> None :
      '''addPoints( (Extents)arg1, (object)arg2) -> None :

    C++ signature :
        void addPoints(class AcDbExtents {lvalue},class boost::python::api::object)'''
    ...
    def coords (self, *args, **kwargs)-> tuple :
      '''coords( (Extents)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple coords(class AcDbExtents)'''
    ...
    def expandBy (self, *args, **kwargs)-> None :
      '''expandBy( (Extents)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void expandBy(class AcDbExtents {lvalue},class AcGeVector3d)'''
    ...
    def intersectsWith (self, *args, **kwargs)-> bool :
      '''intersectsWith( (Extents)arg1, (Extents)arg2) -> bool :

    C++ signature :
        bool intersectsWith(class AcDbExtents,class AcDbExtents)'''
    ...
    def maxPoint (self, *args, **kwargs)-> PyGe.Point3d :
      '''maxPoint( (Extents)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d maxPoint(class AcDbExtents {lvalue})'''
    ...
    def minPoint (self, *args, **kwargs)-> PyGe.Point3d :
      '''minPoint( (Extents)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d minPoint(class AcDbExtents {lvalue})'''
    ...
    def set (self, *args, **kwargs)-> PyDb.ErrorStatus :
      '''set( (Extents)arg1, (Point3d)arg2, (Point3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus set(class AcDbExtents {lvalue},class AcGePoint3d,class AcGePoint3d)'''
    ...
    def transformBy (self, *args, **kwargs)-> None :
      '''transformBy( (Extents)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void transformBy(class AcDbExtents {lvalue},class AcGeMatrix3d)'''
    ...

class Extents2d:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Extents2d)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcDbExtents2d)

__init__( (object)arg1, (Point2d)arg2, (Point2d)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint2d,class AcGePoint2d)'''
    ...
    def addExt (self, *args, **kwargs)-> None :
      '''addExt( (Extents2d)arg1, (Extents2d)arg2) -> None :

    C++ signature :
        void addExt(class AcDbExtents2d {lvalue},class AcDbExtents2d)'''
    ...
    def addPoint (self, *args, **kwargs)-> None :
      '''addPoint( (Extents2d)arg1, (Point2d)arg2) -> None :

    C++ signature :
        void addPoint(class AcDbExtents2d {lvalue},class AcGePoint2d)'''
    ...
    def coords (self, *args, **kwargs)-> tuple :
      '''coords( (Extents2d)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple coords(class AcDbExtents2d)'''
    ...
    def expandBy (self, *args, **kwargs)-> None :
      '''expandBy( (Extents2d)arg1, (Vector2d)arg2) -> None :

    C++ signature :
        void expandBy(class AcDbExtents2d {lvalue},class AcGeVector2d)'''
    ...
    def intersectsWith (self, *args, **kwargs)-> bool :
      '''intersectsWith( (Extents2d)arg1, (Extents2d)arg2) -> bool :

    C++ signature :
        bool intersectsWith(class AcDbExtents2d,class AcDbExtents2d)'''
    ...
    def maxPoint (self, *args, **kwargs)-> PyGe.Point2d :
      '''maxPoint( (Extents2d)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d maxPoint(class AcDbExtents2d {lvalue})'''
    ...
    def minPoint (self, *args, **kwargs)-> PyGe.Point2d :
      '''minPoint( (Extents2d)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d minPoint(class AcDbExtents2d {lvalue})'''
    ...
    def set (self, *args, **kwargs)-> PyDb.ErrorStatus :
      '''set( (Extents2d)arg1, (Point2d)arg2, (Point2d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus set(class AcDbExtents2d {lvalue},class AcGePoint2d,class AcGePoint2d)'''
    ...
    def transformBy (self, *args, **kwargs)-> None :
      '''transformBy( (Extents2d)arg1, (Matrix2d)arg2) -> None :

    C++ signature :
        void transformBy(class AcDbExtents2d {lvalue},class AcGeMatrix2d)'''
    ...

class ExtrudedSurface:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.ExtrudedSurface :
      '''cast( (RxObject)arg1) -> ExtrudedSurface :

    C++ signature :
        class PyDbExtrudedSurface cast(class PyRxObject)'''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.ExtrudedSurface :
      '''cloneFrom( (RxObject)arg1) -> ExtrudedSurface :

    C++ signature :
        class PyDbExtrudedSurface cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def createExtrudedSurface (self, *args, **kwargs)-> PyDb.ExtrudedSurface :
      '''createExtrudedSurface( (Profile3d)arg1, (Vector3d)arg2, (SweepOptions)arg3) -> ExtrudedSurface :

    C++ signature :
        class PyDbExtrudedSurface createExtrudedSurface(class PyDb3dProfile {lvalue},class AcGeVector3d,class PyDbSweepOptions {lvalue})'''
    ...
    def createFrom (self, *args, **kwargs)-> PyDb.Surface :
      '''createFrom( (Entity)arg1) -> Surface :

    C++ signature :
        class PyDbSurface createFrom(class PyDbEntity)'''
    ...
    def creationActionBodyId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''creationActionBodyId( (Surface)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId creationActionBodyId(class PyDbSurface {lvalue})'''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extendEdges (self, *args, **kwargs)-> None :
      '''extendEdges( (Surface)arg1, (list)arg2, (float)arg3, (SurfaceEdgeExtensionType)arg4, (bool)arg5) -> None :

    C++ signature :
        void extendEdges(class PyDbSurface {lvalue},class boost::python::list {lvalue},double,enum AcDbSurface::EdgeExtensionType,bool)'''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getArea (self, *args, **kwargs)-> float :
      '''getArea( (Surface)arg1) -> float :

    C++ signature :
        double getArea(class PyDbSurface {lvalue})'''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPerimeter (self, *args, **kwargs)-> float :
      '''getPerimeter( (Surface)arg1) -> float :

    C++ signature :
        double getPerimeter(class PyDbSurface {lvalue})'''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def getWireframeType (self, *args, **kwargs)-> PyDb.SurfaceWireframeType :
      '''getWireframeType( (Surface)arg1) -> SurfaceWireframeType :

    C++ signature :
        enum AcDbSurface::WireframeType getWireframeType(class PyDbSurface {lvalue})'''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def modificationActionBodyIds (self, *args, **kwargs)-> list :
      '''modificationActionBodyIds( (Surface)arg1) -> list :

    C++ signature :
        class boost::python::list modificationActionBodyIds(class PyDbSurface {lvalue})'''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def projectOnToSurface (self, *args, **kwargs)-> list :
      '''projectOnToSurface( (Surface)arg1, (Entity)arg2, (Vector3d)arg3) -> list :

    C++ signature :
        class boost::python::list projectOnToSurface(class PyDbSurface {lvalue},class PyDbEntity,class AcGeVector3d)'''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def rayTest (self, *args, **kwargs)-> tuple :
      '''rayTest( (Surface)arg1, (Point3d)arg2, (Vector3d)arg3, (float)arg4) -> tuple :

    C++ signature :
        class boost::python::tuple rayTest(class PyDbSurface {lvalue},class AcGePoint3d,class AcGeVector3d,double)'''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setUIsolineDensity (self, *args, **kwargs)-> None :
      '''setUIsolineDensity( (Surface)arg1, (int)arg2) -> None :

    C++ signature :
        void setUIsolineDensity(class PyDbSurface {lvalue},unsigned short)'''
    ...
    def setVIsolineDensity (self, *args, **kwargs)-> None :
      '''setVIsolineDensity( (Surface)arg1, (int)arg2) -> None :

    C++ signature :
        void setVIsolineDensity(class PyDbSurface {lvalue},unsigned short)'''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setWireframeType (self, *args, **kwargs)-> None :
      '''setWireframeType( (Surface)arg1, (SurfaceWireframeType)arg2) -> None :

    C++ signature :
        void setWireframeType(class PyDbSurface {lvalue},enum AcDbSurface::WireframeType)'''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def uIsolineDensity (self, *args, **kwargs)-> int :
      '''uIsolineDensity( (Surface)arg1) -> int :

    C++ signature :
        unsigned short uIsolineDensity(class PyDbSurface {lvalue})'''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def vIsolineDensity (self, *args, **kwargs)-> int :
      '''vIsolineDensity( (Surface)arg1) -> int :

    C++ signature :
        unsigned short vIsolineDensity(class PyDbSurface {lvalue})'''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class Face:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (bool)arg5, (bool)arg6, (bool)arg7, (bool)arg8) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,bool,bool,bool,bool)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (bool)arg6, (bool)arg7, (bool)arg8, (bool)arg9) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,bool,bool,bool,bool)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: RxObject)-> PyDb.Face :
      '''                             '''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: RxObject)-> PyDb.Face :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def getVertexAt (self: Face,vIndex:int)-> PyGe.Point3d :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEdgeVisibleAt (self: Face,vIndex:int)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def makeEdgeInvisibleAt (self: Face,vIndex:int)-> None :
      '''                             '''
    ...
    def makeEdgeVisibleAt (self: Face,vIndex:int)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVertexAt (self: Face,vIndex:int,pnt:PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class FaceRecord:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (DxfCode)arg2, (DxfCode)arg3, (DxfCode)arg4, (DxfCode)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,short,short,short,short)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: RxObject)-> PyDb.FaceRecord :
      '''                             '''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: RxObject)-> PyDb.FaceRecord :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def getVertexAt (self: FaceRecord,val : int)-> int :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEdgeVisibleAt (self: FaceRecord,val : int)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def makeEdgeInvisibleAt (self: FaceRecord,val : int)-> None :
      '''                             '''
    ...
    def makeEdgeVisibleAt (self: FaceRecord,val : int)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVertexAt (self: FaceRecord,val : int,idx : int)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class Fcf:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (str)arg2, (Point3d)arg3, (Vector3d)arg4, (Vector3d)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class AcGePoint3d,class AcGeVector3d,class AcGeVector3d)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: RxObject)-> PyDb.Fcf :
      '''                             '''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: RxObject)-> PyDb.Fcf :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dimclrd (self: Fcf)-> PyDb.Color :
      '''                             '''
    ...
    def dimclrt (self: Fcf)-> PyDb.Color :
      '''                             '''
    ...
    def dimensionStyle (self: Fcf)-> PyDb.HardPointerId :
      '''                             '''
    ...
    def dimgap (self: Fcf)-> float :
      '''                             '''
    ...
    def dimscale (self: Fcf)-> float :
      '''                             '''
    ...
    def dimtxsty (self: Fcf)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimtxt (self: Fcf)-> float :
      '''                             '''
    ...
    def direction (self: Fcf)-> PyGe.Vector3d :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getBoundingPline (self: Fcf)-> list :
      '''                             '''
    ...
    def getBoundingPoints (self: Fcf)-> list :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDimstyleData (self: Fcf)-> PyDb.DimStyleTableRecord :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def location (self: Fcf)-> PyGe.Point3d :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def normal (self: Fcf)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDimVars (self: Fcf)-> None :
      '''                             '''
    ...
    def setDimclrd (self: Fcf,val:Color)-> None :
      '''                             '''
    ...
    def setDimclrt (self: Fcf,val:Color)-> None :
      '''                             '''
    ...
    def setDimensionStyle (self: Fcf,val:PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimgap (self: Fcf,val:float)-> None :
      '''                             '''
    ...
    def setDimscale (self: Fcf,val:float)-> None :
      '''                             '''
    ...
    def setDimstyleData (self: Fcf,val:PyDb.DimStyleTableRecord)-> None :
      '''                             '''
    ...
    def setDimtxsty (self, *args, **kwargs)-> None :
      '''setDimtxsty( (Fcf)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimtxsty(class PyDbFcf {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def setDimtxt (self: Fcf,val:float)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLocation (self: Fcf,val:PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOrientation (self: Fcf,normal:PyGe.Vector3d,direction:PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setText (self: Fcf,val:str)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def text (self: Fcf)-> str :
      '''                             '''
    ...
    def textAll (self: Fcf)-> str :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class Field:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (str)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.Field :
      '''cast( (RxObject)arg1) -> Field :

    C++ signature :
        class PyDbField cast(class PyRxObject)'''
    ...
    def childCount (self, *args, **kwargs)-> int :
      '''childCount( (Field)arg1) -> int :

    C++ signature :
        int childCount(class PyDbField {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.Field :
      '''cloneFrom( (RxObject)arg1) -> Field :

    C++ signature :
        class PyDbField cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def convertToTextField (self, *args, **kwargs)-> None :
      '''convertToTextField( (Field)arg1) -> None :

    C++ signature :
        void convertToTextField(class PyDbField {lvalue})'''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def evaluate (self, *args, **kwargs)-> None :
      '''evaluate( (Field)arg1) -> None :

    C++ signature :
        void evaluate(class PyDbField {lvalue})

evaluate( (Field)arg1, (FieldEvalContext)arg2) -> None :

    C++ signature :
        void evaluate(class PyDbField {lvalue},enum AcDbField::EvalContext)

evaluate( (Field)arg1, (FieldEvalContext)arg2, (Database)arg3) -> None :

    C++ signature :
        void evaluate(class PyDbField {lvalue},enum AcDbField::EvalContext,class PyDbDatabase {lvalue})'''
    ...
    def evaluationOption (self, *args, **kwargs)-> PyDb.FieldEvalOption :
      '''evaluationOption( (Field)arg1) -> FieldEvalOption :

    C++ signature :
        enum AcDbField::EvalOption evaluationOption(class PyDbField {lvalue})'''
    ...
    def evaluationStatus (self, *args, **kwargs)-> PyDb.FieldEvalStatus :
      '''evaluationStatus( (Field)arg1) -> FieldEvalStatus :

    C++ signature :
        enum AcDbField::EvalStatus evaluationStatus(class PyDbField {lvalue})'''
    ...
    def evaluatorId (self, *args, **kwargs)-> str :
      '''evaluatorId( (Field)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > evaluatorId(class PyDbField {lvalue})'''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldCode (self, *args, **kwargs)-> str :
      '''getFieldCode( (Field)arg1, (FieldCodeFlag)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getFieldCode(class PyDbField {lvalue},enum AcDbField::FieldCodeFlag)

getFieldCode( (Field)arg1, (FieldCodeFlag)arg2, (list)arg3, (OpenMode)arg4) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getFieldCode(class PyDbField {lvalue},enum AcDbField::FieldCodeFlag,class boost::python::list,enum AcDb::OpenMode)'''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFormat (self, *args, **kwargs)-> str :
      '''getFormat( (Field)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getFormat(class PyDbField {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getValue (self, *args, **kwargs)-> str :
      '''getValue( (Field)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getValue(class PyDbField {lvalue})'''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTextField (self, *args, **kwargs)-> bool :
      '''isTextField( (Field)arg1) -> bool :

    C++ signature :
        bool isTextField(class PyDbField {lvalue})'''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def postInDatabase (self, *args, **kwargs)-> None :
      '''postInDatabase( (Field)arg1, (Database)arg2) -> None :

    C++ signature :
        void postInDatabase(class PyDbField {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setEvaluationOption (self, *args, **kwargs)-> None :
      '''setEvaluationOption( (Field)arg1, (FieldEvalOption)arg2) -> None :

    C++ signature :
        void setEvaluationOption(class PyDbField {lvalue},enum AcDbField::EvalOption)'''
    ...
    def setEvaluatorId (self, *args, **kwargs)-> None :
      '''setEvaluatorId( (Field)arg1, (str)arg2) -> None :

    C++ signature :
        void setEvaluatorId(class PyDbField {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setFormat (self, *args, **kwargs)-> None :
      '''setFormat( (Field)arg1, (str)arg2) -> None :

    C++ signature :
        void setFormat(class PyDbField {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setInObject (self, *args, **kwargs)-> None :
      '''setInObject( (Field)arg1, (DbObject)arg2, (str)arg3) -> None :

    C++ signature :
        void setInObject(class PyDbField {lvalue},class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def state (self, *args, **kwargs)-> PyDb.FieldState :
      '''state( (Field)arg1) -> FieldState :

    C++ signature :
        enum AcDbField::State state(class PyDbField {lvalue})'''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class FieldCodeFlag:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kAddMarkers (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kChildObjectReference (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDetachChildren (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEscapeBackslash (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEvaluatedChildren (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEvaluatedText (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kFieldCode (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kForExpression (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kObjectReference (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPreserveFields (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPreserveOptions (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kStripOptions (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextField (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class FieldEvalContext:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kDemand (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEtransmit (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOpen (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPlot (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPlotPreview (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPreview (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kRegen (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSave (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class FieldEvalOption:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kAutomatic (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDisable (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOnDemand (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOnEtransmit (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOnOpen (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOnPlot (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOnRegen (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOnSave (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class FieldEvalStatus:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kEvaluatorNotFound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kInvalidCode (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kInvalidContext (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNotYetEvaluated (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOtherError (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSuccess (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSyntaxError (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class FieldState:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kCompiled (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEvaluated (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHasCache (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHasFormattedString (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kInitialized (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kModified (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class FilerType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kBagFiler (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCopyFiler (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDeepCloneFiler (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kFileFiler (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kIdFiler (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kIdXlateFiler (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPageFiler (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPurgeFiler (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUndoFiler (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kWblockCloneFiler (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class FindFileHint:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kARXApplication (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCloudOrProjectFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCompiledShapeFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDataLinkFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDefault (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEmbeddedImageFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kFontFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kFontMapFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMaterialMapFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPatternFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPhotometricWebFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTrueTypeFontFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnderlayFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kXRefDrawing (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class FormatOption:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kForEditing (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kForExpression (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kFormatOptionNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kIgnoreMtextFormat (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUseMaximumPrecision (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class FullSubentPath:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (SubentType)arg2, (int)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,unsigned int,__int64)

__init__( (object)arg1, (ObjectId)arg2, (SubentType)arg3, (int)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,unsigned int,__int64)

__init__( (object)arg1, (ObjectId)arg2, (SubentId)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,class PyDbSubentId)

__init__( (object)arg1, (list)arg2, (SubentId)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class boost::python::list,class PyDbSubentId)'''
    ...
    def kNull (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def objectIds (self: FullSubentPath)-> list :
      '''                             '''
    ...
    def setObjectIds (self, *args, **kwargs)-> None :
      '''setObjectIds( (FullSubentPath)arg1, (list)arg2) -> None :

    C++ signature :
        void setObjectIds(class PyDbFullSubentPath {lvalue},class boost::python::list)'''
    ...
    def setSubentId (self: FullSubentPath)-> None :
      '''                             '''
    ...

class GeoCoordinateSystem:
    def __init__ (self, *args, **kwargs)-> None :
      '''Raises an exception
This class cannot be instantiated from Python'''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def create (val : str)-> PyDb.GeoCoordinateSystem :
      '''                             '''
    ...
    def getCartesianExtents (self: GeoCoordinateSystem)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getDatum (self: GeoCoordinateSystem)-> tuple :
      '''                             '''
    ...
    def getDescription (self: GeoCoordinateSystem)-> str :
      '''                             '''
    ...
    def getEllipsoid (self: GeoCoordinateSystem)-> tuple :
      '''                             '''
    ...
    def getEpsgCode (self: GeoCoordinateSystem)-> int :
      '''                             '''
    ...
    def getGeoUnit (self: GeoCoordinateSystem)-> PyDb.GeoCoordinateSystemUnit :
      '''                             '''
    ...
    def getGeodeticExtents (self: GeoCoordinateSystem)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getId (self: GeoCoordinateSystem)-> str :
      '''                             '''
    ...
    def getOffset (self: GeoCoordinateSystem)-> PyGe.Vector2d :
      '''                             '''
    ...
    def getProjectionCode (self: GeoCoordinateSystem)-> PyDb.GeoCoordinateSystemProjectionCode :
      '''                             '''
    ...
    def getType (self: GeoCoordinateSystem)-> PyDb.GeoCoordinateSystemType :
      '''                             '''
    ...
    def getUnit (self: GeoCoordinateSystem)-> PyDb.UnitsValue :
      '''                             '''
    ...
    def getUnitScale (self: GeoCoordinateSystem)-> float :
      '''                             '''
    ...
    def getWktRepresentation (self: GeoCoordinateSystem)-> str :
      '''                             '''
    ...
    def getXmlRepresentation (self: GeoCoordinateSystem)-> str :
      '''                             '''
    ...

class GeoCoordinateSystemProjectionCode:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kProjectionCodeAlber (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeAzede (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeAzmea (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeAzmed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeBipolar (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeBonne (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeCassini (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeEckert4 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeEckert6 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeEdcnc (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeEdcyl (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeEdcylE (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeGaussK (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeGnomonic (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeGoode (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeHom1uv (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeHom1xy (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeHom2uv (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeHom2xy (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeKrovak (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeKrvk95 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeLL (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeLm1sp (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeLm2sp (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeLmblg (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeLmbrtaf (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeLmtan (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeMiller (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeMndotl (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeMndott (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeModpc (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeMollweid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeMrcat (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeMrcatK (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeMstero (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeNeacyl (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeNerth (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeNrthsrt (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeNzealand (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeOblqM (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeObqcyl (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeOrtho (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeOstn02 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeOstn97 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeOstro (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodePlateCarree (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodePlycn (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodePstro (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodePstrosl (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodePvMercator (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeRobinson (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeRskew (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeRskewc (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeRskewo (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeSinus (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeSotrm (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeSstro (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeSwiss (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeSys34 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeSys34_01 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeSys34_99 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeTeacyl (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeTm (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeTrmeraf (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeTrmrkrg (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeTrmrs (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeUnknown (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeUtm (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeVdgrntn (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeWccsl (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeWccst (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeWinkl (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class GeoCoordinateSystemType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kTypeArbitrary (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTypeGeographic (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTypeProjected (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTypeUnknown (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class GeoCoordinateSystemUnit:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kUnitBenoitChain (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitBenoitLink (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitBrealey (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitCaGrid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitCapeFoot (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitCentimeter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitCentisec (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitClarkeChain (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitClarkeFoot (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitClarkeLink (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitDecameter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitDecimeter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitDecisec (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitDegree (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitDekameter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitFoot (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitFurlong (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitGermanMeter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitGoldCoastFoot (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitGrad (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitGrade (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitGunterChain (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitGunterLink (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitHectometer (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitIFoot (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitIInch (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitIMile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitIYard (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitInch (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitIndianFoot (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitIndianFt37 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitIndianFt62 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitIndianFt75 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitIndianYard (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitIndianYd37 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitInternationalChain (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitInternationalLink (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitKilometer (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitKnot (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitLat66 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitLat83 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitMapInfo (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitMeter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitMicroInch (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitMil (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitMile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitMillimeter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitMillisec (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitMinute (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitNautM (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitPerch (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitPole (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitRadian (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitRod (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitRood (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitSearsChain (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitSearsFoot (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitSearsLink (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitSearsYard (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitSecond (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitUnknown (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitYard (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class GeoData:
    def __init__ (self: GeoData,id: ObjectId,mode: OpenMode=kForRead,erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addMeshFace (self: GeoData,idx : int,p0 : int,p1 : int,p2 : int)-> None :
      '''                             '''
    ...
    def addMeshPointMap (self: GeoData,idx : intsrc : PyGe.Point2d,dest : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockTableRecordId (self: GeoData)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.GeoData :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.GeoData :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def coordinateProjectionRadius (self: GeoData)-> float :
      '''                             '''
    ...
    def coordinateSystem (self: GeoData)-> str :
      '''                             '''
    ...
    def coordinateType (self: GeoData)-> PyDb.GeoTypeOfCoordinates :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def designPoint (self: GeoData)-> PyGe.Point3d :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def doSeaLevelCorrection (self: GeoData)-> bool :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def eraseFromDb (self: GeoData)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def geoRSSTag (self: GeoData)-> str :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getMeshFace (self: GeoData,idx : int)-> tuple :
      '''                             '''
    ...
    def getMeshPointMap (self: GeoData,idx : int)-> tuple :
      '''                             '''
    ...
    def getMeshPointMaps (self: GeoData)-> tuple :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def horizontalUnitScale (self: GeoData)-> float :
      '''                             '''
    ...
    def horizontalUnits (self: GeoData)-> PyDb.UnitsValue :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def northDirection (self: GeoData)-> float :
      '''                             '''
    ...
    def northDirectionVector (self: GeoData)-> PyGe.Vector2d :
      '''                             '''
    ...
    def numMeshFaces (self: GeoData)-> int :
      '''                             '''
    ...
    def numMeshPoints (self: GeoData)-> int :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def observationCoverage (self: GeoData)-> str :
      '''                             '''
    ...
    def observationFrom (self: GeoData)-> str :
      '''                             '''
    ...
    def observationTo (self: GeoData)-> str :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def postToDb (self: GeoData)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def referencePoint (self: GeoData)-> PyGe.Point3d :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def resetMeshPointMaps (self: GeoData)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def scaleEstimationMethod (self: GeoData)-> PyDb.GeoScaleEstimationMethod :
      '''                             '''
    ...
    def scaleFactor (self: GeoData)-> float :
      '''                             '''
    ...
    def seaLevelElevation (self: GeoData)-> float :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBlockTableRecordId (self: GeoData,id : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setCoordinateProjectionRadius (self: GeoData,val : float)-> None :
      '''                             '''
    ...
    def setCoordinateSystem (self: GeoData,val : str)-> None :
      '''                             '''
    ...
    def setCoordinateType (self: GeoData,val : PyDb.GeoTypeOfCoordinates)-> None :
      '''                             '''
    ...
    def setDesignPoint (self: GeoData,pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setDoSeaLevelCorrection (self: GeoData,val : bool)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setGeoRSSTag (self: GeoData,val : str)-> None :
      '''                             '''
    ...
    def setHorizontalUnitScale (self: GeoData,val : float)-> None :
      '''                             '''
    ...
    def setHorizontalUnits (self: GeoData,val : PyDb.UnitsValue)-> None :
      '''                             '''
    ...
    def setMeshPointMaps (self: GeoData,src : list[PyGe.Point2d],dest : list[PyGe.Point2d])-> None :
      '''                             '''
    ...
    def setNorthDirectionVector (self: GeoData,vec : PyGe.Vector2d)-> None :
      '''                             '''
    ...
    def setObservationCoverage (self: GeoData,val : str)-> None :
      '''                             '''
    ...
    def setObservationFrom (self: GeoData,val : str)-> None :
      '''                             '''
    ...
    def setObservationTo (self: GeoData,val : str)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setReferencePoint (self: GeoData,pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setScaleEstimationMethod (self: GeoData,val : PyDb.GeoScaleEstimationMethod)-> None :
      '''                             '''
    ...
    def setScaleFactor (self: GeoData,val : float)-> None :
      '''                             '''
    ...
    def setSeaLevelElevation (self: GeoData,val : float)-> None :
      '''                             '''
    ...
    def setUpDirection (self: GeoData,vec : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setVerticalUnitScale (self: GeoData,val : float)-> None :
      '''                             '''
    ...
    def setVerticalUnits (self: GeoData,val : PyDb.UnitsValue)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformFromLonLatAlt (self: GeoData,pt : PyGe.Point3d | float)-> PyGe.Point3d :
      '''                             '''
    ...
    def transformToLonLatAlt (self: GeoData,pt : PyGe.Point3d | float)-> PyGe.Point3d :
      '''                             '''
    ...
    def upDirection (self: GeoData)-> PyGe.Vector3d :
      '''                             '''
    ...
    def updateTransformationMatrix (self: GeoData)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def verticalUnitScale (self: GeoData)-> float :
      '''                             '''
    ...
    def verticalUnits (self: GeoData)-> PyDb.UnitsValue :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class GeoMap:
    def LOD (self: GeoMap)-> int :
      '''                             '''
    ...
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (AcGeoMapType)arg2, (AcGeoMapResolution)arg3, (SubentType)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,enum AcGeoMapType,enum AcGeoMapResolution,unsigned int)

__init__( (object)arg1, (ObjectId)arg2 [, (bool)arg3]) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId [,bool])

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3, (bool)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode,bool)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bottomLeftPt (self: GeoMap)-> PyGe.Point3d :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def brightness (self, *args, **kwargs)-> int :
      '''brightness( (RasterImage)arg1) -> int :

    C++ signature :
        signed char brightness(class PyDbRasterImage {lvalue})'''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.GeoMap :
      '''                             '''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def clipBoundary (self, *args, **kwargs)-> list :
      '''clipBoundary( (RasterImage)arg1) -> list :

    C++ signature :
        class boost::python::list clipBoundary(class PyDbRasterImage {lvalue})'''
    ...
    def clipBoundaryType (self, *args, **kwargs)-> PyDb.ClipBoundaryType :
      '''clipBoundaryType( (RasterImage)arg1) -> ClipBoundaryType :

    C++ signature :
        enum AcDbRasterImage::ClipBoundaryType clipBoundaryType(class PyDbRasterImage {lvalue})'''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.GeoMap :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def contrast (self, *args, **kwargs)-> int :
      '''contrast( (RasterImage)arg1) -> int :

    C++ signature :
        signed char contrast(class PyDbRasterImage {lvalue})'''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def fade (self, *args, **kwargs)-> int :
      '''fade( (RasterImage)arg1) -> int :

    C++ signature :
        signed char fade(class PyDbRasterImage {lvalue})'''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getOrientation (self, *args, **kwargs)-> None :
      '''getOrientation( (RasterImage)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> None :

    C++ signature :
        void getOrientation(class PyDbRasterImage {lvalue},class AcGePoint3d {lvalue},class AcGeVector3d {lvalue},class AcGeVector3d {lvalue})'''
    ...
    def getPixelToModelTransform (self, *args, **kwargs)-> PyGe.Matrix3d :
      '''getPixelToModelTransform( (RasterImage)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d getPixelToModelTransform(class PyDbRasterImage {lvalue})'''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def getVertices (self, *args, **kwargs)-> list :
      '''getVertices( (RasterImage)arg1) -> list :

    C++ signature :
        class boost::python::list getVertices(class PyDbRasterImage {lvalue})'''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def height (self: GeoMap)-> float :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def imageBottomLeftPt (self: GeoMap)-> PyGe.Point3d :
      '''                             '''
    ...
    def imageDefId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''imageDefId( (RasterImage)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId imageDefId(class PyDbRasterImage {lvalue})'''
    ...
    def imageHeight (self: GeoMap)-> float :
      '''                             '''
    ...
    def imageSize (self, *args, **kwargs)-> PyGe.Vector2d :
      '''imageSize( (RasterImage)arg1) -> Vector2d :

    C++ signature :
        class AcGeVector2d imageSize(class PyDbRasterImage {lvalue})

imageSize( (RasterImage)arg1, (bool)arg2) -> Vector2d :

    C++ signature :
        class AcGeVector2d imageSize(class PyDbRasterImage {lvalue},bool)'''
    ...
    def imageWidth (self: GeoMap)-> float :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isClipInverted (self, *args, **kwargs)-> bool :
      '''isClipInverted( (RasterImage)arg1) -> bool :

    C++ signature :
        bool isClipInverted(class PyDbRasterImage {lvalue})'''
    ...
    def isClipped (self, *args, **kwargs)-> bool :
      '''isClipped( (RasterImage)arg1) -> bool :

    C++ signature :
        bool isClipped(class PyDbRasterImage {lvalue})'''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isImageShown (self, *args, **kwargs)-> bool :
      '''isImageShown( (RasterImage)arg1) -> bool :

    C++ signature :
        bool isImageShown(class PyDbRasterImage {lvalue})'''
    ...
    def isImageTransparent (self, *args, **kwargs)-> bool :
      '''isImageTransparent( (RasterImage)arg1) -> bool :

    C++ signature :
        bool isImageTransparent(class PyDbRasterImage {lvalue})'''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isOutOfDate (self: GeoMap)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isSetDisplayOpt (self, *args, **kwargs)-> bool :
      '''isSetDisplayOpt( (RasterImage)arg1, (ImageDisplayOpt)arg2) -> bool :

    C++ signature :
        bool isSetDisplayOpt(class PyDbRasterImage {lvalue},enum AcDbRasterImage::ImageDisplayOpt)'''
    ...
    def isShownClipped (self, *args, **kwargs)-> bool :
      '''isShownClipped( (RasterImage)arg1) -> bool :

    C++ signature :
        bool isShownClipped(class PyDbRasterImage {lvalue})'''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def mapType (self: GeoMap)-> PyDb.AcGeoMapType :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def position (self, *args, **kwargs)-> PyGe.Point3d :
      '''position( (RasterImage)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDbRasterImage {lvalue})'''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def reactorId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''reactorId( (RasterImage)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId reactorId(class PyDbRasterImage {lvalue})'''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def resolution (self: GeoMap)-> PyDb.AcGeoMapResolution :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self, *args, **kwargs)-> float :
      '''rotation( (RasterImage)arg1) -> float :

    C++ signature :
        double rotation(class PyDbRasterImage {lvalue})'''
    ...
    def scale (self, *args, **kwargs)-> PyGe.Vector2d :
      '''scale( (RasterImage)arg1) -> Vector2d :

    C++ signature :
        class AcGeVector2d scale(class PyDbRasterImage {lvalue})'''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBrightness (self, *args, **kwargs)-> None :
      '''setBrightness( (RasterImage)arg1, (MlineJustification)arg2) -> None :

    C++ signature :
        void setBrightness(class PyDbRasterImage {lvalue},signed char)'''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setClipBoundaryToWholeImage (self, *args, **kwargs)-> None :
      '''setClipBoundaryToWholeImage( (RasterImage)arg1, (Vector2d)arg2) -> None :

    C++ signature :
        void setClipBoundaryToWholeImage(class PyDbRasterImage {lvalue},class AcGeVector2d {lvalue})'''
    ...
    def setClipInverted (self, *args, **kwargs)-> None :
      '''setClipInverted( (RasterImage)arg1, (bool)arg2) -> None :

    C++ signature :
        void setClipInverted(class PyDbRasterImage {lvalue},bool)'''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setContrast (self, *args, **kwargs)-> None :
      '''setContrast( (RasterImage)arg1, (MlineJustification)arg2) -> None :

    C++ signature :
        void setContrast(class PyDbRasterImage {lvalue},signed char)'''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDisplayOpt (self, *args, **kwargs)-> None :
      '''setDisplayOpt( (RasterImage)arg1, (ImageDisplayOpt)arg2, (bool)arg3) -> None :

    C++ signature :
        void setDisplayOpt(class PyDbRasterImage {lvalue},enum AcDbRasterImage::ImageDisplayOpt,bool)'''
    ...
    def setFade (self, *args, **kwargs)-> None :
      '''setFade( (RasterImage)arg1, (MlineJustification)arg2) -> None :

    C++ signature :
        void setFade(class PyDbRasterImage {lvalue},signed char)'''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setHeight (self, *args, **kwargs)-> None :
      '''setHeight( (RasterImage)arg1, (float)arg2) -> None :

    C++ signature :
        void setHeight(class PyDbRasterImage {lvalue},double)'''
    ...
    def setImageDefId (self, *args, **kwargs)-> None :
      '''setImageDefId( (RasterImage)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setImageDefId(class PyDbRasterImage {lvalue},class PyDbObjectId)'''
    ...
    def setImageTransparency (self, *args, **kwargs)-> None :
      '''setImageTransparency( (RasterImage)arg1, (bool)arg2) -> None :

    C++ signature :
        void setImageTransparency(class PyDbRasterImage {lvalue},bool)'''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMapType (self: GeoMap,val : PyDb.AcGeoMapType)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOrientation (self, *args, **kwargs)-> bool :
      '''setOrientation( (RasterImage)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> bool :

    C++ signature :
        bool setOrientation(class PyDbRasterImage {lvalue},class AcGePoint3d,class AcGeVector3d,class AcGeVector3d)'''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReactorId (self, *args, **kwargs)-> None :
      '''setReactorId( (RasterImage)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setReactorId(class PyDbRasterImage {lvalue},class PyDbObjectId)'''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setResolution (self: GeoMap,val : PyDb.AcGeoMapResolution)-> None :
      '''                             '''
    ...
    def setRotation (self, *args, **kwargs)-> None :
      '''setRotation( (RasterImage)arg1, (float)arg2) -> None :

    C++ signature :
        void setRotation(class PyDbRasterImage {lvalue},double)'''
    ...
    def setShowClipped (self, *args, **kwargs)-> None :
      '''setShowClipped( (RasterImage)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShowClipped(class PyDbRasterImage {lvalue},bool)'''
    ...
    def setShowImage (self, *args, **kwargs)-> None :
      '''setShowImage( (RasterImage)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShowImage(class PyDbRasterImage {lvalue},bool)'''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setWidth (self, *args, **kwargs)-> None :
      '''setWidth( (RasterImage)arg1, (float)arg2) -> None :

    C++ signature :
        void setWidth(class PyDbRasterImage {lvalue},double)'''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def updateMapImage (self: GeoMap,reset : bool = False)-> bool :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def width (self: GeoMap)-> float :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class GeoPositionMarker:
    def __init__ (self: GeoPositionMarker,id: ObjectId,mode: OpenMode=kForRead,erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.GeoPositionMarker :
      '''                             '''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.GeoPositionMarker :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def enableFrameText (self: GeoPositionMarker)-> bool :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def geoPosition (self: GeoPositionMarker)-> PyGe.Point3d :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def landingGap (self: GeoPositionMarker)-> float :
      '''                             '''
    ...
    def latLonAlt (self: GeoPositionMarker)-> tuple :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def mtext (self: GeoPositionMarker)-> PyDb.MText :
      '''                             '''
    ...
    def mtextVisible (self: GeoPositionMarker)-> bool :
      '''                             '''
    ...
    def normal (self: GeoPositionMarker)-> PyGe.Vector3d :
      '''                             '''
    ...
    def notes (self: GeoPositionMarker)-> str :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def position (self: GeoPositionMarker)-> PyGe.Point3d :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def radius (self: GeoPositionMarker)-> float :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setEnableFrameText (self: GeoPositionMarker,val : bool)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setGeoPosition (self: GeoPositionMarker,pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setLandingGap (self: GeoPositionMarker,val : float)-> None :
      '''                             '''
    ...
    def setLatLonAlt (self: GeoPositionMarker,lat : float,lon : float,alt : float)-> None :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMText (self: GeoPositionMarker,val : PyDb.MText.M)-> None :
      '''                             '''
    ...
    def setMTextVisible (self: GeoPositionMarker,val : bool)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNotes (self: GeoPositionMarker,val : str)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self: GeoPositionMarker,pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setRadius (self: GeoPositionMarker,val : float)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setText (self: GeoPositionMarker,val : str)-> None :
      '''                             '''
    ...
    def setTextAlignmentType (self: GeoPositionMarker,val : PyDb.GeoTextAlignmentType)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def text (self: GeoPositionMarker)-> str :
      '''                             '''
    ...
    def textAlignmentType (self: GeoPositionMarker)-> PyDb.GeoTextAlignmentType :
      '''                             '''
    ...
    def textStyle (self: GeoPositionMarker)-> PyDb.ObjectId :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class GeoScaleEstimationMethod:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kScaleEstMethodPrismoidal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kScaleEstMethodReferencePoint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kScaleEstMethodUnity (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kScaleEstMethodUserDefined (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class GeoTextAlignmentType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kCenterAlignment (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLeftAlignment (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kRightAlignment (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class GeoTypeOfCoordinates:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kCoordTypGeographic (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCoordTypGrid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCoordTypLocal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCoordTypUnknown (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class GridLineStyle:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kGridLineStyleDouble (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kGridLineStyleSingle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class GridLineType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kAllGridLineTypes (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHorzBottom (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHorzGridLineTypes (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHorzInside (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHorzTop (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kInnerGridLineTypes (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kInvalidGridLine (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOuterGridLineTypes (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVertGridLineTypes (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVertInside (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVertLeft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVertRight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class GridProperty:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kGridPropAll (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kGridPropColor (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kGridPropDoubleLineSpacing (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kGridPropInvalid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kGridPropLineStyle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kGridPropLineWeight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kGridPropLinetype (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kGridPropVisibility (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class Group:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (str)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def allEntityIds (self, *args, **kwargs)-> list :
      '''allEntityIds( (Group)arg1) -> list :

    C++ signature :
        class boost::python::list allEntityIds(class PyDbGroup {lvalue})'''
    ...
    def append (self, *args, **kwargs)-> None :
      '''append( (Group)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void append(class PyDbGroup {lvalue},class PyDbObjectId)

append( (Group)arg1, (list)arg2) -> None :

    C++ signature :
        void append(class PyDbGroup {lvalue},class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Group :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def clear (self, *args, **kwargs)-> None :
      '''clear( (Group)arg1) -> None :

    C++ signature :
        void clear(class PyDbGroup {lvalue})'''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Group :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def description (self, *args, **kwargs)-> str :
      '''description( (Group)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > description(class PyDbGroup {lvalue})'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getIndex (self, *args, **kwargs)-> int :
      '''getIndex( (Group)arg1, (ObjectId)arg2) -> int :

    C++ signature :
        unsigned int getIndex(class PyDbGroup {lvalue},class PyDbObjectId)'''
    ...
    def getName (self, *args, **kwargs)-> str :
      '''getName( (Group)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getName(class PyDbGroup {lvalue})'''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has (self, *args, **kwargs)-> bool :
      '''has( (Group)arg1, (Entity)arg2) -> bool :

    C++ signature :
        bool has(class PyDbGroup {lvalue},class PyDbEntity)'''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def insertAt (self, *args, **kwargs)-> None :
      '''insertAt( (Group)arg1, (SubentType)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void insertAt(class PyDbGroup {lvalue},unsigned int,class PyDbObjectId)

insertAt( (Group)arg1, (SubentType)arg2, (list)arg3) -> None :

    C++ signature :
        void insertAt(class PyDbGroup {lvalue},unsigned int,class boost::python::list)'''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isAnonymous (self, *args, **kwargs)-> bool :
      '''isAnonymous( (Group)arg1) -> bool :

    C++ signature :
        bool isAnonymous(class PyDbGroup {lvalue})'''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotAccessible (self, *args, **kwargs)-> bool :
      '''isNotAccessible( (Group)arg1) -> bool :

    C++ signature :
        bool isNotAccessible(class PyDbGroup {lvalue})'''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isSelectable (self, *args, **kwargs)-> bool :
      '''isSelectable( (Group)arg1) -> bool :

    C++ signature :
        bool isSelectable(class PyDbGroup {lvalue})'''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def numEntities (self, *args, **kwargs)-> int :
      '''numEntities( (Group)arg1) -> int :

    C++ signature :
        unsigned int numEntities(class PyDbGroup {lvalue})'''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectIds (self, *args, **kwargs)-> list :
      '''objectIds( (Group)arg1) -> list :

    C++ signature :
        class boost::python::list objectIds(class PyDbGroup {lvalue})'''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def prepend (self, *args, **kwargs)-> None :
      '''prepend( (Group)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void prepend(class PyDbGroup {lvalue},class PyDbObjectId)

prepend( (Group)arg1, (list)arg2) -> None :

    C++ signature :
        void prepend(class PyDbGroup {lvalue},class boost::python::list)'''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def remove (self, *args, **kwargs)-> None :
      '''remove( (Group)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void remove(class PyDbGroup {lvalue},class PyDbObjectId)

remove( (Group)arg1, (list)arg2) -> None :

    C++ signature :
        void remove(class PyDbGroup {lvalue},class boost::python::list)'''
    ...
    def removeAt (self, *args, **kwargs)-> None :
      '''removeAt( (Group)arg1, (SubentType)arg2) -> None :

    C++ signature :
        void removeAt(class PyDbGroup {lvalue},unsigned int)

removeAt( (Group)arg1, (SubentType)arg2, (list)arg3) -> None :

    C++ signature :
        void removeAt(class PyDbGroup {lvalue},unsigned int,class boost::python::list)'''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def replace (self, *args, **kwargs)-> None :
      '''replace( (Group)arg1, (object)arg2, (object)arg3) -> None :

    C++ signature :
        void replace(class PyDbGroup {lvalue},class AcDbObjectId,class AcDbObjectId)'''
    ...
    def reverse (self, *args, **kwargs)-> None :
      '''reverse( (Group)arg1) -> None :

    C++ signature :
        void reverse(class PyDbGroup {lvalue})'''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAnonymous (self, *args, **kwargs)-> None :
      '''setAnonymous( (Group)arg1) -> None :

    C++ signature :
        void setAnonymous(class PyDbGroup {lvalue})'''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setColor (self, *args, **kwargs)-> None :
      '''setColor( (Group)arg1, (Color)arg2) -> None :

    C++ signature :
        void setColor(class PyDbGroup {lvalue},class AcCmColor)'''
    ...
    def setColorIndex (self, *args, **kwargs)-> None :
      '''setColorIndex( (Group)arg1, (int)arg2) -> None :

    C++ signature :
        void setColorIndex(class PyDbGroup {lvalue},unsigned short)'''
    ...
    def setDescription (self, *args, **kwargs)-> None :
      '''setDescription( (Group)arg1, (str)arg2) -> None :

    C++ signature :
        void setDescription(class PyDbGroup {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setHighlight (self, *args, **kwargs)-> None :
      '''setHighlight( (Group)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHighlight(class PyDbGroup {lvalue},bool)'''
    ...
    def setLayer (self, *args, **kwargs)-> None :
      '''setLayer( (Group)arg1, (str)arg2) -> None :

    C++ signature :
        void setLayer(class PyDbGroup {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Group)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setLayer(class PyDbGroup {lvalue},class PyDbObjectId)'''
    ...
    def setLinetype (self, *args, **kwargs)-> None :
      '''setLinetype( (Group)arg1, (str)arg2) -> None :

    C++ signature :
        void setLinetype(class PyDbGroup {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Group)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setLinetype(class PyDbGroup {lvalue},class PyDbObjectId)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> None :
      '''setLinetypeScale( (Group)arg1, (float)arg2) -> None :

    C++ signature :
        void setLinetypeScale(class PyDbGroup {lvalue},double)'''
    ...
    def setMaterial (self, *args, **kwargs)-> None :
      '''setMaterial( (Group)arg1, (str)arg2) -> None :

    C++ signature :
        void setMaterial(class PyDbGroup {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Group)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setMaterial(class PyDbGroup {lvalue},class PyDbObjectId)'''
    ...
    def setName (self, *args, **kwargs)-> None :
      '''setName( (Group)arg1, (str)arg2) -> None :

    C++ signature :
        void setName(class PyDbGroup {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setSelectable (self, *args, **kwargs)-> None :
      '''setSelectable( (Group)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSelectable(class PyDbGroup {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs)-> None :
      '''setVisibility( (Group)arg1, (Visibility)arg2) -> None :

    C++ signature :
        void setVisibility(class PyDbGroup {lvalue},enum AcDb::Visibility)'''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transfer (self, *args, **kwargs)-> None :
      '''transfer( (Group)arg1, (SubentType)arg2, (SubentType)arg3, (SubentType)arg4) -> None :

    C++ signature :
        void transfer(class PyDbGroup {lvalue},unsigned int,unsigned int,unsigned int)'''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class Handle:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (int)arg2, (int)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,int,int)

__init__( (object)arg1, (str)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (int)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,unsigned __int64)'''
    ...
    def decrement (self, *args, **kwargs)-> None :
      '''decrement( (Handle)arg1) -> None :

    C++ signature :
        void decrement(class PyDbHandle {lvalue})'''
    ...
    def high (self, *args, **kwargs)-> int :
      '''high( (Handle)arg1) -> int :

    C++ signature :
        unsigned int high(class PyDbHandle {lvalue})'''
    ...
    def increment (self, *args, **kwargs)-> None :
      '''increment( (Handle)arg1) -> None :

    C++ signature :
        void increment(class PyDbHandle {lvalue})'''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (Handle)arg1) -> bool :

    C++ signature :
        bool isNull(class PyDbHandle {lvalue})'''
    ...
    def isOne (self, *args, **kwargs)-> bool :
      '''isOne( (Handle)arg1) -> bool :

    C++ signature :
        bool isOne(class PyDbHandle {lvalue})'''
    ...
    def low (self, *args, **kwargs)-> int :
      '''low( (Handle)arg1) -> int :

    C++ signature :
        unsigned int low(class PyDbHandle {lvalue})'''
    ...
    def setHigh (self, *args, **kwargs)-> None :
      '''setHigh( (Handle)arg1, (SubentType)arg2) -> None :

    C++ signature :
        void setHigh(class PyDbHandle {lvalue},unsigned int)'''
    ...
    def setLow (self, *args, **kwargs)-> None :
      '''setLow( (Handle)arg1, (SubentType)arg2) -> None :

    C++ signature :
        void setLow(class PyDbHandle {lvalue},unsigned int)'''
    ...
    def setNull (self, *args, **kwargs)-> None :
      '''setNull( (Handle)arg1) -> None :

    C++ signature :
        void setNull(class PyDbHandle {lvalue})'''
    ...
    def setValue (self, *args, **kwargs)-> None :
      '''setValue( (Handle)arg1, (int)arg2) -> None :

    C++ signature :
        void setValue(class PyDbHandle {lvalue},unsigned __int64)'''
    ...
    def toString (self, *args, **kwargs)-> str :
      '''toString( (Handle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > toString(class PyDbHandle {lvalue})'''
    ...
    def value (self, *args, **kwargs)-> int :
      '''value( (Handle)arg1) -> int :

    C++ signature :
        unsigned __int64 value(class PyDbHandle {lvalue})'''
    ...

class HardOwnershipId:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)'''
    ...
    def asOldId (self: ObjectId)-> int :
      '''                             '''
    ...
    def convertToRedirectedId (self: ObjectId)-> bool :
      '''                             '''
    ...
    def database (self: ObjectId)-> PyDb.Database :
      '''                             '''
    ...

    @staticmethod
    def fromOldId (oldid : int)-> PyDb.ObjectId :
      '''                             '''
    ...
    def handle (self: ObjectId)-> PyDb.Handle :
      '''                             '''
    ...
    def isDerivedFrom (self: ObjectId,desc : PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isEffectivelyErased (self: ObjectId)-> bool :
      '''                             '''
    ...
    def isErased (self: ObjectId)-> bool :
      '''                             '''
    ...
    def isNull (self: ObjectId)-> bool :
      '''                             '''
    ...
    def isResident (self: ObjectId)-> bool :
      '''                             '''
    ...
    def isValid (self: ObjectId)-> bool :
      '''                             '''
    ...
    def isWellBehaved (self: ObjectId)-> bool :
      '''                             '''
    ...
    def nonForwardedHandle (self: ObjectId)-> PyDb.Handle :
      '''                             '''
    ...
    def objectClass (self: ObjectId)-> PyRx.RxClass :
      '''                             '''
    ...
    def objectLeftOnDisk (self: ObjectId)-> bool :
      '''                             '''
    ...
    def originalDatabase (self: ObjectId)-> PyDb.Database :
      '''                             '''
    ...
    def setFromOldId (self: ObjectId,oldid : int)-> None :
      '''                             '''
    ...

class HardPointerId:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)'''
    ...
    def asOldId (self: ObjectId)-> int :
      '''                             '''
    ...
    def convertToRedirectedId (self: ObjectId)-> bool :
      '''                             '''
    ...
    def database (self: ObjectId)-> PyDb.Database :
      '''                             '''
    ...

    @staticmethod
    def fromOldId (oldid : int)-> PyDb.ObjectId :
      '''                             '''
    ...
    def handle (self: ObjectId)-> PyDb.Handle :
      '''                             '''
    ...
    def isDerivedFrom (self: ObjectId,desc : PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isEffectivelyErased (self: ObjectId)-> bool :
      '''                             '''
    ...
    def isErased (self: ObjectId)-> bool :
      '''                             '''
    ...
    def isNull (self: ObjectId)-> bool :
      '''                             '''
    ...
    def isResident (self: ObjectId)-> bool :
      '''                             '''
    ...
    def isValid (self: ObjectId)-> bool :
      '''                             '''
    ...
    def isWellBehaved (self: ObjectId)-> bool :
      '''                             '''
    ...
    def nonForwardedHandle (self: ObjectId)-> PyDb.Handle :
      '''                             '''
    ...
    def objectClass (self: ObjectId)-> PyRx.RxClass :
      '''                             '''
    ...
    def objectLeftOnDisk (self: ObjectId)-> bool :
      '''                             '''
    ...
    def originalDatabase (self: ObjectId)-> PyDb.Database :
      '''                             '''
    ...
    def setFromOldId (self: ObjectId,oldid : int)-> None :
      '''                             '''
    ...

class Hatch:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def appendLoop (self: Hatch,loopType : int,ids : list[PyDb.ObjectId])-> None :
      '''                             '''
    ...
    def appendLoopBulges (self: Hatch,loopType : int,vertices : list,bulges : list)-> None :
      '''                             '''
    ...
    def appendLoopEdges (self: Hatch,loopType : int,edges : list,edgeTypes : list)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def associative (self: Hatch)-> bool :
      '''                             '''
    ...
    def backgroundColor (self: Hatch)-> PyDb.Color :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Hatch :
      '''                             '''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Hatch :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevation (self: Hatch)-> float :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def evaluateGradientColorAt (self, *args, **kwargs)-> PyDb.Color :
      '''evaluateGradientColorAt( (Hatch)arg1, (float)arg2) -> Color :

    C++ signature :
        class AcCmColor evaluateGradientColorAt(class PyDbHatch {lvalue},float)'''
    ...
    def evaluateHatch (self: Hatch,val : bool=False)-> None :
      '''                             '''
    ...
    def evaluateHatchAllScales1 (self, *args, **kwargs)-> None :
      '''evaluateHatchAllScales1( (Hatch)arg1) -> None :

    C++ signature :
        void evaluateHatchAllScales1(class PyDbHatch {lvalue})'''
    ...
    def evaluateHatchAllScales2 (self: Hatch,val : bool=False)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getArea (self: Hatch)-> float :
      '''                             '''
    ...
    def getAssocObjIds (self: Hatch)-> list :
      '''                             '''
    ...
    def getAssocObjIdsAt (self, *args, **kwargs)-> list :
      '''getAssocObjIdsAt( (Hatch)arg1, (int)arg2) -> list :

    C++ signature :
        class boost::python::list getAssocObjIdsAt(class PyDbHatch {lvalue},int)'''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGradientColors (self: Hatch)-> tuple :
      '''                             '''
    ...
    def getGradientOneColorMode (self: Hatch)-> bool :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getHatchLineDataAt (self: Hatch,val : int)-> tuple :
      '''                             '''
    ...
    def getHatchLinesData (self: Hatch)-> tuple :
      '''                             '''
    ...
    def getLoopBulgesAt (self: Hatch,val : int)-> tuple :
      '''                             '''
    ...
    def getLoopEdgesAt (self: Hatch,val : int)-> tuple :
      '''                             '''
    ...
    def getPatternDefinitionAt (self: Hatch,val : int)-> tuple :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getRegionArea (self: Hatch)-> PyDb.Region :
      '''                             '''
    ...
    def getShadeTintValue (self: Hatch)-> float :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def gradientAngle (self: Hatch)-> float :
      '''                             '''
    ...
    def gradientName (self: Hatch)-> str :
      '''                             '''
    ...
    def gradientShift (self: Hatch)-> float :
      '''                             '''
    ...
    def gradientType (self: Hatch)-> PyDb.HatchGradientPatternType :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def hatchObjectType (self: Hatch)-> PyDb.HatchObjectType :
      '''                             '''
    ...
    def hatchStyle (self: Hatch)-> PyDb.HatchStyle :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def insertLoopAt (self: Hatch,idx : int,loopType : int,ids : list[PyDb.ObjectId])-> None :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isGradient (self: Hatch)-> bool :
      '''                             '''
    ...
    def isHatch (self: Hatch)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isSolidFill (self: Hatch)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineGenerationEnabled (self: Hatch)-> bool :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def normal (self: Hatch)-> PyGe.Vector3d :
      '''                             '''
    ...
    def numHatchLines (self: Hatch)-> int :
      '''                             '''
    ...
    def numLoops (self: Hatch)-> int :
      '''                             '''
    ...
    def numPatternDefinitions (self: Hatch)-> int :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def originPoint (self: Hatch)-> PyGe.Point2d :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def patternAngle (self: Hatch)-> float :
      '''                             '''
    ...
    def patternDouble (self: Hatch)-> bool :
      '''                             '''
    ...
    def patternName (self: Hatch)-> str :
      '''                             '''
    ...
    def patternScale (self: Hatch)-> float :
      '''                             '''
    ...
    def patternSpace (self: Hatch)-> float :
      '''                             '''
    ...
    def patternType (self: Hatch)-> PyDb.HatchPatternType :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeAssocObjIds (self: Hatch)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removeHatchLines (self: Hatch)-> None :
      '''                             '''
    ...
    def removeLoopAt (self: Hatch,idx : int)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAssociative (self: Hatch,val : bool)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBackgroundColor (self: Hatch,val : PyDb.AcCmColor)-> None :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setElevation (self: Hatch,val : float)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setGradient (self, *args, **kwargs)-> None :
      '''setGradient( (Hatch)arg1, (HatchGradientPatternType)arg2, (str)arg3) -> None :

    C++ signature :
        void setGradient(class PyDbHatch {lvalue},enum AcDbHatch::GradientPatternType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setGradientAngle (self: Hatch,val : float)-> None :
      '''                             '''
    ...
    def setGradientColors (self: Hatch,colors : list,values : list)-> None :
      '''                             '''
    ...
    def setGradientOneColorMode (self: Hatch,val : bool)-> None :
      '''                             '''
    ...
    def setGradientShift (self: Hatch,val : float)-> None :
      '''                             '''
    ...
    def setHatchObjectType (self, *args, **kwargs)-> None :
      '''setHatchObjectType( (Hatch)arg1, (HatchObjectType)arg2) -> None :

    C++ signature :
        void setHatchObjectType(class PyDbHatch {lvalue},enum AcDbHatch::HatchObjectType)'''
    ...
    def setHatchStyle (self, *args, **kwargs)-> None :
      '''setHatchStyle( (Hatch)arg1, (HatchStyle)arg2) -> None :

    C++ signature :
        void setHatchStyle(class PyDbHatch {lvalue},enum AcDbHatch::HatchStyle)'''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineGenerationEnabled (self: Hatch,val : bool)-> bool :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self: Hatch,val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOriginPoint (self: Hatch,val : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPattern (self, *args, **kwargs)-> None :
      '''setPattern( (Hatch)arg1, (HatchPatternType)arg2, (str)arg3) -> None :

    C++ signature :
        void setPattern(class PyDbHatch {lvalue},enum AcDbHatch::HatchPatternType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPatternAngle (self: Hatch,val : float)-> None :
      '''                             '''
    ...
    def setPatternDouble (self: Hatch,val : bool)-> None :
      '''                             '''
    ...
    def setPatternScale (self: Hatch,val : float)-> None :
      '''                             '''
    ...
    def setPatternSpace (self: Hatch,val : float)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setShadeTintValue (self: Hatch,val : float)-> None :
      '''                             '''
    ...
    def setShadeTintValueAndColor2 (self, *args, **kwargs)-> None :
      '''setShadeTintValueAndColor2( (Hatch)arg1, (float)arg2) -> None :

    C++ signature :
        void setShadeTintValueAndColor2(class PyDbHatch {lvalue},float)'''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class HatchEdgeType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kCirArc (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEllArc (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLine (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSpline (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class HatchGradientPatternType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kPreDefinedGradient (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUserDefinedGradient (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class HatchLoopType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kDefault (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDerived (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDoesNotSupportScale (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDuplicate (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kExternal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kForceAnnoAllVisible (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kIsAnnotative (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kIsAnnotativeBlock (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNotClosed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOrientToPaper (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOutermost (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPolyline (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSelfIntersecting (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextIsland (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextbox (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class HatchObjectType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kGradientObject (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHatchObject (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class HatchPatternType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kCustomDefined (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPreDefined (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUserDefined (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class HatchStyle:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kIgnore (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNormal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOuter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class Helix:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def axisPoint (self: Helix)-> PyGe.Point3d :
      '''                             '''
    ...
    def axisVector (self: Helix)-> PyGe.Vector3d :
      '''                             '''
    ...
    def baseRadius (self: Helix)-> float :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: RxObject)-> PyDb.Helix :
      '''                             '''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: RxObject)-> PyDb.Helix :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def constrain (self: Helix)-> PyDb.HelixConstrainType :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def createFromAcGeCurve (curve: PyGe.Curve3d,normal: PyGe.Vector3d = kZAxis,tol: Tol = default)-> PyDb.Curve :
      '''                             '''
    ...
    def createHelix (self: Helix)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def degree (self: Spline)-> int :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevateDegree (self: Spline,val : int)-> None :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> None :
      '''extend( (Curve)arg1, (float)arg2) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def fitTolerance (self: Spline)-> float :
      '''                             '''
    ...
    def getAcGeCurve (self: Curve,tol: Tol = default)-> PyGe.Curve3d :
      '''                             '''
    ...
    def getArea (self: Curve)-> float :
      '''                             '''
    ...
    def getClosestPointTo (self: Curve,point3d: PyGe.Point3d,direction: PyGe.Vector3d=None,extend: bool=False)-> PyGe.Point3d :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getControlPointAt (self: Spline,idx:int)-> PyGe.Point3d :
      '''                             '''
    ...
    def getDistAtParam (self: Curve,param: float)-> float :
      '''                             '''
    ...
    def getDistAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEndParam (self: Curve)-> float :
      '''                             '''
    ...
    def getEndPoint (self: Curve)-> PyGe.Point3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self: Curve,param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getFitData (self: Spline)-> tuple :
      '''                             '''
    ...
    def getFitDataKnot (self: Spline)-> tuple :
      '''                             '''
    ...
    def getFitPointAt (self: Spline,idx:int)-> PyGe.Point3d :
      '''                             '''
    ...
    def getFitTangents (self: Spline)-> tuple :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getNurbsData (self: Spline)-> tuple :
      '''                             '''
    ...
    def getOffsetCurves (self: Curve,dist: float)-> list :
      '''                             '''
    ...
    def getOffsetCurvesGivenPlaneNormal (self, *args, **kwargs)-> list :
      '''getOffsetCurvesGivenPlaneNormal( (Spline)arg1, (Vector3d)arg2, (float)arg3) -> list :

    C++ signature :
        class boost::python::list getOffsetCurvesGivenPlaneNormal(class PyDbSpline {lvalue},class AcGeVector3d,double)'''
    ...
    def getOrthoProjectedCurve (self: Curve,plane: PyGe.Plane)-> PyDb.Curve :
      '''                             '''
    ...
    def getParamAtDist (self: Curve,dist: float)-> float :
      '''                             '''
    ...
    def getParamAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getPointAtDist (self: Curve,dist: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getPointAtParam (self: Curve,param: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getProjectedCurve (self: Curve,plane: PyGe.Plane,projDir: PyGe.Vector3d)-> PyDb.Curve :
      '''                             '''
    ...
    def getSecondDeriv (self: Curve,param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getSpline (self: Curve)-> PyDb.Spline :
      '''                             '''
    ...
    def getSplitCurves (self: Curve,paramsOrPoints: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParam (self: Curve,param: float)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParams (self: Curve,params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoint (self: Curve,point: PyGe.Point3d)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoints (self: Curve,points: list)-> list :
      '''                             '''
    ...
    def getStartParam (self: Curve)-> float :
      '''                             '''
    ...
    def getStartPoint (self: Curve)-> PyGe.Point3d :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasFitData (self: Spline)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def height (self: Helix)-> float :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def insertControlPointAt (self, *args, **kwargs)-> None :
      '''insertControlPointAt( (Spline)arg1, (float)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void insertControlPointAt(class PyDbSpline {lvalue},double,class AcGePoint3d)

insertControlPointAt( (Spline)arg1, (float)arg2, (Point3d)arg3, (float)arg4) -> None :

    C++ signature :
        void insertControlPointAt(class PyDbSpline {lvalue},double,class AcGePoint3d,double)'''
    ...
    def insertFitPointAt (self: Spline,idx:int,pnt:PyGe.Point3d)-> None :
      '''                             '''
    ...
    def insertKnot (self: Spline,val : float)-> None :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isClosed (self: Curve)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self: Spline)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPeriodic (self: Curve)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isRational (self: Spline)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def numControlPoints (self: Spline)-> int :
      '''                             '''
    ...
    def numFitPoints (self: Spline)-> int :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def purgeFitData (self: Spline)-> None :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def rebuild (self, *args, **kwargs)-> None :
      '''rebuild( (Spline)arg1, (int)arg2, (int)arg3) -> None :

    C++ signature :
        void rebuild(class PyDbSpline {lvalue},int,int)'''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeControlPointAt (self: Spline,val : int)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removeFitPointAt (self: Spline,idx:int)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def reverseCurve (self: Helix)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setAxisPoint (self: Helix,axisPoint : PyGe.Point3d,bMoveStartPoint : bool = True)-> None :
      '''                             '''
    ...
    def setAxisVector (self: Helix,val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setBaseRadius (self: Helix,val : float)-> None :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setConstrain (self: Helix,val : PyDb.HelixConstrainType)-> None :
      '''                             '''
    ...
    def setControlPointAt (self: Spline,idx:int,pnt:PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setFitData (self, *args, **kwargs)-> None :
      '''setFitData( (Spline)arg1, (list)arg2, (int)arg3, (float)arg4, (Vector3d)arg5, (Vector3d)arg6) -> None :

    C++ signature :
        void setFitData(class PyDbSpline {lvalue},class boost::python::list,int,double,class AcGeVector3d,class AcGeVector3d)'''
    ...
    def setFitDataKnot (self, *args, **kwargs)-> None :
      '''setFitDataKnot( (Spline)arg1, (list)arg2, (Vector3d)arg3, (Vector3d)arg4, (AcGeKnotParameterization)arg5) -> None :

    C++ signature :
        void setFitDataKnot(class PyDbSpline {lvalue},class boost::python::list,class AcGeVector3d,class AcGeVector3d,enum AcGe::KnotParameterization)

setFitDataKnot( (Spline)arg1, (list)arg2, (Vector3d)arg3, (Vector3d)arg4, (AcGeKnotParameterization)arg5, (int)arg6, (float)arg7) -> None :

    C++ signature :
        void setFitDataKnot(class PyDbSpline {lvalue},class boost::python::list,class AcGeVector3d,class AcGeVector3d,enum AcGe::KnotParameterization,int,double)

setFitDataKnot( (Spline)arg1, (list)arg2, (bool)arg3, (AcGeKnotParameterization)arg4) -> None :

    C++ signature :
        void setFitDataKnot(class PyDbSpline {lvalue},class boost::python::list,bool,enum AcGe::KnotParameterization)

setFitDataKnot( (Spline)arg1, (list)arg2, (bool)arg3, (AcGeKnotParameterization)arg4, (int)arg5, (float)arg6) -> None :

    C++ signature :
        void setFitDataKnot(class PyDbSpline {lvalue},class boost::python::list,bool,enum AcGe::KnotParameterization,int,double)'''
    ...
    def setFitPointAt (self: Spline,idx:int,pnt:PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setFitTangents (self: Spline,start : PyGe.Vector3d,end : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setFitTol (self: Spline,val : float)-> None :
      '''                             '''
    ...
    def setFromAcGeCurve (self: Curve,curve: PyGe.Curve3d,normal: PyGe.Vector3d = kZAxis,tol: Tol = default)-> None :
      '''                             '''
    ...
    def setHeight (self: Helix,val : float)-> None :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNurbsData (self, *args, **kwargs)-> None :
      '''setNurbsData( (Spline)arg1, (int)arg2, (bool)arg3, (bool)arg4, (bool)arg5, (list)arg6, (list)arg7, (list)arg8) -> None :

    C++ signature :
        void setNurbsData(class PyDbSpline {lvalue},int,bool,bool,bool,class boost::python::list,class boost::python::list,class boost::python::list)

setNurbsData( (Spline)arg1, (int)arg2, (bool)arg3, (bool)arg4, (bool)arg5, (list)arg6, (list)arg7, (list)arg8, (float)arg9, (float)arg10) -> None :

    C++ signature :
        void setNurbsData(class PyDbSpline {lvalue},int,bool,bool,bool,class boost::python::list,class boost::python::list,class boost::python::list,double,double)'''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setStartPoint (self: Helix,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setTopRadius (self: Helix,val : float)-> None :
      '''                             '''
    ...
    def setTurnHeight (self: Helix,val : float)-> None :
      '''                             '''
    ...
    def setTurns (self: Helix,val : float)-> None :
      '''                             '''
    ...
    def setTwist (self: Helix,val : bool)-> None :
      '''                             '''
    ...
    def setType (self, *args, **kwargs)-> None :
      '''setType( (Spline)arg1, (SplineType)arg2) -> None :

    C++ signature :
        void setType(class PyDbSpline {lvalue},enum SplineType)'''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def startPoint (self: Helix)-> PyGe.Point3d :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def toPolyline (self: Spline)-> PyDb.Polyline :
      '''                             '''
    ...
    def topRadius (self: Helix)-> float :
      '''                             '''
    ...
    def totalLength (self: Helix)-> float :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def turnHeight (self: Helix)-> float :
      '''                             '''
    ...
    def turnSlope (self: Helix)-> float :
      '''                             '''
    ...
    def turns (self: Helix)-> float :
      '''                             '''
    ...
    def twist (self: Helix)-> bool :
      '''                             '''
    ...
    def type (self: Spline)-> PyDb.SplineType :
      '''                             '''
    ...
    def updateFitData (self: Spline)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def weightAt (self: Spline,val : int)-> float :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class HelixConstrainType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kHeight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTurnHeight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTurns (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class HostApplicationServices:
    def LayoutManager (self: HostApplicationServices)-> PyAp.LayoutManager :
      '''                             '''
    ...
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def companyName (self: HostApplicationServices)-> str :
      '''                             '''
    ...
    def findFile (self, *args, **kwargs)-> str :
      '''findFile( (HostApplicationServices)arg1, (str)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > findFile(class PyDbHostApplicationServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

findFile( (HostApplicationServices)arg1, (str)arg2, (Database)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > findFile(class PyDbHostApplicationServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)

findFile( (HostApplicationServices)arg1, (str)arg2, (Database)arg3, (FindFileHint)arg4) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > findFile(class PyDbHostApplicationServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase,enum AcDbHostApplicationServices::FindFileHint)'''
    ...
    def getMachineRegistryProductRootKey (self: HostApplicationServices)-> str :
      '''                             '''
    ...
    def getUserRegistryProductRootKey (self: HostApplicationServices)-> str :
      '''                             '''
    ...
    def product (self: HostApplicationServices)-> str :
      '''                             '''
    ...
    def program (self: HostApplicationServices)-> str :
      '''                             '''
    ...
    def releaseMajorMinorString (self: HostApplicationServices)-> str :
      '''                             '''
    ...
    def releaseMarketVersion (self: HostApplicationServices)-> str :
      '''                             '''
    ...
    def setWorkingDatabase (self: HostApplicationServices,val : PyDb.Database)-> None :
      '''                             '''
    ...
    def versionString (self: HostApplicationServices)-> str :
      '''                             '''
    ...
    def workingDatabase (self: HostApplicationServices)-> PyDb.Database :
      '''                             '''
    ...

class IdMapping:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def assign (self: IdMapping,pair: PyDb.IdPair)-> None :
      '''                             '''
    ...
    def change (self: IdMapping,pair: PyDb.IdPair)-> bool :
      '''                             '''
    ...
    def compute (self: IdMapping,pair: PyDb.IdPair)-> bool :
      '''                             '''
    ...
    def deepCloneContext (self: IdMapping)-> PyDb.DeepCloneType :
      '''                             '''
    ...
    def destDb (self: IdMapping)-> PyDb.Database :
      '''                             '''
    ...
    def duplicateRecordCloning (self: IdMapping)-> PyDb.DuplicateRecordCloning :
      '''                             '''
    ...
    def idPairs (self: IdMapping)-> list :
      '''                             '''
    ...
    def origDb (self: IdMapping)-> PyDb.Database :
      '''                             '''
    ...
    def remove (self: IdMapping,key: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def setDestDb (self: IdMapping,dest: PyDb.Database)-> None :
      '''                             '''
    ...

class IdPair:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,class PyDbObjectId,bool)

__init__( (object)arg1, (ObjectId)arg2, (ObjectId)arg3, (bool)arg4, (bool)arg5, (bool)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,class PyDbObjectId,bool,bool,bool)'''
    ...
    def isCloned (self: IdPair)-> bool :
      '''                             '''
    ...
    def isOwnerXlated (self: IdPair)-> bool :
      '''                             '''
    ...
    def isPrimary (self: IdPair)-> bool :
      '''                             '''
    ...
    def key (self: IdPair)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setIsCloned (self: IdPair,val : bool)-> None :
      '''                             '''
    ...
    def setIsOwnerXlated (self: IdPair,val : bool)-> None :
      '''                             '''
    ...
    def setIsPrimary (self: IdPair,val : bool)-> None :
      '''                             '''
    ...
    def setKey (self: IdPair,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setValue (self: IdPair,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def value (self: IdPair)-> PyDb.ObjectId :
      '''                             '''
    ...

class Image:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.Image :
      '''cast( (RxObject)arg1) -> Image :

    C++ signature :
        class PyDbImage cast(class PyRxObject)'''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.Image :
      '''cloneFrom( (RxObject)arg1) -> Image :

    C++ signature :
        class PyDbImage cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class ImageDisplayOpt:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kClip (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kShow (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kShowUnAligned (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTransparent (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class ImageUnits:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kAngstroms (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAstronomical (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCentimeter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDecimeters (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDekameters (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kFoot (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kGigameters (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHectometers (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kInch (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kKilometer (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLightYears (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMeter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMicroinches (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMicrons (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMillimeter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMils (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNanometers (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kParsecs (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kYard (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class Intersect:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kExtendArg (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kExtendBoth (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kExtendThis (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOnBothOperands (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class JoinEntityPE:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (RxObject)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyRxObject)'''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def joinEntities (self: JoinEntityPE,primaryEntity : PyDb.Entity,secondaryEntities : list[PyDb.Entity],tol : PyGe.Tol=None)-> list :
      '''                             '''
    ...
    def joinEntity (self: JoinEntityPE,primaryEntity : PyDb.Entity,secondaryEntity : PyDb.Entity,tol : PyGe.Tol=None)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...

class JoinStyle:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kJnStylAngle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kJnStylFlat (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kJnStylNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kJnStylRound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class LayerFilter:
    def __init__ (self: LayerFilter,id: PyDb.ObjectId,mode: OpenMode=kForRead,erased: bool=False)-> None :
      '''                             '''
    ...
    def add (self: LayerFilter,val : str)-> None :
      '''                             '''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyAp.LayerFilter :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyAp.LayerFilter :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getAt (self: LayerFilter,val : int)-> str :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def indexClass (self: LayerFilter)-> PyRx.RxClass :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isValid (self: LayerFilter)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layerCount (self: LayerFilter)-> int :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def remove (self: LayerFilter,val : str)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class LayerTable:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def add (self, *args, **kwargs)-> PyDb.ObjectId :
      '''add( (LayerTable)arg1, (LayerTableRecord)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId add(class PyDbLayerTable {lvalue},class PyDbLayerTableRecord)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.LayerTable :
      '''cast( (RxObject)arg1) -> LayerTable :

    C++ signature :
        class PyDbLayerTable cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.LayerTable :
      '''cloneFrom( (RxObject)arg1) -> LayerTable :

    C++ signature :
        class PyDbLayerTable cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getAt (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getAt( (SymbolTable)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getAt(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has (self, *args, **kwargs)-> bool :
      '''has( (SymbolTable)arg1, (str)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

has( (SymbolTable)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class PyDbObjectId)'''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def recordIds (self, *args, **kwargs)-> list :
      '''recordIds( (SymbolTable)arg1) -> list :

    C++ signature :
        class boost::python::list recordIds(class PyDbSymbolTable {lvalue})'''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def toDict (self, *args, **kwargs)-> dict :
      '''toDict( (SymbolTable)arg1) -> dict :

    C++ signature :
        class boost::python::dict toDict(class PyDbSymbolTable {lvalue})'''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class LayerTableRecord:
    def VPDFLT (self: LayerTableRecord)-> bool :
      '''                             '''
    ...
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.LayerTableRecord :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.LayerTableRecord :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def color (self, *args, **kwargs)-> PyDb.Color :
      '''color( (LayerTableRecord)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbLayerTableRecord {lvalue})

color( (LayerTableRecord)arg1, (ObjectId)arg2) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def description (self: LayerTableRecord)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: LayerTableRecord)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getName (self: SymbolTableRecord)-> str :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasAnyOverrides (self, *args, **kwargs)-> bool :
      '''hasAnyOverrides( (LayerTableRecord)arg1) -> bool :

    C++ signature :
        bool hasAnyOverrides(class PyDbLayerTableRecord {lvalue})'''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasOverrides (self, *args, **kwargs)-> bool :
      '''hasOverrides( (LayerTableRecord)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasOverrides(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isDependent (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isFrozen (self: LayerTableRecord)-> bool :
      '''                             '''
    ...
    def isHidden (self: LayerTableRecord)-> bool :
      '''                             '''
    ...

    @staticmethod
    def isHiddenS (val : PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def isInUse (self: LayerTableRecord)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isLocked (self: LayerTableRecord)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isOff (self: LayerTableRecord)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlottable (self: LayerTableRecord)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReconciled (self: LayerTableRecord)-> bool :
      '''                             '''
    ...

    @staticmethod
    def isReconciledS (val : PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def isRenamable (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isResolved (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def lineWeight (self, *args, **kwargs)-> PyDb.LineWeight :
      '''lineWeight( (LayerTableRecord)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbLayerTableRecord {lvalue})

lineWeight( (LayerTableRecord)arg1, (ObjectId)arg2) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def linetypeObjectId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''linetypeObjectId( (LayerTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeObjectId(class PyDbLayerTableRecord {lvalue})'''
    ...
    def materialId (self: LayerTableRecord)-> PyDb.ObjectId :
      '''                             '''
    ...
    def name (self: SymbolTableRecord)-> str :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (LayerTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbLayerTableRecord {lvalue})

plotStyleName( (LayerTableRecord)arg1, (ObjectId)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def plotStyleNameId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''plotStyleNameId( (LayerTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId plotStyleNameId(class PyDbLayerTableRecord {lvalue})

plotStyleNameId( (LayerTableRecord)arg1, (ObjectId)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId plotStyleNameId(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeAllOverrides (self, *args, **kwargs)-> None :
      '''removeAllOverrides( (LayerTableRecord)arg1) -> None :

    C++ signature :
        void removeAllOverrides(class PyDbLayerTableRecord {lvalue})'''
    ...
    def removeColorOverride (self, *args, **kwargs)-> None :
      '''removeColorOverride( (LayerTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void removeColorOverride(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removeLineWeightOverride (self, *args, **kwargs)-> None :
      '''removeLineWeightOverride( (LayerTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void removeLineWeightOverride(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def removeLinetypeOverride (self, *args, **kwargs)-> None :
      '''removeLinetypeOverride( (LayerTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void removeLinetypeOverride(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePlotStyleOverride (self, *args, **kwargs)-> None :
      '''removePlotStyleOverride( (LayerTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void removePlotStyleOverride(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def removeTransparencyOverride (self, *args, **kwargs)-> None :
      '''removeTransparencyOverride( (LayerTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void removeTransparencyOverride(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def removeViewportOverrides (self, *args, **kwargs)-> None :
      '''removeViewportOverrides( (LayerTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void removeViewportOverrides(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setColor (self, *args, **kwargs)-> None :
      '''setColor( (LayerTableRecord)arg1, (Color)arg2) -> None :

    C++ signature :
        void setColor(class PyDbLayerTableRecord {lvalue},class AcCmColor)

setColor( (LayerTableRecord)arg1, (Color)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void setColor(class PyDbLayerTableRecord {lvalue},class AcCmColor,class PyDbObjectId)'''
    ...
    def setDescription (self, *args, **kwargs)-> None :
      '''setDescription( (LayerTableRecord)arg1, (str)arg2) -> None :

    C++ signature :
        void setDescription(class PyDbLayerTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setIsFrozen (self, *args, **kwargs)-> None :
      '''setIsFrozen( (LayerTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsFrozen(class PyDbLayerTableRecord {lvalue},bool)'''
    ...
    def setIsHidden (self, *args, **kwargs)-> None :
      '''setIsHidden( (LayerTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsHidden(class PyDbLayerTableRecord {lvalue},bool)'''
    ...
    def setIsLocked (self, *args, **kwargs)-> None :
      '''setIsLocked( (LayerTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsLocked(class PyDbLayerTableRecord {lvalue},bool)'''
    ...
    def setIsOff (self, *args, **kwargs)-> None :
      '''setIsOff( (LayerTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsOff(class PyDbLayerTableRecord {lvalue},bool)'''
    ...
    def setIsPlottable (self, *args, **kwargs)-> None :
      '''setIsPlottable( (LayerTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsPlottable(class PyDbLayerTableRecord {lvalue},bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> None :
      '''setLineWeight( (LayerTableRecord)arg1, (LineWeight)arg2) -> None :

    C++ signature :
        void setLineWeight(class PyDbLayerTableRecord {lvalue},enum AcDb::LineWeight)

setLineWeight( (LayerTableRecord)arg1, (LineWeight)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void setLineWeight(class PyDbLayerTableRecord {lvalue},enum AcDb::LineWeight,class PyDbObjectId)'''
    ...
    def setLinetypeObjectId (self, *args, **kwargs)-> None :
      '''setLinetypeObjectId( (LayerTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setLinetypeObjectId(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setMaterialId (self, *args, **kwargs)-> None :
      '''setMaterialId( (LayerTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setMaterialId(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setName (self: SymbolTableRecord,name: str)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (LayerTableRecord)arg1, (str)arg2) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbLayerTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setPlotStyleName( (LayerTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)

setPlotStyleName( (LayerTableRecord)arg1, (str)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbLayerTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)

setPlotStyleName( (LayerTableRecord)arg1, (ObjectId)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbLayerTableRecord {lvalue},class PyDbObjectId,class PyDbObjectId)'''
    ...
    def setTransparency (self, *args, **kwargs)-> None :
      '''setTransparency( (LayerTableRecord)arg1, (Transparency)arg2) -> None :

    C++ signature :
        void setTransparency(class PyDbLayerTableRecord {lvalue},class AcCmTransparency)

setTransparency( (LayerTableRecord)arg1, (Transparency)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void setTransparency(class PyDbLayerTableRecord {lvalue},class AcCmTransparency,class PyDbObjectId)'''
    ...
    def setVPDFLT (self, *args, **kwargs)-> None :
      '''setVPDFLT( (LayerTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVPDFLT(class PyDbLayerTableRecord {lvalue},bool)'''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transparency (self, *args, **kwargs)-> PyDb.Transparency :
      '''transparency( (LayerTableRecord)arg1) -> Transparency :

    C++ signature :
        class AcCmTransparency transparency(class PyDbLayerTableRecord {lvalue})

transparency( (LayerTableRecord)arg1, (ObjectId)arg2) -> Transparency :

    C++ signature :
        class AcCmTransparency transparency(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class Layout:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def addToLayoutDict (self, *args, **kwargs)-> None :
      '''addToLayoutDict( (Layout)arg1, (Database)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void addToLayoutDict(class PyDbLayout {lvalue},class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def addToPlotSettingsDict (self, *args, **kwargs)-> None :
      '''addToPlotSettingsDict( (PlotSettings)arg1, (Database)arg2) -> None :

    C++ signature :
        void addToPlotSettingsDict(class PyDbPlotSettings {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def annoAllVisible (self, *args, **kwargs)-> bool :
      '''annoAllVisible( (Layout)arg1) -> bool :

    C++ signature :
        bool annoAllVisible(class PyDbLayout {lvalue})'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.Layout :
      '''cast( (RxObject)arg1) -> Layout :

    C++ signature :
        class PyDbLayout cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.Layout :
      '''cloneFrom( (RxObject)arg1) -> Layout :

    C++ signature :
        class PyDbLayout cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawViewportsFirst (self, *args, **kwargs)-> bool :
      '''drawViewportsFirst( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool drawViewportsFirst(class PyDbPlotSettings {lvalue})'''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getBlockTableRecordId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getBlockTableRecordId( (Layout)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getBlockTableRecordId(class PyDbLayout {lvalue})'''
    ...
    def getCanonicalMediaName (self, *args, **kwargs)-> str :
      '''getCanonicalMediaName( (PlotSettings)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getCanonicalMediaName(class PyDbPlotSettings {lvalue})'''
    ...
    def getCurrentStyleSheet (self, *args, **kwargs)-> str :
      '''getCurrentStyleSheet( (PlotSettings)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getCurrentStyleSheet(class PyDbPlotSettings {lvalue})'''
    ...
    def getCustomPrintScale (self, *args, **kwargs)-> tuple :
      '''getCustomPrintScale( (PlotSettings)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getCustomPrintScale(class PyDbPlotSettings {lvalue})'''
    ...
    def getExtents (self, *args, **kwargs)-> tuple :
      '''getExtents( (Layout)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getExtents(class PyDbLayout {lvalue})'''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getLayoutName (self, *args, **kwargs)-> str :
      '''getLayoutName( (Layout)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getLayoutName(class PyDbLayout {lvalue})'''
    ...
    def getLimits (self, *args, **kwargs)-> tuple :
      '''getLimits( (Layout)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getLimits(class PyDbLayout {lvalue})'''
    ...
    def getPlotCfgName (self, *args, **kwargs)-> str :
      '''getPlotCfgName( (PlotSettings)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getPlotCfgName(class PyDbPlotSettings {lvalue})'''
    ...
    def getPlotOrigin (self, *args, **kwargs)-> tuple :
      '''getPlotOrigin( (PlotSettings)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getPlotOrigin(class PyDbPlotSettings {lvalue})'''
    ...
    def getPlotPaperMargins (self, *args, **kwargs)-> tuple :
      '''getPlotPaperMargins( (PlotSettings)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getPlotPaperMargins(class PyDbPlotSettings {lvalue})'''
    ...
    def getPlotPaperSize (self, *args, **kwargs)-> tuple :
      '''getPlotPaperSize( (PlotSettings)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getPlotPaperSize(class PyDbPlotSettings {lvalue})'''
    ...
    def getPlotSettingsName (self, *args, **kwargs)-> str :
      '''getPlotSettingsName( (PlotSettings)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getPlotSettingsName(class PyDbPlotSettings {lvalue})'''
    ...
    def getPlotViewName (self, *args, **kwargs)-> str :
      '''getPlotViewName( (PlotSettings)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getPlotViewName(class PyDbPlotSettings {lvalue})'''
    ...
    def getPlotWindowArea (self, *args, **kwargs)-> tuple :
      '''getPlotWindowArea( (PlotSettings)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getPlotWindowArea(class PyDbPlotSettings {lvalue})'''
    ...
    def getStdScale (self, *args, **kwargs)-> float :
      '''getStdScale( (PlotSettings)arg1) -> float :

    C++ signature :
        double getStdScale(class PyDbPlotSettings {lvalue})'''
    ...
    def getTabOrder (self, *args, **kwargs)-> int :
      '''getTabOrder( (Layout)arg1) -> int :

    C++ signature :
        int getTabOrder(class PyDbLayout {lvalue})'''
    ...
    def getTabSelected (self, *args, **kwargs)-> bool :
      '''getTabSelected( (Layout)arg1) -> bool :

    C++ signature :
        bool getTabSelected(class PyDbLayout {lvalue})'''
    ...
    def getViewportArray (self, *args, **kwargs)-> list :
      '''getViewportArray( (Layout)arg1) -> list :

    C++ signature :
        class boost::python::list getViewportArray(class PyDbLayout {lvalue})'''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def initialize (self, *args, **kwargs)-> None :
      '''initialize( (Layout)arg1) -> None :

    C++ signature :
        void initialize(class PyDbLayout {lvalue})

initialize( (Layout)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void initialize(class PyDbLayout {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def modelType (self, *args, **kwargs)-> bool :
      '''modelType( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool modelType(class PyDbPlotSettings {lvalue})'''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotAsRaster (self, *args, **kwargs)-> bool :
      '''plotAsRaster( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotAsRaster(class PyDbPlotSettings {lvalue})'''
    ...
    def plotCentered (self, *args, **kwargs)-> bool :
      '''plotCentered( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotCentered(class PyDbPlotSettings {lvalue})'''
    ...
    def plotHidden (self, *args, **kwargs)-> bool :
      '''plotHidden( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotHidden(class PyDbPlotSettings {lvalue})'''
    ...
    def plotPaperUnits (self, *args, **kwargs)-> PyDb.PlotPaperUnits :
      '''plotPaperUnits( (PlotSettings)arg1) -> PlotPaperUnits :

    C++ signature :
        enum AcDbPlotSettings::PlotPaperUnits plotPaperUnits(class PyDbPlotSettings {lvalue})'''
    ...
    def plotPlotStyles (self, *args, **kwargs)-> bool :
      '''plotPlotStyles( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotPlotStyles(class PyDbPlotSettings {lvalue})'''
    ...
    def plotRotation (self, *args, **kwargs)-> PyDb.PlotRotation :
      '''plotRotation( (PlotSettings)arg1) -> PlotRotation :

    C++ signature :
        enum AcDbPlotSettings::PlotRotation plotRotation(class PyDbPlotSettings {lvalue})'''
    ...
    def plotTransparency (self, *args, **kwargs)-> bool :
      '''plotTransparency( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotTransparency(class PyDbPlotSettings {lvalue})'''
    ...
    def plotType (self, *args, **kwargs)-> PyDb.PlotType :
      '''plotType( (PlotSettings)arg1) -> PlotType :

    C++ signature :
        enum AcDbPlotSettings::PlotType plotType(class PyDbPlotSettings {lvalue})'''
    ...
    def plotViewportBorders (self, *args, **kwargs)-> bool :
      '''plotViewportBorders( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotViewportBorders(class PyDbPlotSettings {lvalue})'''
    ...
    def plotWireframe (self, *args, **kwargs)-> bool :
      '''plotWireframe( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotWireframe(class PyDbPlotSettings {lvalue})'''
    ...
    def printLineweights (self, *args, **kwargs)-> bool :
      '''printLineweights( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool printLineweights(class PyDbPlotSettings {lvalue})'''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def scaleLineweights (self, *args, **kwargs)-> bool :
      '''scaleLineweights( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool scaleLineweights(class PyDbPlotSettings {lvalue})'''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnoAllVisible (self, *args, **kwargs)-> None :
      '''setAnnoAllVisible( (Layout)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAnnoAllVisible(class PyDbLayout {lvalue},bool)'''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBlockTableRecordId (self, *args, **kwargs)-> None :
      '''setBlockTableRecordId( (Layout)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setBlockTableRecordId(class PyDbLayout {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def setDrawViewportsFirst (self, *args, **kwargs)-> None :
      '''setDrawViewportsFirst( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setDrawViewportsFirst(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setLayoutName (self, *args, **kwargs)-> None :
      '''setLayoutName( (Layout)arg1, (str)arg2) -> None :

    C++ signature :
        void setLayoutName(class PyDbLayout {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotHidden (self, *args, **kwargs)-> None :
      '''setPlotHidden( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPlotHidden(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setPlotPlotStyles (self, *args, **kwargs)-> None :
      '''setPlotPlotStyles( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPlotPlotStyles(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setPlotSettingsName (self, *args, **kwargs)-> None :
      '''setPlotSettingsName( (PlotSettings)arg1, (str)arg2) -> None :

    C++ signature :
        void setPlotSettingsName(class PyDbPlotSettings {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPlotTransparency (self, *args, **kwargs)-> None :
      '''setPlotTransparency( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPlotTransparency(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setPlotViewportBorders (self, *args, **kwargs)-> None :
      '''setPlotViewportBorders( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPlotViewportBorders(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setPrintLineweights (self, *args, **kwargs)-> None :
      '''setPrintLineweights( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPrintLineweights(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setScaleLineweights (self, *args, **kwargs)-> None :
      '''setScaleLineweights( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setScaleLineweights(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setShadePlot (self, *args, **kwargs)-> None :
      '''setShadePlot( (PlotSettings)arg1, (ShadePlotType)arg2) -> None :

    C++ signature :
        void setShadePlot(class PyDbPlotSettings {lvalue},enum AcDbPlotSettings::ShadePlotType)

setShadePlot( (PlotSettings)arg1, (ShadePlotType)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void setShadePlot(class PyDbPlotSettings {lvalue},enum AcDbPlotSettings::ShadePlotType,class PyDbObjectId)'''
    ...
    def setShadePlotCustomDPI (self, *args, **kwargs)-> None :
      '''setShadePlotCustomDPI( (PlotSettings)arg1, (DxfCode)arg2) -> None :

    C++ signature :
        void setShadePlotCustomDPI(class PyDbPlotSettings {lvalue},short)'''
    ...
    def setShadePlotResLevel (self, *args, **kwargs)-> None :
      '''setShadePlotResLevel( (PlotSettings)arg1, (ShadePlotResLevel)arg2) -> None :

    C++ signature :
        void setShadePlotResLevel(class PyDbPlotSettings {lvalue},enum AcDbPlotSettings::ShadePlotResLevel)'''
    ...
    def setShowPlotStyles (self, *args, **kwargs)-> None :
      '''setShowPlotStyles( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShowPlotStyles(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setTabOrder (self, *args, **kwargs)-> None :
      '''setTabOrder( (Layout)arg1, (int)arg2) -> None :

    C++ signature :
        void setTabOrder(class PyDbLayout {lvalue},int)'''
    ...
    def setTabSelected (self, *args, **kwargs)-> None :
      '''setTabSelected( (Layout)arg1, (bool)arg2) -> None :

    C++ signature :
        void setTabSelected(class PyDbLayout {lvalue},bool)'''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def shadePlot (self, *args, **kwargs)-> PyDb.ShadePlotType :
      '''shadePlot( (PlotSettings)arg1) -> ShadePlotType :

    C++ signature :
        enum AcDbPlotSettings::ShadePlotType shadePlot(class PyDbPlotSettings {lvalue})'''
    ...
    def shadePlotCustomDPI (self, *args, **kwargs)-> int :
      '''shadePlotCustomDPI( (PlotSettings)arg1) -> int :

    C++ signature :
        short shadePlotCustomDPI(class PyDbPlotSettings {lvalue})'''
    ...
    def shadePlotId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''shadePlotId( (PlotSettings)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId shadePlotId(class PyDbPlotSettings {lvalue})'''
    ...
    def shadePlotResLevel (self, *args, **kwargs)-> PyDb.ShadePlotResLevel :
      '''shadePlotResLevel( (PlotSettings)arg1) -> ShadePlotResLevel :

    C++ signature :
        enum AcDbPlotSettings::ShadePlotResLevel shadePlotResLevel(class PyDbPlotSettings {lvalue})'''
    ...
    def showPlotStyles (self, *args, **kwargs)-> bool :
      '''showPlotStyles( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool showPlotStyles(class PyDbPlotSettings {lvalue})'''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def stdScaleType (self, *args, **kwargs)-> PyDb.StdScaleType :
      '''stdScaleType( (PlotSettings)arg1) -> StdScaleType :

    C++ signature :
        enum AcDbPlotSettings::StdScaleType stdScaleType(class PyDbPlotSettings {lvalue})'''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def useStandardScale (self, *args, **kwargs)-> bool :
      '''useStandardScale( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool useStandardScale(class PyDbPlotSettings {lvalue})'''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class LayoutManager:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def clearSetupForLayouts (self, *args, **kwargs)-> None :
      '''clearSetupForLayouts( (int)arg1) -> None :

    C++ signature :
        void clearSetupForLayouts(unsigned __int64)'''
    ...
    def cloneLayout (self, *args, **kwargs)-> None :
      '''cloneLayout( (LayoutManager)arg1, (Layout)arg2, (str)arg3) -> None :

    C++ signature :
        void cloneLayout(class PyDbLayoutManager {lvalue},class PyDbLayout {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

cloneLayout( (LayoutManager)arg1, (Layout)arg2, (str)arg3, (int)arg4, (Database)arg5) -> None :

    C++ signature :
        void cloneLayout(class PyDbLayoutManager {lvalue},class PyDbLayout {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,int,class PyDbDatabase {lvalue})'''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def copyLayout (self, *args, **kwargs)-> None :
      '''copyLayout( (LayoutManager)arg1, (str)arg2, (str)arg3) -> None :

    C++ signature :
        void copyLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

copyLayout( (LayoutManager)arg1, (str)arg2, (str)arg3, (Database)arg4) -> None :

    C++ signature :
        void copyLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def countLayouts (self, *args, **kwargs)-> int :
      '''countLayouts( (LayoutManager)arg1) -> int :

    C++ signature :
        int countLayouts(class PyDbLayoutManager {lvalue})

countLayouts( (LayoutManager)arg1, (Database)arg2) -> int :

    C++ signature :
        int countLayouts(class PyDbLayoutManager {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def createLayout (self, *args, **kwargs)-> None :
      '''createLayout( (LayoutManager)arg1, (str)arg2, (ObjectId)arg3, (ObjectId)arg4) -> None :

    C++ signature :
        void createLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId {lvalue},class PyDbObjectId {lvalue})

createLayout( (LayoutManager)arg1, (str)arg2, (ObjectId)arg3, (ObjectId)arg4, (Database)arg5) -> None :

    C++ signature :
        void createLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId {lvalue},class PyDbObjectId {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def deleteLayout (self, *args, **kwargs)-> None :
      '''deleteLayout( (LayoutManager)arg1, (str)arg2) -> None :

    C++ signature :
        void deleteLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

deleteLayout( (LayoutManager)arg1, (str)arg2, (Database)arg3) -> None :

    C++ signature :
        void deleteLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase {lvalue})'''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def findLayoutNamed (self, *args, **kwargs)-> PyDb.ObjectId :
      '''findLayoutNamed( (LayoutManager)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId findLayoutNamed(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

findLayoutNamed( (LayoutManager)arg1, (str)arg2, (Database)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId findLayoutNamed(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def getActiveLayoutBTRId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getActiveLayoutBTRId( (LayoutManager)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getActiveLayoutBTRId(class PyDbLayoutManager {lvalue})

getActiveLayoutBTRId( (LayoutManager)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getActiveLayoutBTRId(class PyDbLayoutManager {lvalue},class PyDbDatabase)'''
    ...
    def getActiveLayoutName (self, *args, **kwargs)-> str :
      '''getActiveLayoutName( (LayoutManager)arg1, (bool)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getActiveLayoutName(class PyDbLayoutManager {lvalue},bool)

getActiveLayoutName( (LayoutManager)arg1, (bool)arg2, (Database)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getActiveLayoutName(class PyDbLayoutManager {lvalue},bool,class PyDbDatabase {lvalue})'''
    ...
    def getNonRectVPIdFromClipId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getNonRectVPIdFromClipId( (LayoutManager)arg1, (ObjectId)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getNonRectVPIdFromClipId(class PyDbLayoutManager {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isVpnumClipped (self, *args, **kwargs)-> bool :
      '''isVpnumClipped( (LayoutManager)arg1, (int)arg2) -> bool :

    C++ signature :
        bool isVpnumClipped(class PyDbLayoutManager {lvalue},int)

isVpnumClipped( (LayoutManager)arg1, (int)arg2, (Database)arg3) -> bool :

    C++ signature :
        bool isVpnumClipped(class PyDbLayoutManager {lvalue},int,class PyDbDatabase)'''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layoutExists (self, *args, **kwargs)-> bool :
      '''layoutExists( (LayoutManager)arg1, (str)arg2) -> bool :

    C++ signature :
        bool layoutExists(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

layoutExists( (LayoutManager)arg1, (str)arg2, (Database)arg3) -> bool :

    C++ signature :
        bool layoutExists(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def renameLayout (self, *args, **kwargs)-> None :
      '''renameLayout( (LayoutManager)arg1, (str)arg2, (str)arg3) -> None :

    C++ signature :
        void renameLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

renameLayout( (LayoutManager)arg1, (str)arg2, (str)arg3, (Database)arg4) -> None :

    C++ signature :
        void renameLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase {lvalue})'''
    ...
    def setCurrentLayout (self, *args, **kwargs)-> None :
      '''setCurrentLayout( (LayoutManager)arg1, (str)arg2) -> None :

    C++ signature :
        void setCurrentLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setCurrentLayout( (LayoutManager)arg1, (str)arg2, (Database)arg3) -> None :

    C++ signature :
        void setCurrentLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase {lvalue})'''
    ...
    def setCurrentLayoutId (self, *args, **kwargs)-> None :
      '''setCurrentLayoutId( (LayoutManager)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setCurrentLayoutId(class PyDbLayoutManager {lvalue},class PyDbObjectId)'''
    ...
    def setupForLayouts (self, *args, **kwargs)-> int :
      '''setupForLayouts( (Database)arg1) -> int :

    C++ signature :
        unsigned __int64 setupForLayouts(class PyDbDatabase {lvalue})'''
    ...

class Leader:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def annoHeight (self, *args, **kwargs)-> float :
      '''annoHeight( (Leader)arg1) -> float :

    C++ signature :
        double annoHeight(class PyDbLeader {lvalue})'''
    ...
    def annoType (self, *args, **kwargs)-> PyDb.AnnoType :
      '''annoType( (Leader)arg1) -> AnnoType :

    C++ signature :
        enum AcDbLeader::AnnoType annoType(class PyDbLeader {lvalue})'''
    ...
    def annoWidth (self, *args, **kwargs)-> float :
      '''annoWidth( (Leader)arg1) -> float :

    C++ signature :
        double annoWidth(class PyDbLeader {lvalue})'''
    ...
    def annotationObjId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''annotationObjId( (Leader)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId annotationObjId(class PyDbLeader {lvalue})'''
    ...
    def annotationOffset (self, *args, **kwargs)-> PyGe.Vector3d :
      '''annotationOffset( (Leader)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d annotationOffset(class PyDbLeader {lvalue})'''
    ...
    def appendVertex (self, *args, **kwargs)-> bool :
      '''appendVertex( (Leader)arg1, (Point3d)arg2) -> bool :

    C++ signature :
        bool appendVertex(class PyDbLeader {lvalue},class AcGePoint3d)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def attachAnnotation (self, *args, **kwargs)-> None :
      '''attachAnnotation( (Leader)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void attachAnnotation(class PyDbLeader {lvalue},class PyDbObjectId)'''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.Leader :
      '''cast( (RxObject)arg1) -> Leader :

    C++ signature :
        class PyDbLeader cast(class PyRxObject)'''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.Leader :
      '''cloneFrom( (RxObject)arg1) -> Leader :

    C++ signature :
        class PyDbLeader cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copied (self, *args, **kwargs)-> None :
      '''copied( (Leader)arg1, (DbObject)arg2, (DbObject)arg3) -> None :

    C++ signature :
        void copied(class PyDbLeader {lvalue},class PyDbObject,class PyDbObject)'''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def createFromAcGeCurve (curve: PyGe.Curve3d,normal: PyGe.Vector3d = kZAxis,tol: Tol = default)-> PyDb.Curve :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def detachAnnotation (self, *args, **kwargs)-> None :
      '''detachAnnotation( (Leader)arg1) -> None :

    C++ signature :
        void detachAnnotation(class PyDbLeader {lvalue})'''
    ...
    def dimasz (self, *args, **kwargs)-> float :
      '''dimasz( (Leader)arg1) -> float :

    C++ signature :
        double dimasz(class PyDbLeader {lvalue})'''
    ...
    def dimclrd (self, *args, **kwargs)-> PyDb.Color :
      '''dimclrd( (Leader)arg1) -> Color :

    C++ signature :
        class AcCmColor dimclrd(class PyDbLeader {lvalue})'''
    ...
    def dimensionStyle (self, *args, **kwargs)-> PyDb.HardPointerId :
      '''dimensionStyle( (Leader)arg1) -> HardPointerId :

    C++ signature :
        class PyDbHardPointerId dimensionStyle(class PyDbLeader {lvalue})'''
    ...
    def dimgap (self, *args, **kwargs)-> float :
      '''dimgap( (Leader)arg1) -> float :

    C++ signature :
        double dimgap(class PyDbLeader {lvalue})'''
    ...
    def dimlwd (self, *args, **kwargs)-> PyDb.LineWeight :
      '''dimlwd( (Leader)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight dimlwd(class PyDbLeader {lvalue})'''
    ...
    def dimsah (self, *args, **kwargs)-> bool :
      '''dimsah( (Leader)arg1) -> bool :

    C++ signature :
        bool dimsah(class PyDbLeader {lvalue})'''
    ...
    def dimscale (self, *args, **kwargs)-> float :
      '''dimscale( (Leader)arg1) -> float :

    C++ signature :
        double dimscale(class PyDbLeader {lvalue})'''
    ...
    def dimtad (self, *args, **kwargs)-> int :
      '''dimtad( (Leader)arg1) -> int :

    C++ signature :
        int dimtad(class PyDbLeader {lvalue})'''
    ...
    def dimtxsty (self, *args, **kwargs)-> PyDb.ObjectId :
      '''dimtxsty( (Leader)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimtxsty(class PyDbLeader {lvalue})'''
    ...
    def dimtxt (self, *args, **kwargs)-> float :
      '''dimtxt( (Leader)arg1) -> float :

    C++ signature :
        double dimtxt(class PyDbLeader {lvalue})'''
    ...
    def disableArrowHead (self, *args, **kwargs)-> None :
      '''disableArrowHead( (Leader)arg1) -> None :

    C++ signature :
        void disableArrowHead(class PyDbLeader {lvalue})'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def erased (self, *args, **kwargs)-> None :
      '''erased( (Leader)arg1, (DbObject)arg2) -> None :

    C++ signature :
        void erased(class PyDbLeader {lvalue},class PyDbObject)

erased( (Leader)arg1, (DbObject)arg2, (bool)arg3) -> None :

    C++ signature :
        void erased(class PyDbLeader {lvalue},class PyDbObject,bool)'''
    ...
    def evaluateLeader (self, *args, **kwargs)-> None :
      '''evaluateLeader( (Leader)arg1) -> None :

    C++ signature :
        void evaluateLeader(class PyDbLeader {lvalue})'''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> None :
      '''extend( (Curve)arg1, (float)arg2) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def firstVertex (self, *args, **kwargs)-> PyGe.Point3d :
      '''firstVertex( (Leader)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d firstVertex(class PyDbLeader {lvalue})'''
    ...
    def getAcGeCurve (self: Curve,tol: Tol = default)-> PyGe.Curve3d :
      '''                             '''
    ...
    def getArea (self: Curve)-> float :
      '''                             '''
    ...
    def getClosestPointTo (self: Curve,point3d: PyGe.Point3d,direction: PyGe.Vector3d=None,extend: bool=False)-> PyGe.Point3d :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDistAtParam (self: Curve,param: float)-> float :
      '''                             '''
    ...
    def getDistAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEndParam (self: Curve)-> float :
      '''                             '''
    ...
    def getEndPoint (self: Curve)-> PyGe.Point3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self: Curve,param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getOffsetCurves (self: Curve,dist: float)-> list :
      '''                             '''
    ...
    def getOffsetCurvesGivenPlaneNormal (self: Curve,normal: PyGe.Vector3d,dist: float)-> list :
      '''                             '''
    ...
    def getOrthoProjectedCurve (self: Curve,plane: PyGe.Plane)-> PyDb.Curve :
      '''                             '''
    ...
    def getParamAtDist (self: Curve,dist: float)-> float :
      '''                             '''
    ...
    def getParamAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getPointAtDist (self: Curve,dist: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getPointAtParam (self: Curve,param: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getProjectedCurve (self: Curve,plane: PyGe.Plane,projDir: PyGe.Vector3d)-> PyDb.Curve :
      '''                             '''
    ...
    def getSecondDeriv (self: Curve,param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getSpline (self: Curve)-> PyDb.Spline :
      '''                             '''
    ...
    def getSplitCurves (self: Curve,paramsOrPoints: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParam (self: Curve,param: float)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParams (self: Curve,params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoint (self: Curve,point: PyGe.Point3d)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoints (self: Curve,points: list)-> list :
      '''                             '''
    ...
    def getStartParam (self: Curve)-> float :
      '''                             '''
    ...
    def getStartPoint (self: Curve)-> PyGe.Point3d :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def goodbye (self, *args, **kwargs)-> None :
      '''goodbye( (Leader)arg1, (DbObject)arg2) -> None :

    C++ signature :
        void goodbye(class PyDbLeader {lvalue},class PyDbObject)'''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasArrowHead (self, *args, **kwargs)-> bool :
      '''hasArrowHead( (Leader)arg1) -> bool :

    C++ signature :
        bool hasArrowHead(class PyDbLeader {lvalue})'''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasHookLine (self, *args, **kwargs)-> bool :
      '''hasHookLine( (Leader)arg1) -> bool :

    C++ signature :
        bool hasHookLine(class PyDbLeader {lvalue})'''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isClosed (self: Curve)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPeriodic (self: Curve)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isSplined (self, *args, **kwargs)-> bool :
      '''isSplined( (Leader)arg1) -> bool :

    C++ signature :
        bool isSplined(class PyDbLeader {lvalue})'''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def lastVertex (self, *args, **kwargs)-> PyGe.Point3d :
      '''lastVertex( (Leader)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d lastVertex(class PyDbLeader {lvalue})'''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def modified (self, *args, **kwargs)-> None :
      '''modified( (Leader)arg1, (DbObject)arg2) -> None :

    C++ signature :
        void modified(class PyDbLeader {lvalue},class PyDbObject)'''
    ...
    def normal (self, *args, **kwargs)-> PyGe.Vector3d :
      '''normal( (Leader)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbLeader {lvalue})'''
    ...
    def numVertices (self, *args, **kwargs)-> int :
      '''numVertices( (Leader)arg1) -> int :

    C++ signature :
        int numVertices(class PyDbLeader {lvalue})'''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removeLastVertex (self, *args, **kwargs)-> None :
      '''removeLastVertex( (Leader)arg1) -> None :

    C++ signature :
        void removeLastVertex(class PyDbLeader {lvalue})'''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def reverseCurve (self: Curve)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotationObjId (self, *args, **kwargs)-> None :
      '''setAnnotationObjId( (Leader)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setAnnotationObjId(class PyDbLeader {lvalue},class PyDbObjectId)'''
    ...
    def setAnnotationOffset (self, *args, **kwargs)-> None :
      '''setAnnotationOffset( (Leader)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setAnnotationOffset(class PyDbLeader {lvalue},class AcGeVector3d)'''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self, *args, **kwargs)-> None :
      '''setColorIndex( (Leader)arg1, (int)arg2) -> None :

    C++ signature :
        void setColorIndex(class PyDbLeader {lvalue},unsigned short)

setColorIndex( (Leader)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setColorIndex(class PyDbLeader {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDimasz (self, *args, **kwargs)-> None :
      '''setDimasz( (Leader)arg1, (float)arg2) -> None :

    C++ signature :
        void setDimasz(class PyDbLeader {lvalue},double)'''
    ...
    def setDimclrd (self, *args, **kwargs)-> None :
      '''setDimclrd( (Leader)arg1, (Color)arg2) -> None :

    C++ signature :
        void setDimclrd(class PyDbLeader {lvalue},class AcCmColor {lvalue})'''
    ...
    def setDimensionStyle (self, *args, **kwargs)-> None :
      '''setDimensionStyle( (Leader)arg1, (HardPointerId)arg2) -> None :

    C++ signature :
        void setDimensionStyle(class PyDbLeader {lvalue},class PyDbHardPointerId)'''
    ...
    def setDimgap (self, *args, **kwargs)-> None :
      '''setDimgap( (Leader)arg1, (float)arg2) -> None :

    C++ signature :
        void setDimgap(class PyDbLeader {lvalue},double)'''
    ...
    def setDimldrblk (self, *args, **kwargs)-> None :
      '''setDimldrblk( (Leader)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimldrblk(class PyDbLeader {lvalue},class PyDbObjectId)

setDimldrblk( (Leader)arg1, (str)arg2) -> None :

    C++ signature :
        void setDimldrblk(class PyDbLeader {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDimlwd (self, *args, **kwargs)-> None :
      '''setDimlwd( (Leader)arg1, (LineWeight)arg2) -> None :

    C++ signature :
        void setDimlwd(class PyDbLeader {lvalue},enum AcDb::LineWeight)'''
    ...
    def setDimsah (self, *args, **kwargs)-> None :
      '''setDimsah( (Leader)arg1, (bool)arg2) -> None :

    C++ signature :
        void setDimsah(class PyDbLeader {lvalue},bool)'''
    ...
    def setDimscale (self, *args, **kwargs)-> None :
      '''setDimscale( (Leader)arg1, (float)arg2) -> None :

    C++ signature :
        void setDimscale(class PyDbLeader {lvalue},double)'''
    ...
    def setDimstyleData (self, *args, **kwargs)-> None :
      '''setDimstyleData( (Leader)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbLeader {lvalue},class PyDbObjectId)'''
    ...
    def setDimtad (self, *args, **kwargs)-> None :
      '''setDimtad( (Leader)arg1, (int)arg2) -> None :

    C++ signature :
        void setDimtad(class PyDbLeader {lvalue},int)'''
    ...
    def setDimtxsty (self, *args, **kwargs)-> None :
      '''setDimtxsty( (Leader)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimtxsty(class PyDbLeader {lvalue},class PyDbObjectId)'''
    ...
    def setDimtxt (self, *args, **kwargs)-> None :
      '''setDimtxt( (Leader)arg1, (float)arg2) -> None :

    C++ signature :
        void setDimtxt(class PyDbLeader {lvalue},double)'''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setFromAcGeCurve (self: Curve,curve: PyGe.Curve3d,normal: PyGe.Vector3d = kZAxis,tol: Tol = default)-> None :
      '''                             '''
    ...
    def setHasArrowHead (self, *args, **kwargs)-> None :
      '''setHasArrowHead( (Leader)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHasArrowHead(class PyDbLeader {lvalue},bool)'''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlane (self, *args, **kwargs)-> None :
      '''setPlane( (Leader)arg1, (Plane)arg2) -> None :

    C++ signature :
        void setPlane(class PyDbLeader {lvalue},class PyGePlane)'''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setSplined (self, *args, **kwargs)-> None :
      '''setSplined( (Leader)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSplined(class PyDbLeader {lvalue},bool)'''
    ...
    def setToSplineLeader (self, *args, **kwargs)-> None :
      '''setToSplineLeader( (Leader)arg1) -> None :

    C++ signature :
        void setToSplineLeader(class PyDbLeader {lvalue})'''
    ...
    def setToStraightLeader (self, *args, **kwargs)-> None :
      '''setToStraightLeader( (Leader)arg1) -> None :

    C++ signature :
        void setToStraightLeader(class PyDbLeader {lvalue})'''
    ...
    def setVertexAt (self, *args, **kwargs)-> bool :
      '''setVertexAt( (Leader)arg1, (int)arg2, (Point3d)arg3) -> bool :

    C++ signature :
        bool setVertexAt(class PyDbLeader {lvalue},int,class AcGePoint3d)'''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def vertexAt (self, *args, **kwargs)-> PyGe.Point3d :
      '''vertexAt( (Leader)arg1, (int)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d vertexAt(class PyDbLeader {lvalue},int)'''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class Line:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: RxObject)-> PyDb.Line :
      '''                             '''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: RxObject)-> PyDb.Line :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def createFromAcGeCurve (curve: PyGe.Curve3d,normal: PyGe.Vector3d = kZAxis,tol: Tol = default)-> PyDb.Curve :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def endPoint (self: Line)-> PyGe.Point3d :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> None :
      '''extend( (Curve)arg1, (float)arg2) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getAcGeCurve (self: Line,tol: Tol = default)-> PyGe.LineSeg3d :
      '''                             '''
    ...
    def getArea (self: Curve)-> float :
      '''                             '''
    ...
    def getClosestPointTo (self: Curve,point3d: PyGe.Point3d,direction: PyGe.Vector3d=None,extend: bool=False)-> PyGe.Point3d :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDistAtParam (self: Curve,param: float)-> float :
      '''                             '''
    ...
    def getDistAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEndParam (self: Curve)-> float :
      '''                             '''
    ...
    def getEndPoint (self: Curve)-> PyGe.Point3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self: Curve,param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getOffsetCurves (self: Curve,dist: float)-> list :
      '''                             '''
    ...
    def getOffsetCurvesGivenPlaneNormal (self: Line,val:PyGe.Vector3d,offset:float)-> list :
      '''                             '''
    ...
    def getOrthoProjectedCurve (self: Curve,plane: PyGe.Plane)-> PyDb.Curve :
      '''                             '''
    ...
    def getParamAtDist (self: Curve,dist: float)-> float :
      '''                             '''
    ...
    def getParamAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getPointAtDist (self: Curve,dist: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getPointAtParam (self: Curve,param: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getProjectedCurve (self: Curve,plane: PyGe.Plane,projDir: PyGe.Vector3d)-> PyDb.Curve :
      '''                             '''
    ...
    def getSecondDeriv (self: Curve,param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getSpline (self: Curve)-> PyDb.Spline :
      '''                             '''
    ...
    def getSplitCurves (self: Curve,paramsOrPoints: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParam (self: Curve,param: float)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParams (self: Curve,params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoint (self: Curve,point: PyGe.Point3d)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoints (self: Curve,points: list)-> list :
      '''                             '''
    ...
    def getStartParam (self: Curve)-> float :
      '''                             '''
    ...
    def getStartPoint (self: Curve)-> PyGe.Point3d :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isClosed (self: Curve)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPeriodic (self: Curve)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def normal (self: Line)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def reverseCurve (self: Curve)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setEndPoint (self: Line,val:PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setFromAcGeCurve (self: Curve,curve: PyGe.Curve3d,normal: PyGe.Vector3d = kZAxis,tol: Tol = default)-> None :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self: Line,val:PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setStartPoint (self: Line,val:PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setThickness (self: Line,val:float)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def startPoint (self: Line)-> PyGe.Point3d :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def thickness (self: Line)-> float :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class LineAngularDimension2:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (Point3d)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (Point3d)arg6, (str)arg7) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (Point3d)arg6, (str)arg7, (ObjectId)arg8) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def altSuppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altSuppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altSuppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def altSuppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def alternatePrefix (self: Dimension)-> str :
      '''                             '''
    ...
    def alternateSuffix (self: Dimension)-> str :
      '''                             '''
    ...
    def arcPoint (self, *args, **kwargs)-> PyGe.Point3d :
      '''arcPoint( (LineAngularDimension2)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d arcPoint(class PyDb2LineAngularDimension {lvalue})'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockTransform (self: Dimension)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.LineAngularDimension2 :
      '''cast( (RxObject)arg1) -> LineAngularDimension2 :

    C++ signature :
        class PyDb2LineAngularDimension cast(class PyRxObject)'''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def centerMarkSize (self: Dimension)-> float :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.LineAngularDimension2 :
      '''cloneFrom( (RxObject)arg1) -> LineAngularDimension2 :

    C++ signature :
        class PyDb2LineAngularDimension cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimBlockPosition (self: Dimension)-> PyGe.Point3d :
      '''                             '''
    ...
    def dimExt1Linetype (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimExt2Linetype (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimLineLinetype (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimensionStyle (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimensionText (self: Dimension)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevation (self: Dimension)-> float :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extArcOn (self, *args, **kwargs)-> bool :
      '''extArcOn( (LineAngularDimension2)arg1) -> bool :

    C++ signature :
        bool extArcOn(class PyDb2LineAngularDimension {lvalue})'''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def fieldFromMText (self: Dimension,ref : PyDb.MText)-> None :
      '''                             '''
    ...
    def fieldToMText (self: Dimension,ref : PyDb.MText)-> None :
      '''                             '''
    ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self: Dimension)-> None :
      '''                             '''
    ...
    def getArrowFirstIsFlipped (self: Dimension)-> bool :
      '''                             '''
    ...
    def getArrowSecondIsFlipped (self: Dimension)-> bool :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDimstyleData (self: Dimension)-> PyDb.DimStyleTableRecord :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def horizontalRotation (self: Dimension)-> float :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def inspection (self: Dimension)-> bool :
      '''                             '''
    ...
    def inspectionFrame (self: Dimension)-> int :
      '''                             '''
    ...
    def inspectionLabel (self: Dimension)-> str :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self: Dimension)-> bool :
      '''                             '''
    ...
    def isConstraintObject (self: Dimension)-> tuple :
      '''                             '''
    ...
    def isDynamicDimension (self: Dimension)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self: Dimension)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self: Dimension)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def measurement (self: Dimension)-> float :
      '''                             '''
    ...
    def normal (self: Dimension)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def prefix (self: Dimension)-> str :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recomputeDimBlock (self: Dimension,force : bool=False)-> None :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def removeTextField (self: Dimension)-> None :
      '''                             '''
    ...
    def resetTextDefinedSize (self: Dimension)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAltSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAlternatePrefix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setAlternateSuffix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setArcPoint (self, *args, **kwargs)-> None :
      '''setArcPoint( (LineAngularDimension2)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setArcPoint(class PyDb2LineAngularDimension {lvalue},class AcGePoint3d)'''
    ...
    def setArrowFirstIsFlipped (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setArrowSecondIsFlipped (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setConstraintDynamic (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDimBlockId (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimBlockPosition (self: Dimension,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setDimExt1Linetype (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimExt2Linetype (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimLineLinetype (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimensionStyle (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimensionText (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setDimstyleData (self, *args, **kwargs)-> None :
      '''setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setElevation (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setExtArcOn (self, *args, **kwargs)-> None :
      '''setExtArcOn( (LineAngularDimension2)arg1, (bool)arg2) -> None :

    C++ signature :
        void setExtArcOn(class PyDb2LineAngularDimension {lvalue},bool)'''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setHorizontalRefTextRotation (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setHorizontalRotation (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setInspection (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setInspectionFrame (self: Dimension,val : int)-> None :
      '''                             '''
    ...
    def setInspectionLabel (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self: Dimension,val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setShouldParticipateInOPM (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuffix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setSuppressAngularTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setTextAttachment (self: Dimension,val : PyDb.MTextAttachmentPoint)-> None :
      '''                             '''
    ...
    def setTextDefinedSize (self: Dimension,width : float,height : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingFactor (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingStyle (self: Dimension,val : PyDb.LineSpacingStyle)-> None :
      '''                             '''
    ...
    def setTextPosition (self: Dimension,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setTextRotation (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setToleranceSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setUsingDefaultTextPosition (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def setXLine1End (self, *args, **kwargs)-> None :
      '''setXLine1End( (LineAngularDimension2)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setXLine1End(class PyDb2LineAngularDimension {lvalue},class AcGePoint3d)'''
    ...
    def setXLine1Start (self, *args, **kwargs)-> None :
      '''setXLine1Start( (LineAngularDimension2)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setXLine1Start(class PyDb2LineAngularDimension {lvalue},class AcGePoint3d)'''
    ...
    def setXLine2End (self, *args, **kwargs)-> None :
      '''setXLine2End( (LineAngularDimension2)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setXLine2End(class PyDb2LineAngularDimension {lvalue},class AcGePoint3d)'''
    ...
    def setXLine2Start (self, *args, **kwargs)-> None :
      '''setXLine2Start( (LineAngularDimension2)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setXLine2Start(class PyDb2LineAngularDimension {lvalue},class AcGePoint3d)'''
    ...
    def shouldParticipateInOPM (self: Dimension)-> bool :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def suffix (self: Dimension)-> str :
      '''                             '''
    ...
    def suppressAngularLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressAngularTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAttachment (self: Dimension)-> PyDb.MTextAttachmentPoint :
      '''                             '''
    ...
    def textDefinedSize (self: Dimension)-> tuple :
      '''                             '''
    ...
    def textLineSpacingFactor (self: Dimension)-> float :
      '''                             '''
    ...
    def textLineSpacingStyle (self: Dimension)-> PyDb.LineSpacingStyle :
      '''                             '''
    ...
    def textPosition (self: Dimension)-> PyGe.Point3d :
      '''                             '''
    ...
    def textRotation (self: Dimension)-> float :
      '''                             '''
    ...
    def toleranceSuppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def toleranceSuppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def useDefaultTextPosition (self: Dimension)-> None :
      '''                             '''
    ...
    def useSetTextPosition (self: Dimension)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xLine1End (self, *args, **kwargs)-> PyGe.Point3d :
      '''xLine1End( (LineAngularDimension2)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine1End(class PyDb2LineAngularDimension {lvalue})'''
    ...
    def xLine1Start (self, *args, **kwargs)-> PyGe.Point3d :
      '''xLine1Start( (LineAngularDimension2)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine1Start(class PyDb2LineAngularDimension {lvalue})'''
    ...
    def xLine2End (self, *args, **kwargs)-> PyGe.Point3d :
      '''xLine2End( (LineAngularDimension2)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine2End(class PyDb2LineAngularDimension {lvalue})'''
    ...
    def xLine2Start (self, *args, **kwargs)-> PyGe.Point3d :
      '''xLine2Start( (LineAngularDimension2)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine2Start(class PyDb2LineAngularDimension {lvalue})'''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class LineSpacingStyle:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kAtLeast (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kExactly (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class LineWeight:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kLnWt000 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt005 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt009 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt013 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt015 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt018 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt020 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt025 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt030 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt035 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt040 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt050 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt053 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt060 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt070 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt080 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt090 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt100 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt106 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt120 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt140 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt158 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt200 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt211 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWtByBlock (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWtByLayer (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWtByLwDefault (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class LinetypeTable:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def add (self, *args, **kwargs)-> PyDb.ObjectId :
      '''add( (LinetypeTable)arg1, (LinetypeTableRecord)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId add(class PyDbLinetypeTable {lvalue},class PyDbLinetypeTableRecord)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.LinetypeTable :
      '''cast( (RxObject)arg1) -> LinetypeTable :

    C++ signature :
        class PyDbLinetypeTable cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.LinetypeTable :
      '''cloneFrom( (RxObject)arg1) -> LinetypeTable :

    C++ signature :
        class PyDbLinetypeTable cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getAt (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getAt( (SymbolTable)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getAt(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has (self, *args, **kwargs)-> bool :
      '''has( (SymbolTable)arg1, (str)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

has( (SymbolTable)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class PyDbObjectId)'''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def recordIds (self, *args, **kwargs)-> list :
      '''recordIds( (SymbolTable)arg1) -> list :

    C++ signature :
        class boost::python::list recordIds(class PyDbSymbolTable {lvalue})'''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def toDict (self, *args, **kwargs)-> dict :
      '''toDict( (SymbolTable)arg1) -> dict :

    C++ signature :
        class boost::python::dict toDict(class PyDbSymbolTable {lvalue})'''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class LinetypeTableRecord:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.LinetypeTableRecord :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.LinetypeTableRecord :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comments (self: LinetypeTableRecord)-> str :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def dashLengthAt (self, *args, **kwargs)-> float :
      '''dashLengthAt( (LinetypeTableRecord)arg1, (int)arg2) -> float :

    C++ signature :
        double dashLengthAt(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getName (self: SymbolTableRecord)-> str :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isDependent (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isRenamable (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isResolved (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isScaledToFit (self: LinetypeTableRecord)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def name (self: SymbolTableRecord)-> str :
      '''                             '''
    ...
    def numDashes (self: LinetypeTableRecord)-> int :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def patternLength (self: LinetypeTableRecord)-> float :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setComments (self, *args, **kwargs)-> None :
      '''setComments( (LinetypeTableRecord)arg1, (str)arg2) -> None :

    C++ signature :
        void setComments(class PyDbLinetypeTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDashLengthAt (self, *args, **kwargs)-> None :
      '''setDashLengthAt( (LinetypeTableRecord)arg1, (int)arg2, (float)arg3) -> None :

    C++ signature :
        void setDashLengthAt(class PyDbLinetypeTableRecord {lvalue},int,double)'''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setIsScaledToFit (self, *args, **kwargs)-> None :
      '''setIsScaledToFit( (LinetypeTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsScaledToFit(class PyDbLinetypeTableRecord {lvalue},bool)'''
    ...
    def setName (self: SymbolTableRecord,name: str)-> None :
      '''                             '''
    ...
    def setNumDashes (self, *args, **kwargs)-> None :
      '''setNumDashes( (LinetypeTableRecord)arg1, (int)arg2) -> None :

    C++ signature :
        void setNumDashes(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPatternLength (self, *args, **kwargs)-> None :
      '''setPatternLength( (LinetypeTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setPatternLength(class PyDbLinetypeTableRecord {lvalue},double)'''
    ...
    def setShapeIsUcsOrientedAt (self, *args, **kwargs)-> None :
      '''setShapeIsUcsOrientedAt( (LinetypeTableRecord)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setShapeIsUcsOrientedAt(class PyDbLinetypeTableRecord {lvalue},int,bool)'''
    ...
    def setShapeIsUprightAt (self, *args, **kwargs)-> None :
      '''setShapeIsUprightAt( (LinetypeTableRecord)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setShapeIsUprightAt(class PyDbLinetypeTableRecord {lvalue},int,bool)'''
    ...
    def setShapeNumberAt (self, *args, **kwargs)-> None :
      '''setShapeNumberAt( (LinetypeTableRecord)arg1, (int)arg2, (int)arg3) -> None :

    C++ signature :
        void setShapeNumberAt(class PyDbLinetypeTableRecord {lvalue},int,int)'''
    ...
    def setShapeOffsetAt (self, *args, **kwargs)-> None :
      '''setShapeOffsetAt( (LinetypeTableRecord)arg1, (int)arg2, (Vector2d)arg3) -> None :

    C++ signature :
        void setShapeOffsetAt(class PyDbLinetypeTableRecord {lvalue},int,class AcGeVector2d)'''
    ...
    def setShapeRotationAt (self, *args, **kwargs)-> None :
      '''setShapeRotationAt( (LinetypeTableRecord)arg1, (int)arg2, (float)arg3) -> None :

    C++ signature :
        void setShapeRotationAt(class PyDbLinetypeTableRecord {lvalue},int,double)'''
    ...
    def setShapeScaleAt (self, *args, **kwargs)-> None :
      '''setShapeScaleAt( (LinetypeTableRecord)arg1, (int)arg2, (float)arg3) -> None :

    C++ signature :
        void setShapeScaleAt(class PyDbLinetypeTableRecord {lvalue},int,double)'''
    ...
    def setShapeStyleAt (self, *args, **kwargs)-> None :
      '''setShapeStyleAt( (LinetypeTableRecord)arg1, (int)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void setShapeStyleAt(class PyDbLinetypeTableRecord {lvalue},int,class PyDbObjectId {lvalue})'''
    ...
    def setTextAt (self, *args, **kwargs)-> None :
      '''setTextAt( (LinetypeTableRecord)arg1, (int)arg2, (str)arg3) -> None :

    C++ signature :
        void setTextAt(class PyDbLinetypeTableRecord {lvalue},int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def shapeIsUcsOrientedAt (self, *args, **kwargs)-> bool :
      '''shapeIsUcsOrientedAt( (LinetypeTableRecord)arg1, (int)arg2) -> bool :

    C++ signature :
        bool shapeIsUcsOrientedAt(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def shapeIsUprightAt (self, *args, **kwargs)-> bool :
      '''shapeIsUprightAt( (LinetypeTableRecord)arg1, (int)arg2) -> bool :

    C++ signature :
        bool shapeIsUprightAt(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def shapeNumberAt (self, *args, **kwargs)-> int :
      '''shapeNumberAt( (LinetypeTableRecord)arg1, (int)arg2) -> int :

    C++ signature :
        int shapeNumberAt(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def shapeOffsetAt (self, *args, **kwargs)-> PyGe.Vector2d :
      '''shapeOffsetAt( (LinetypeTableRecord)arg1, (int)arg2) -> Vector2d :

    C++ signature :
        class AcGeVector2d shapeOffsetAt(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def shapeRotationAt (self, *args, **kwargs)-> float :
      '''shapeRotationAt( (LinetypeTableRecord)arg1, (int)arg2) -> float :

    C++ signature :
        double shapeRotationAt(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def shapeScaleAt (self, *args, **kwargs)-> float :
      '''shapeScaleAt( (LinetypeTableRecord)arg1, (int)arg2) -> float :

    C++ signature :
        double shapeScaleAt(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def shapeStyleAt (self, *args, **kwargs)-> PyDb.ObjectId :
      '''shapeStyleAt( (LinetypeTableRecord)arg1, (int)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId shapeStyleAt(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAt (self, *args, **kwargs)-> str :
      '''textAt( (LinetypeTableRecord)arg1, (int)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > textAt(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class LoftedSurface:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.LoftedSurface :
      '''cast( (RxObject)arg1) -> LoftedSurface :

    C++ signature :
        class PyDbLoftedSurface cast(class PyRxObject)'''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.LoftedSurface :
      '''cloneFrom( (RxObject)arg1) -> LoftedSurface :

    C++ signature :
        class PyDbLoftedSurface cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def createExtrudedSurface (self, *args, **kwargs)-> PyDb.ExtrudedSurface :
      '''createExtrudedSurface( (Profile3d)arg1, (Vector3d)arg2, (SweepOptions)arg3) -> ExtrudedSurface :

    C++ signature :
        class PyDbExtrudedSurface createExtrudedSurface(class PyDb3dProfile {lvalue},class AcGeVector3d,class PyDbSweepOptions {lvalue})'''
    ...
    def createFrom (self, *args, **kwargs)-> PyDb.Surface :
      '''createFrom( (Entity)arg1) -> Surface :

    C++ signature :
        class PyDbSurface createFrom(class PyDbEntity)'''
    ...
    def creationActionBodyId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''creationActionBodyId( (Surface)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId creationActionBodyId(class PyDbSurface {lvalue})'''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extendEdges (self, *args, **kwargs)-> None :
      '''extendEdges( (Surface)arg1, (list)arg2, (float)arg3, (SurfaceEdgeExtensionType)arg4, (bool)arg5) -> None :

    C++ signature :
        void extendEdges(class PyDbSurface {lvalue},class boost::python::list {lvalue},double,enum AcDbSurface::EdgeExtensionType,bool)'''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getArea (self, *args, **kwargs)-> float :
      '''getArea( (Surface)arg1) -> float :

    C++ signature :
        double getArea(class PyDbSurface {lvalue})'''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPerimeter (self, *args, **kwargs)-> float :
      '''getPerimeter( (Surface)arg1) -> float :

    C++ signature :
        double getPerimeter(class PyDbSurface {lvalue})'''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def getWireframeType (self, *args, **kwargs)-> PyDb.SurfaceWireframeType :
      '''getWireframeType( (Surface)arg1) -> SurfaceWireframeType :

    C++ signature :
        enum AcDbSurface::WireframeType getWireframeType(class PyDbSurface {lvalue})'''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def modificationActionBodyIds (self, *args, **kwargs)-> list :
      '''modificationActionBodyIds( (Surface)arg1) -> list :

    C++ signature :
        class boost::python::list modificationActionBodyIds(class PyDbSurface {lvalue})'''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def projectOnToSurface (self, *args, **kwargs)-> list :
      '''projectOnToSurface( (Surface)arg1, (Entity)arg2, (Vector3d)arg3) -> list :

    C++ signature :
        class boost::python::list projectOnToSurface(class PyDbSurface {lvalue},class PyDbEntity,class AcGeVector3d)'''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def rayTest (self, *args, **kwargs)-> tuple :
      '''rayTest( (Surface)arg1, (Point3d)arg2, (Vector3d)arg3, (float)arg4) -> tuple :

    C++ signature :
        class boost::python::tuple rayTest(class PyDbSurface {lvalue},class AcGePoint3d,class AcGeVector3d,double)'''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setUIsolineDensity (self, *args, **kwargs)-> None :
      '''setUIsolineDensity( (Surface)arg1, (int)arg2) -> None :

    C++ signature :
        void setUIsolineDensity(class PyDbSurface {lvalue},unsigned short)'''
    ...
    def setVIsolineDensity (self, *args, **kwargs)-> None :
      '''setVIsolineDensity( (Surface)arg1, (int)arg2) -> None :

    C++ signature :
        void setVIsolineDensity(class PyDbSurface {lvalue},unsigned short)'''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setWireframeType (self, *args, **kwargs)-> None :
      '''setWireframeType( (Surface)arg1, (SurfaceWireframeType)arg2) -> None :

    C++ signature :
        void setWireframeType(class PyDbSurface {lvalue},enum AcDbSurface::WireframeType)'''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def uIsolineDensity (self, *args, **kwargs)-> int :
      '''uIsolineDensity( (Surface)arg1) -> int :

    C++ signature :
        unsigned short uIsolineDensity(class PyDbSurface {lvalue})'''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def vIsolineDensity (self, *args, **kwargs)-> int :
      '''vIsolineDensity( (Surface)arg1) -> int :

    C++ signature :
        unsigned short vIsolineDensity(class PyDbSurface {lvalue})'''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class MInsertBlock:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2, (ObjectId)arg3, (int)arg4, (int)arg5, (float)arg6, (float)arg7) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d {lvalue},class PyDbObjectId,unsigned short,unsigned short,double,double)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def appendAttribute (self: BlockReference,val : Attribute)-> PyDb.ObjectId :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def attributeIds (self: BlockReference)-> list :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockTableRecord (self: BlockReference)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockTransform (self: BlockReference)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: RxObject)-> PyDb.MInsertBlock :
      '''                             '''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: RxObject)-> PyDb.MInsertBlock :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def columnSpacing (self: MInsertBlock)-> float :
      '''                             '''
    ...
    def columns (self: MInsertBlock)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def explodeToOwnerSpace (self: BlockReference)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def geomExtentsBestFit (self: BlockReference,val : PyGe.Matrix3d=kIdentity)-> PyDb.Extents :
      '''                             '''
    ...
    def getBlockName (self: BlockReference)-> str :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def nonAnnotationBlockTransform (self: BlockReference)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def nonAnnotationScaleFactors (self: BlockReference)-> PyGe.Scale3d :
      '''                             '''
    ...
    def normal (self: BlockReference)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def position (self: BlockReference)-> PyGe.Point3d :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self: BlockReference)-> float :
      '''                             '''
    ...
    def rowSpacing (self: MInsertBlock)-> float :
      '''                             '''
    ...
    def rows (self: MInsertBlock)-> int :
      '''                             '''
    ...
    def scaleFactors (self: BlockReference)-> PyGe.Scale3d :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBlockTableRecord (self: BlockReference,val : ObjectId)-> None :
      '''                             '''
    ...
    def setBlockTransform (self: BlockReference,val : PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setColumnSpacing (self: MInsertBlock,val : float)-> None :
      '''                             '''
    ...
    def setColumns (self: MInsertBlock,val : int)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self: BlockReference,val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self: BlockReference,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setRotation (self: BlockReference,val : float)-> None :
      '''                             '''
    ...
    def setRowSpacing (self: MInsertBlock,val : float)-> None :
      '''                             '''
    ...
    def setRows (self: MInsertBlock,val : int)-> None :
      '''                             '''
    ...
    def setScaleFactors (self: BlockReference,val : PyGe.Scale3d)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def treatAsAcDbBlockRefForExplode (self: BlockReference)-> bool :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class MLeader:
    def MLeaderStyle (self, *args, **kwargs)-> PyDb.ObjectId :
      '''MLeaderStyle( (MLeader)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId MLeaderStyle(class PyDbMLeader {lvalue})'''
    ...
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addFirstVertex (self, *args, **kwargs)-> None :
      '''addFirstVertex( (MLeader)arg1, (int)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void addFirstVertex(class PyDbMLeader {lvalue},int,class AcGePoint3d)'''
    ...
    def addLastVertex (self, *args, **kwargs)-> None :
      '''addLastVertex( (MLeader)arg1, (int)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void addLastVertex(class PyDbMLeader {lvalue},int,class AcGePoint3d)'''
    ...
    def addLeader (self, *args, **kwargs)-> int :
      '''addLeader( (MLeader)arg1) -> int :

    C++ signature :
        int addLeader(class PyDbMLeader {lvalue})'''
    ...
    def addLeaderLine (self, *args, **kwargs)-> int :
      '''addLeaderLine( (MLeader)arg1, (int)arg2) -> int :

    C++ signature :
        int addLeaderLine(class PyDbMLeader {lvalue},int)

addLeaderLine( (MLeader)arg1, (Point3d)arg2) -> int :

    C++ signature :
        int addLeaderLine(class PyDbMLeader {lvalue},class AcGePoint3d)'''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def arrowSize (self, *args, **kwargs)-> float :
      '''arrowSize( (MLeader)arg1) -> float :

    C++ signature :
        double arrowSize(class PyDbMLeader {lvalue})'''
    ...
    def arrowSymbolId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''arrowSymbolId( (MLeader)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId arrowSymbolId(class PyDbMLeader {lvalue})'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockColor (self, *args, **kwargs)-> PyDb.Color :
      '''blockColor( (MLeader)arg1) -> Color :

    C++ signature :
        class AcCmColor blockColor(class PyDbMLeader {lvalue})'''
    ...
    def blockConnectionType (self, *args, **kwargs)-> PyDb.MLeaderBlockConnectionType :
      '''blockConnectionType( (MLeader)arg1) -> MLeaderBlockConnectionType :

    C++ signature :
        enum AcDbMLeaderStyle::BlockConnectionType blockConnectionType(class PyDbMLeader {lvalue})'''
    ...
    def blockContentId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''blockContentId( (MLeader)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockContentId(class PyDbMLeader {lvalue})'''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockRotation (self, *args, **kwargs)-> float :
      '''blockRotation( (MLeader)arg1) -> float :

    C++ signature :
        double blockRotation(class PyDbMLeader {lvalue})'''
    ...
    def blockScale (self, *args, **kwargs)-> PyGe.Scale3d :
      '''blockScale( (MLeader)arg1) -> Scale3d :

    C++ signature :
        class AcGeScale3d blockScale(class PyDbMLeader {lvalue})'''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.MLeader :
      '''cast( (RxObject)arg1) -> MLeader :

    C++ signature :
        class PyDbMLeader cast(class PyRxObject)'''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.MLeader :
      '''cloneFrom( (RxObject)arg1) -> MLeader :

    C++ signature :
        class PyDbMLeader cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def connectionPoint (self, *args, **kwargs)-> PyGe.Point3d :
      '''connectionPoint( (MLeader)arg1, (Vector3d)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d connectionPoint(class PyDbMLeader {lvalue},class AcGeVector3d)

connectionPoint( (MLeader)arg1, (Vector3d)arg2, (MLeaderTextAttachmentDirection)arg3) -> Point3d :

    C++ signature :
        class AcGePoint3d connectionPoint(class PyDbMLeader {lvalue},class AcGeVector3d,enum AcDbMLeaderStyle::TextAttachmentDirection)'''
    ...
    def contentType (self, *args, **kwargs)-> PyDb.MLeaderContentType :
      '''contentType( (MLeader)arg1) -> MLeaderContentType :

    C++ signature :
        enum AcDbMLeaderStyle::ContentType contentType(class PyDbMLeader {lvalue})'''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def doglegLength (self, *args, **kwargs)-> float :
      '''doglegLength( (MLeader)arg1) -> float :

    C++ signature :
        double doglegLength(class PyDbMLeader {lvalue})'''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def enableAnnotationScale (self, *args, **kwargs)-> bool :
      '''enableAnnotationScale( (MLeader)arg1) -> bool :

    C++ signature :
        bool enableAnnotationScale(class PyDbMLeader {lvalue})'''
    ...
    def enableDogleg (self, *args, **kwargs)-> bool :
      '''enableDogleg( (MLeader)arg1) -> bool :

    C++ signature :
        bool enableDogleg(class PyDbMLeader {lvalue})'''
    ...
    def enableFrameText (self, *args, **kwargs)-> bool :
      '''enableFrameText( (MLeader)arg1) -> bool :

    C++ signature :
        bool enableFrameText(class PyDbMLeader {lvalue})'''
    ...
    def enableLanding (self, *args, **kwargs)-> bool :
      '''enableLanding( (MLeader)arg1) -> bool :

    C++ signature :
        bool enableLanding(class PyDbMLeader {lvalue})'''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extendLeaderToText (self, *args, **kwargs)-> bool :
      '''extendLeaderToText( (MLeader)arg1) -> bool :

    C++ signature :
        bool extendLeaderToText(class PyDbMLeader {lvalue})'''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getArrowSize (self, *args, **kwargs)-> float :
      '''getArrowSize( (MLeader)arg1, (int)arg2) -> float :

    C++ signature :
        double getArrowSize(class PyDbMLeader {lvalue},int)'''
    ...
    def getArrowSymbolId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getArrowSymbolId( (MLeader)arg1, (int)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getArrowSymbolId(class PyDbMLeader {lvalue},int)'''
    ...
    def getBlockAttributeValue (self, *args, **kwargs)-> PyDb.AttributeReference :
      '''getBlockAttributeValue( (MLeader)arg1, (ObjectId)arg2) -> AttributeReference :

    C++ signature :
        class PyDbAttribute getBlockAttributeValue(class PyDbMLeader {lvalue},class PyDbObjectId)

getBlockAttributeValue( (MLeader)arg1, (ObjectId)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getBlockAttributeValue(class PyDbMLeader {lvalue},class PyDbObjectId)'''
    ...
    def getBlockPosition (self, *args, **kwargs)-> PyGe.Point3d :
      '''getBlockPosition( (MLeader)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getBlockPosition(class PyDbMLeader {lvalue})'''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getContentGeomExtents (self, *args, **kwargs)-> PyDb.Extents :
      '''getContentGeomExtents( (MLeader)arg1) -> Extents :

    C++ signature :
        class AcDbExtents getContentGeomExtents(class PyDbMLeader {lvalue})'''
    ...
    def getDoglegDirection (self, *args, **kwargs)-> PyGe.Vector3d :
      '''getDoglegDirection( (MLeader)arg1, (int)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getDoglegDirection(class PyDbMLeader {lvalue},int)'''
    ...
    def getDoglegLength (self, *args, **kwargs)-> float :
      '''getDoglegLength( (MLeader)arg1, (int)arg2) -> float :

    C++ signature :
        double getDoglegLength(class PyDbMLeader {lvalue},int)'''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFirstVertex (self, *args, **kwargs)-> PyGe.Point3d :
      '''getFirstVertex( (MLeader)arg1, (int)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getFirstVertex(class PyDbMLeader {lvalue},int)'''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getLastVertex (self, *args, **kwargs)-> PyGe.Point3d :
      '''getLastVertex( (MLeader)arg1, (int)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getLastVertex(class PyDbMLeader {lvalue},int)'''
    ...
    def getLeaderIndex (self, *args, **kwargs)-> int :
      '''getLeaderIndex( (MLeader)arg1, (int)arg2) -> int :

    C++ signature :
        int getLeaderIndex(class PyDbMLeader {lvalue},int)'''
    ...
    def getLeaderIndexes (self, *args, **kwargs)-> list :
      '''getLeaderIndexes( (MLeader)arg1) -> list :

    C++ signature :
        class boost::python::list getLeaderIndexes(class PyDbMLeader {lvalue})'''
    ...
    def getLeaderLineColor (self, *args, **kwargs)-> PyDb.Color :
      '''getLeaderLineColor( (MLeader)arg1, (int)arg2) -> Color :

    C++ signature :
        class AcCmColor getLeaderLineColor(class PyDbMLeader {lvalue},int)'''
    ...
    def getLeaderLineIndexes (self, *args, **kwargs)-> list :
      '''getLeaderLineIndexes( (MLeader)arg1) -> list :

    C++ signature :
        class boost::python::list getLeaderLineIndexes(class PyDbMLeader {lvalue})

getLeaderLineIndexes( (MLeader)arg1, (int)arg2) -> list :

    C++ signature :
        class boost::python::list getLeaderLineIndexes(class PyDbMLeader {lvalue},int)'''
    ...
    def getLeaderLineType (self, *args, **kwargs)-> PyDb.MLeaderLeaderType :
      '''getLeaderLineType( (MLeader)arg1, (int)arg2) -> MLeaderLeaderType :

    C++ signature :
        enum AcDbMLeaderStyle::LeaderType getLeaderLineType(class PyDbMLeader {lvalue},int)'''
    ...
    def getLeaderLineTypeId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getLeaderLineTypeId( (MLeader)arg1, (int)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getLeaderLineTypeId(class PyDbMLeader {lvalue},int)'''
    ...
    def getLeaderLineWeight (self, *args, **kwargs)-> PyDb.LineWeight :
      '''getLeaderLineWeight( (MLeader)arg1, (int)arg2) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight getLeaderLineWeight(class PyDbMLeader {lvalue},int)'''
    ...
    def getOverridedMLeaderStyle (self, *args, **kwargs)-> None :
      '''getOverridedMLeaderStyle( (MLeader)arg1, (MLeaderStyle)arg2) -> None :

    C++ signature :
        void getOverridedMLeaderStyle(class PyDbMLeader {lvalue},class PyDbMLeaderStyle {lvalue})'''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTextLocation (self, *args, **kwargs)-> PyGe.Point3d :
      '''getTextLocation( (MLeader)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getTextLocation(class PyDbMLeader {lvalue})'''
    ...
    def getToleranceLocation (self, *args, **kwargs)-> PyGe.Point3d :
      '''getToleranceLocation( (MLeader)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getToleranceLocation(class PyDbMLeader {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def getVertex (self, *args, **kwargs)-> PyGe.Point3d :
      '''getVertex( (MLeader)arg1, (int)arg2, (int)arg3) -> Point3d :

    C++ signature :
        class AcGePoint3d getVertex(class PyDbMLeader {lvalue},int,int)'''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasContent (self, *args, **kwargs)-> bool :
      '''hasContent( (MLeader)arg1) -> bool :

    C++ signature :
        bool hasContent(class PyDbMLeader {lvalue})'''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isOverride (self, *args, **kwargs)-> bool :
      '''isOverride( (MLeader)arg1, (MLeaderPropertyOverrideType)arg2) -> bool :

    C++ signature :
        bool isOverride(class PyDbMLeader {lvalue},enum AcDbMLeader::PropertyOverrideType)'''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def landingGap (self, *args, **kwargs)-> float :
      '''landingGap( (MLeader)arg1) -> float :

    C++ signature :
        double landingGap(class PyDbMLeader {lvalue})'''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def leaderLineColor (self, *args, **kwargs)-> PyDb.Color :
      '''leaderLineColor( (MLeader)arg1) -> Color :

    C++ signature :
        class AcCmColor leaderLineColor(class PyDbMLeader {lvalue})'''
    ...
    def leaderLineType (self, *args, **kwargs)-> PyDb.MLeaderLeaderType :
      '''leaderLineType( (MLeader)arg1) -> MLeaderLeaderType :

    C++ signature :
        enum AcDbMLeaderStyle::LeaderType leaderLineType(class PyDbMLeader {lvalue})'''
    ...
    def leaderLineTypeId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''leaderLineTypeId( (MLeader)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId leaderLineTypeId(class PyDbMLeader {lvalue})'''
    ...
    def leaderLineWeight (self, *args, **kwargs)-> PyDb.LineWeight :
      '''leaderLineWeight( (MLeader)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight leaderLineWeight(class PyDbMLeader {lvalue})'''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def modified (self, *args, **kwargs)-> None :
      '''modified( (MLeader)arg1, (DbObject)arg2) -> None :

    C++ signature :
        void modified(class PyDbMLeader {lvalue},class PyDbObject)'''
    ...
    def moveMLeader (self, *args, **kwargs)-> None :
      '''moveMLeader( (MLeader)arg1, (Vector3d)arg2, (MLeaderMoveType)arg3) -> None :

    C++ signature :
        void moveMLeader(class PyDbMLeader {lvalue},class AcGeVector3d,enum AcDbMLeader::MoveType)

moveMLeader( (MLeader)arg1, (Vector3d)arg2, (MLeaderMoveType)arg3, (bool)arg4) -> None :

    C++ signature :
        void moveMLeader(class PyDbMLeader {lvalue},class AcGeVector3d,enum AcDbMLeader::MoveType,bool)'''
    ...
    def mtext (self, *args, **kwargs)-> PyDb.MText :
      '''mtext( (MLeader)arg1) -> MText :

    C++ signature :
        class PyDbMText mtext(class PyDbMLeader {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> PyGe.Vector3d :
      '''normal( (MLeader)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbMLeader {lvalue})'''
    ...
    def numLeaderLines (self, *args, **kwargs)-> int :
      '''numLeaderLines( (MLeader)arg1) -> int :

    C++ signature :
        int numLeaderLines(class PyDbMLeader {lvalue})'''
    ...
    def numLeaders (self, *args, **kwargs)-> int :
      '''numLeaders( (MLeader)arg1) -> int :

    C++ signature :
        int numLeaders(class PyDbMLeader {lvalue})'''
    ...
    def numVertices (self, *args, **kwargs)-> int :
      '''numVertices( (MLeader)arg1, (int)arg2) -> int :

    C++ signature :
        int numVertices(class PyDbMLeader {lvalue},int)'''
    ...
    def objectClosed (self, *args, **kwargs)-> None :
      '''objectClosed( (MLeader)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void objectClosed(class PyDbMLeader {lvalue},class PyDbObjectId)'''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plane (self, *args, **kwargs)-> PyGe.Plane :
      '''plane( (MLeader)arg1) -> Plane :

    C++ signature :
        class PyGePlane plane(class PyDbMLeader {lvalue})'''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def postMLeaderToDb (self, *args, **kwargs)-> None :
      '''postMLeaderToDb( (MLeader)arg1, (Database)arg2) -> None :

    C++ signature :
        void postMLeaderToDb(class PyDbMLeader {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recomputeBreakPoints (self, *args, **kwargs)-> None :
      '''recomputeBreakPoints( (MLeader)arg1) -> None :

    C++ signature :
        void recomputeBreakPoints(class PyDbMLeader {lvalue})'''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removeFirstVertex (self, *args, **kwargs)-> None :
      '''removeFirstVertex( (MLeader)arg1, (int)arg2) -> None :

    C++ signature :
        void removeFirstVertex(class PyDbMLeader {lvalue},int)'''
    ...
    def removeLastVertex (self, *args, **kwargs)-> None :
      '''removeLastVertex( (MLeader)arg1, (int)arg2) -> None :

    C++ signature :
        void removeLastVertex(class PyDbMLeader {lvalue},int)'''
    ...
    def removeLeader (self, *args, **kwargs)-> None :
      '''removeLeader( (MLeader)arg1, (int)arg2) -> None :

    C++ signature :
        void removeLeader(class PyDbMLeader {lvalue},int)'''
    ...
    def removeLeaderLine (self, *args, **kwargs)-> None :
      '''removeLeaderLine( (MLeader)arg1, (int)arg2) -> None :

    C++ signature :
        void removeLeaderLine(class PyDbMLeader {lvalue},int)'''
    ...
    def removeLeaderLineRefAssoc (self, *args, **kwargs)-> None :
      '''removeLeaderLineRefAssoc( (MLeader)arg1, (int)arg2) -> None :

    C++ signature :
        void removeLeaderLineRefAssoc(class PyDbMLeader {lvalue},int)'''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def scale (self, *args, **kwargs)-> float :
      '''scale( (MLeader)arg1) -> float :

    C++ signature :
        double scale(class PyDbMLeader {lvalue})'''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setArrowSize (self, *args, **kwargs)-> None :
      '''setArrowSize( (MLeader)arg1, (float)arg2) -> None :

    C++ signature :
        void setArrowSize(class PyDbMLeader {lvalue},double)

setArrowSize( (MLeader)arg1, (int)arg2, (float)arg3) -> None :

    C++ signature :
        void setArrowSize(class PyDbMLeader {lvalue},int,double)'''
    ...
    def setArrowSymbolId (self, *args, **kwargs)-> None :
      '''setArrowSymbolId( (MLeader)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setArrowSymbolId(class PyDbMLeader {lvalue},class PyDbObjectId)

setArrowSymbolId( (MLeader)arg1, (int)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void setArrowSymbolId(class PyDbMLeader {lvalue},int,class PyDbObjectId)'''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBlockAttributeValue (self, *args, **kwargs)-> None :
      '''setBlockAttributeValue( (MLeader)arg1, (ObjectId)arg2, (AttributeReference)arg3) -> None :

    C++ signature :
        void setBlockAttributeValue(class PyDbMLeader {lvalue},class PyDbObjectId,class PyDbAttribute)

setBlockAttributeValue( (MLeader)arg1, (ObjectId)arg2, (str)arg3) -> None :

    C++ signature :
        void setBlockAttributeValue(class PyDbMLeader {lvalue},class PyDbObjectId,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setBlockColor (self, *args, **kwargs)-> None :
      '''setBlockColor( (MLeader)arg1, (Color)arg2) -> None :

    C++ signature :
        void setBlockColor(class PyDbMLeader {lvalue},class AcCmColor)'''
    ...
    def setBlockConnectionType (self, *args, **kwargs)-> None :
      '''setBlockConnectionType( (MLeader)arg1, (MLeaderBlockConnectionType)arg2) -> None :

    C++ signature :
        void setBlockConnectionType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::BlockConnectionType)'''
    ...
    def setBlockContentId (self, *args, **kwargs)-> None :
      '''setBlockContentId( (MLeader)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setBlockContentId(class PyDbMLeader {lvalue},class PyDbObjectId)'''
    ...
    def setBlockPosition (self, *args, **kwargs)-> None :
      '''setBlockPosition( (MLeader)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setBlockPosition(class PyDbMLeader {lvalue},class AcGePoint3d)'''
    ...
    def setBlockRotation (self, *args, **kwargs)-> None :
      '''setBlockRotation( (MLeader)arg1, (float)arg2) -> None :

    C++ signature :
        void setBlockRotation(class PyDbMLeader {lvalue},double)'''
    ...
    def setBlockScale (self, *args, **kwargs)-> None :
      '''setBlockScale( (MLeader)arg1, (Scale3d)arg2) -> None :

    C++ signature :
        void setBlockScale(class PyDbMLeader {lvalue},class AcGeScale3d)'''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setContentType (self, *args, **kwargs)-> None :
      '''setContentType( (MLeader)arg1, (MLeaderContentType)arg2) -> None :

    C++ signature :
        void setContentType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::ContentType)'''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDoglegDirection (self, *args, **kwargs)-> None :
      '''setDoglegDirection( (MLeader)arg1, (int)arg2, (Vector3d)arg3) -> None :

    C++ signature :
        void setDoglegDirection(class PyDbMLeader {lvalue},int,class AcGeVector3d)'''
    ...
    def setDoglegLength (self, *args, **kwargs)-> None :
      '''setDoglegLength( (MLeader)arg1, (float)arg2) -> None :

    C++ signature :
        void setDoglegLength(class PyDbMLeader {lvalue},double)

setDoglegLength( (MLeader)arg1, (int)arg2, (float)arg3) -> None :

    C++ signature :
        void setDoglegLength(class PyDbMLeader {lvalue},int,double)'''
    ...
    def setEnableAnnotationScale (self, *args, **kwargs)-> None :
      '''setEnableAnnotationScale( (MLeader)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnableAnnotationScale(class PyDbMLeader {lvalue},bool)'''
    ...
    def setEnableDogleg (self, *args, **kwargs)-> None :
      '''setEnableDogleg( (MLeader)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnableDogleg(class PyDbMLeader {lvalue},bool)'''
    ...
    def setEnableFrameText (self, *args, **kwargs)-> None :
      '''setEnableFrameText( (MLeader)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnableFrameText(class PyDbMLeader {lvalue},bool)'''
    ...
    def setEnableLanding (self, *args, **kwargs)-> None :
      '''setEnableLanding( (MLeader)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnableLanding(class PyDbMLeader {lvalue},bool)'''
    ...
    def setExtendLeaderToText (self, *args, **kwargs)-> None :
      '''setExtendLeaderToText( (MLeader)arg1, (bool)arg2) -> None :

    C++ signature :
        void setExtendLeaderToText(class PyDbMLeader {lvalue},bool)'''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setFirstVertex (self, *args, **kwargs)-> None :
      '''setFirstVertex( (MLeader)arg1, (int)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void setFirstVertex(class PyDbMLeader {lvalue},int,class AcGePoint3d)'''
    ...
    def setLandingGap (self, *args, **kwargs)-> None :
      '''setLandingGap( (MLeader)arg1, (float)arg2) -> None :

    C++ signature :
        void setLandingGap(class PyDbMLeader {lvalue},double)'''
    ...
    def setLastVertex (self, *args, **kwargs)-> None :
      '''setLastVertex( (MLeader)arg1, (int)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void setLastVertex(class PyDbMLeader {lvalue},int,class AcGePoint3d)'''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLeaderLineColor1 (self, *args, **kwargs)-> None :
      '''setLeaderLineColor1( (MLeader)arg1, (Color)arg2) -> None :

    C++ signature :
        void setLeaderLineColor1(class PyDbMLeader {lvalue},class AcCmColor)

setLeaderLineColor1( (MLeader)arg1, (int)arg2, (Color)arg3) -> None :

    C++ signature :
        void setLeaderLineColor1(class PyDbMLeader {lvalue},int,class AcCmColor)'''
    ...
    def setLeaderLineType (self, *args, **kwargs)-> None :
      '''setLeaderLineType( (MLeader)arg1, (MLeaderLeaderType)arg2) -> None :

    C++ signature :
        void setLeaderLineType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::LeaderType)

setLeaderLineType( (MLeader)arg1, (int)arg2, (MLeaderLeaderType)arg3) -> None :

    C++ signature :
        void setLeaderLineType(class PyDbMLeader {lvalue},int,enum AcDbMLeaderStyle::LeaderType)'''
    ...
    def setLeaderLineTypeId (self, *args, **kwargs)-> None :
      '''setLeaderLineTypeId( (MLeader)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setLeaderLineTypeId(class PyDbMLeader {lvalue},class PyDbObjectId)

setLeaderLineTypeId( (MLeader)arg1, (int)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void setLeaderLineTypeId(class PyDbMLeader {lvalue},int,class PyDbObjectId)'''
    ...
    def setLeaderLineWeight1 (self, *args, **kwargs)-> None :
      '''setLeaderLineWeight1( (MLeader)arg1, (LineWeight)arg2) -> None :

    C++ signature :
        void setLeaderLineWeight1(class PyDbMLeader {lvalue},enum AcDb::LineWeight)

setLeaderLineWeight1( (MLeader)arg1, (int)arg2, (LineWeight)arg3) -> None :

    C++ signature :
        void setLeaderLineWeight1(class PyDbMLeader {lvalue},int,enum AcDb::LineWeight)'''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMLeaderStyle (self, *args, **kwargs)-> None :
      '''setMLeaderStyle( (MLeader)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setMLeaderStyle(class PyDbMLeader {lvalue},class PyDbObjectId)'''
    ...
    def setMText (self, *args, **kwargs)-> None :
      '''setMText( (MLeader)arg1, (MText)arg2) -> None :

    C++ signature :
        void setMText(class PyDbMLeader {lvalue},class PyDbMText)'''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOverride (self, *args, **kwargs)-> None :
      '''setOverride( (MLeader)arg1, (MLeaderPropertyOverrideType)arg2) -> None :

    C++ signature :
        void setOverride(class PyDbMLeader {lvalue},enum AcDbMLeader::PropertyOverrideType)

setOverride( (MLeader)arg1, (MLeaderPropertyOverrideType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setOverride(class PyDbMLeader {lvalue},enum AcDbMLeader::PropertyOverrideType,bool)'''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlane (self, *args, **kwargs)-> None :
      '''setPlane( (MLeader)arg1, (Plane)arg2) -> None :

    C++ signature :
        void setPlane(class PyDbMLeader {lvalue},class PyGePlane)'''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setScale (self, *args, **kwargs)-> None :
      '''setScale( (MLeader)arg1, (float)arg2) -> None :

    C++ signature :
        void setScale(class PyDbMLeader {lvalue},double)'''
    ...
    def setTextAlignmentType (self, *args, **kwargs)-> None :
      '''setTextAlignmentType( (MLeader)arg1, (MLeaderTextAlignmentType)arg2) -> None :

    C++ signature :
        void setTextAlignmentType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::TextAlignmentType)'''
    ...
    def setTextAngleType (self, *args, **kwargs)-> None :
      '''setTextAngleType( (MLeader)arg1, (MLeaderTextAngleType)arg2) -> None :

    C++ signature :
        void setTextAngleType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::TextAngleType)'''
    ...
    def setTextAttachmentDirection (self, *args, **kwargs)-> None :
      '''setTextAttachmentDirection( (MLeader)arg1, (MLeaderTextAttachmentDirection)arg2) -> None :

    C++ signature :
        void setTextAttachmentDirection(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::TextAttachmentDirection)'''
    ...
    def setTextAttachmentType (self, *args, **kwargs)-> None :
      '''setTextAttachmentType( (MLeader)arg1, (MLeaderTextAttachmentType)arg2) -> None :

    C++ signature :
        void setTextAttachmentType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::TextAttachmentType)

setTextAttachmentType( (MLeader)arg1, (MLeaderTextAttachmentType)arg2, (MLeaderLeaderDirectionType)arg3) -> None :

    C++ signature :
        void setTextAttachmentType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::TextAttachmentType,enum AcDbMLeaderStyle::LeaderDirectionType)'''
    ...
    def setTextColor (self, *args, **kwargs)-> None :
      '''setTextColor( (MLeader)arg1, (Color)arg2) -> None :

    C++ signature :
        void setTextColor(class PyDbMLeader {lvalue},class AcCmColor)'''
    ...
    def setTextHeight (self, *args, **kwargs)-> None :
      '''setTextHeight( (MLeader)arg1, (float)arg2) -> None :

    C++ signature :
        void setTextHeight(class PyDbMLeader {lvalue},double)'''
    ...
    def setTextLocation (self, *args, **kwargs)-> None :
      '''setTextLocation( (MLeader)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setTextLocation(class PyDbMLeader {lvalue},class AcGePoint3d)'''
    ...
    def setTextStyleId (self, *args, **kwargs)-> None :
      '''setTextStyleId( (MLeader)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setTextStyleId(class PyDbMLeader {lvalue},class PyDbObjectId)'''
    ...
    def setToleranceLocation (self, *args, **kwargs)-> None :
      '''setToleranceLocation( (MLeader)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setToleranceLocation(class PyDbMLeader {lvalue},class AcGePoint3d)'''
    ...
    def setVertex (self, *args, **kwargs)-> None :
      '''setVertex( (MLeader)arg1, (int)arg2, (int)arg3, (Point3d)arg4) -> None :

    C++ signature :
        void setVertex(class PyDbMLeader {lvalue},int,int,class AcGePoint3d)'''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAlignmentType (self, *args, **kwargs)-> PyDb.MLeaderTextAlignmentType :
      '''textAlignmentType( (MLeader)arg1) -> MLeaderTextAlignmentType :

    C++ signature :
        enum AcDbMLeaderStyle::TextAlignmentType textAlignmentType(class PyDbMLeader {lvalue})'''
    ...
    def textAngleType (self, *args, **kwargs)-> PyDb.MLeaderTextAngleType :
      '''textAngleType( (MLeader)arg1) -> MLeaderTextAngleType :

    C++ signature :
        enum AcDbMLeaderStyle::TextAngleType textAngleType(class PyDbMLeader {lvalue})'''
    ...
    def textAttachmentDirection (self, *args, **kwargs)-> PyDb.MLeaderTextAttachmentDirection :
      '''textAttachmentDirection( (MLeader)arg1) -> MLeaderTextAttachmentDirection :

    C++ signature :
        enum AcDbMLeaderStyle::TextAttachmentDirection textAttachmentDirection(class PyDbMLeader {lvalue})'''
    ...
    def textAttachmentType (self, *args, **kwargs)-> PyDb.MLeaderTextAttachmentType :
      '''textAttachmentType( (MLeader)arg1) -> MLeaderTextAttachmentType :

    C++ signature :
        enum AcDbMLeaderStyle::TextAttachmentType textAttachmentType(class PyDbMLeader {lvalue})

textAttachmentType( (MLeader)arg1, (MLeaderLeaderDirectionType)arg2) -> MLeaderTextAttachmentType :

    C++ signature :
        enum AcDbMLeaderStyle::TextAttachmentType textAttachmentType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::LeaderDirectionType)'''
    ...
    def textColor (self, *args, **kwargs)-> PyDb.Color :
      '''textColor( (MLeader)arg1) -> Color :

    C++ signature :
        class AcCmColor textColor(class PyDbMLeader {lvalue})'''
    ...
    def textHeight (self, *args, **kwargs)-> float :
      '''textHeight( (MLeader)arg1) -> float :

    C++ signature :
        double textHeight(class PyDbMLeader {lvalue})'''
    ...
    def textStyleId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''textStyleId( (MLeader)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyleId(class PyDbMLeader {lvalue})'''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def updateLeaderLinePosition (self, *args, **kwargs)-> None :
      '''updateLeaderLinePosition( (MLeader)arg1) -> None :

    C++ signature :
        void updateLeaderLinePosition(class PyDbMLeader {lvalue})'''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class MLeaderBlockConnectionType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kConnectBase (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kConnectExtents (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class MLeaderContentType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kBlockContent (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMTextContent (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNoneContent (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kToleranceContent (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class MLeaderGsMarkType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kArrowMark (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBlockAttribute (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBlockMark (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDoglegMark (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLeaderLineMark (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMTextMark (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMTextUnderLineMark (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kToleranceMark (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class MLeaderLeaderDirectionType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kBottomLeader (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLeftLeader (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kRightLeader (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTopLeader (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnknownLeader (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class MLeaderLeaderType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kInVisibleLeader (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSplineLeader (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kStraightLeader (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class MLeaderMoveType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kMoveAllExceptArrowHeaderPoints (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMoveAllPoints (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMoveContentAndDoglegPoints (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class MLeaderPropertyOverrideType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kArrowSize (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kArrowSymbolId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBlockColor (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBlockConnectionType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBlockId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBlockRotation (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBlockScale (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kContentType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDefaultMText (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDoglegLength (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEnableDogleg (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEnableFrameText (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEnableLanding (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kExtendLeaderToText (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLandingGap (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLeaderLineColor (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLeaderLineType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLeaderLineTypeId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLeaderLineWeight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kScale (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSize (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextAlignmentType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextAngleType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextAttachmentDirection (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextBottomAttachmentType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextColor (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextHeight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextLeftAttachmentType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextRightAttachmentType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextStyleId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextSwitchAlignmentType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextTopAttachmentType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class MLeaderSegmentAngleType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def k15 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k30 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k45 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k60 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k90 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAny (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHorz (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class MLeaderStyle:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def alignSpace (self, *args, **kwargs)-> float :
      '''alignSpace( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double alignSpace(class PyDbMLeaderStyle {lvalue})'''
    ...
    def annotative (self, *args, **kwargs)-> bool :
      '''annotative( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool annotative(class PyDbMLeaderStyle {lvalue})'''
    ...
    def arrowSize (self, *args, **kwargs)-> float :
      '''arrowSize( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double arrowSize(class PyDbMLeaderStyle {lvalue})'''
    ...
    def arrowSymbolId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''arrowSymbolId( (MLeaderStyle)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId arrowSymbolId(class PyDbMLeaderStyle {lvalue})'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def bitFlags (self, *args, **kwargs)-> int :
      '''bitFlags( (MLeaderStyle)arg1) -> int :

    C++ signature :
        unsigned int bitFlags(class PyDbMLeaderStyle {lvalue})'''
    ...
    def blockColor (self, *args, **kwargs)-> PyDb.Color :
      '''blockColor( (MLeaderStyle)arg1) -> Color :

    C++ signature :
        class AcCmColor blockColor(class PyDbMLeaderStyle {lvalue})'''
    ...
    def blockConnectionType (self, *args, **kwargs)-> PyDb.MLeaderBlockConnectionType :
      '''blockConnectionType( (MLeaderStyle)arg1) -> MLeaderBlockConnectionType :

    C++ signature :
        enum AcDbMLeaderStyle::BlockConnectionType blockConnectionType(class PyDbMLeaderStyle {lvalue})'''
    ...
    def blockId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''blockId( (MLeaderStyle)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbMLeaderStyle {lvalue})'''
    ...
    def blockRotation (self, *args, **kwargs)-> float :
      '''blockRotation( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double blockRotation(class PyDbMLeaderStyle {lvalue})'''
    ...
    def blockScale (self, *args, **kwargs)-> PyGe.Scale3d :
      '''blockScale( (MLeaderStyle)arg1) -> Scale3d :

    C++ signature :
        class AcGeScale3d blockScale(class PyDbMLeaderStyle {lvalue})'''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def breakSize (self, *args, **kwargs)-> float :
      '''breakSize( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double breakSize(class PyDbMLeaderStyle {lvalue})'''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.DbObject :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.DbObject :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def contentType (self, *args, **kwargs)-> PyDb.MLeaderContentType :
      '''contentType( (MLeaderStyle)arg1) -> MLeaderContentType :

    C++ signature :
        enum AcDbMLeaderStyle::ContentType contentType(class PyDbMLeaderStyle {lvalue})'''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def defaultMText (self, *args, **kwargs)-> PyDb.MText :
      '''defaultMText( (MLeaderStyle)arg1) -> MText :

    C++ signature :
        class PyDbMText defaultMText(class PyDbMLeaderStyle {lvalue})'''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def description (self, *args, **kwargs)-> str :
      '''description( (MLeaderStyle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > description(class PyDbMLeaderStyle {lvalue})'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def doglegLength (self, *args, **kwargs)-> float :
      '''doglegLength( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double doglegLength(class PyDbMLeaderStyle {lvalue})'''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawLeaderOrderType (self, *args, **kwargs)-> PyDb.DrawLeaderOrderType :
      '''drawLeaderOrderType( (MLeaderStyle)arg1) -> DrawLeaderOrderType :

    C++ signature :
        enum AcDbMLeaderStyle::DrawLeaderOrderType drawLeaderOrderType(class PyDbMLeaderStyle {lvalue})

drawLeaderOrderType( (MLeaderStyle)arg1) -> DrawLeaderOrderType :

    C++ signature :
        enum AcDbMLeaderStyle::DrawLeaderOrderType drawLeaderOrderType(class PyDbMLeaderStyle {lvalue})'''
    ...
    def drawMLeaderOrderType (self, *args, **kwargs)-> PyDb.DrawMLeaderOrderType :
      '''drawMLeaderOrderType( (MLeaderStyle)arg1) -> DrawMLeaderOrderType :

    C++ signature :
        enum AcDbMLeaderStyle::DrawMLeaderOrderType drawMLeaderOrderType(class PyDbMLeaderStyle {lvalue})'''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def enableBlockRotation (self, *args, **kwargs)-> bool :
      '''enableBlockRotation( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool enableBlockRotation(class PyDbMLeaderStyle {lvalue})'''
    ...
    def enableBlockScale (self, *args, **kwargs)-> bool :
      '''enableBlockScale( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool enableBlockScale(class PyDbMLeaderStyle {lvalue})'''
    ...
    def enableDogleg (self, *args, **kwargs)-> bool :
      '''enableDogleg( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool enableDogleg(class PyDbMLeaderStyle {lvalue})'''
    ...
    def enableFrameText (self, *args, **kwargs)-> bool :
      '''enableFrameText( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool enableFrameText(class PyDbMLeaderStyle {lvalue})'''
    ...
    def enableLanding (self, *args, **kwargs)-> bool :
      '''enableLanding( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool enableLanding(class PyDbMLeaderStyle {lvalue})'''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extendLeaderToText (self, *args, **kwargs)-> bool :
      '''extendLeaderToText( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool extendLeaderToText(class PyDbMLeaderStyle {lvalue})'''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def firstSegmentAngleConstraint (self, *args, **kwargs)-> PyDb.MLeaderSegmentAngleType :
      '''firstSegmentAngleConstraint( (MLeaderStyle)arg1) -> MLeaderSegmentAngleType :

    C++ signature :
        enum AcDbMLeaderStyle::SegmentAngleType firstSegmentAngleConstraint(class PyDbMLeaderStyle {lvalue})'''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getName (self, *args, **kwargs)-> str :
      '''getName( (MLeaderStyle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getName(class PyDbMLeaderStyle {lvalue})'''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isRenamable (self, *args, **kwargs)-> bool :
      '''isRenamable( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool isRenamable(class PyDbMLeaderStyle {lvalue})'''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def landingGap (self, *args, **kwargs)-> float :
      '''landingGap( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double landingGap(class PyDbMLeaderStyle {lvalue})'''
    ...
    def leaderLineColor (self, *args, **kwargs)-> PyDb.Color :
      '''leaderLineColor( (MLeaderStyle)arg1) -> Color :

    C++ signature :
        class AcCmColor leaderLineColor(class PyDbMLeaderStyle {lvalue})'''
    ...
    def leaderLineType (self, *args, **kwargs)-> PyDb.MLeaderLeaderType :
      '''leaderLineType( (MLeaderStyle)arg1) -> MLeaderLeaderType :

    C++ signature :
        enum AcDbMLeaderStyle::LeaderType leaderLineType(class PyDbMLeaderStyle {lvalue})'''
    ...
    def leaderLineTypeId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''leaderLineTypeId( (MLeaderStyle)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId leaderLineTypeId(class PyDbMLeaderStyle {lvalue})'''
    ...
    def leaderLineWeight (self, *args, **kwargs)-> PyDb.LineWeight :
      '''leaderLineWeight( (MLeaderStyle)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight leaderLineWeight(class PyDbMLeaderStyle {lvalue})'''
    ...
    def maxLeaderSegmentsPoints (self, *args, **kwargs)-> int :
      '''maxLeaderSegmentsPoints( (MLeaderStyle)arg1) -> int :

    C++ signature :
        int maxLeaderSegmentsPoints(class PyDbMLeaderStyle {lvalue})'''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def overwritePropChanged (self, *args, **kwargs)-> bool :
      '''overwritePropChanged( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool overwritePropChanged(class PyDbMLeaderStyle {lvalue})'''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def postMLeaderStyleToDb (self, *args, **kwargs)-> PyDb.ObjectId :
      '''postMLeaderStyleToDb( (MLeaderStyle)arg1, (Database)arg2, (str)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId postMLeaderStyleToDb(class PyDbMLeaderStyle {lvalue},class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def scale (self, *args, **kwargs)-> float :
      '''scale( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double scale(class PyDbMLeaderStyle {lvalue})'''
    ...
    def secondSegmentAngleConstraint (self, *args, **kwargs)-> PyDb.MLeaderSegmentAngleType :
      '''secondSegmentAngleConstraint( (MLeaderStyle)arg1) -> MLeaderSegmentAngleType :

    C++ signature :
        enum AcDbMLeaderStyle::SegmentAngleType secondSegmentAngleConstraint(class PyDbMLeaderStyle {lvalue})'''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAlignSpace (self, *args, **kwargs)-> None :
      '''setAlignSpace( (MLeaderStyle)arg1, (float)arg2) -> None :

    C++ signature :
        void setAlignSpace(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setAnnotative (self, *args, **kwargs)-> None :
      '''setAnnotative( (MLeaderStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAnnotative(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setArrowSize (self, *args, **kwargs)-> None :
      '''setArrowSize( (MLeaderStyle)arg1, (float)arg2) -> None :

    C++ signature :
        void setArrowSize(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setArrowSymbolId (self, *args, **kwargs)-> None :
      '''setArrowSymbolId( (MLeaderStyle)arg1, (str)arg2) -> None :

    C++ signature :
        void setArrowSymbolId(class PyDbMLeaderStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setArrowSymbolId( (MLeaderStyle)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setArrowSymbolId(class PyDbMLeaderStyle {lvalue},class PyDbObjectId)'''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBitFlags (self, *args, **kwargs)-> None :
      '''setBitFlags( (MLeaderStyle)arg1, (SubentType)arg2) -> None :

    C++ signature :
        void setBitFlags(class PyDbMLeaderStyle {lvalue},unsigned int)'''
    ...
    def setBlockColor (self, *args, **kwargs)-> None :
      '''setBlockColor( (MLeaderStyle)arg1, (Color)arg2) -> None :

    C++ signature :
        void setBlockColor(class PyDbMLeaderStyle {lvalue},class AcCmColor)'''
    ...
    def setBlockConnectionType (self, *args, **kwargs)-> None :
      '''setBlockConnectionType( (MLeaderStyle)arg1, (MLeaderBlockConnectionType)arg2) -> None :

    C++ signature :
        void setBlockConnectionType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::BlockConnectionType)'''
    ...
    def setBlockId (self, *args, **kwargs)-> None :
      '''setBlockId( (MLeaderStyle)arg1, (str)arg2) -> None :

    C++ signature :
        void setBlockId(class PyDbMLeaderStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setBlockId( (MLeaderStyle)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setBlockId(class PyDbMLeaderStyle {lvalue},class PyDbObjectId)'''
    ...
    def setBlockRotation (self, *args, **kwargs)-> None :
      '''setBlockRotation( (MLeaderStyle)arg1, (float)arg2) -> None :

    C++ signature :
        void setBlockRotation(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setBlockScale (self, *args, **kwargs)-> None :
      '''setBlockScale( (MLeaderStyle)arg1, (Scale3d)arg2) -> None :

    C++ signature :
        void setBlockScale(class PyDbMLeaderStyle {lvalue},class AcGeScale3d)'''
    ...
    def setBreakSize (self, *args, **kwargs)-> None :
      '''setBreakSize( (MLeaderStyle)arg1, (float)arg2) -> None :

    C++ signature :
        void setBreakSize(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setContentType (self, *args, **kwargs)-> None :
      '''setContentType( (MLeaderStyle)arg1, (MLeaderContentType)arg2) -> None :

    C++ signature :
        void setContentType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::ContentType)'''
    ...
    def setDefaultMText (self, *args, **kwargs)-> None :
      '''setDefaultMText( (MLeaderStyle)arg1, (MText)arg2) -> None :

    C++ signature :
        void setDefaultMText(class PyDbMLeaderStyle {lvalue},class PyDbMText)'''
    ...
    def setDescription (self, *args, **kwargs)-> None :
      '''setDescription( (MLeaderStyle)arg1, (str)arg2) -> None :

    C++ signature :
        void setDescription(class PyDbMLeaderStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDoglegLength (self, *args, **kwargs)-> None :
      '''setDoglegLength( (MLeaderStyle)arg1, (float)arg2) -> None :

    C++ signature :
        void setDoglegLength(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setDrawLeaderOrderType (self, *args, **kwargs)-> None :
      '''setDrawLeaderOrderType( (MLeaderStyle)arg1, (DrawLeaderOrderType)arg2) -> None :

    C++ signature :
        void setDrawLeaderOrderType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::DrawLeaderOrderType)

setDrawLeaderOrderType( (MLeaderStyle)arg1, (DrawLeaderOrderType)arg2) -> None :

    C++ signature :
        void setDrawLeaderOrderType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::DrawLeaderOrderType)'''
    ...
    def setDrawMLeaderOrderType (self, *args, **kwargs)-> None :
      '''setDrawMLeaderOrderType( (MLeaderStyle)arg1, (DrawMLeaderOrderType)arg2) -> None :

    C++ signature :
        void setDrawMLeaderOrderType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::DrawMLeaderOrderType)'''
    ...
    def setEnableBlockRotation (self, *args, **kwargs)-> None :
      '''setEnableBlockRotation( (MLeaderStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnableBlockRotation(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setEnableBlockScale (self, *args, **kwargs)-> None :
      '''setEnableBlockScale( (MLeaderStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnableBlockScale(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setEnableDogleg (self, *args, **kwargs)-> None :
      '''setEnableDogleg( (MLeaderStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnableDogleg(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setEnableFrameText (self, *args, **kwargs)-> None :
      '''setEnableFrameText( (MLeaderStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnableFrameText(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setEnableLanding (self, *args, **kwargs)-> None :
      '''setEnableLanding( (MLeaderStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnableLanding(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setExtendLeaderToText (self, *args, **kwargs)-> None :
      '''setExtendLeaderToText( (MLeaderStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setExtendLeaderToText(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setFirstSegmentAngleConstraint (self, *args, **kwargs)-> None :
      '''setFirstSegmentAngleConstraint( (MLeaderStyle)arg1, (MLeaderSegmentAngleType)arg2) -> None :

    C++ signature :
        void setFirstSegmentAngleConstraint(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::SegmentAngleType)'''
    ...
    def setLandingGap (self, *args, **kwargs)-> None :
      '''setLandingGap( (MLeaderStyle)arg1, (float)arg2) -> None :

    C++ signature :
        void setLandingGap(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setLeaderLineColor (self, *args, **kwargs)-> None :
      '''setLeaderLineColor( (MLeaderStyle)arg1, (Color)arg2) -> None :

    C++ signature :
        void setLeaderLineColor(class PyDbMLeaderStyle {lvalue},class AcCmColor)'''
    ...
    def setLeaderLineType (self, *args, **kwargs)-> None :
      '''setLeaderLineType( (MLeaderStyle)arg1, (MLeaderLeaderType)arg2) -> None :

    C++ signature :
        void setLeaderLineType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::LeaderType)'''
    ...
    def setLeaderLineTypeId (self, *args, **kwargs)-> None :
      '''setLeaderLineTypeId( (MLeaderStyle)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setLeaderLineTypeId(class PyDbMLeaderStyle {lvalue},class PyDbObjectId)'''
    ...
    def setLeaderLineWeight (self, *args, **kwargs)-> None :
      '''setLeaderLineWeight( (MLeaderStyle)arg1, (LineWeight)arg2) -> None :

    C++ signature :
        void setLeaderLineWeight(class PyDbMLeaderStyle {lvalue},enum AcDb::LineWeight)'''
    ...
    def setMaxLeaderSegmentsPoints (self, *args, **kwargs)-> None :
      '''setMaxLeaderSegmentsPoints( (MLeaderStyle)arg1, (int)arg2) -> None :

    C++ signature :
        void setMaxLeaderSegmentsPoints(class PyDbMLeaderStyle {lvalue},int)'''
    ...
    def setName (self, *args, **kwargs)-> None :
      '''setName( (MLeaderStyle)arg1, (str)arg2) -> None :

    C++ signature :
        void setName(class PyDbMLeaderStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setScale (self, *args, **kwargs)-> None :
      '''setScale( (MLeaderStyle)arg1, (float)arg2) -> None :

    C++ signature :
        void setScale(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setSecondSegmentAngleConstraint (self, *args, **kwargs)-> None :
      '''setSecondSegmentAngleConstraint( (MLeaderStyle)arg1, (MLeaderSegmentAngleType)arg2) -> None :

    C++ signature :
        void setSecondSegmentAngleConstraint(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::SegmentAngleType)'''
    ...
    def setTextAlignAlwaysLeft (self, *args, **kwargs)-> None :
      '''setTextAlignAlwaysLeft( (MLeaderStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setTextAlignAlwaysLeft(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setTextAlignmentType (self, *args, **kwargs)-> None :
      '''setTextAlignmentType( (MLeaderStyle)arg1, (MLeaderTextAlignmentType)arg2) -> None :

    C++ signature :
        void setTextAlignmentType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::TextAlignmentType)'''
    ...
    def setTextAngleType (self, *args, **kwargs)-> None :
      '''setTextAngleType( (MLeaderStyle)arg1, (MLeaderTextAngleType)arg2) -> None :

    C++ signature :
        void setTextAngleType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::TextAngleType)'''
    ...
    def setTextAttachmentDirection (self, *args, **kwargs)-> None :
      '''setTextAttachmentDirection( (MLeaderStyle)arg1, (MLeaderTextAttachmentDirection)arg2) -> None :

    C++ signature :
        void setTextAttachmentDirection(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::TextAttachmentDirection)'''
    ...
    def setTextAttachmentType (self, *args, **kwargs)-> None :
      '''setTextAttachmentType( (MLeaderStyle)arg1, (MLeaderTextAttachmentType)arg2 [, (MLeaderLeaderDirectionType)arg3]) -> None :

    C++ signature :
        void setTextAttachmentType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::TextAttachmentType [,enum AcDbMLeaderStyle::LeaderDirectionType])'''
    ...
    def setTextColor (self, *args, **kwargs)-> None :
      '''setTextColor( (MLeaderStyle)arg1, (Color)arg2) -> None :

    C++ signature :
        void setTextColor(class PyDbMLeaderStyle {lvalue},class AcCmColor)'''
    ...
    def setTextHeight (self, *args, **kwargs)-> None :
      '''setTextHeight( (MLeaderStyle)arg1, (float)arg2) -> None :

    C++ signature :
        void setTextHeight(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setTextStyleId (self, *args, **kwargs)-> None :
      '''setTextStyleId( (MLeaderStyle)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setTextStyleId(class PyDbMLeaderStyle {lvalue},class PyDbObjectId)'''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAlignAlwaysLeft (self, *args, **kwargs)-> bool :
      '''textAlignAlwaysLeft( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool textAlignAlwaysLeft(class PyDbMLeaderStyle {lvalue})'''
    ...
    def textAlignmentType (self, *args, **kwargs)-> PyDb.MLeaderTextAlignmentType :
      '''textAlignmentType( (MLeaderStyle)arg1) -> MLeaderTextAlignmentType :

    C++ signature :
        enum AcDbMLeaderStyle::TextAlignmentType textAlignmentType(class PyDbMLeaderStyle {lvalue})'''
    ...
    def textAngleType (self, *args, **kwargs)-> PyDb.MLeaderTextAngleType :
      '''textAngleType( (MLeaderStyle)arg1) -> MLeaderTextAngleType :

    C++ signature :
        enum AcDbMLeaderStyle::TextAngleType textAngleType(class PyDbMLeaderStyle {lvalue})'''
    ...
    def textAttachmentDirection (self, *args, **kwargs)-> PyDb.MLeaderTextAttachmentDirection :
      '''textAttachmentDirection( (MLeaderStyle)arg1) -> MLeaderTextAttachmentDirection :

    C++ signature :
        enum AcDbMLeaderStyle::TextAttachmentDirection textAttachmentDirection(class PyDbMLeaderStyle {lvalue})'''
    ...
    def textAttachmentType (self, *args, **kwargs)-> PyDb.MLeaderTextAttachmentType :
      '''textAttachmentType( (MLeaderStyle)arg1 [, (MLeaderLeaderDirectionType)arg2]) -> MLeaderTextAttachmentType :

    C++ signature :
        enum AcDbMLeaderStyle::TextAttachmentType textAttachmentType(class PyDbMLeaderStyle {lvalue} [,enum AcDbMLeaderStyle::LeaderDirectionType])'''
    ...
    def textColor (self, *args, **kwargs)-> PyDb.Color :
      '''textColor( (MLeaderStyle)arg1) -> Color :

    C++ signature :
        class AcCmColor textColor(class PyDbMLeaderStyle {lvalue})'''
    ...
    def textHeight (self, *args, **kwargs)-> float :
      '''textHeight( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double textHeight(class PyDbMLeaderStyle {lvalue})'''
    ...
    def textStyleId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''textStyleId( (MLeaderStyle)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyleId(class PyDbMLeaderStyle {lvalue})'''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class MLeaderTextAlignmentType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kCenterAlignment (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLeftAlignment (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kRightAlignment (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class MLeaderTextAngleType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kAlwaysRightReadingAngle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHorizontalAngle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kInsertAngle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class MLeaderTextAttachmentDirection:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kAttachmentHorizontal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAttachmentVertical (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class MLeaderTextAttachmentType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kAttachmentAllLine (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAttachmentBottomLine (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAttachmentBottomOfBottom (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAttachmentBottomOfTop (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAttachmentBottomOfTopLine (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAttachmentCenter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAttachmentLinedCenter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAttachmentMiddle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAttachmentMiddleOfBottom (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAttachmentMiddleOfTop (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAttachmentTopOfTop (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class MPolygon:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def appendLoopFromBoundary (self, *args, **kwargs)-> None :
      '''appendLoopFromBoundary( (MPolygon)arg1, (Circle)arg2, (bool)arg3, (float)arg4) -> None :

    C++ signature :
        void appendLoopFromBoundary(class PyDbMPolygon {lvalue},class PyDbCircle,bool,double)

appendLoopFromBoundary( (MPolygon)arg1, (Polyline)arg2, (bool)arg3, (float)arg4) -> None :

    C++ signature :
        void appendLoopFromBoundary(class PyDbMPolygon {lvalue},class PyDbPolyline,bool,double)

appendLoopFromBoundary( (MPolygon)arg1, (Polyline2d)arg2, (bool)arg3, (float)arg4) -> None :

    C++ signature :
        void appendLoopFromBoundary(class PyDbMPolygon {lvalue},class PyDb2dPolyline,bool,double)'''
    ...
    def appendMPolygonLoop (self, *args, **kwargs)-> None :
      '''appendMPolygonLoop( (MPolygon)arg1, (list)arg2, (list)arg3, (bool)arg4, (float)arg5) -> None :

    C++ signature :
        void appendMPolygonLoop(class PyDbMPolygon {lvalue},class boost::python::list,class boost::python::list,bool,double)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def balanceDisplay (self: MPolygon)-> None :
      '''                             '''
    ...
    def balanceTree (self: MPolygon)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.MPolygon :
      '''                             '''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.MPolygon :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def createLoopsFromBoundaries (self, *args, **kwargs)-> list :
      '''createLoopsFromBoundaries( (MPolygon)arg1, (object)arg2, (bool)arg3, (float)arg4) -> list :

    C++ signature :
        class boost::python::list createLoopsFromBoundaries(class PyDbMPolygon {lvalue},class AcArray<class AcDbObjectId,class AcArrayMemCopyReallocator<class AcDbObjectId> >,bool,double)'''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevation (self: MPolygon)-> float :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def evaluateHatch1 (self, *args, **kwargs)-> None :
      '''evaluateHatch1( (MPolygon)arg1) -> None :

    C++ signature :
        void evaluateHatch1(class PyDbMPolygon {lvalue})'''
    ...
    def evaluateHatch2 (self: MPolygon,val : bool=False)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getArea (self: MPolygon)-> float :
      '''                             '''
    ...
    def getChildLoops (self: MPolygon,val : int)-> list :
      '''                             '''
    ...
    def getClosestLoopTo (self: MPolygon,val : PyGe.Point3d)-> int :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getLoopAtGsMarker (self: MPolygon,val : int)-> int :
      '''                             '''
    ...
    def getLoopDirection (self: MPolygon,val : int)-> PyDb.MPolygonloopDir :
      '''                             '''
    ...
    def getMPolygonLoopAt (self: MPolygon,val : int)-> tuple :
      '''                             '''
    ...
    def getOffsetVector (self: MPolygon)-> PyGe.Vector2d :
      '''                             '''
    ...
    def getParentLoop (self: MPolygon,val : int)-> int :
      '''                             '''
    ...
    def getPatternDefinitionAt (self: MPolygon,val : int)-> tuple :
      '''                             '''
    ...
    def getPerimeter (self: MPolygon)-> float :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def hatch (self: MPolygon)-> PyDb.Hatch :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def includesTouchingLoops (self: MPolygon,val : float)-> bool :
      '''                             '''
    ...
    def insertMPolygonLoopAt (self, *args, **kwargs)-> None :
      '''insertMPolygonLoopAt( (MPolygon)arg1, (int)arg2, (list)arg3, (list)arg4, (bool)arg5, (float)arg6) -> None :

    C++ signature :
        void insertMPolygonLoopAt(class PyDbMPolygon {lvalue},int,class boost::python::list,class boost::python::list,bool,double)'''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isBalanced (self: MPolygon)-> bool :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isPointInsideMPolygon (self: MPolygon,val : PyGe.Point3d,tol : float)-> list :
      '''                             '''
    ...
    def isPointOnLoopBoundary (self: MPolygon,val : PyGe.Point3d,loop : int,tol : float)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...

    @staticmethod
    def loadModule ()-> bool :
      '''                             '''
    ...
    def loopCrossesItself (self, *args, **kwargs)-> bool :
      '''loopCrossesItself( (MPolygon)arg1, (list)arg2, (list)arg3, (float)arg4) -> bool :

    C++ signature :
        bool loopCrossesItself(class PyDbMPolygon {lvalue},class boost::python::list,class boost::python::list,double)'''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def normal (self: MPolygon)-> PyGe.Vector3d :
      '''                             '''
    ...
    def numMPolygonLoops (self: MPolygon)-> int :
      '''                             '''
    ...
    def numPatternDefinitions (self: MPolygon)-> int :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def patternAngle (self: MPolygon)-> float :
      '''                             '''
    ...
    def patternColor (self: MPolygon)-> PyDb.Color :
      '''                             '''
    ...
    def patternDouble (self: MPolygon)-> bool :
      '''                             '''
    ...
    def patternName (self: MPolygon)-> str :
      '''                             '''
    ...
    def patternScale (self: MPolygon)-> float :
      '''                             '''
    ...
    def patternSpace (self: MPolygon)-> float :
      '''                             '''
    ...
    def patternType (self: MPolygon)-> PyDb.HatchPatternType :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removeMPolygonLoopAt (self: MPolygon,val : int)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def selfCrosses (self, *args, **kwargs)-> bool :
      '''selfCrosses( (MPolygon)arg1, (list)arg2, (list)arg3, (float)arg4) -> bool :

    C++ signature :
        bool selfCrosses(class PyDbMPolygon {lvalue},class boost::python::list,class boost::python::list,double)'''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setElevation (self: MPolygon,val : float)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setGradient (self, *args, **kwargs)-> None :
      '''setGradient( (MPolygon)arg1, (HatchGradientPatternType)arg2, (str)arg3) -> None :

    C++ signature :
        void setGradient(class PyDbMPolygon {lvalue},enum AcDbHatch::GradientPatternType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setGradientAngle (self: MPolygon,val : float)-> None :
      '''                             '''
    ...
    def setGradientColors (self, *args, **kwargs)-> None :
      '''setGradientColors( (MPolygon)arg1, (list)arg2, (list)arg3) -> None :

    C++ signature :
        void setGradientColors(class PyDbMPolygon {lvalue},class boost::python::list,class boost::python::list)'''
    ...
    def setGradientOneColorMode (self: MPolygon,val : bool)-> None :
      '''                             '''
    ...
    def setGradientShift (self: MPolygon,val : float)-> None :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLoopDirection (self, *args, **kwargs)-> None :
      '''setLoopDirection( (MPolygon)arg1, (int)arg2, (MPolygonloopDir)arg3) -> None :

    C++ signature :
        void setLoopDirection(class PyDbMPolygon {lvalue},int,enum AcDbMPolygon::loopDir)'''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self: MPolygon,val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPattern (self: MPolygon,val : PyDb.HatchPatternType,name : str)-> None :
      '''                             '''
    ...
    def setPatternAngle (self: MPolygon,val : float)-> None :
      '''                             '''
    ...
    def setPatternColor (self, *args, **kwargs)-> None :
      '''setPatternColor( (MPolygon)arg1, (Color)arg2) -> None :

    C++ signature :
        void setPatternColor(class PyDbMPolygon {lvalue},class AcCmColor)'''
    ...
    def setPatternDouble (self: MPolygon,val : float)-> None :
      '''                             '''
    ...
    def setPatternScale (self: MPolygon,val : float)-> None :
      '''                             '''
    ...
    def setPatternSpace (self: MPolygon,val : float)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class MPolygonloopDir:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kAnnotation (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kExterior (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kInterior (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class MText:
    def __init__ (self: MText,id: ObjectId,mode: OpenMode=kForRead,erased: bool=False)-> None :
      '''                             '''
    ...
    def actualHeight (self: MText)-> float :
      '''                             '''
    ...
    def actualWidth (self: MText)-> float :
      '''                             '''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def ascent (self: MText)-> float :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def attachment (self: MText)-> PyDb.MTextAttachmentPoint :
      '''                             '''
    ...
    def backgroundFillOn (self: MText)-> bool :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.MText :
      '''                             '''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.MText :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def contents (self: MText)-> str :
      '''                             '''
    ...
    def contentsRTF (self: MText)-> str :
      '''                             '''
    ...
    def convertFieldToText (self: MText)-> None :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def correctSpelling (self: MText)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def descent (self: MText)-> float :
      '''                             '''
    ...
    def direction (self: MText)-> PyGe.Vector3d :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def flowDirection (self: MText)-> PyDb.MTextFlowDirection :
      '''                             '''
    ...
    def getBackgroundFillColor (self: MText)-> PyDb.Color :
      '''                             '''
    ...
    def getBackgroundScaleFactor (self: MText)-> float :
      '''                             '''
    ...
    def getBackgroundTransparency (self: MText)-> PyDb.Transparency :
      '''                             '''
    ...
    def getBoundingPoints (self: MText)-> list :
      '''                             '''
    ...
    def getBoundingPointsByLine (self: MText)-> list :
      '''                             '''
    ...
    def getColumnAutoHeight (self: MText)-> bool :
      '''                             '''
    ...
    def getColumnCount (self: MText)-> int :
      '''                             '''
    ...
    def getColumnFlowReversed (self: MText)-> bool :
      '''                             '''
    ...
    def getColumnGutterWidth (self: MText)-> float :
      '''                             '''
    ...
    def getColumnHeight (self: MText,idx : int)-> float :
      '''                             '''
    ...
    def getColumnType (self: MText)-> PyDb.MTextColumnType :
      '''                             '''
    ...
    def getColumnWidth (self: MText)-> float :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFragments (self: MText)-> list :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def height (self: MText)-> float :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def hitTest (self: MText,val : PyGe.Point3d)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineSpacingFactor (self: MText)-> float :
      '''                             '''
    ...
    def lineSpacingStyle (self: MText)-> PyDb.LineSpacingStyle :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def location (self: MText)-> PyGe.Point3d :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def normal (self: MText)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self: MText)-> float :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttachment (self: MText,val : PyDb.MTextAttachmentPoint)-> None :
      '''                             '''
    ...
    def setAttachmentMovingLocation (self, *args, **kwargs)-> None :
      '''setAttachmentMovingLocation( (MText)arg1, (MTextAttachmentPoint)arg2) -> None :

    C++ signature :
        void setAttachmentMovingLocation(class PyDbMText {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBackgroundFill (self: MText,val : bool)-> None :
      '''                             '''
    ...
    def setBackgroundFillColor (self: MText,val : PyDb.AcCmColor)-> None :
      '''                             '''
    ...
    def setBackgroundScaleFactor (self: MText,val : float)-> None :
      '''                             '''
    ...
    def setBackgroundTransparency (self: MText,val : PyDb.AcCmTransparency)-> None :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setColumnAutoHeight (self: MText,val : bool)-> None :
      '''                             '''
    ...
    def setColumnCount (self: MText,val : int)-> None :
      '''                             '''
    ...
    def setColumnFlowReversed (self: MText,val : bool)-> None :
      '''                             '''
    ...
    def setColumnGutterWidth (self: MText,val : float)-> None :
      '''                             '''
    ...
    def setColumnHeight (self: MText,idx : int,val : float)-> None :
      '''                             '''
    ...
    def setColumnType (self: MText,val : PyDb.MTextColumnType)-> None :
      '''                             '''
    ...
    def setColumnWidth (self: MText,val : float)-> None :
      '''                             '''
    ...
    def setContents (self: MText,val : str)-> int :
      '''                             '''
    ...
    def setContentsRTF (self: MText,val : str)-> int :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDirection (self: MText,val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setDynamicColumns (self: MText,width : float,gutter : float,autoHeight : bool)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setFlowDirection (self: MText,val : PyDb.MTextFlowDirection)-> None :
      '''                             '''
    ...
    def setHeight (self: MText,val : float)-> None :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineSpacingFactor (self: MText,val : float)-> None :
      '''                             '''
    ...
    def setLineSpacingStyle (self: MText,val : PyDb.LineSpacingStyle)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLocation (self: MText,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self: MText,val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setRotation (self: MText,val : float)-> None :
      '''                             '''
    ...
    def setStaticColumns (self: MText,width : float,gutter : float,count : int)-> None :
      '''                             '''
    ...
    def setTextHeight (self: MText,val : float)-> None :
      '''                             '''
    ...
    def setTextStyle (self: MText,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setUseBackgroundColor (self: MText,val : bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setWidth (self: MText,val : float)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def text (self: MText)-> str :
      '''                             '''
    ...
    def textHeight (self: MText)-> float :
      '''                             '''
    ...
    def textStyle (self: MText)-> PyDb.ObjectId :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def useBackgroundColorOn (self: MText)-> bool :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def width (self: MText)-> float :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class MTextAttachmentPoint:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kBaseAlign (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBaseCenter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBaseFit (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBaseLeft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBaseMid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBaseRight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBottomAlign (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBottomCenter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBottomFit (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBottomLeft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBottomMid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBottomRight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMiddleAlign (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMiddleCenter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMiddleFit (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMiddleLeft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMiddleMid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMiddleRight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTopAlign (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTopCenter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTopFit (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTopLeft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTopMid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTopRight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class MTextColumnType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kDynamicColumns (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNoColumns (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kStaticColumns (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class MTextFlowDirection:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kBtoT (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kByStyle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLtoR (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kRtoL (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTtoB (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class MTextFragmentType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kBigFont (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBold (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCapsHeight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kColor (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDirection (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEndFragmentTypes (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kExtents (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kFont (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kFontname (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kItalic (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLocation (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNormal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kObliqueAngle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOverPoints (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOverlined (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kStackBottom (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kStackTop (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kStrikePoints (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kStrikethrough (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextValue (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTrackingFactor (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnderPoints (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnderlined (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kWidthFactor (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class MeasurementValue:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kEnglish (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMetric (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class MergeCellStyleOption:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kMergeCellStyleConvertDuplicatesToOverrides (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMergeCellStyleCopyDuplicates (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMergeCellStyleIgnoreNewStyles (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMergeCellStyleNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMergeCellStyleOverwriteDuplicates (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class Mline:
    def __init__ (self: Mline,id: ObjectId,mode: OpenMode=kForRead,erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def appendSeg (self: Mline,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def axisAt (self: Mline,val : int)-> PyGe.Vector3d :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Mline :
      '''                             '''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Mline :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def closedMline (self: Mline)-> bool :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def element (self: Mline,val : PyGe.Point3d)-> int :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getClosestPointTo (self, *args, **kwargs)-> PyGe.Point3d :
      '''getClosestPointTo( (Mline)arg1, (Point3d)arg2, (bool)arg3) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbMline {lvalue},class AcGePoint3d,bool)

getClosestPointTo( (Mline)arg1, (Point3d)arg2, (bool)arg3, (bool)arg4) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbMline {lvalue},class AcGePoint3d,bool,bool)

getClosestPointTo( (Mline)arg1, (Point3d)arg2, (Vector3d)arg3, (bool)arg4) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbMline {lvalue},class AcGePoint3d,class AcGeVector3d,bool)

getClosestPointTo( (Mline)arg1, (Point3d)arg2, (Vector3d)arg3, (bool)arg4, (bool)arg5) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbMline {lvalue},class AcGePoint3d,class AcGeVector3d,bool,bool)'''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlane (self: Mline)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def justification (self: Mline)-> int :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def miterAt (self: Mline,val : int)-> PyGe.Vector3d :
      '''                             '''
    ...
    def moveVertexAt (self: Mline,index : int,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def normal (self: Mline)-> PyGe.Vector3d :
      '''                             '''
    ...
    def numVertices (self: Mline)-> int :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removeLastSeg (self: Mline,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def scale (self: Mline)-> float :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setClosedMline (self: Mline,val : bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setJustification (self: Mline,val : MlineJustification)-> None :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self: Mline,val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setScale (self: Mline,val : float)-> None :
      '''                             '''
    ...
    def setStyle (self: Mline,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setSupressEndCaps (self: Mline,val : bool)-> None :
      '''                             '''
    ...
    def setSupressStartCaps (self: Mline,val : bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def style (self: Mline)-> PyDb.ObjectId :
      '''                             '''
    ...
    def supressEndCaps (self: Mline)-> bool :
      '''                             '''
    ...
    def supressStartCaps (self: Mline)-> bool :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def vertexAt (self: Mline,val : int)-> PyGe.Point3d :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class MlineJustification:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kBottom (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kClosed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMerged (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOpen (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTop (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kZero (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class MlineStyle:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addElement (self, *args, **kwargs)-> int :
      '''addElement( (MlineStyle)arg1, (float)arg2, (Color)arg3, (ObjectId)arg4) -> int :

    C++ signature :
        int addElement(class PyDbMlineStyle {lvalue},double,class AcCmColor,class PyDbObjectId {lvalue})

addElement( (MlineStyle)arg1, (float)arg2, (Color)arg3, (ObjectId)arg4, (bool)arg5) -> int :

    C++ signature :
        int addElement(class PyDbMlineStyle {lvalue},double,class AcCmColor,class PyDbObjectId {lvalue},bool)'''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.MlineStyle :
      '''cast( (RxObject)arg1) -> MlineStyle :

    C++ signature :
        class PyDbMlineStyle cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.MlineStyle :
      '''cloneFrom( (RxObject)arg1) -> MlineStyle :

    C++ signature :
        class PyDbMlineStyle cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def description (self, *args, **kwargs)-> str :
      '''description( (MlineStyle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > description(class PyDbMlineStyle {lvalue})'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def endAngle (self, *args, **kwargs)-> float :
      '''endAngle( (MlineStyle)arg1) -> float :

    C++ signature :
        double endAngle(class PyDbMlineStyle {lvalue})'''
    ...
    def endInnerArcs (self, *args, **kwargs)-> bool :
      '''endInnerArcs( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool endInnerArcs(class PyDbMlineStyle {lvalue})'''
    ...
    def endRoundCap (self, *args, **kwargs)-> bool :
      '''endRoundCap( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool endRoundCap(class PyDbMlineStyle {lvalue})'''
    ...
    def endSquareCap (self, *args, **kwargs)-> bool :
      '''endSquareCap( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool endSquareCap(class PyDbMlineStyle {lvalue})'''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def fillColor (self, *args, **kwargs)-> PyDb.Color :
      '''fillColor( (MlineStyle)arg1) -> Color :

    C++ signature :
        class AcCmColor fillColor(class PyDbMlineStyle {lvalue})'''
    ...
    def filled (self, *args, **kwargs)-> bool :
      '''filled( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool filled(class PyDbMlineStyle {lvalue})'''
    ...
    def getElementAt (self, *args, **kwargs)-> tuple :
      '''getElementAt( (MlineStyle)arg1, (int)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple getElementAt(class PyDbMlineStyle {lvalue},int)'''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def initMlineStyle (self, *args, **kwargs)-> None :
      '''initMlineStyle( (MlineStyle)arg1) -> None :

    C++ signature :
        void initMlineStyle(class PyDbMlineStyle {lvalue})'''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def name (self, *args, **kwargs)-> str :
      '''name( (MlineStyle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > name(class PyDbMlineStyle {lvalue})'''
    ...
    def numElements (self, *args, **kwargs)-> int :
      '''numElements( (MlineStyle)arg1) -> int :

    C++ signature :
        int numElements(class PyDbMlineStyle {lvalue})'''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeElementAt (self, *args, **kwargs)-> None :
      '''removeElementAt( (MlineStyle)arg1, (int)arg2) -> None :

    C++ signature :
        void removeElementAt(class PyDbMlineStyle {lvalue},int)'''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def set (self, *args, **kwargs)-> None :
      '''set( (MlineStyle)arg1, (MlineStyle)arg2) -> None :

    C++ signature :
        void set(class PyDbMlineStyle {lvalue},class PyDbMlineStyle)

set( (MlineStyle)arg1, (MlineStyle)arg2, (bool)arg3) -> None :

    C++ signature :
        void set(class PyDbMlineStyle {lvalue},class PyDbMlineStyle,bool)'''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setDescription (self, *args, **kwargs)-> None :
      '''setDescription( (MlineStyle)arg1, (str)arg2) -> None :

    C++ signature :
        void setDescription(class PyDbMlineStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setElement (self, *args, **kwargs)-> int :
      '''setElement( (MlineStyle)arg1, (float)arg2, (Color)arg3, (ObjectId)arg4) -> int :

    C++ signature :
        int setElement(class PyDbMlineStyle {lvalue},double,class AcCmColor,class PyDbObjectId {lvalue})'''
    ...
    def setEndAngle (self, *args, **kwargs)-> None :
      '''setEndAngle( (MlineStyle)arg1, (float)arg2) -> None :

    C++ signature :
        void setEndAngle(class PyDbMlineStyle {lvalue},double)'''
    ...
    def setEndInnerArcs (self, *args, **kwargs)-> None :
      '''setEndInnerArcs( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEndInnerArcs(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setEndRoundCap (self, *args, **kwargs)-> None :
      '''setEndRoundCap( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEndRoundCap(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setEndSquareCap (self, *args, **kwargs)-> None :
      '''setEndSquareCap( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEndSquareCap(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setFillColor (self, *args, **kwargs)-> None :
      '''setFillColor( (MlineStyle)arg1, (Color)arg2) -> None :

    C++ signature :
        void setFillColor(class PyDbMlineStyle {lvalue},class AcCmColor)'''
    ...
    def setFilled (self, *args, **kwargs)-> None :
      '''setFilled( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setFilled(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setName (self, *args, **kwargs)-> None :
      '''setName( (MlineStyle)arg1, (str)arg2) -> None :

    C++ signature :
        void setName(class PyDbMlineStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setShowMiters (self, *args, **kwargs)-> None :
      '''setShowMiters( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShowMiters(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setStartAngle (self, *args, **kwargs)-> None :
      '''setStartAngle( (MlineStyle)arg1, (float)arg2) -> None :

    C++ signature :
        void setStartAngle(class PyDbMlineStyle {lvalue},double)'''
    ...
    def setStartInnerArcs (self, *args, **kwargs)-> None :
      '''setStartInnerArcs( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setStartInnerArcs(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setStartRoundCap (self, *args, **kwargs)-> None :
      '''setStartRoundCap( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setStartRoundCap(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setStartSquareCap (self, *args, **kwargs)-> None :
      '''setStartSquareCap( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setStartSquareCap(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def showMiters (self, *args, **kwargs)-> bool :
      '''showMiters( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool showMiters(class PyDbMlineStyle {lvalue})'''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def startAngle (self, *args, **kwargs)-> float :
      '''startAngle( (MlineStyle)arg1) -> float :

    C++ signature :
        double startAngle(class PyDbMlineStyle {lvalue})'''
    ...
    def startInnerArcs (self, *args, **kwargs)-> bool :
      '''startInnerArcs( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool startInnerArcs(class PyDbMlineStyle {lvalue})'''
    ...
    def startRoundCap (self, *args, **kwargs)-> bool :
      '''startRoundCap( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool startRoundCap(class PyDbMlineStyle {lvalue})'''
    ...
    def startSquareCap (self, *args, **kwargs)-> bool :
      '''startSquareCap( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool startSquareCap(class PyDbMlineStyle {lvalue})'''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class NurbSurface:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.NurbSurface :
      '''cast( (RxObject)arg1) -> NurbSurface :

    C++ signature :
        class PyDbNurbSurface cast(class PyRxObject)'''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.NurbSurface :
      '''cloneFrom( (RxObject)arg1) -> NurbSurface :

    C++ signature :
        class PyDbNurbSurface cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def createExtrudedSurface (self, *args, **kwargs)-> PyDb.ExtrudedSurface :
      '''createExtrudedSurface( (Profile3d)arg1, (Vector3d)arg2, (SweepOptions)arg3) -> ExtrudedSurface :

    C++ signature :
        class PyDbExtrudedSurface createExtrudedSurface(class PyDb3dProfile {lvalue},class AcGeVector3d,class PyDbSweepOptions {lvalue})'''
    ...
    def createFrom (self, *args, **kwargs)-> PyDb.Surface :
      '''createFrom( (Entity)arg1) -> Surface :

    C++ signature :
        class PyDbSurface createFrom(class PyDbEntity)'''
    ...
    def creationActionBodyId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''creationActionBodyId( (Surface)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId creationActionBodyId(class PyDbSurface {lvalue})'''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extendEdges (self, *args, **kwargs)-> None :
      '''extendEdges( (Surface)arg1, (list)arg2, (float)arg3, (SurfaceEdgeExtensionType)arg4, (bool)arg5) -> None :

    C++ signature :
        void extendEdges(class PyDbSurface {lvalue},class boost::python::list {lvalue},double,enum AcDbSurface::EdgeExtensionType,bool)'''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getArea (self, *args, **kwargs)-> float :
      '''getArea( (Surface)arg1) -> float :

    C++ signature :
        double getArea(class PyDbSurface {lvalue})'''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPerimeter (self, *args, **kwargs)-> float :
      '''getPerimeter( (Surface)arg1) -> float :

    C++ signature :
        double getPerimeter(class PyDbSurface {lvalue})'''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def getWireframeType (self, *args, **kwargs)-> PyDb.SurfaceWireframeType :
      '''getWireframeType( (Surface)arg1) -> SurfaceWireframeType :

    C++ signature :
        enum AcDbSurface::WireframeType getWireframeType(class PyDbSurface {lvalue})'''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def modificationActionBodyIds (self, *args, **kwargs)-> list :
      '''modificationActionBodyIds( (Surface)arg1) -> list :

    C++ signature :
        class boost::python::list modificationActionBodyIds(class PyDbSurface {lvalue})'''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def projectOnToSurface (self, *args, **kwargs)-> list :
      '''projectOnToSurface( (Surface)arg1, (Entity)arg2, (Vector3d)arg3) -> list :

    C++ signature :
        class boost::python::list projectOnToSurface(class PyDbSurface {lvalue},class PyDbEntity,class AcGeVector3d)'''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def rayTest (self, *args, **kwargs)-> tuple :
      '''rayTest( (Surface)arg1, (Point3d)arg2, (Vector3d)arg3, (float)arg4) -> tuple :

    C++ signature :
        class boost::python::tuple rayTest(class PyDbSurface {lvalue},class AcGePoint3d,class AcGeVector3d,double)'''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setUIsolineDensity (self, *args, **kwargs)-> None :
      '''setUIsolineDensity( (Surface)arg1, (int)arg2) -> None :

    C++ signature :
        void setUIsolineDensity(class PyDbSurface {lvalue},unsigned short)'''
    ...
    def setVIsolineDensity (self, *args, **kwargs)-> None :
      '''setVIsolineDensity( (Surface)arg1, (int)arg2) -> None :

    C++ signature :
        void setVIsolineDensity(class PyDbSurface {lvalue},unsigned short)'''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setWireframeType (self, *args, **kwargs)-> None :
      '''setWireframeType( (Surface)arg1, (SurfaceWireframeType)arg2) -> None :

    C++ signature :
        void setWireframeType(class PyDbSurface {lvalue},enum AcDbSurface::WireframeType)'''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def uIsolineDensity (self, *args, **kwargs)-> int :
      '''uIsolineDensity( (Surface)arg1) -> int :

    C++ signature :
        unsigned short uIsolineDensity(class PyDbSurface {lvalue})'''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def vIsolineDensity (self, *args, **kwargs)-> int :
      '''vIsolineDensity( (Surface)arg1) -> int :

    C++ signature :
        unsigned short vIsolineDensity(class PyDbSurface {lvalue})'''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class ObjectContext:
    def __init__ (self, *args, **kwargs)-> None :
      '''Raises an exception
This class cannot be instantiated from Python'''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def collectionName (self: ObjectContext)-> str :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def getName (self: ObjectContext)-> str :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def setName (self: ObjectContext,name : str)-> None :
      '''                             '''
    ...
    def uniqueIdentifier (self: ObjectContext)-> int :
      '''                             '''
    ...

class ObjectContextCollection:
    def __init__ (self, *args, **kwargs)-> None :
      '''Raises an exception
This class cannot be instantiated from Python'''
    ...
    def addContext (self: ObjectContextCollection,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def currentContext (self: ObjectContextCollection,obj : PyDb.Object)-> PyDb.ObjectContext :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def getContext (self: ObjectContextCollection,name : str)-> PyDb.ObjectContext :
      '''                             '''
    ...
    def hasContext (self: ObjectContextCollection,name : str)-> bool :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def lockContext (self: ObjectContextCollection,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def locked (self, *args, **kwargs)-> bool :
      '''locked( (ObjectContextCollection)arg1) -> bool :

    C++ signature :
        bool locked(class PyDbObjectContextCollection {lvalue})'''
    ...
    def name (self: ObjectContextCollection)-> str :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def removeContext (self: ObjectContextCollection,name : str)-> None :
      '''                             '''
    ...
    def setCurrentContext (self: ObjectContextCollection,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def toList (self: ObjectContextCollection,desc:PyRx.RxClass=PyDb.ObjectContext)-> list :
      '''                             '''
    ...
    def unlockContext (self, *args, **kwargs)-> None :
      '''unlockContext( (ObjectContextCollection)arg1) -> None :

    C++ signature :
        void unlockContext(class PyDbObjectContextCollection {lvalue})'''
    ...

class ObjectContextManager:
    def __init__ (self, *args, **kwargs)-> None :
      '''Raises an exception
This class cannot be instantiated from Python'''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def contextCollection (self: ObjectContextManager,name : str)-> PyDb.ObjectContextCollection :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def registerContextCollection (self: ObjectContextManager,name : str,name : PyDb.ObjectContextCollection)-> None :
      '''                             '''
    ...
    def unregisterContextCollection (self: ObjectContextManager,name : str)-> None :
      '''                             '''
    ...

class ObjectId:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def asOldId (self: ObjectId)-> int :
      '''                             '''
    ...
    def convertToRedirectedId (self: ObjectId)-> bool :
      '''                             '''
    ...
    def database (self: ObjectId)-> PyDb.Database :
      '''                             '''
    ...

    @staticmethod
    def fromOldId (oldid : int)-> PyDb.ObjectId :
      '''                             '''
    ...
    def handle (self: ObjectId)-> PyDb.Handle :
      '''                             '''
    ...
    def isDerivedFrom (self: ObjectId,desc : PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isEffectivelyErased (self: ObjectId)-> bool :
      '''                             '''
    ...
    def isErased (self: ObjectId)-> bool :
      '''                             '''
    ...
    def isNull (self: ObjectId)-> bool :
      '''                             '''
    ...
    def isResident (self: ObjectId)-> bool :
      '''                             '''
    ...
    def isValid (self: ObjectId)-> bool :
      '''                             '''
    ...
    def isWellBehaved (self: ObjectId)-> bool :
      '''                             '''
    ...
    def nonForwardedHandle (self: ObjectId)-> PyDb.Handle :
      '''                             '''
    ...
    def objectClass (self: ObjectId)-> PyRx.RxClass :
      '''                             '''
    ...
    def objectLeftOnDisk (self: ObjectId)-> bool :
      '''                             '''
    ...
    def originalDatabase (self: ObjectId)-> PyDb.Database :
      '''                             '''
    ...
    def setFromOldId (self: ObjectId,oldid : int)-> None :
      '''                             '''
    ...

class OpenMode:
    def ForNotify (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ForRead (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ForWrite (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kForNotify (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kForRead (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kForWrite (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class OrdinateDimension:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (bool)arg2, (Point3d)arg3, (Point3d)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,bool,class AcGePoint3d,class AcGePoint3d)

__init__( (object)arg1, (bool)arg2, (Point3d)arg3, (Point3d)arg4, (str)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,bool,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (bool)arg2, (Point3d)arg3, (Point3d)arg4, (str)arg5, (ObjectId)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,bool,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def altSuppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altSuppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altSuppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def altSuppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def alternatePrefix (self: Dimension)-> str :
      '''                             '''
    ...
    def alternateSuffix (self: Dimension)-> str :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockTransform (self: Dimension)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.OrdinateDimension :
      '''cast( (RxObject)arg1) -> OrdinateDimension :

    C++ signature :
        class PyDbOrdinateDimension cast(class PyRxObject)'''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def centerMarkSize (self: Dimension)-> float :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.OrdinateDimension :
      '''cloneFrom( (RxObject)arg1) -> OrdinateDimension :

    C++ signature :
        class PyDbOrdinateDimension cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def definingPoint (self, *args, **kwargs)-> PyGe.Point3d :
      '''definingPoint( (OrdinateDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d definingPoint(class PyDbOrdinateDimension {lvalue})'''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimBlockPosition (self: Dimension)-> PyGe.Point3d :
      '''                             '''
    ...
    def dimExt1Linetype (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimExt2Linetype (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimLineLinetype (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimensionStyle (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimensionText (self: Dimension)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevation (self: Dimension)-> float :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def fieldFromMText (self: Dimension,ref : PyDb.MText)-> None :
      '''                             '''
    ...
    def fieldToMText (self: Dimension,ref : PyDb.MText)-> None :
      '''                             '''
    ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self: Dimension)-> None :
      '''                             '''
    ...
    def getArrowFirstIsFlipped (self: Dimension)-> bool :
      '''                             '''
    ...
    def getArrowSecondIsFlipped (self: Dimension)-> bool :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDimstyleData (self: Dimension)-> PyDb.DimStyleTableRecord :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def horizontalRotation (self: Dimension)-> float :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def inspection (self: Dimension)-> bool :
      '''                             '''
    ...
    def inspectionFrame (self: Dimension)-> int :
      '''                             '''
    ...
    def inspectionLabel (self: Dimension)-> str :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self: Dimension)-> bool :
      '''                             '''
    ...
    def isConstraintObject (self: Dimension)-> tuple :
      '''                             '''
    ...
    def isDynamicDimension (self: Dimension)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self: Dimension)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self: Dimension)-> bool :
      '''                             '''
    ...
    def isUsingXAxis (self, *args, **kwargs)-> bool :
      '''isUsingXAxis( (OrdinateDimension)arg1) -> bool :

    C++ signature :
        bool isUsingXAxis(class PyDbOrdinateDimension {lvalue})'''
    ...
    def isUsingYAxis (self, *args, **kwargs)-> bool :
      '''isUsingYAxis( (OrdinateDimension)arg1) -> bool :

    C++ signature :
        bool isUsingYAxis(class PyDbOrdinateDimension {lvalue})'''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def leaderEndPoint (self, *args, **kwargs)-> PyGe.Point3d :
      '''leaderEndPoint( (OrdinateDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d leaderEndPoint(class PyDbOrdinateDimension {lvalue})'''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def measurement (self: Dimension)-> float :
      '''                             '''
    ...
    def normal (self: Dimension)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def origin (self, *args, **kwargs)-> PyGe.Point3d :
      '''origin( (OrdinateDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d origin(class PyDbOrdinateDimension {lvalue})'''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def prefix (self: Dimension)-> str :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recomputeDimBlock (self: Dimension,force : bool=False)-> None :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def removeTextField (self: Dimension)-> None :
      '''                             '''
    ...
    def resetTextDefinedSize (self: Dimension)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAltSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAlternatePrefix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setAlternateSuffix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setArrowFirstIsFlipped (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setArrowSecondIsFlipped (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setConstraintDynamic (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDefiningPoint (self, *args, **kwargs)-> None :
      '''setDefiningPoint( (OrdinateDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setDefiningPoint(class PyDbOrdinateDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimBlockId (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimBlockPosition (self: Dimension,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setDimExt1Linetype (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimExt2Linetype (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimLineLinetype (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimensionStyle (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimensionText (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setDimstyleData (self, *args, **kwargs)-> None :
      '''setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setElevation (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setHorizontalRefTextRotation (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setHorizontalRotation (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setInspection (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setInspectionFrame (self: Dimension,val : int)-> None :
      '''                             '''
    ...
    def setInspectionLabel (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLeaderEndPoint (self, *args, **kwargs)-> None :
      '''setLeaderEndPoint( (OrdinateDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setLeaderEndPoint(class PyDbOrdinateDimension {lvalue},class AcGePoint3d)'''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self: Dimension,val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOrigin (self, *args, **kwargs)-> None :
      '''setOrigin( (OrdinateDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setOrigin(class PyDbOrdinateDimension {lvalue},class AcGePoint3d)'''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setShouldParticipateInOPM (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuffix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setSuppressAngularTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setTextAttachment (self: Dimension,val : PyDb.MTextAttachmentPoint)-> None :
      '''                             '''
    ...
    def setTextDefinedSize (self: Dimension,width : float,height : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingFactor (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingStyle (self: Dimension,val : PyDb.LineSpacingStyle)-> None :
      '''                             '''
    ...
    def setTextPosition (self: Dimension,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setTextRotation (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setToleranceSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setUsingDefaultTextPosition (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setUsingXAxis (self, *args, **kwargs)-> None :
      '''setUsingXAxis( (OrdinateDimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setUsingXAxis(class PyDbOrdinateDimension {lvalue},bool)'''
    ...
    def setUsingYAxis (self, *args, **kwargs)-> None :
      '''setUsingYAxis( (OrdinateDimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setUsingYAxis(class PyDbOrdinateDimension {lvalue},bool)'''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def shouldParticipateInOPM (self: Dimension)-> bool :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def suffix (self: Dimension)-> str :
      '''                             '''
    ...
    def suppressAngularLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressAngularTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAttachment (self: Dimension)-> PyDb.MTextAttachmentPoint :
      '''                             '''
    ...
    def textDefinedSize (self: Dimension)-> tuple :
      '''                             '''
    ...
    def textLineSpacingFactor (self: Dimension)-> float :
      '''                             '''
    ...
    def textLineSpacingStyle (self: Dimension)-> PyDb.LineSpacingStyle :
      '''                             '''
    ...
    def textPosition (self: Dimension)-> PyGe.Point3d :
      '''                             '''
    ...
    def textRotation (self: Dimension)-> float :
      '''                             '''
    ...
    def toleranceSuppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def toleranceSuppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def useDefaultTextPosition (self: Dimension)-> None :
      '''                             '''
    ...
    def useSetTextPosition (self: Dimension)-> None :
      '''                             '''
    ...
    def useXAxis (self, *args, **kwargs)-> None :
      '''useXAxis( (OrdinateDimension)arg1) -> None :

    C++ signature :
        void useXAxis(class PyDbOrdinateDimension {lvalue})'''
    ...
    def useYAxis (self, *args, **kwargs)-> None :
      '''useYAxis( (OrdinateDimension)arg1) -> None :

    C++ signature :
        void useYAxis(class PyDbOrdinateDimension {lvalue})'''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class OrthographicView:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kBackView (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBottomView (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kFrontView (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLeftView (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNonOrthoView (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kRightView (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTopView (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class OsnapMask:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kOsMaskAllowTan (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsMaskApint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsMaskCen (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsMaskCentroid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsMaskDisablePerp (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsMaskEnd (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsMaskImmediate (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsMaskIns (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsMaskInt (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsMaskMid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsMaskNear (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsMaskNode (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsMaskNoneOverride (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsMaskPerp (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsMaskQuad (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsMaskQuick (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsMaskRelCartesian (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsMaskRelPolar (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsMaskTan (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class OsnapMode:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kOsModeCen (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsModeCentroid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsModeEnd (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsModeIns (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsModeMid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsModeNear (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsModeNode (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsModePerp (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsModeQuad (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsModeTan (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class OsnapPointRef:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d)'''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def osnapType (self, *args, **kwargs)-> PyDb.OsnapType :
      '''osnapType( (OsnapPointRef)arg1) -> OsnapType :

    C++ signature :
        enum AcDbPointRef::OsnapType osnapType(class PyDbOsnapPointRef {lvalue})'''
    ...
    def point (self, *args, **kwargs)-> PyGe.Point3d :
      '''point( (OsnapPointRef)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d point(class PyDbOsnapPointRef {lvalue})'''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def setIdPath (self, *args, **kwargs)-> None :
      '''setIdPath( (OsnapPointRef)arg1, (ObjectId)arg2, (SubentType)arg3, (int)arg4) -> None :

    C++ signature :
        void setIdPath(class PyDbOsnapPointRef {lvalue},class PyDbObjectId {lvalue},unsigned int,__int64)'''
    ...
    def setOsnapType (self, *args, **kwargs)-> None :
      '''setOsnapType( (OsnapPointRef)arg1, (OsnapType)arg2) -> None :

    C++ signature :
        void setOsnapType(class PyDbOsnapPointRef {lvalue},enum AcDbPointRef::OsnapType)'''
    ...
    def setPoint (self, *args, **kwargs)-> None :
      '''setPoint( (OsnapPointRef)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setPoint(class PyDbOsnapPointRef {lvalue},class AcGePoint3d)'''
    ...

class OsnapType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kOsnapApint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsnapCen (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsnapEnd (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsnapIns (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsnapInt (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsnapMid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsnapNear (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsnapNode (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsnapNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsnapPerp (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsnapQuad (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsnapStart (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsnapTan (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class PdfDefinition:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.UnderlayDefinition :
      '''cast( (RxObject)arg1) -> UnderlayDefinition :

    C++ signature :
        class PyDbUnderlayDefinition cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.UnderlayDefinition :
      '''cloneFrom( (RxObject)arg1) -> UnderlayDefinition :

    C++ signature :
        class PyDbUnderlayDefinition cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...

    @staticmethod
    def dictionaryKey (underlayDefinitionType: PyRx.RxClass)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getActiveFileName (self: UnderlayDefinition)-> str :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getItemName (self: UnderlayDefinition)-> str :
      '''                             '''
    ...
    def getSourceFileName (self: UnderlayDefinition)-> str :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isLoaded (self: UnderlayDefinition)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def load (self: UnderlayDefinition,passwd : str=None)-> None :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setItemName (self: UnderlayDefinition,item : str)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setSourceFileName (self: UnderlayDefinition,file : str)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def unload (self: UnderlayDefinition)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class PdfReference:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.PdfReference :
      '''cast( (RxObject)arg1) -> PdfReference :

    C++ signature :
        class PyDbPdfReference cast(class PyRxObject)'''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def clipBoundary (self: UnderlayReference)-> list :
      '''                             '''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.PdfReference :
      '''cloneFrom( (RxObject)arg1) -> PdfReference :

    C++ signature :
        class PyDbPdfReference cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def contrast (self: UnderlayReference)-> int :
      '''                             '''
    ...

    @staticmethod
    def contrastDefault ()-> int :
      '''                             '''
    ...

    @staticmethod
    def contrastLowerLimit ()-> int :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def definitionId (self: UnderlayReference)-> PyDb.ObjectId :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def fade (self: UnderlayReference)-> int :
      '''                             '''
    ...

    @staticmethod
    def fadeDefault ()-> int :
      '''                             '''
    ...

    @staticmethod
    def fadeLowerLimit ()-> int :
      '''                             '''
    ...

    @staticmethod
    def fadeUpperLimit ()-> int :
      '''                             '''
    ...
    def generateClipBoundaryFromPline (self: UnderlayReference,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def getUnderlayLayer (self: UnderlayReference,val : int)-> PyDb.UnderlayLayer :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def height (self: UnderlayReference)-> float :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAdjustedForBackground (self: UnderlayReference)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isClipInverted (self: UnderlayReference)-> bool :
      '''                             '''
    ...
    def isClipped (self: UnderlayReference)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isFramePlottable (self: UnderlayReference)-> bool :
      '''                             '''
    ...
    def isFrameVisible (self: UnderlayReference)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isMonochrome (self: UnderlayReference)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isOn (self: UnderlayReference)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def normal (self: UnderlayReference)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def position (self: UnderlayReference)-> PyGe.Point3d :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self: UnderlayReference)-> float :
      '''                             '''
    ...
    def scaleFactors (self: UnderlayReference)-> PyGe.Scale3d :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setClipBoundary (self: UnderlayReference,pnts : List[PyGe.Point2d])-> None :
      '''                             '''
    ...
    def setClipInverted (self: UnderlayReference,val : bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setContrast (self: UnderlayReference,val : int)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDefinitionId (self: UnderlayReference,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setFade (self: UnderlayReference,val : int)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setHeight (self: UnderlayReference,val : float)-> None :
      '''                             '''
    ...
    def setIsAdjustedForBackground (self: UnderlayReference,val : bool)-> None :
      '''                             '''
    ...
    def setIsClipped (self: UnderlayReference,val : bool)-> None :
      '''                             '''
    ...
    def setIsMonochrome (self: UnderlayReference,val : bool)-> None :
      '''                             '''
    ...
    def setIsOn (self: UnderlayReference,val : bool)-> None :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self: UnderlayReference,val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self: UnderlayReference,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setRotation (self: UnderlayReference,val : float)-> None :
      '''                             '''
    ...
    def setScaleFactors (self: UnderlayReference,val : PyGe.Scale3d)-> None :
      '''                             '''
    ...
    def setTransform (self: UnderlayReference,val : PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def setUnderlayLayer (self: UnderlayReference,val : int,layer : PyDb.UnderlayLayer)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setWidth (self: UnderlayReference,val : float)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transform (self: UnderlayReference)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def underlayLayerCount (self: UnderlayReference)-> int :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def width (self: UnderlayReference)-> float :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class Planarity:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kLinear (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNonPlanar (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPlanar (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class PlaneSurface:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.PlaneSurface :
      '''cast( (RxObject)arg1) -> PlaneSurface :

    C++ signature :
        class PyDbPlaneSurface cast(class PyRxObject)'''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.PlaneSurface :
      '''cloneFrom( (RxObject)arg1) -> PlaneSurface :

    C++ signature :
        class PyDbPlaneSurface cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def createExtrudedSurface (self, *args, **kwargs)-> PyDb.ExtrudedSurface :
      '''createExtrudedSurface( (Profile3d)arg1, (Vector3d)arg2, (SweepOptions)arg3) -> ExtrudedSurface :

    C++ signature :
        class PyDbExtrudedSurface createExtrudedSurface(class PyDb3dProfile {lvalue},class AcGeVector3d,class PyDbSweepOptions {lvalue})'''
    ...
    def createFrom (self, *args, **kwargs)-> PyDb.Surface :
      '''createFrom( (Entity)arg1) -> Surface :

    C++ signature :
        class PyDbSurface createFrom(class PyDbEntity)'''
    ...
    def creationActionBodyId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''creationActionBodyId( (Surface)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId creationActionBodyId(class PyDbSurface {lvalue})'''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extendEdges (self, *args, **kwargs)-> None :
      '''extendEdges( (Surface)arg1, (list)arg2, (float)arg3, (SurfaceEdgeExtensionType)arg4, (bool)arg5) -> None :

    C++ signature :
        void extendEdges(class PyDbSurface {lvalue},class boost::python::list {lvalue},double,enum AcDbSurface::EdgeExtensionType,bool)'''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getArea (self, *args, **kwargs)-> float :
      '''getArea( (Surface)arg1) -> float :

    C++ signature :
        double getArea(class PyDbSurface {lvalue})'''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPerimeter (self, *args, **kwargs)-> float :
      '''getPerimeter( (Surface)arg1) -> float :

    C++ signature :
        double getPerimeter(class PyDbSurface {lvalue})'''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def getWireframeType (self, *args, **kwargs)-> PyDb.SurfaceWireframeType :
      '''getWireframeType( (Surface)arg1) -> SurfaceWireframeType :

    C++ signature :
        enum AcDbSurface::WireframeType getWireframeType(class PyDbSurface {lvalue})'''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def modificationActionBodyIds (self, *args, **kwargs)-> list :
      '''modificationActionBodyIds( (Surface)arg1) -> list :

    C++ signature :
        class boost::python::list modificationActionBodyIds(class PyDbSurface {lvalue})'''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def projectOnToSurface (self, *args, **kwargs)-> list :
      '''projectOnToSurface( (Surface)arg1, (Entity)arg2, (Vector3d)arg3) -> list :

    C++ signature :
        class boost::python::list projectOnToSurface(class PyDbSurface {lvalue},class PyDbEntity,class AcGeVector3d)'''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def rayTest (self, *args, **kwargs)-> tuple :
      '''rayTest( (Surface)arg1, (Point3d)arg2, (Vector3d)arg3, (float)arg4) -> tuple :

    C++ signature :
        class boost::python::tuple rayTest(class PyDbSurface {lvalue},class AcGePoint3d,class AcGeVector3d,double)'''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setUIsolineDensity (self, *args, **kwargs)-> None :
      '''setUIsolineDensity( (Surface)arg1, (int)arg2) -> None :

    C++ signature :
        void setUIsolineDensity(class PyDbSurface {lvalue},unsigned short)'''
    ...
    def setVIsolineDensity (self, *args, **kwargs)-> None :
      '''setVIsolineDensity( (Surface)arg1, (int)arg2) -> None :

    C++ signature :
        void setVIsolineDensity(class PyDbSurface {lvalue},unsigned short)'''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setWireframeType (self, *args, **kwargs)-> None :
      '''setWireframeType( (Surface)arg1, (SurfaceWireframeType)arg2) -> None :

    C++ signature :
        void setWireframeType(class PyDbSurface {lvalue},enum AcDbSurface::WireframeType)'''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def uIsolineDensity (self, *args, **kwargs)-> int :
      '''uIsolineDensity( (Surface)arg1) -> int :

    C++ signature :
        unsigned short uIsolineDensity(class PyDbSurface {lvalue})'''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def vIsolineDensity (self, *args, **kwargs)-> int :
      '''vIsolineDensity( (Surface)arg1) -> int :

    C++ signature :
        unsigned short vIsolineDensity(class PyDbSurface {lvalue})'''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class PlotPaperUnits:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kInches (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMillimeters (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPixels (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class PlotRotation:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def k0degrees (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k180degrees (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k270degrees (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k90degrees (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class PlotSettings:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (bool)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,bool)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def addToPlotSettingsDict (self, *args, **kwargs)-> None :
      '''addToPlotSettingsDict( (PlotSettings)arg1, (Database)arg2) -> None :

    C++ signature :
        void addToPlotSettingsDict(class PyDbPlotSettings {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.PlotSettings :
      '''cast( (RxObject)arg1) -> PlotSettings :

    C++ signature :
        class PyDbPlotSettings cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.PlotSettings :
      '''cloneFrom( (RxObject)arg1) -> PlotSettings :

    C++ signature :
        class PyDbPlotSettings cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawViewportsFirst (self, *args, **kwargs)-> bool :
      '''drawViewportsFirst( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool drawViewportsFirst(class PyDbPlotSettings {lvalue})'''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getCanonicalMediaName (self, *args, **kwargs)-> str :
      '''getCanonicalMediaName( (PlotSettings)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getCanonicalMediaName(class PyDbPlotSettings {lvalue})'''
    ...
    def getCurrentStyleSheet (self, *args, **kwargs)-> str :
      '''getCurrentStyleSheet( (PlotSettings)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getCurrentStyleSheet(class PyDbPlotSettings {lvalue})'''
    ...
    def getCustomPrintScale (self, *args, **kwargs)-> tuple :
      '''getCustomPrintScale( (PlotSettings)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getCustomPrintScale(class PyDbPlotSettings {lvalue})'''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlotCfgName (self, *args, **kwargs)-> str :
      '''getPlotCfgName( (PlotSettings)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getPlotCfgName(class PyDbPlotSettings {lvalue})'''
    ...
    def getPlotOrigin (self, *args, **kwargs)-> tuple :
      '''getPlotOrigin( (PlotSettings)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getPlotOrigin(class PyDbPlotSettings {lvalue})'''
    ...
    def getPlotPaperMargins (self, *args, **kwargs)-> tuple :
      '''getPlotPaperMargins( (PlotSettings)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getPlotPaperMargins(class PyDbPlotSettings {lvalue})'''
    ...
    def getPlotPaperSize (self, *args, **kwargs)-> tuple :
      '''getPlotPaperSize( (PlotSettings)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getPlotPaperSize(class PyDbPlotSettings {lvalue})'''
    ...
    def getPlotSettingsName (self, *args, **kwargs)-> str :
      '''getPlotSettingsName( (PlotSettings)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getPlotSettingsName(class PyDbPlotSettings {lvalue})'''
    ...
    def getPlotViewName (self, *args, **kwargs)-> str :
      '''getPlotViewName( (PlotSettings)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getPlotViewName(class PyDbPlotSettings {lvalue})'''
    ...
    def getPlotWindowArea (self, *args, **kwargs)-> tuple :
      '''getPlotWindowArea( (PlotSettings)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getPlotWindowArea(class PyDbPlotSettings {lvalue})'''
    ...
    def getStdScale (self, *args, **kwargs)-> float :
      '''getStdScale( (PlotSettings)arg1) -> float :

    C++ signature :
        double getStdScale(class PyDbPlotSettings {lvalue})'''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def modelType (self, *args, **kwargs)-> bool :
      '''modelType( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool modelType(class PyDbPlotSettings {lvalue})'''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotAsRaster (self, *args, **kwargs)-> bool :
      '''plotAsRaster( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotAsRaster(class PyDbPlotSettings {lvalue})'''
    ...
    def plotCentered (self, *args, **kwargs)-> bool :
      '''plotCentered( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotCentered(class PyDbPlotSettings {lvalue})'''
    ...
    def plotHidden (self, *args, **kwargs)-> bool :
      '''plotHidden( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotHidden(class PyDbPlotSettings {lvalue})'''
    ...
    def plotPaperUnits (self, *args, **kwargs)-> PyDb.PlotPaperUnits :
      '''plotPaperUnits( (PlotSettings)arg1) -> PlotPaperUnits :

    C++ signature :
        enum AcDbPlotSettings::PlotPaperUnits plotPaperUnits(class PyDbPlotSettings {lvalue})'''
    ...
    def plotPlotStyles (self, *args, **kwargs)-> bool :
      '''plotPlotStyles( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotPlotStyles(class PyDbPlotSettings {lvalue})'''
    ...
    def plotRotation (self, *args, **kwargs)-> PyDb.PlotRotation :
      '''plotRotation( (PlotSettings)arg1) -> PlotRotation :

    C++ signature :
        enum AcDbPlotSettings::PlotRotation plotRotation(class PyDbPlotSettings {lvalue})'''
    ...
    def plotTransparency (self, *args, **kwargs)-> bool :
      '''plotTransparency( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotTransparency(class PyDbPlotSettings {lvalue})'''
    ...
    def plotType (self, *args, **kwargs)-> PyDb.PlotType :
      '''plotType( (PlotSettings)arg1) -> PlotType :

    C++ signature :
        enum AcDbPlotSettings::PlotType plotType(class PyDbPlotSettings {lvalue})'''
    ...
    def plotViewportBorders (self, *args, **kwargs)-> bool :
      '''plotViewportBorders( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotViewportBorders(class PyDbPlotSettings {lvalue})'''
    ...
    def plotWireframe (self, *args, **kwargs)-> bool :
      '''plotWireframe( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotWireframe(class PyDbPlotSettings {lvalue})'''
    ...
    def printLineweights (self, *args, **kwargs)-> bool :
      '''printLineweights( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool printLineweights(class PyDbPlotSettings {lvalue})'''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def scaleLineweights (self, *args, **kwargs)-> bool :
      '''scaleLineweights( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool scaleLineweights(class PyDbPlotSettings {lvalue})'''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setDrawViewportsFirst (self, *args, **kwargs)-> None :
      '''setDrawViewportsFirst( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setDrawViewportsFirst(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotHidden (self, *args, **kwargs)-> None :
      '''setPlotHidden( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPlotHidden(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setPlotPlotStyles (self, *args, **kwargs)-> None :
      '''setPlotPlotStyles( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPlotPlotStyles(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setPlotSettingsName (self, *args, **kwargs)-> None :
      '''setPlotSettingsName( (PlotSettings)arg1, (str)arg2) -> None :

    C++ signature :
        void setPlotSettingsName(class PyDbPlotSettings {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPlotTransparency (self, *args, **kwargs)-> None :
      '''setPlotTransparency( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPlotTransparency(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setPlotViewportBorders (self, *args, **kwargs)-> None :
      '''setPlotViewportBorders( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPlotViewportBorders(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setPrintLineweights (self, *args, **kwargs)-> None :
      '''setPrintLineweights( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPrintLineweights(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setScaleLineweights (self, *args, **kwargs)-> None :
      '''setScaleLineweights( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setScaleLineweights(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setShadePlot (self, *args, **kwargs)-> None :
      '''setShadePlot( (PlotSettings)arg1, (ShadePlotType)arg2) -> None :

    C++ signature :
        void setShadePlot(class PyDbPlotSettings {lvalue},enum AcDbPlotSettings::ShadePlotType)

setShadePlot( (PlotSettings)arg1, (ShadePlotType)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void setShadePlot(class PyDbPlotSettings {lvalue},enum AcDbPlotSettings::ShadePlotType,class PyDbObjectId)'''
    ...
    def setShadePlotCustomDPI (self, *args, **kwargs)-> None :
      '''setShadePlotCustomDPI( (PlotSettings)arg1, (DxfCode)arg2) -> None :

    C++ signature :
        void setShadePlotCustomDPI(class PyDbPlotSettings {lvalue},short)'''
    ...
    def setShadePlotResLevel (self, *args, **kwargs)-> None :
      '''setShadePlotResLevel( (PlotSettings)arg1, (ShadePlotResLevel)arg2) -> None :

    C++ signature :
        void setShadePlotResLevel(class PyDbPlotSettings {lvalue},enum AcDbPlotSettings::ShadePlotResLevel)'''
    ...
    def setShowPlotStyles (self, *args, **kwargs)-> None :
      '''setShowPlotStyles( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShowPlotStyles(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def shadePlot (self, *args, **kwargs)-> PyDb.ShadePlotType :
      '''shadePlot( (PlotSettings)arg1) -> ShadePlotType :

    C++ signature :
        enum AcDbPlotSettings::ShadePlotType shadePlot(class PyDbPlotSettings {lvalue})'''
    ...
    def shadePlotCustomDPI (self, *args, **kwargs)-> int :
      '''shadePlotCustomDPI( (PlotSettings)arg1) -> int :

    C++ signature :
        short shadePlotCustomDPI(class PyDbPlotSettings {lvalue})'''
    ...
    def shadePlotId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''shadePlotId( (PlotSettings)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId shadePlotId(class PyDbPlotSettings {lvalue})'''
    ...
    def shadePlotResLevel (self, *args, **kwargs)-> PyDb.ShadePlotResLevel :
      '''shadePlotResLevel( (PlotSettings)arg1) -> ShadePlotResLevel :

    C++ signature :
        enum AcDbPlotSettings::ShadePlotResLevel shadePlotResLevel(class PyDbPlotSettings {lvalue})'''
    ...
    def showPlotStyles (self, *args, **kwargs)-> bool :
      '''showPlotStyles( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool showPlotStyles(class PyDbPlotSettings {lvalue})'''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def stdScaleType (self, *args, **kwargs)-> PyDb.StdScaleType :
      '''stdScaleType( (PlotSettings)arg1) -> StdScaleType :

    C++ signature :
        enum AcDbPlotSettings::StdScaleType stdScaleType(class PyDbPlotSettings {lvalue})'''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def useStandardScale (self, *args, **kwargs)-> bool :
      '''useStandardScale( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool useStandardScale(class PyDbPlotSettings {lvalue})'''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class PlotSettingsValidator:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def canonicalMediaNameList (self, *args, **kwargs)-> list :
      '''canonicalMediaNameList( (PlotSettingsValidator)arg1, (PlotSettings)arg2) -> list :

    C++ signature :
        class boost::python::list canonicalMediaNameList(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue})'''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def getLocaleMediaName (self, *args, **kwargs)-> str :
      '''getLocaleMediaName( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getLocaleMediaName(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

getLocaleMediaName( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (int)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getLocaleMediaName(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},int)'''
    ...
    def plotDeviceList (self, *args, **kwargs)-> list :
      '''plotDeviceList( (PlotSettingsValidator)arg1) -> list :

    C++ signature :
        class boost::python::list plotDeviceList(class PyDbPlotSettingsValidator {lvalue})'''
    ...
    def plotStyleSheetList (self, *args, **kwargs)-> list :
      '''plotStyleSheetList( (PlotSettingsValidator)arg1) -> list :

    C++ signature :
        class boost::python::list plotStyleSheetList(class PyDbPlotSettingsValidator {lvalue})'''
    ...
    def setCanonicalMediaName (self, *args, **kwargs)-> None :
      '''setCanonicalMediaName( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (str)arg3) -> None :

    C++ signature :
        void setCanonicalMediaName(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setClosestMediaName (self, *args, **kwargs)-> None :
      '''setClosestMediaName( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (float)arg3, (float)arg4, (PlotPaperUnits)arg5, (bool)arg6) -> None :

    C++ signature :
        void setClosestMediaName(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},double,double,enum AcDbPlotSettings::PlotPaperUnits,bool)'''
    ...
    def setCurrentStyleSheet (self, *args, **kwargs)-> None :
      '''setCurrentStyleSheet( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (str)arg3) -> None :

    C++ signature :
        void setCurrentStyleSheet(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setCustomPrintScale (self, *args, **kwargs)-> None :
      '''setCustomPrintScale( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (float)arg3, (float)arg4) -> None :

    C++ signature :
        void setCustomPrintScale(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},double,double)'''
    ...
    def setDefaultPlotConfig (self, *args, **kwargs)-> None :
      '''setDefaultPlotConfig( (PlotSettingsValidator)arg1, (PlotSettings)arg2) -> None :

    C++ signature :
        void setDefaultPlotConfig(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue})'''
    ...
    def setPlotCentered (self, *args, **kwargs)-> None :
      '''setPlotCentered( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotCentered(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setPlotCfgName (self, *args, **kwargs)-> None :
      '''setPlotCfgName( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (str)arg3) -> None :

    C++ signature :
        void setPlotCfgName(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setPlotCfgName( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (str)arg3, (str)arg4) -> None :

    C++ signature :
        void setPlotCfgName(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPlotOrigin (self, *args, **kwargs)-> None :
      '''setPlotOrigin( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (float)arg3, (float)arg4) -> None :

    C++ signature :
        void setPlotOrigin(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},double,double)'''
    ...
    def setPlotPaperUnits (self, *args, **kwargs)-> None :
      '''setPlotPaperUnits( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (PlotPaperUnits)arg3) -> None :

    C++ signature :
        void setPlotPaperUnits(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},enum AcDbPlotSettings::PlotPaperUnits)'''
    ...
    def setPlotRotation (self, *args, **kwargs)-> None :
      '''setPlotRotation( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (PlotRotation)arg3) -> None :

    C++ signature :
        void setPlotRotation(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},enum AcDbPlotSettings::PlotRotation)'''
    ...
    def setPlotType (self, *args, **kwargs)-> None :
      '''setPlotType( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (PlotType)arg3) -> None :

    C++ signature :
        void setPlotType(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},enum AcDbPlotSettings::PlotType)'''
    ...
    def setPlotViewName (self, *args, **kwargs)-> None :
      '''setPlotViewName( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (str)arg3) -> None :

    C++ signature :
        void setPlotViewName(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPlotWindowArea (self, *args, **kwargs)-> None :
      '''setPlotWindowArea( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (float)arg3, (float)arg4, (float)arg5, (float)arg6) -> None :

    C++ signature :
        void setPlotWindowArea(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},double,double,double,double)

setPlotWindowArea( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (Extents2d)arg3) -> None :

    C++ signature :
        void setPlotWindowArea(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},class AcDbExtents2d {lvalue})'''
    ...
    def setStdScale (self, *args, **kwargs)-> None :
      '''setStdScale( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (float)arg3) -> None :

    C++ signature :
        void setStdScale(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},double)'''
    ...
    def setStdScaleType (self, *args, **kwargs)-> None :
      '''setStdScaleType( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (StdScaleType)arg3) -> None :

    C++ signature :
        void setStdScaleType(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},enum AcDbPlotSettings::StdScaleType)'''
    ...
    def setUseStandardScale (self, *args, **kwargs)-> None :
      '''setUseStandardScale( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (bool)arg3) -> None :

    C++ signature :
        void setUseStandardScale(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setZoomToPaperOnUpdate (self, *args, **kwargs)-> None :
      '''setZoomToPaperOnUpdate( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (bool)arg3) -> None :

    C++ signature :
        void setZoomToPaperOnUpdate(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},bool)'''
    ...

class PlotStyleNameType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kPlotStyleNameByBlock (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPlotStyleNameById (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPlotStyleNameByLayer (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPlotStyleNameIsDictDefault (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class PlotType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kDisplay (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kExtents (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLayout (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLimits (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kView (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kWindow (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class Point:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d {lvalue})

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: RxObject)-> PyDb.Point :
      '''                             '''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: RxObject)-> PyDb.Point :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def ecsRotation (self: Point)-> float :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def normal (self: Point)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def position (self: Point)-> PyGe.Point3d :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setEcsRotation (self: Point,val : float)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self: Point,val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self: Point,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setThickness (self: Point,val : float)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def thickness (self: Point)-> float :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class Point3AngularDimension:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (str)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (str)arg6, (ObjectId)arg7) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def altSuppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altSuppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altSuppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def altSuppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def alternatePrefix (self: Dimension)-> str :
      '''                             '''
    ...
    def alternateSuffix (self: Dimension)-> str :
      '''                             '''
    ...
    def arcPoint (self, *args, **kwargs)-> PyGe.Point3d :
      '''arcPoint( (Point3AngularDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d arcPoint(class PyDb3PointAngularDimension {lvalue})'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockTransform (self: Dimension)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.Point3AngularDimension :
      '''cast( (RxObject)arg1) -> Point3AngularDimension :

    C++ signature :
        class PyDb3PointAngularDimension cast(class PyRxObject)'''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def centerMarkSize (self: Dimension)-> float :
      '''                             '''
    ...
    def centerPoint (self, *args, **kwargs)-> PyGe.Point3d :
      '''centerPoint( (Point3AngularDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d centerPoint(class PyDb3PointAngularDimension {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.Point3AngularDimension :
      '''cloneFrom( (RxObject)arg1) -> Point3AngularDimension :

    C++ signature :
        class PyDb3PointAngularDimension cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimBlockPosition (self: Dimension)-> PyGe.Point3d :
      '''                             '''
    ...
    def dimExt1Linetype (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimExt2Linetype (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimLineLinetype (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimensionStyle (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimensionText (self: Dimension)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevation (self: Dimension)-> float :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extArcOn (self, *args, **kwargs)-> bool :
      '''extArcOn( (Point3AngularDimension)arg1) -> bool :

    C++ signature :
        bool extArcOn(class PyDb3PointAngularDimension {lvalue})'''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def fieldFromMText (self: Dimension,ref : PyDb.MText)-> None :
      '''                             '''
    ...
    def fieldToMText (self: Dimension,ref : PyDb.MText)-> None :
      '''                             '''
    ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self: Dimension)-> None :
      '''                             '''
    ...
    def getArrowFirstIsFlipped (self: Dimension)-> bool :
      '''                             '''
    ...
    def getArrowSecondIsFlipped (self: Dimension)-> bool :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDimstyleData (self: Dimension)-> PyDb.DimStyleTableRecord :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def horizontalRotation (self: Dimension)-> float :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def inspection (self: Dimension)-> bool :
      '''                             '''
    ...
    def inspectionFrame (self: Dimension)-> int :
      '''                             '''
    ...
    def inspectionLabel (self: Dimension)-> str :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self: Dimension)-> bool :
      '''                             '''
    ...
    def isConstraintObject (self: Dimension)-> tuple :
      '''                             '''
    ...
    def isDynamicDimension (self: Dimension)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self: Dimension)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self: Dimension)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def measurement (self: Dimension)-> float :
      '''                             '''
    ...
    def normal (self: Dimension)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def prefix (self: Dimension)-> str :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recomputeDimBlock (self: Dimension,force : bool=False)-> None :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def removeTextField (self: Dimension)-> None :
      '''                             '''
    ...
    def resetTextDefinedSize (self: Dimension)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAltSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAlternatePrefix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setAlternateSuffix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setArcPoint (self, *args, **kwargs)-> None :
      '''setArcPoint( (Point3AngularDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setArcPoint(class PyDb3PointAngularDimension {lvalue},class AcGePoint3d)'''
    ...
    def setArrowFirstIsFlipped (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setArrowSecondIsFlipped (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setCenterPoint (self, *args, **kwargs)-> None :
      '''setCenterPoint( (Point3AngularDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setCenterPoint(class PyDb3PointAngularDimension {lvalue},class AcGePoint3d)'''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setConstraintDynamic (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDimBlockId (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimBlockPosition (self: Dimension,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setDimExt1Linetype (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimExt2Linetype (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimLineLinetype (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimensionStyle (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimensionText (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setDimstyleData (self, *args, **kwargs)-> None :
      '''setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setElevation (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setExtArcOn (self, *args, **kwargs)-> None :
      '''setExtArcOn( (Point3AngularDimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setExtArcOn(class PyDb3PointAngularDimension {lvalue},bool)'''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setHorizontalRefTextRotation (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setHorizontalRotation (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setInspection (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setInspectionFrame (self: Dimension,val : int)-> None :
      '''                             '''
    ...
    def setInspectionLabel (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self: Dimension,val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setShouldParticipateInOPM (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuffix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setSuppressAngularTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setTextAttachment (self: Dimension,val : PyDb.MTextAttachmentPoint)-> None :
      '''                             '''
    ...
    def setTextDefinedSize (self: Dimension,width : float,height : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingFactor (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingStyle (self: Dimension,val : PyDb.LineSpacingStyle)-> None :
      '''                             '''
    ...
    def setTextPosition (self: Dimension,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setTextRotation (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setToleranceSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setUsingDefaultTextPosition (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def setXLine1Point (self, *args, **kwargs)-> None :
      '''setXLine1Point( (Point3AngularDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setXLine1Point(class PyDb3PointAngularDimension {lvalue},class AcGePoint3d)'''
    ...
    def setXLine2Point (self, *args, **kwargs)-> None :
      '''setXLine2Point( (Point3AngularDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setXLine2Point(class PyDb3PointAngularDimension {lvalue},class AcGePoint3d)'''
    ...
    def shouldParticipateInOPM (self: Dimension)-> bool :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def suffix (self: Dimension)-> str :
      '''                             '''
    ...
    def suppressAngularLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressAngularTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAttachment (self: Dimension)-> PyDb.MTextAttachmentPoint :
      '''                             '''
    ...
    def textDefinedSize (self: Dimension)-> tuple :
      '''                             '''
    ...
    def textLineSpacingFactor (self: Dimension)-> float :
      '''                             '''
    ...
    def textLineSpacingStyle (self: Dimension)-> PyDb.LineSpacingStyle :
      '''                             '''
    ...
    def textPosition (self: Dimension)-> PyGe.Point3d :
      '''                             '''
    ...
    def textRotation (self: Dimension)-> float :
      '''                             '''
    ...
    def toleranceSuppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def toleranceSuppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def useDefaultTextPosition (self: Dimension)-> None :
      '''                             '''
    ...
    def useSetTextPosition (self: Dimension)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xLine1Point (self, *args, **kwargs)-> PyGe.Point3d :
      '''xLine1Point( (Point3AngularDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine1Point(class PyDb3PointAngularDimension {lvalue})'''
    ...
    def xLine2Point (self, *args, **kwargs)-> PyGe.Point3d :
      '''xLine2Point( (Point3AngularDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine2Point(class PyDb3PointAngularDimension {lvalue})'''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class PointCloudClassificationColorRamp:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def color (self, *args, **kwargs)-> PyDb.EntityColor :
      '''color( (PointCloudClassificationColorRamp)arg1, (int)arg2) -> EntityColor :

    C++ signature :
        class AcCmEntityColor color(class PyDbPointCloudClassificationColorRamp {lvalue},int)'''
    ...
    def name (self, *args, **kwargs)-> str :
      '''name( (PointCloudClassificationColorRamp)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > name(class PyDbPointCloudClassificationColorRamp {lvalue})'''
    ...
    def numColors (self, *args, **kwargs)-> int :
      '''numColors( (PointCloudClassificationColorRamp)arg1) -> int :

    C++ signature :
        int numColors(class PyDbPointCloudClassificationColorRamp {lvalue})'''
    ...
    def setColor (self, *args, **kwargs)-> None :
      '''setColor( (PointCloudClassificationColorRamp)arg1, (int)arg2, (EntityColor)arg3) -> None :

    C++ signature :
        void setColor(class PyDbPointCloudClassificationColorRamp {lvalue},int,class AcCmEntityColor)'''
    ...
    def setFrom (self, *args, **kwargs)-> None :
      '''setFrom( (PointCloudClassificationColorRamp)arg1, (PointCloudClassificationColorRamp)arg2) -> None :

    C++ signature :
        void setFrom(class PyDbPointCloudClassificationColorRamp {lvalue},class PyDbPointCloudClassificationColorRamp)'''
    ...
    def setName (self, *args, **kwargs)-> None :
      '''setName( (PointCloudClassificationColorRamp)arg1, (str)arg2) -> None :

    C++ signature :
        void setName(class PyDbPointCloudClassificationColorRamp {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setVisibility (self, *args, **kwargs)-> None :
      '''setVisibility( (PointCloudClassificationColorRamp)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setVisibility(class PyDbPointCloudClassificationColorRamp {lvalue},int,bool)'''
    ...
    def visibility (self, *args, **kwargs)-> bool :
      '''visibility( (PointCloudClassificationColorRamp)arg1, (int)arg2) -> bool :

    C++ signature :
        bool visibility(class PyDbPointCloudClassificationColorRamp {lvalue},int)'''
    ...

class PointCloudColorMap:
    def __init__ (self: PointCloudColorMap,id: ObjectId,mode: OpenMode=kForRead,erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.PointCloudColorMap :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def classificationScheme (self, *args, **kwargs)-> tuple :
      '''classificationScheme( (PointCloudColorMap)arg1, (str)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple classificationScheme(class PyDbPointCloudColorMap {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def classificationSchemeGUIDs (self, *args, **kwargs)-> list :
      '''classificationSchemeGUIDs( (PointCloudColorMap)arg1) -> list :

    C++ signature :
        class boost::python::list classificationSchemeGUIDs(class PyDbPointCloudColorMap {lvalue})'''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.PointCloudColorMap :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def colorScheme (self, *args, **kwargs)-> tuple :
      '''colorScheme( (PointCloudColorMap)arg1, (str)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple colorScheme(class PyDbPointCloudColorMap {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def colorSchemeGUIDs (self, *args, **kwargs)-> list :
      '''colorSchemeGUIDs( (PointCloudColorMap)arg1) -> list :

    C++ signature :
        class boost::python::list colorSchemeGUIDs(class PyDbPointCloudColorMap {lvalue})'''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def defaultClassificationColorScheme (self, *args, **kwargs)-> str :
      '''defaultClassificationColorScheme( (PointCloudColorMap)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > defaultClassificationColorScheme(class PyDbPointCloudColorMap {lvalue})'''
    ...
    def defaultElevationColorScheme (self, *args, **kwargs)-> str :
      '''defaultElevationColorScheme( (PointCloudColorMap)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > defaultElevationColorScheme(class PyDbPointCloudColorMap {lvalue})'''
    ...
    def defaultIntensityColorScheme (self, *args, **kwargs)-> str :
      '''defaultIntensityColorScheme( (PointCloudColorMap)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > defaultIntensityColorScheme(class PyDbPointCloudColorMap {lvalue})'''
    ...
    def deleteClassificationScheme (self, *args, **kwargs)-> bool :
      '''deleteClassificationScheme( (PointCloudColorMap)arg1, (str)arg2) -> bool :

    C++ signature :
        bool deleteClassificationScheme(class PyDbPointCloudColorMap {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def deleteColorScheme (self, *args, **kwargs)-> bool :
      '''deleteColorScheme( (PointCloudColorMap)arg1, (str)arg2) -> bool :

    C++ signature :
        bool deleteColorScheme(class PyDbPointCloudColorMap {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getClassificationColorSchemeInUse (self, *args, **kwargs)-> list :
      '''getClassificationColorSchemeInUse( (PointCloudColorMap)arg1) -> list :

    C++ signature :
        class boost::python::list getClassificationColorSchemeInUse(class PyDbPointCloudColorMap {lvalue})'''
    ...

    @staticmethod
    def getColorMap (val : PyDb.Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getColorSchemeInUse (self, *args, **kwargs)-> list :
      '''getColorSchemeInUse( (PointCloudColorMap)arg1) -> list :

    C++ signature :
        class boost::python::list getColorSchemeInUse(class PyDbPointCloudColorMap {lvalue})'''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasClassificationScheme (self, *args, **kwargs)-> bool :
      '''hasClassificationScheme( (PointCloudColorMap)arg1, (str)arg2) -> bool :

    C++ signature :
        bool hasClassificationScheme(class PyDbPointCloudColorMap {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def hasColorScheme (self, *args, **kwargs)-> bool :
      '''hasColorScheme( (PointCloudColorMap)arg1, (str)arg2) -> bool :

    C++ signature :
        bool hasColorScheme(class PyDbPointCloudColorMap {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setClassificationScheme (self, *args, **kwargs)-> bool :
      '''setClassificationScheme( (PointCloudColorMap)arg1, (str)arg2, (PointCloudClassificationColorRamp)arg3) -> bool :

    C++ signature :
        bool setClassificationScheme(class PyDbPointCloudColorMap {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbPointCloudClassificationColorRamp)'''
    ...
    def setColorScheme (self, *args, **kwargs)-> bool :
      '''setColorScheme( (PointCloudColorMap)arg1, (str)arg2, (PointCloudColorRamp)arg3) -> bool :

    C++ signature :
        bool setColorScheme(class PyDbPointCloudColorMap {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbPointCloudColorRamp)'''
    ...
    def setDefaultClassificationColorScheme (self, *args, **kwargs)-> bool :
      '''setDefaultClassificationColorScheme( (PointCloudColorMap)arg1, (str)arg2) -> bool :

    C++ signature :
        bool setDefaultClassificationColorScheme(class PyDbPointCloudColorMap {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDefaultElevationColorScheme (self, *args, **kwargs)-> bool :
      '''setDefaultElevationColorScheme( (PointCloudColorMap)arg1, (str)arg2) -> bool :

    C++ signature :
        bool setDefaultElevationColorScheme(class PyDbPointCloudColorMap {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDefaultIntensityColorScheme (self, *args, **kwargs)-> bool :
      '''setDefaultIntensityColorScheme( (PointCloudColorMap)arg1, (str)arg2) -> bool :

    C++ signature :
        bool setDefaultIntensityColorScheme(class PyDbPointCloudColorMap {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class PointCloudColorRamp:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def color (self, *args, **kwargs)-> PyDb.EntityColor :
      '''color( (PointCloudColorRamp)arg1, (int)arg2) -> EntityColor :

    C++ signature :
        class AcCmEntityColor color(class PyDbPointCloudColorRamp {lvalue},int)'''
    ...
    def name (self, *args, **kwargs)-> str :
      '''name( (PointCloudColorRamp)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > name(class PyDbPointCloudColorRamp {lvalue})'''
    ...
    def numColors (self, *args, **kwargs)-> int :
      '''numColors( (PointCloudColorRamp)arg1) -> int :

    C++ signature :
        int numColors(class PyDbPointCloudColorRamp {lvalue})'''
    ...
    def setColor (self, *args, **kwargs)-> None :
      '''setColor( (PointCloudColorRamp)arg1, (int)arg2, (EntityColor)arg3) -> None :

    C++ signature :
        void setColor(class PyDbPointCloudColorRamp {lvalue},int,class AcCmEntityColor)'''
    ...
    def setFrom (self, *args, **kwargs)-> None :
      '''setFrom( (PointCloudColorRamp)arg1, (PointCloudColorRamp)arg2) -> None :

    C++ signature :
        void setFrom(class PyDbPointCloudColorRamp {lvalue},class PyDbPointCloudColorRamp)'''
    ...
    def setName (self, *args, **kwargs)-> None :
      '''setName( (PointCloudColorRamp)arg1, (str)arg2) -> None :

    C++ signature :
        void setName(class PyDbPointCloudColorRamp {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setNumColors (self, *args, **kwargs)-> None :
      '''setNumColors( (PointCloudColorRamp)arg1, (int)arg2) -> None :

    C++ signature :
        void setNumColors(class PyDbPointCloudColorRamp {lvalue},int)'''
    ...
    def setVisibility (self, *args, **kwargs)-> None :
      '''setVisibility( (PointCloudColorRamp)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setVisibility(class PyDbPointCloudColorRamp {lvalue},int,bool)'''
    ...
    def visibility (self, *args, **kwargs)-> bool :
      '''visibility( (PointCloudColorRamp)arg1, (int)arg2) -> bool :

    C++ signature :
        bool visibility(class PyDbPointCloudColorRamp {lvalue},int)'''
    ...

class PointCloudCrop:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def clear (self, *args, **kwargs)-> None :
      '''clear( (PointCloudCrop)arg1) -> None :

    C++ signature :
        void clear(class PyDbPointCloudCrop {lvalue})'''
    ...
    def get (self, *args, **kwargs)-> list :
      '''get( (PointCloudCrop)arg1) -> list :

    C++ signature :
        class boost::python::list get(class PyDbPointCloudCrop {lvalue})'''
    ...
    def getCropPlane (self, *args, **kwargs)-> tuple :
      '''getCropPlane( (PointCloudCrop)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getCropPlane(class PyDbPointCloudCrop {lvalue})'''
    ...
    def isInside (self, *args, **kwargs)-> bool :
      '''isInside( (PointCloudCrop)arg1) -> bool :

    C++ signature :
        bool isInside(class PyDbPointCloudCrop {lvalue})'''
    ...
    def isInverted (self, *args, **kwargs)-> bool :
      '''isInverted( (PointCloudCrop)arg1) -> bool :

    C++ signature :
        bool isInverted(class PyDbPointCloudCrop {lvalue})'''
    ...
    def isValid (self, *args, **kwargs)-> bool :
      '''isValid( (PointCloudCrop)arg1) -> bool :

    C++ signature :
        bool isValid(class PyDbPointCloudCrop {lvalue})'''
    ...
    def length (self, *args, **kwargs)-> int :
      '''length( (PointCloudCrop)arg1) -> int :

    C++ signature :
        int length(class PyDbPointCloudCrop {lvalue})'''
    ...
    def set (self, *args, **kwargs)-> None :
      '''set( (PointCloudCrop)arg1, (list)arg2) -> None :

    C++ signature :
        void set(class PyDbPointCloudCrop {lvalue},class boost::python::list)'''
    ...
    def setCropPlane (self, *args, **kwargs)-> None :
      '''setCropPlane( (PointCloudCrop)arg1, (Plane)arg2) -> None :

    C++ signature :
        void setCropPlane(class PyDbPointCloudCrop {lvalue},class PyGePlane)'''
    ...
    def setCropType (self, *args, **kwargs)-> None :
      '''setCropType( (PointCloudCrop)arg1, (PointCloudCropType)arg2) -> None :

    C++ signature :
        void setCropType(class PyDbPointCloudCrop {lvalue},enum AcDbPointCloudCrop::CropType)'''
    ...
    def setInside (self, *args, **kwargs)-> None :
      '''setInside( (PointCloudCrop)arg1, (bool)arg2) -> None :

    C++ signature :
        void setInside(class PyDbPointCloudCrop {lvalue},bool)'''
    ...
    def setInvert (self, *args, **kwargs)-> None :
      '''setInvert( (PointCloudCrop)arg1, (bool)arg2) -> None :

    C++ signature :
        void setInvert(class PyDbPointCloudCrop {lvalue},bool)'''
    ...
    def type (self, *args, **kwargs)-> PyDb.PointCloudCropType :
      '''type( (PointCloudCrop)arg1) -> PointCloudCropType :

    C++ signature :
        enum AcDbPointCloudCrop::CropType type(class PyDbPointCloudCrop {lvalue})'''
    ...

class PointCloudCropType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kCircular (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kInvalid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPolygonal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kRectangular (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class PointCloudDefEx:
    def __init__ (self: PointCloudDefEx,id: ObjectId,mode: OpenMode=kForRead,erased: bool=False)-> None :
      '''                             '''
    ...
    def activeFileName (self: PointCloudDefEx)-> str :
      '''                             '''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.PointCloudDefEx :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def classVersion ()-> int :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.PointCloudDefEx :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def coordinateSystemName (self: PointCloudDefEx)-> str :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def createPointCloudExDictionary (val : PyDb.Database,id : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def defaultHeight (self: PointCloudDefEx)-> float :
      '''                             '''
    ...
    def defaultLength (self: PointCloudDefEx)-> float :
      '''                             '''
    ...
    def defaultWidth (self: PointCloudDefEx)-> float :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityCount (self: PointCloudDefEx)-> tuple :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def extents (self: PointCloudDefEx)-> PyDb.Extents :
      '''                             '''
    ...
    def fileType (self: PointCloudDefEx)-> str :
      '''                             '''
    ...
    def getAllRcsFilePaths (self: PointCloudDefEx)-> list :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getRcsFilePath (self: PointCloudDefEx,guid : str)-> str :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasProperty (self: PointCloudDefEx,prop : PyDb.PointCloudProperty)-> PyDb.PointCloudPropertyState :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isLoaded (self: PointCloudDefEx)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def load (self: PointCloudDefEx)-> None :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...

    @staticmethod
    def pointCloudExDictionary (val : PyDb.Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setActiveFileName (self: PointCloudDefEx,path : str)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setSourceFileName (self: PointCloudDefEx,path : str)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def sourceFileName (self: PointCloudDefEx)-> str :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def totalPointsCount (self: PointCloudDefEx)-> int :
      '''                             '''
    ...
    def totalRegionsCount (self: PointCloudDefEx)-> int :
      '''                             '''
    ...
    def totalScansCount (self: PointCloudDefEx)-> int :
      '''                             '''
    ...
    def unload (self: PointCloudDefEx)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class PointCloudDispOptionOutOfRange:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kHidePoints (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUseMinMaxColors (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUseRGBScanColors (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class PointCloudEx:
    def __init__ (self: PointCloudEx,id: ObjectId,mode: OpenMode=kForRead,erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addCroppingBoundary (self, *args, **kwargs)-> None :
      '''addCroppingBoundary( (PointCloudEx)arg1, (PointCloudCrop)arg2) -> None :

    C++ signature :
        void addCroppingBoundary(class PyDbPointCloudEx {lvalue},class PyDbPointCloudCrop)'''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def applyGeoLocation (self, *args, **kwargs)-> None :
      '''applyGeoLocation( (PointCloudEx)arg1) -> None :

    C++ signature :
        void applyGeoLocation(class PyDbPointCloudEx {lvalue})

applyGeoLocation( (PointCloudEx)arg1, (bool)arg2, (str)arg3) -> None :

    C++ signature :
        void applyGeoLocation(class PyDbPointCloudEx {lvalue},bool,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def attachPointCloud (self: PointCloudEx,path: str,pos: PyGe.Point3d,scale: float,rotation: float,db: PyDb.Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.PointCloudEx :
      '''                             '''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def clearAttributeFilters (self: PointCloudEx)-> None :
      '''                             '''
    ...
    def clearCropping (self: PointCloudEx)-> None :
      '''                             '''
    ...
    def clearSpatialFilters (self: PointCloudEx)-> None :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.PointCloudEx :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def detectPointBelonger (self, *args, **kwargs)-> tuple :
      '''detectPointBelonger( (PointCloudEx)arg1, (Point3d)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple detectPointBelonger(class PyDbPointCloudEx {lvalue},class AcGePoint3d)'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevationApplyToFixedRange (self: PointCloudEx)-> bool :
      '''                             '''
    ...
    def elevationOutOfRangeBehavior (self: PointCloudEx)-> PyDb.PointCloudDispOptionOutOfRange :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def geolocate (self: PointCloudEx)-> bool :
      '''                             '''
    ...
    def getActiveFileName (self: PointCloudEx)-> tuple :
      '''                             '''
    ...
    def getCandidatePlane (self, *args, **kwargs)-> tuple :
      '''getCandidatePlane( (PointCloudEx)arg1, (int)arg2, (int)arg3) -> tuple :

    C++ signature :
        class boost::python::tuple getCandidatePlane(class PyDbPointCloudEx {lvalue},int,int)'''
    ...
    def getColorSchemeForStylization (self, *args, **kwargs)-> str :
      '''getColorSchemeForStylization( (PointCloudEx)arg1, (PointCloudStylizationType)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getColorSchemeForStylization(class PyDbPointCloudEx {lvalue},enum AcDbPointCloudEx::StylizationType)'''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getCroppingCount (self: PointCloudEx)-> int :
      '''                             '''
    ...
    def getCroppingInvert (self: PointCloudEx)-> bool :
      '''                             '''
    ...
    def getCurrentColorScheme (self: PointCloudEx)-> str :
      '''                             '''
    ...
    def getCustomOsnapInfo (self, *args, **kwargs)-> list :
      '''getCustomOsnapInfo( (PointCloudEx)arg1, (PointCloudOSnapMode)arg2, (Point3d)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getCustomOsnapInfo(class PyDbPointCloudEx {lvalue},enum AcDbPointCloudEx::PointCloudOSnapMode,class AcGePoint3d,class AcGePoint3d,class AcGeMatrix3d)'''
    ...
    def getCylinderAt (self, *args, **kwargs)-> tuple :
      '''getCylinderAt( (PointCloudEx)arg1, (Matrix3d)arg2, (Point3d)arg3) -> tuple :

    C++ signature :
        class boost::python::tuple getCylinderAt(class PyDbPointCloudEx {lvalue},class AcGeMatrix3d,class AcGePoint3d)'''
    ...
    def getDisplayedVisiblePointCount (self: PointCloudEx)-> int :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getLoadedVisiblePointCount (self: PointCloudEx)-> int :
      '''                             '''
    ...
    def getMinDistPrecision (self: PointCloudEx)-> float :
      '''                             '''
    ...
    def getNativeCloudExtent (self: PointCloudEx)-> PyDb.Extents :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlaneBoundaryAt (self, *args, **kwargs)-> tuple :
      '''getPlaneBoundaryAt( (PointCloudEx)arg1, (Matrix3d)arg2, (Point3d)arg3) -> tuple :

    C++ signature :
        class boost::python::tuple getPlaneBoundaryAt(class PyDbPointCloudEx {lvalue},class AcGeMatrix3d,class AcGePoint3d)'''
    ...
    def getPlaneOrPointAt (self, *args, **kwargs)-> tuple :
      '''getPlaneOrPointAt( (PointCloudEx)arg1, (Matrix3d)arg2, (Point3d)arg3) -> tuple :

    C++ signature :
        class boost::python::tuple getPlaneOrPointAt(class PyDbPointCloudEx {lvalue},class AcGeMatrix3d,class AcGePoint3d)'''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getPointCloudCropping (self, *args, **kwargs)-> PyDb.PointCloudCrop :
      '''getPointCloudCropping( (PointCloudEx)arg1, (int)arg2) -> PointCloudCrop :

    C++ signature :
        class PyDbPointCloudCrop getPointCloudCropping(class PyDbPointCloudEx {lvalue},int)'''
    ...
    def getPointCloudName (self: PointCloudEx)-> str :
      '''                             '''
    ...
    def getScanViewInfo (self, *args, **kwargs)-> tuple :
      '''getScanViewInfo( (PointCloudEx)arg1, (str)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple getScanViewInfo(class PyDbPointCloudEx {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def getVisiblePointCount (self: PointCloudEx)-> int :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intensityOutOfRangeBehavior (self: PointCloudEx)-> PyDb.PointCloudDispOptionOutOfRange :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def location (self: PointCloudEx)-> PyGe.Point3d :
      '''                             '''
    ...
    def locked (self: PointCloudEx)-> bool :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def maxElevation (self: PointCloudEx)-> float :
      '''                             '''
    ...
    def maxIntensity (self: PointCloudEx)-> int :
      '''                             '''
    ...
    def minElevation (self: PointCloudEx)-> float :
      '''                             '''
    ...
    def minIntensity (self: PointCloudEx)-> int :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectToWorldMatrix (self: PointCloudEx)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def pointCloudDefExId (self: PointCloudEx)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def reactorId (self: PointCloudEx)-> PyDb.ObjectId :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removeLastCropping (self: PointCloudEx)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def resetLimitBox (self: PointCloudEx)-> None :
      '''                             '''
    ...
    def resetScanRegionVisibility (self: PointCloudEx)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self: PointCloudEx)-> float :
      '''                             '''
    ...
    def scale (self: PointCloudEx)-> float :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setActiveFileName (self, *args, **kwargs)-> bool :
      '''setActiveFileName( (PointCloudEx)arg1, (str)arg2) -> bool :

    C++ signature :
        bool setActiveFileName(class PyDbPointCloudEx {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAllRegionHighlight (self, *args, **kwargs)-> None :
      '''setAllRegionHighlight( (PointCloudEx)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAllRegionHighlight(class PyDbPointCloudEx {lvalue},bool)

setAllRegionHighlight( (PointCloudEx)arg1, (bool)arg2, (bool)arg3) -> None :

    C++ signature :
        void setAllRegionHighlight(class PyDbPointCloudEx {lvalue},bool,bool)'''
    ...
    def setAllRegionsVisibility (self, *args, **kwargs)-> None :
      '''setAllRegionsVisibility( (PointCloudEx)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAllRegionsVisibility(class PyDbPointCloudEx {lvalue},bool)

setAllRegionsVisibility( (PointCloudEx)arg1, (bool)arg2, (bool)arg3) -> None :

    C++ signature :
        void setAllRegionsVisibility(class PyDbPointCloudEx {lvalue},bool,bool)'''
    ...
    def setAllScanHighlight (self, *args, **kwargs)-> None :
      '''setAllScanHighlight( (PointCloudEx)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAllScanHighlight(class PyDbPointCloudEx {lvalue},bool)'''
    ...
    def setAllScansVisibility (self, *args, **kwargs)-> None :
      '''setAllScansVisibility( (PointCloudEx)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAllScansVisibility(class PyDbPointCloudEx {lvalue},bool)'''
    ...
    def setAllScansVisibilityByRegion (self, *args, **kwargs)-> None :
      '''setAllScansVisibilityByRegion( (PointCloudEx)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setAllScansVisibilityByRegion(class PyDbPointCloudEx {lvalue},int,bool)'''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setColorSchemeForStylization (self, *args, **kwargs)-> None :
      '''setColorSchemeForStylization( (PointCloudEx)arg1, (str)arg2, (PointCloudStylizationType)arg3) -> None :

    C++ signature :
        void setColorSchemeForStylization(class PyDbPointCloudEx {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,enum AcDbPointCloudEx::StylizationType)'''
    ...
    def setCroppingInvert (self, *args, **kwargs)-> None :
      '''setCroppingInvert( (PointCloudEx)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCroppingInvert(class PyDbPointCloudEx {lvalue},bool)'''
    ...
    def setCurrentColorScheme (self, *args, **kwargs)-> None :
      '''setCurrentColorScheme( (PointCloudEx)arg1, (str)arg2) -> None :

    C++ signature :
        void setCurrentColorScheme(class PyDbPointCloudEx {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setElevationApplyToFixedRange (self: PointCloudEx)-> None :
      '''                             '''
    ...
    def setElevationOutOfRangeBehavior (self, *args, **kwargs)-> None :
      '''setElevationOutOfRangeBehavior( (PointCloudEx)arg1, (PointCloudDispOptionOutOfRange)arg2) -> None :

    C++ signature :
        void setElevationOutOfRangeBehavior(class PyDbPointCloudEx {lvalue},enum AcDbPointCloudEx::DispOptionOutOfRange)'''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setHighlightLimitboxBoundary (self, *args, **kwargs)-> None :
      '''setHighlightLimitboxBoundary( (PointCloudEx)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHighlightLimitboxBoundary(class PyDbPointCloudEx {lvalue},bool)'''
    ...
    def setInCreatingCroppingMode (self, *args, **kwargs)-> None :
      '''setInCreatingCroppingMode( (PointCloudEx)arg1, (bool)arg2) -> None :

    C++ signature :
        void setInCreatingCroppingMode(class PyDbPointCloudEx {lvalue},bool)'''
    ...
    def setIntensityOutOfRangeBehavior (self, *args, **kwargs)-> None :
      '''setIntensityOutOfRangeBehavior( (PointCloudEx)arg1, (PointCloudDispOptionOutOfRange)arg2) -> None :

    C++ signature :
        void setIntensityOutOfRangeBehavior(class PyDbPointCloudEx {lvalue},enum AcDbPointCloudEx::DispOptionOutOfRange)'''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLocation (self, *args, **kwargs)-> None :
      '''setLocation( (PointCloudEx)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setLocation(class PyDbPointCloudEx {lvalue},class AcGePoint3d)'''
    ...
    def setLocked (self: PointCloudEx,val : bool)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMinMaxElevation (self, *args, **kwargs)-> None :
      '''setMinMaxElevation( (PointCloudEx)arg1, (float)arg2, (float)arg3) -> None :

    C++ signature :
        void setMinMaxElevation(class PyDbPointCloudEx {lvalue},double,double)'''
    ...
    def setMinMaxIntensity (self, *args, **kwargs)-> None :
      '''setMinMaxIntensity( (PointCloudEx)arg1, (int)arg2, (int)arg3) -> None :

    C++ signature :
        void setMinMaxIntensity(class PyDbPointCloudEx {lvalue},int,int)'''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPointCloudDefExId (self: PointCloudEx,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPointCloudName (self, *args, **kwargs)-> None :
      '''setPointCloudName( (PointCloudEx)arg1, (str)arg2) -> None :

    C++ signature :
        void setPointCloudName(class PyDbPointCloudEx {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReactorId (self: PointCloudEx,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setRegionVisibility (self, *args, **kwargs)-> None :
      '''setRegionVisibility( (PointCloudEx)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setRegionVisibility(class PyDbPointCloudEx {lvalue},int,bool)'''
    ...
    def setRotation (self, *args, **kwargs)-> None :
      '''setRotation( (PointCloudEx)arg1, (float)arg2) -> None :

    C++ signature :
        void setRotation(class PyDbPointCloudEx {lvalue},double)'''
    ...
    def setScale (self, *args, **kwargs)-> None :
      '''setScale( (PointCloudEx)arg1, (float)arg2) -> None :

    C++ signature :
        void setScale(class PyDbPointCloudEx {lvalue},double)'''
    ...
    def setScanVisibility (self, *args, **kwargs)-> None :
      '''setScanVisibility( (PointCloudEx)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setScanVisibility(class PyDbPointCloudEx {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)'''
    ...
    def setShowElevationAsGradient (self, *args, **kwargs)-> None :
      '''setShowElevationAsGradient( (PointCloudEx)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShowElevationAsGradient(class PyDbPointCloudEx {lvalue},bool)'''
    ...
    def setShowIntensityAsGradient (self, *args, **kwargs)-> None :
      '''setShowIntensityAsGradient( (PointCloudEx)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShowIntensityAsGradient(class PyDbPointCloudEx {lvalue},bool)'''
    ...
    def setStylizationType (self, *args, **kwargs)-> None :
      '''setStylizationType( (PointCloudEx)arg1, (PointCloudStylizationType)arg2) -> None :

    C++ signature :
        void setStylizationType(class PyDbPointCloudEx {lvalue},enum AcDbPointCloudEx::StylizationType)'''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def showCropped (self: PointCloudEx)-> bool :
      '''                             '''
    ...
    def showElevationAsGradient (self: PointCloudEx)-> bool :
      '''                             '''
    ...
    def showIntensityAsGradient (self: PointCloudEx)-> bool :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def stylizationType (self: PointCloudEx)-> PyDb.PointCloudStylizationType :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def updateGeoLocation (self: PointCloudEx)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class PointCloudOSnapMode:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kOsModePCL (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsModePCorner (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsModePEdgeNea (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsModePEdgePer (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsModePInt (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsModePNea (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsModePNod (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsModePPer (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class PointCloudProperty:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kClassification (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kColor (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kGeoGraphic (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kIntensity (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNormal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSegmentation (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class PointCloudPropertyState:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kAll (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSome (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class PointCloudStylizationType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kClassificationRamp (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHeightRamp (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kIntensityRamp (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNormalRamp (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSingleColor (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTrueColor (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class PointRef:
    def __init__ (self, *args, **kwargs)-> None :
      '''Raises an exception
This class cannot be instantiated from Python'''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...

class Poly2dType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def k2dCubicSplinePoly (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k2dFitCurvePoly (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k2dQuadSplinePoly (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k2dSimplePoly (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class Poly3dType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def k3dCubicSplinePoly (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k3dQuadSplinePoly (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k3dSimplePoly (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class PolyFaceMeshVertex:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: RxObject)-> PyDb.PolyFaceMeshVertex :
      '''                             '''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: RxObject)-> PyDb.PolyFaceMeshVertex :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def position (self: PolyFaceMeshVertex)-> PyGe.Point3d :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self: PolyFaceMeshVertex,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class PolygonMeshVertex:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: RxObject)-> PyDb.PolygonMeshVertex :
      '''                             '''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: RxObject)-> PyDb.PolygonMeshVertex :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def position (self: PolygonMeshVertex)-> PyGe.Point3d :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self: PolygonMeshVertex,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def vertexType (self: PolygonMeshVertex)-> object :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class Polyline:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (SubentType)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,unsigned int)

__init__( (object)arg1, (list)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class boost::python::list)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def addVertexAt (self: Polyline,idx:int,pt2d:PyGe.Point2d,bulge:float=0.0,startWidth:float=0.0,endWidth:float=0.0)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: RxObject)-> PyDb.Polyline :
      '''                             '''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: RxObject)-> PyDb.Polyline :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def createFromAcGeCurve (curve: PyGe.Curve3d,normal: PyGe.Vector3d = kZAxis,tol: Tol = default)-> PyDb.Curve :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevation (self: Polyline)-> float :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> None :
      '''extend( (Curve)arg1, (float)arg2) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getAcGeCurve (self: Polyline,tol: Tol = default)-> PyGe.CompositeCurve3d :
      '''                             '''
    ...
    def getArcSeg2dAt (self: Polyline,idx:int)-> PyGe.CircArc2d :
      '''                             '''
    ...
    def getArcSeg3dAt (self: Polyline,idx:int)-> PyGe.CircArc3d :
      '''                             '''
    ...
    def getArea (self: Curve)-> float :
      '''                             '''
    ...
    def getBulgeAt (self: Polyline,idx:int)-> float :
      '''                             '''
    ...
    def getClosestPointTo (self: Curve,point3d: PyGe.Point3d,direction: PyGe.Vector3d=None,extend: bool=False)-> PyGe.Point3d :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getConstantWidth (self: Polyline)-> float :
      '''                             '''
    ...
    def getDistAtParam (self: Curve,param: float)-> float :
      '''                             '''
    ...
    def getDistAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getEcs (self: Polyline)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEndParam (self: Curve)-> float :
      '''                             '''
    ...
    def getEndPoint (self: Curve)-> PyGe.Point3d :
      '''                             '''
    ...
    def getEndWidthAt (self: Polyline,idx:int)-> float :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self: Curve,param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getLineSeg2dAt (self: Polyline,idx:int)-> PyGe.LineSeg2d :
      '''                             '''
    ...
    def getLineSeg3dAt (self: Polyline,idx:int)-> PyGe.LineSeg3d :
      '''                             '''
    ...
    def getOffsetCurves (self: Curve,dist: float)-> list :
      '''                             '''
    ...
    def getOffsetCurvesGivenPlaneNormal (self: Curve,normal: PyGe.Vector3d,dist: float)-> list :
      '''                             '''
    ...
    def getOrthoProjectedCurve (self: Curve,plane: PyGe.Plane)-> PyDb.Curve :
      '''                             '''
    ...
    def getParamAtDist (self: Curve,dist: float)-> float :
      '''                             '''
    ...
    def getParamAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getPoint2dAt (self: Polyline,idx:int)-> PyGe.Point2d :
      '''                             '''
    ...
    def getPoint3dAt (self: Polyline,idx:int)-> PyGe.Point3d :
      '''                             '''
    ...
    def getPointAtDist (self: Curve,dist: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getPointAtParam (self: Curve,param: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getProjectedCurve (self: Curve,plane: PyGe.Plane,projDir: PyGe.Vector3d)-> PyDb.Curve :
      '''                             '''
    ...
    def getSecondDeriv (self: Curve,param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getSpline (self: Curve)-> PyDb.Spline :
      '''                             '''
    ...
    def getSplitCurves (self: Curve,paramsOrPoints: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParam (self: Curve,param: float)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParams (self: Curve,params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoint (self: Curve,point: PyGe.Point3d)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoints (self: Curve,points: list)-> list :
      '''                             '''
    ...
    def getStartParam (self: Curve)-> float :
      '''                             '''
    ...
    def getStartPoint (self: Curve)-> PyGe.Point3d :
      '''                             '''
    ...
    def getStartWidthAt (self: Polyline,idx:int)-> float :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasBulges (self: Polyline)-> bool :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasPlinegen (self: Polyline)-> bool :
      '''                             '''
    ...
    def hasVertexIdentifiers (self: Polyline)-> bool :
      '''                             '''
    ...
    def hasWidth (self: Polyline)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isClosed (self: Curve)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isOnlyLines (self: Polyline)-> bool :
      '''                             '''
    ...
    def isPeriodic (self: Curve)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def makeClosedIfStartAndEndVertexCoincide (self: Polyline,distTol:float)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def maximizeMemory (self: Polyline)-> None :
      '''                             '''
    ...
    def minimizeMemory (self: Polyline)-> None :
      '''                             '''
    ...
    def normal (self: Polyline)-> PyGe.Vector3d :
      '''                             '''
    ...
    def numVerts (self: Polyline)-> int :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def onSegAt (self: Polyline,idx:int,pt2d:PyGe.Point2d,param:float)-> bool :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def removeVertexAt (self: Polyline,idx:int)-> None :
      '''                             '''
    ...
    def reset (self: Polyline,reuse:bool,numVerts:int)-> None :
      '''                             '''
    ...
    def reverseCurve (self: Curve)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def segType (self: Polyline,idx:int)-> PyDb.SegType :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBulgeAt (self: Polyline,idx:int,bulge:float)-> None :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setClosed (self: Polyline,val:bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setConstantWidth (self: Polyline,width:float)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setElevation (self: Polyline,elev:float)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setFromAcGeCurve (self: Curve,curve: PyGe.Curve3d,normal: PyGe.Vector3d = kZAxis,tol: Tol = default)-> None :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self: Polyline,val:PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlinegen (self: Polyline,val:bool)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPointAt (self: Polyline,idx:int,pt2d:PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setThickness (self: Polyline,val:float)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setWidthsAt (self: Polyline,idx:int,startWidth:float,endWidth:float)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def thickness (self: Polyline)-> float :
      '''                             '''
    ...
    def toList (self: Polyline)-> list :
      '''                             '''
    ...
    def toPoint2dList (self: Polyline)-> list :
      '''                             '''
    ...
    def toPoint3dList (self: Polyline)-> list :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class Polyline2d:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Poly2dType)arg2, (list)arg3, (bool)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,enum AcDb::Poly2dType,class boost::python::list,bool)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def appendVertex (self, *args, **kwargs)-> None :
      '''appendVertex( (Polyline2d)arg1, (Vertex2d)arg2) -> None :

    C++ signature :
        void appendVertex(class PyDb2dPolyline {lvalue},class PyDb2dVertex)

appendVertex( (Polyline2d)arg1, (ObjectId)arg2, (Vertex2d)arg3) -> None :

    C++ signature :
        void appendVertex(class PyDb2dPolyline {lvalue},class PyDbObjectId {lvalue},class PyDb2dVertex)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: RxObject)-> PyDb.Polyline2d :
      '''                             '''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: RxObject)-> PyDb.Polyline2d :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def constantWidth (self, *args, **kwargs)-> float :
      '''constantWidth( (Polyline2d)arg1) -> float :

    C++ signature :
        double constantWidth(class PyDb2dPolyline {lvalue})'''
    ...
    def convertToPolyType (self, *args, **kwargs)-> None :
      '''convertToPolyType( (Polyline2d)arg1, (Poly2dType)arg2) -> None :

    C++ signature :
        void convertToPolyType(class PyDb2dPolyline {lvalue},enum AcDb::Poly2dType)'''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def createFromAcGeCurve (curve: PyGe.Curve3d,normal: PyGe.Vector3d = kZAxis,tol: Tol = default)-> PyDb.Curve :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def defaultEndWidth (self, *args, **kwargs)-> float :
      '''defaultEndWidth( (Polyline2d)arg1) -> float :

    C++ signature :
        double defaultEndWidth(class PyDb2dPolyline {lvalue})'''
    ...
    def defaultStartWidth (self, *args, **kwargs)-> float :
      '''defaultStartWidth( (Polyline2d)arg1) -> float :

    C++ signature :
        double defaultStartWidth(class PyDb2dPolyline {lvalue})'''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevation (self, *args, **kwargs)-> float :
      '''elevation( (Polyline2d)arg1) -> float :

    C++ signature :
        double elevation(class PyDb2dPolyline {lvalue})'''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> None :
      '''extend( (Curve)arg1, (float)arg2) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getAcGeCurve (self: Curve,tol: Tol = default)-> PyGe.Curve3d :
      '''                             '''
    ...
    def getArea (self: Curve)-> float :
      '''                             '''
    ...
    def getClosestPointTo (self: Curve,point3d: PyGe.Point3d,direction: PyGe.Vector3d=None,extend: bool=False)-> PyGe.Point3d :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDistAtParam (self: Curve,param: float)-> float :
      '''                             '''
    ...
    def getDistAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEndParam (self: Curve)-> float :
      '''                             '''
    ...
    def getEndPoint (self: Curve)-> PyGe.Point3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self: Curve,param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getOffsetCurves (self: Curve,dist: float)-> list :
      '''                             '''
    ...
    def getOffsetCurvesGivenPlaneNormal (self: Curve,normal: PyGe.Vector3d,dist: float)-> list :
      '''                             '''
    ...
    def getOrthoProjectedCurve (self: Curve,plane: PyGe.Plane)-> PyDb.Curve :
      '''                             '''
    ...
    def getParamAtDist (self: Curve,dist: float)-> float :
      '''                             '''
    ...
    def getParamAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getPointAtDist (self: Curve,dist: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getPointAtParam (self: Curve,param: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getProjectedCurve (self: Curve,plane: PyGe.Plane,projDir: PyGe.Vector3d)-> PyDb.Curve :
      '''                             '''
    ...
    def getSecondDeriv (self: Curve,param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getSpline (self: Curve)-> PyDb.Spline :
      '''                             '''
    ...
    def getSplitCurves (self: Curve,paramsOrPoints: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParam (self: Curve,param: float)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParams (self: Curve,params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoint (self: Curve,point: PyGe.Point3d)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoints (self: Curve,points: list)-> list :
      '''                             '''
    ...
    def getStartParam (self: Curve)-> float :
      '''                             '''
    ...
    def getStartPoint (self: Curve)-> PyGe.Point3d :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def insertVertexAt (self, *args, **kwargs)-> None :
      '''insertVertexAt( (Polyline2d)arg1, (Vertex2d)arg2, (Vertex2d)arg3) -> None :

    C++ signature :
        void insertVertexAt(class PyDb2dPolyline {lvalue},class PyDb2dVertex,class PyDb2dVertex {lvalue})

insertVertexAt( (Polyline2d)arg1, (ObjectId)arg2, (ObjectId)arg3, (Vertex2d)arg4) -> None :

    C++ signature :
        void insertVertexAt(class PyDb2dPolyline {lvalue},class PyDbObjectId {lvalue},class PyDbObjectId,class PyDb2dVertex {lvalue})'''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isClosed (self: Curve)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isLinetypeGenerationOn (self, *args, **kwargs)-> bool :
      '''isLinetypeGenerationOn( (Polyline2d)arg1) -> bool :

    C++ signature :
        bool isLinetypeGenerationOn(class PyDb2dPolyline {lvalue})'''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPeriodic (self: Curve)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def length (self, *args, **kwargs)-> float :
      '''length( (Polyline2d)arg1) -> float :

    C++ signature :
        double length(class PyDb2dPolyline {lvalue})'''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def makeClosed (self, *args, **kwargs)-> None :
      '''makeClosed( (Polyline2d)arg1) -> None :

    C++ signature :
        void makeClosed(class PyDb2dPolyline {lvalue})'''
    ...
    def makeClosedIfStartAndEndVertexCoincide (self, *args, **kwargs)-> None :
      '''makeClosedIfStartAndEndVertexCoincide( (Polyline2d)arg1, (float)arg2) -> None :

    C++ signature :
        void makeClosedIfStartAndEndVertexCoincide(class PyDb2dPolyline {lvalue},double)'''
    ...
    def makeOpen (self, *args, **kwargs)-> None :
      '''makeOpen( (Polyline2d)arg1) -> None :

    C++ signature :
        void makeOpen(class PyDb2dPolyline {lvalue})'''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def normal (self, *args, **kwargs)-> PyGe.Vector3d :
      '''normal( (Polyline2d)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDb2dPolyline {lvalue})'''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def openSequenceEnd (self, *args, **kwargs)-> None :
      '''openSequenceEnd( (Polyline2d)arg1, (SequenceEnd)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void openSequenceEnd(class PyDb2dPolyline {lvalue},class PyDbSequenceEnd {lvalue},enum AcDb::OpenMode)'''
    ...
    def openVertex (self, *args, **kwargs)-> None :
      '''openVertex( (Polyline2d)arg1, (Vertex2d)arg2, (ObjectId)arg3, (OpenMode)arg4) -> None :

    C++ signature :
        void openVertex(class PyDb2dPolyline {lvalue},class PyDb2dVertex {lvalue},class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def polyType (self, *args, **kwargs)-> PyDb.Poly2dType :
      '''polyType( (Polyline2d)arg1) -> Poly2dType :

    C++ signature :
        enum AcDb::Poly2dType polyType(class PyDb2dPolyline {lvalue})'''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def reverseCurve (self: Curve)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setClosed (self, *args, **kwargs)-> None :
      '''setClosed( (Polyline2d)arg1, (bool)arg2) -> None :

    C++ signature :
        void setClosed(class PyDb2dPolyline {lvalue},bool)'''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setConstantWidth (self, *args, **kwargs)-> None :
      '''setConstantWidth( (Polyline2d)arg1, (float)arg2) -> None :

    C++ signature :
        void setConstantWidth(class PyDb2dPolyline {lvalue},double)'''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDefaultEndWidth (self, *args, **kwargs)-> None :
      '''setDefaultEndWidth( (Polyline2d)arg1, (float)arg2) -> None :

    C++ signature :
        void setDefaultEndWidth(class PyDb2dPolyline {lvalue},double)'''
    ...
    def setDefaultStartWidth (self, *args, **kwargs)-> None :
      '''setDefaultStartWidth( (Polyline2d)arg1, (float)arg2) -> None :

    C++ signature :
        void setDefaultStartWidth(class PyDb2dPolyline {lvalue},double)'''
    ...
    def setElevation (self, *args, **kwargs)-> None :
      '''setElevation( (Polyline2d)arg1, (float)arg2) -> None :

    C++ signature :
        void setElevation(class PyDb2dPolyline {lvalue},double)'''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setFromAcGeCurve (self: Curve,curve: PyGe.Curve3d,normal: PyGe.Vector3d = kZAxis,tol: Tol = default)-> None :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeGenerationOff (self, *args, **kwargs)-> None :
      '''setLinetypeGenerationOff( (Polyline2d)arg1) -> None :

    C++ signature :
        void setLinetypeGenerationOff(class PyDb2dPolyline {lvalue})'''
    ...
    def setLinetypeGenerationOn (self, *args, **kwargs)-> None :
      '''setLinetypeGenerationOn( (Polyline2d)arg1) -> None :

    C++ signature :
        void setLinetypeGenerationOn(class PyDb2dPolyline {lvalue})'''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self, *args, **kwargs)-> None :
      '''setNormal( (Polyline2d)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setNormal(class PyDb2dPolyline {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPolyType (self, *args, **kwargs)-> None :
      '''setPolyType( (Polyline2d)arg1, (Poly2dType)arg2) -> None :

    C++ signature :
        void setPolyType(class PyDb2dPolyline {lvalue},enum AcDb::Poly2dType)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setThickness (self, *args, **kwargs)-> None :
      '''setThickness( (Polyline2d)arg1, (float)arg2) -> None :

    C++ signature :
        void setThickness(class PyDb2dPolyline {lvalue},double)'''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def splineFit (self, *args, **kwargs)-> None :
      '''splineFit( (Polyline2d)arg1) -> None :

    C++ signature :
        void splineFit(class PyDb2dPolyline {lvalue})

splineFit( (Polyline2d)arg1, (Poly2dType)arg2, (DxfCode)arg3) -> None :

    C++ signature :
        void splineFit(class PyDb2dPolyline {lvalue},enum AcDb::Poly2dType,short)'''
    ...
    def straighten (self, *args, **kwargs)-> None :
      '''straighten( (Polyline2d)arg1) -> None :

    C++ signature :
        void straighten(class PyDb2dPolyline {lvalue})'''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def thickness (self, *args, **kwargs)-> float :
      '''thickness( (Polyline2d)arg1) -> float :

    C++ signature :
        double thickness(class PyDb2dPolyline {lvalue})'''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def vertexIds (self, *args, **kwargs)-> list :
      '''vertexIds( (Polyline2d)arg1) -> list :

    C++ signature :
        class boost::python::list vertexIds(class PyDb2dPolyline {lvalue})'''
    ...
    def vertexPosition (self, *args, **kwargs)-> PyGe.Point3d :
      '''vertexPosition( (Polyline2d)arg1, (object)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d vertexPosition(class PyDb2dPolyline {lvalue},class AcDb2dVertex)'''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class Polyline3d:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Poly3dType)arg2, (list)arg3, (bool)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,enum AcDb::Poly3dType,class boost::python::list,bool)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def appendVertex (self, *args, **kwargs)-> None :
      '''appendVertex( (Polyline3d)arg1, (Polyline3dVertex)arg2) -> None :

    C++ signature :
        void appendVertex(class PyDb3dPolyline {lvalue},class PyDb3dPolylineVertex)

appendVertex( (Polyline3d)arg1, (ObjectId)arg2, (Polyline3dVertex)arg3) -> None :

    C++ signature :
        void appendVertex(class PyDb3dPolyline {lvalue},class PyDbObjectId {lvalue},class PyDb3dPolylineVertex)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: RxObject)-> PyDb.Polyline3d :
      '''                             '''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: RxObject)-> PyDb.Polyline3d :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def convertToPolyType (self, *args, **kwargs)-> None :
      '''convertToPolyType( (Polyline3d)arg1, (Poly3dType)arg2) -> None :

    C++ signature :
        void convertToPolyType(class PyDb3dPolyline {lvalue},enum AcDb::Poly3dType)'''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def createFromAcGeCurve (curve: PyGe.Curve3d,normal: PyGe.Vector3d = kZAxis,tol: Tol = default)-> PyDb.Curve :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> None :
      '''extend( (Curve)arg1, (float)arg2) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getAcGeCurve (self: Curve,tol: Tol = default)-> PyGe.Curve3d :
      '''                             '''
    ...
    def getArea (self: Curve)-> float :
      '''                             '''
    ...
    def getClosestPointTo (self: Curve,point3d: PyGe.Point3d,direction: PyGe.Vector3d=None,extend: bool=False)-> PyGe.Point3d :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDistAtParam (self: Curve,param: float)-> float :
      '''                             '''
    ...
    def getDistAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEndParam (self: Curve)-> float :
      '''                             '''
    ...
    def getEndPoint (self: Curve)-> PyGe.Point3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self: Curve,param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getOffsetCurves (self: Curve,dist: float)-> list :
      '''                             '''
    ...
    def getOffsetCurvesGivenPlaneNormal (self: Curve,normal: PyGe.Vector3d,dist: float)-> list :
      '''                             '''
    ...
    def getOrthoProjectedCurve (self: Curve,plane: PyGe.Plane)-> PyDb.Curve :
      '''                             '''
    ...
    def getParamAtDist (self: Curve,dist: float)-> float :
      '''                             '''
    ...
    def getParamAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getPointAtDist (self: Curve,dist: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getPointAtParam (self: Curve,param: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getProjectedCurve (self: Curve,plane: PyGe.Plane,projDir: PyGe.Vector3d)-> PyDb.Curve :
      '''                             '''
    ...
    def getSecondDeriv (self: Curve,param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getSpline (self: Curve)-> PyDb.Spline :
      '''                             '''
    ...
    def getSplitCurves (self: Curve,paramsOrPoints: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParam (self: Curve,param: float)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParams (self: Curve,params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoint (self: Curve,point: PyGe.Point3d)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoints (self: Curve,points: list)-> list :
      '''                             '''
    ...
    def getStartParam (self: Curve)-> float :
      '''                             '''
    ...
    def getStartPoint (self: Curve)-> PyGe.Point3d :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def insertVertexAt (self, *args, **kwargs)-> None :
      '''insertVertexAt( (Polyline3d)arg1, (Polyline3dVertex)arg2, (Polyline3dVertex)arg3) -> None :

    C++ signature :
        void insertVertexAt(class PyDb3dPolyline {lvalue},class PyDb3dPolylineVertex,class PyDb3dPolylineVertex {lvalue})

insertVertexAt( (Polyline3d)arg1, (ObjectId)arg2, (ObjectId)arg3, (Polyline3dVertex)arg4) -> None :

    C++ signature :
        void insertVertexAt(class PyDb3dPolyline {lvalue},class PyDbObjectId {lvalue},class PyDbObjectId,class PyDb3dPolylineVertex {lvalue})'''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isClosed (self: Curve)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPeriodic (self: Curve)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def length (self, *args, **kwargs)-> float :
      '''length( (Polyline3d)arg1) -> float :

    C++ signature :
        double length(class PyDb3dPolyline {lvalue})'''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def makeClosed (self, *args, **kwargs)-> None :
      '''makeClosed( (Polyline3d)arg1) -> None :

    C++ signature :
        void makeClosed(class PyDb3dPolyline {lvalue})'''
    ...
    def makeOpen (self, *args, **kwargs)-> None :
      '''makeOpen( (Polyline3d)arg1) -> None :

    C++ signature :
        void makeOpen(class PyDb3dPolyline {lvalue})'''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def openSequenceEnd (self, *args, **kwargs)-> None :
      '''openSequenceEnd( (Polyline3d)arg1, (SequenceEnd)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void openSequenceEnd(class PyDb3dPolyline {lvalue},class PyDbSequenceEnd {lvalue},enum AcDb::OpenMode)'''
    ...
    def openVertex (self, *args, **kwargs)-> None :
      '''openVertex( (Polyline3d)arg1, (Polyline3dVertex)arg2, (ObjectId)arg3, (OpenMode)arg4) -> None :

    C++ signature :
        void openVertex(class PyDb3dPolyline {lvalue},class PyDb3dPolylineVertex {lvalue},class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def polyType (self, *args, **kwargs)-> PyDb.Poly3dType :
      '''polyType( (Polyline3d)arg1) -> Poly3dType :

    C++ signature :
        enum AcDb::Poly3dType polyType(class PyDb3dPolyline {lvalue})'''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def reverseCurve (self: Curve)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setClosed (self, *args, **kwargs)-> None :
      '''setClosed( (Polyline3d)arg1, (bool)arg2) -> None :

    C++ signature :
        void setClosed(class PyDb3dPolyline {lvalue},bool)'''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setFromAcGeCurve (self: Curve,curve: PyGe.Curve3d,normal: PyGe.Vector3d = kZAxis,tol: Tol = default)-> None :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPolyType (self, *args, **kwargs)-> None :
      '''setPolyType( (Polyline3d)arg1, (Poly3dType)arg2) -> None :

    C++ signature :
        void setPolyType(class PyDb3dPolyline {lvalue},enum AcDb::Poly3dType)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def splineFit (self, *args, **kwargs)-> None :
      '''splineFit( (Polyline3d)arg1) -> None :

    C++ signature :
        void splineFit(class PyDb3dPolyline {lvalue})

splineFit( (Polyline3d)arg1, (Poly3dType)arg2, (DxfCode)arg3) -> None :

    C++ signature :
        void splineFit(class PyDb3dPolyline {lvalue},enum AcDb::Poly3dType,short)'''
    ...
    def straighten (self, *args, **kwargs)-> None :
      '''straighten( (Polyline3d)arg1) -> None :

    C++ signature :
        void straighten(class PyDb3dPolyline {lvalue})'''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def vertexIds (self, *args, **kwargs)-> list :
      '''vertexIds( (Polyline3d)arg1) -> list :

    C++ signature :
        class boost::python::list vertexIds(class PyDb3dPolyline {lvalue})'''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class Polyline3dVertex:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: RxObject)-> PyDb.Polyline3dVertex :
      '''                             '''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: RxObject)-> PyDb.Polyline3dVertex :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def position (self: Polyline3dVertex)-> PyGe.Point3d :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self: Polyline3dVertex,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def vertexType (self: Polyline3dVertex)-> object :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class Profile3d:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Entity)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbEntity)

__init__( (object)arg1, (object)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcDb3dProfile)'''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isClosed (self: Profile3d)-> bool :
      '''                             '''
    ...
    def isEdge (self: Profile3d)-> bool :
      '''                             '''
    ...
    def isFace (self: Profile3d)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPlanar (self: Profile3d)-> bool :
      '''                             '''
    ...
    def isSubent (self: Profile3d)-> bool :
      '''                             '''
    ...
    def isValid (self: Profile3d)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...

class RadialDimension:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (float)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,double)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (float)arg4, (str)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (float)arg4, (str)arg5, (ObjectId)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def altSuppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altSuppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altSuppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def altSuppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def alternatePrefix (self: Dimension)-> str :
      '''                             '''
    ...
    def alternateSuffix (self: Dimension)-> str :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockTransform (self: Dimension)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.RadialDimension :
      '''cast( (RxObject)arg1) -> RadialDimension :

    C++ signature :
        class PyDbRadialDimension cast(class PyRxObject)'''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def center (self, *args, **kwargs)-> PyGe.Point3d :
      '''center( (RadialDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d center(class PyDbRadialDimension {lvalue})'''
    ...
    def centerMarkSize (self: Dimension)-> float :
      '''                             '''
    ...
    def chordPoint (self, *args, **kwargs)-> PyGe.Point3d :
      '''chordPoint( (RadialDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d chordPoint(class PyDbRadialDimension {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.RadialDimension :
      '''cloneFrom( (RxObject)arg1) -> RadialDimension :

    C++ signature :
        class PyDbRadialDimension cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimBlockPosition (self: Dimension)-> PyGe.Point3d :
      '''                             '''
    ...
    def dimExt1Linetype (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimExt2Linetype (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimLineLinetype (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimensionStyle (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimensionText (self: Dimension)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevation (self: Dimension)-> float :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extArcEndAngle (self, *args, **kwargs)-> float :
      '''extArcEndAngle( (RadialDimension)arg1) -> float :

    C++ signature :
        double extArcEndAngle(class PyDbRadialDimension {lvalue})'''
    ...
    def extArcStartAngle (self, *args, **kwargs)-> float :
      '''extArcStartAngle( (RadialDimension)arg1) -> float :

    C++ signature :
        double extArcStartAngle(class PyDbRadialDimension {lvalue})'''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def fieldFromMText (self: Dimension,ref : PyDb.MText)-> None :
      '''                             '''
    ...
    def fieldToMText (self: Dimension,ref : PyDb.MText)-> None :
      '''                             '''
    ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self: Dimension)-> None :
      '''                             '''
    ...
    def getArrowFirstIsFlipped (self: Dimension)-> bool :
      '''                             '''
    ...
    def getArrowSecondIsFlipped (self: Dimension)-> bool :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDimstyleData (self: Dimension)-> PyDb.DimStyleTableRecord :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def horizontalRotation (self: Dimension)-> float :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def inspection (self: Dimension)-> bool :
      '''                             '''
    ...
    def inspectionFrame (self: Dimension)-> int :
      '''                             '''
    ...
    def inspectionLabel (self: Dimension)-> str :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self: Dimension)-> bool :
      '''                             '''
    ...
    def isConstraintObject (self: Dimension)-> tuple :
      '''                             '''
    ...
    def isDynamicDimension (self: Dimension)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self: Dimension)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self: Dimension)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def leaderLength (self, *args, **kwargs)-> float :
      '''leaderLength( (RadialDimension)arg1) -> float :

    C++ signature :
        double leaderLength(class PyDbRadialDimension {lvalue})'''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def measurement (self: Dimension)-> float :
      '''                             '''
    ...
    def normal (self: Dimension)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def prefix (self: Dimension)-> str :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recomputeDimBlock (self: Dimension,force : bool=False)-> None :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def removeTextField (self: Dimension)-> None :
      '''                             '''
    ...
    def resetTextDefinedSize (self: Dimension)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAltSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAlternatePrefix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setAlternateSuffix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setArrowFirstIsFlipped (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setArrowSecondIsFlipped (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setCenter (self, *args, **kwargs)-> None :
      '''setCenter( (RadialDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setCenter(class PyDbRadialDimension {lvalue},class AcGePoint3d)'''
    ...
    def setChordPoint (self, *args, **kwargs)-> None :
      '''setChordPoint( (RadialDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setChordPoint(class PyDbRadialDimension {lvalue},class AcGePoint3d)'''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setConstraintDynamic (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDimBlockId (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimBlockPosition (self: Dimension,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setDimExt1Linetype (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimExt2Linetype (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimLineLinetype (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimensionStyle (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimensionText (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setDimstyleData (self, *args, **kwargs)-> None :
      '''setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setElevation (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setExtArcEndAngle (self, *args, **kwargs)-> None :
      '''setExtArcEndAngle( (RadialDimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setExtArcEndAngle(class PyDbRadialDimension {lvalue},double)'''
    ...
    def setExtArcStartAngle (self, *args, **kwargs)-> None :
      '''setExtArcStartAngle( (RadialDimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setExtArcStartAngle(class PyDbRadialDimension {lvalue},double)'''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setHorizontalRefTextRotation (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setHorizontalRotation (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setInspection (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setInspectionFrame (self: Dimension,val : int)-> None :
      '''                             '''
    ...
    def setInspectionLabel (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLeaderLength (self, *args, **kwargs)-> None :
      '''setLeaderLength( (RadialDimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setLeaderLength(class PyDbRadialDimension {lvalue},double)'''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self: Dimension,val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setShouldParticipateInOPM (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuffix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setSuppressAngularTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setTextAttachment (self: Dimension,val : PyDb.MTextAttachmentPoint)-> None :
      '''                             '''
    ...
    def setTextDefinedSize (self: Dimension,width : float,height : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingFactor (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingStyle (self: Dimension,val : PyDb.LineSpacingStyle)-> None :
      '''                             '''
    ...
    def setTextPosition (self: Dimension,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setTextRotation (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setToleranceSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setUsingDefaultTextPosition (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def shouldParticipateInOPM (self: Dimension)-> bool :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def suffix (self: Dimension)-> str :
      '''                             '''
    ...
    def suppressAngularLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressAngularTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAttachment (self: Dimension)-> PyDb.MTextAttachmentPoint :
      '''                             '''
    ...
    def textDefinedSize (self: Dimension)-> tuple :
      '''                             '''
    ...
    def textLineSpacingFactor (self: Dimension)-> float :
      '''                             '''
    ...
    def textLineSpacingStyle (self: Dimension)-> PyDb.LineSpacingStyle :
      '''                             '''
    ...
    def textPosition (self: Dimension)-> PyGe.Point3d :
      '''                             '''
    ...
    def textRotation (self: Dimension)-> float :
      '''                             '''
    ...
    def toleranceSuppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def toleranceSuppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def useDefaultTextPosition (self: Dimension)-> None :
      '''                             '''
    ...
    def useSetTextPosition (self: Dimension)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class RadialDimensionLarge:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (float)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,double)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (float)arg6, (str)arg7) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (float)arg6, (str)arg7, (ObjectId)arg8) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def altSuppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altSuppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altSuppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def altSuppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def alternatePrefix (self: Dimension)-> str :
      '''                             '''
    ...
    def alternateSuffix (self: Dimension)-> str :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockTransform (self: Dimension)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.RadialDimensionLarge :
      '''cast( (RxObject)arg1) -> RadialDimensionLarge :

    C++ signature :
        class PyDbRadialDimensionLarge cast(class PyRxObject)'''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def center (self, *args, **kwargs)-> PyGe.Point3d :
      '''center( (RadialDimensionLarge)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d center(class PyDbRadialDimensionLarge {lvalue})'''
    ...
    def centerMarkSize (self: Dimension)-> float :
      '''                             '''
    ...
    def chordPoint (self, *args, **kwargs)-> PyGe.Point3d :
      '''chordPoint( (RadialDimensionLarge)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d chordPoint(class PyDbRadialDimensionLarge {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.RadialDimensionLarge :
      '''cloneFrom( (RxObject)arg1) -> RadialDimensionLarge :

    C++ signature :
        class PyDbRadialDimensionLarge cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimBlockPosition (self: Dimension)-> PyGe.Point3d :
      '''                             '''
    ...
    def dimExt1Linetype (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimExt2Linetype (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimLineLinetype (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimensionStyle (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimensionText (self: Dimension)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevation (self: Dimension)-> float :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extArcEndAngle (self, *args, **kwargs)-> float :
      '''extArcEndAngle( (RadialDimensionLarge)arg1) -> float :

    C++ signature :
        double extArcEndAngle(class PyDbRadialDimensionLarge {lvalue})'''
    ...
    def extArcStartAngle (self, *args, **kwargs)-> float :
      '''extArcStartAngle( (RadialDimensionLarge)arg1) -> float :

    C++ signature :
        double extArcStartAngle(class PyDbRadialDimensionLarge {lvalue})'''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def fieldFromMText (self: Dimension,ref : PyDb.MText)-> None :
      '''                             '''
    ...
    def fieldToMText (self: Dimension,ref : PyDb.MText)-> None :
      '''                             '''
    ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self: Dimension)-> None :
      '''                             '''
    ...
    def getArrowFirstIsFlipped (self: Dimension)-> bool :
      '''                             '''
    ...
    def getArrowSecondIsFlipped (self: Dimension)-> bool :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDimstyleData (self: Dimension)-> PyDb.DimStyleTableRecord :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def horizontalRotation (self: Dimension)-> float :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def inspection (self: Dimension)-> bool :
      '''                             '''
    ...
    def inspectionFrame (self: Dimension)-> int :
      '''                             '''
    ...
    def inspectionLabel (self: Dimension)-> str :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self: Dimension)-> bool :
      '''                             '''
    ...
    def isConstraintObject (self: Dimension)-> tuple :
      '''                             '''
    ...
    def isDynamicDimension (self: Dimension)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self: Dimension)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self: Dimension)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def jogAngle (self, *args, **kwargs)-> float :
      '''jogAngle( (RadialDimensionLarge)arg1) -> float :

    C++ signature :
        double jogAngle(class PyDbRadialDimensionLarge {lvalue})'''
    ...
    def jogPoint (self, *args, **kwargs)-> PyGe.Point3d :
      '''jogPoint( (RadialDimensionLarge)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d jogPoint(class PyDbRadialDimensionLarge {lvalue})'''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def measurement (self: Dimension)-> float :
      '''                             '''
    ...
    def normal (self: Dimension)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def overrideCenter (self, *args, **kwargs)-> PyGe.Point3d :
      '''overrideCenter( (RadialDimensionLarge)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d overrideCenter(class PyDbRadialDimensionLarge {lvalue})'''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def prefix (self: Dimension)-> str :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recomputeDimBlock (self: Dimension,force : bool=False)-> None :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def removeTextField (self: Dimension)-> None :
      '''                             '''
    ...
    def resetTextDefinedSize (self: Dimension)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAltSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAlternatePrefix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setAlternateSuffix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setArrowFirstIsFlipped (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setArrowSecondIsFlipped (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setCenter (self, *args, **kwargs)-> None :
      '''setCenter( (RadialDimensionLarge)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setCenter(class PyDbRadialDimensionLarge {lvalue},class AcGePoint3d)'''
    ...
    def setChordPoint (self, *args, **kwargs)-> None :
      '''setChordPoint( (RadialDimensionLarge)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setChordPoint(class PyDbRadialDimensionLarge {lvalue},class AcGePoint3d)'''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setConstraintDynamic (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDimBlockId (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimBlockPosition (self: Dimension,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setDimExt1Linetype (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimExt2Linetype (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimLineLinetype (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimensionStyle (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimensionText (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setDimstyleData (self, *args, **kwargs)-> None :
      '''setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setElevation (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setExtArcEndAngle (self, *args, **kwargs)-> None :
      '''setExtArcEndAngle( (RadialDimensionLarge)arg1, (float)arg2) -> None :

    C++ signature :
        void setExtArcEndAngle(class PyDbRadialDimensionLarge {lvalue},double)'''
    ...
    def setExtArcStartAngle (self, *args, **kwargs)-> None :
      '''setExtArcStartAngle( (RadialDimensionLarge)arg1, (float)arg2) -> None :

    C++ signature :
        void setExtArcStartAngle(class PyDbRadialDimensionLarge {lvalue},double)'''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setHorizontalRefTextRotation (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setHorizontalRotation (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setInspection (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setInspectionFrame (self: Dimension,val : int)-> None :
      '''                             '''
    ...
    def setInspectionLabel (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setJogAngle (self, *args, **kwargs)-> None :
      '''setJogAngle( (RadialDimensionLarge)arg1, (float)arg2) -> None :

    C++ signature :
        void setJogAngle(class PyDbRadialDimensionLarge {lvalue},double)'''
    ...
    def setJogPoint (self, *args, **kwargs)-> None :
      '''setJogPoint( (RadialDimensionLarge)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setJogPoint(class PyDbRadialDimensionLarge {lvalue},class AcGePoint3d)'''
    ...
    def setJogPointPP (self, *args, **kwargs)-> None :
      '''setJogPointPP( (RadialDimensionLarge)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setJogPointPP(class PyDbRadialDimensionLarge {lvalue},class AcGePoint3d)'''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self: Dimension,val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOverrideCenter (self, *args, **kwargs)-> None :
      '''setOverrideCenter( (RadialDimensionLarge)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setOverrideCenter(class PyDbRadialDimensionLarge {lvalue},class AcGePoint3d)'''
    ...
    def setOverrideCenterPP (self, *args, **kwargs)-> None :
      '''setOverrideCenterPP( (RadialDimensionLarge)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setOverrideCenterPP(class PyDbRadialDimensionLarge {lvalue},class AcGePoint3d)'''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setShouldParticipateInOPM (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuffix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setSuppressAngularTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setTextAttachment (self: Dimension,val : PyDb.MTextAttachmentPoint)-> None :
      '''                             '''
    ...
    def setTextDefinedSize (self: Dimension,width : float,height : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingFactor (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingStyle (self: Dimension,val : PyDb.LineSpacingStyle)-> None :
      '''                             '''
    ...
    def setTextPosition (self: Dimension,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setTextPositionPP (self, *args, **kwargs)-> None :
      '''setTextPositionPP( (RadialDimensionLarge)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setTextPositionPP(class PyDbRadialDimensionLarge {lvalue},class AcGePoint3d)'''
    ...
    def setTextRotation (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setToleranceSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setUsingDefaultTextPosition (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def shouldParticipateInOPM (self: Dimension)-> bool :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def suffix (self: Dimension)-> str :
      '''                             '''
    ...
    def suppressAngularLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressAngularTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAttachment (self: Dimension)-> PyDb.MTextAttachmentPoint :
      '''                             '''
    ...
    def textDefinedSize (self: Dimension)-> tuple :
      '''                             '''
    ...
    def textLineSpacingFactor (self: Dimension)-> float :
      '''                             '''
    ...
    def textLineSpacingStyle (self: Dimension)-> PyDb.LineSpacingStyle :
      '''                             '''
    ...
    def textPosition (self: Dimension)-> PyGe.Point3d :
      '''                             '''
    ...
    def textRotation (self: Dimension)-> float :
      '''                             '''
    ...
    def toleranceSuppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def toleranceSuppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def useDefaultTextPosition (self: Dimension)-> None :
      '''                             '''
    ...
    def useSetTextPosition (self: Dimension)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class RasterImage:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def brightness (self, *args, **kwargs)-> int :
      '''brightness( (RasterImage)arg1) -> int :

    C++ signature :
        signed char brightness(class PyDbRasterImage {lvalue})'''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.RasterImage :
      '''cast( (RxObject)arg1) -> RasterImage :

    C++ signature :
        class PyDbRasterImage cast(class PyRxObject)'''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def clipBoundary (self, *args, **kwargs)-> list :
      '''clipBoundary( (RasterImage)arg1) -> list :

    C++ signature :
        class boost::python::list clipBoundary(class PyDbRasterImage {lvalue})'''
    ...
    def clipBoundaryType (self, *args, **kwargs)-> PyDb.ClipBoundaryType :
      '''clipBoundaryType( (RasterImage)arg1) -> ClipBoundaryType :

    C++ signature :
        enum AcDbRasterImage::ClipBoundaryType clipBoundaryType(class PyDbRasterImage {lvalue})'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.RasterImage :
      '''cloneFrom( (RxObject)arg1) -> RasterImage :

    C++ signature :
        class PyDbRasterImage cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def contrast (self, *args, **kwargs)-> int :
      '''contrast( (RasterImage)arg1) -> int :

    C++ signature :
        signed char contrast(class PyDbRasterImage {lvalue})'''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def fade (self, *args, **kwargs)-> int :
      '''fade( (RasterImage)arg1) -> int :

    C++ signature :
        signed char fade(class PyDbRasterImage {lvalue})'''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getOrientation (self, *args, **kwargs)-> None :
      '''getOrientation( (RasterImage)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> None :

    C++ signature :
        void getOrientation(class PyDbRasterImage {lvalue},class AcGePoint3d {lvalue},class AcGeVector3d {lvalue},class AcGeVector3d {lvalue})'''
    ...
    def getPixelToModelTransform (self, *args, **kwargs)-> PyGe.Matrix3d :
      '''getPixelToModelTransform( (RasterImage)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d getPixelToModelTransform(class PyDbRasterImage {lvalue})'''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def getVertices (self, *args, **kwargs)-> list :
      '''getVertices( (RasterImage)arg1) -> list :

    C++ signature :
        class boost::python::list getVertices(class PyDbRasterImage {lvalue})'''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def height (self, *args, **kwargs)-> float :
      '''height( (RasterImage)arg1) -> float :

    C++ signature :
        double height(class PyDbRasterImage {lvalue})'''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def imageDefId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''imageDefId( (RasterImage)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId imageDefId(class PyDbRasterImage {lvalue})'''
    ...
    def imageHeight (self, *args, **kwargs)-> float :
      '''imageHeight( (RasterImage)arg1) -> float :

    C++ signature :
        double imageHeight(class PyDbRasterImage {lvalue})'''
    ...
    def imageSize (self, *args, **kwargs)-> PyGe.Vector2d :
      '''imageSize( (RasterImage)arg1) -> Vector2d :

    C++ signature :
        class AcGeVector2d imageSize(class PyDbRasterImage {lvalue})

imageSize( (RasterImage)arg1, (bool)arg2) -> Vector2d :

    C++ signature :
        class AcGeVector2d imageSize(class PyDbRasterImage {lvalue},bool)'''
    ...
    def imageWidth (self, *args, **kwargs)-> float :
      '''imageWidth( (RasterImage)arg1) -> float :

    C++ signature :
        double imageWidth(class PyDbRasterImage {lvalue})'''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isClipInverted (self, *args, **kwargs)-> bool :
      '''isClipInverted( (RasterImage)arg1) -> bool :

    C++ signature :
        bool isClipInverted(class PyDbRasterImage {lvalue})'''
    ...
    def isClipped (self, *args, **kwargs)-> bool :
      '''isClipped( (RasterImage)arg1) -> bool :

    C++ signature :
        bool isClipped(class PyDbRasterImage {lvalue})'''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isImageShown (self, *args, **kwargs)-> bool :
      '''isImageShown( (RasterImage)arg1) -> bool :

    C++ signature :
        bool isImageShown(class PyDbRasterImage {lvalue})'''
    ...
    def isImageTransparent (self, *args, **kwargs)-> bool :
      '''isImageTransparent( (RasterImage)arg1) -> bool :

    C++ signature :
        bool isImageTransparent(class PyDbRasterImage {lvalue})'''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isSetDisplayOpt (self, *args, **kwargs)-> bool :
      '''isSetDisplayOpt( (RasterImage)arg1, (ImageDisplayOpt)arg2) -> bool :

    C++ signature :
        bool isSetDisplayOpt(class PyDbRasterImage {lvalue},enum AcDbRasterImage::ImageDisplayOpt)'''
    ...
    def isShownClipped (self, *args, **kwargs)-> bool :
      '''isShownClipped( (RasterImage)arg1) -> bool :

    C++ signature :
        bool isShownClipped(class PyDbRasterImage {lvalue})'''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def position (self, *args, **kwargs)-> PyGe.Point3d :
      '''position( (RasterImage)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDbRasterImage {lvalue})'''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def reactorId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''reactorId( (RasterImage)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId reactorId(class PyDbRasterImage {lvalue})'''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self, *args, **kwargs)-> float :
      '''rotation( (RasterImage)arg1) -> float :

    C++ signature :
        double rotation(class PyDbRasterImage {lvalue})'''
    ...
    def scale (self, *args, **kwargs)-> PyGe.Vector2d :
      '''scale( (RasterImage)arg1) -> Vector2d :

    C++ signature :
        class AcGeVector2d scale(class PyDbRasterImage {lvalue})'''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBrightness (self, *args, **kwargs)-> None :
      '''setBrightness( (RasterImage)arg1, (MlineJustification)arg2) -> None :

    C++ signature :
        void setBrightness(class PyDbRasterImage {lvalue},signed char)'''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setClipBoundaryToWholeImage (self, *args, **kwargs)-> None :
      '''setClipBoundaryToWholeImage( (RasterImage)arg1, (Vector2d)arg2) -> None :

    C++ signature :
        void setClipBoundaryToWholeImage(class PyDbRasterImage {lvalue},class AcGeVector2d {lvalue})'''
    ...
    def setClipInverted (self, *args, **kwargs)-> None :
      '''setClipInverted( (RasterImage)arg1, (bool)arg2) -> None :

    C++ signature :
        void setClipInverted(class PyDbRasterImage {lvalue},bool)'''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setContrast (self, *args, **kwargs)-> None :
      '''setContrast( (RasterImage)arg1, (MlineJustification)arg2) -> None :

    C++ signature :
        void setContrast(class PyDbRasterImage {lvalue},signed char)'''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDisplayOpt (self, *args, **kwargs)-> None :
      '''setDisplayOpt( (RasterImage)arg1, (ImageDisplayOpt)arg2, (bool)arg3) -> None :

    C++ signature :
        void setDisplayOpt(class PyDbRasterImage {lvalue},enum AcDbRasterImage::ImageDisplayOpt,bool)'''
    ...
    def setFade (self, *args, **kwargs)-> None :
      '''setFade( (RasterImage)arg1, (MlineJustification)arg2) -> None :

    C++ signature :
        void setFade(class PyDbRasterImage {lvalue},signed char)'''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setHeight (self, *args, **kwargs)-> None :
      '''setHeight( (RasterImage)arg1, (float)arg2) -> None :

    C++ signature :
        void setHeight(class PyDbRasterImage {lvalue},double)'''
    ...
    def setImageDefId (self, *args, **kwargs)-> None :
      '''setImageDefId( (RasterImage)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setImageDefId(class PyDbRasterImage {lvalue},class PyDbObjectId)'''
    ...
    def setImageTransparency (self, *args, **kwargs)-> None :
      '''setImageTransparency( (RasterImage)arg1, (bool)arg2) -> None :

    C++ signature :
        void setImageTransparency(class PyDbRasterImage {lvalue},bool)'''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOrientation (self, *args, **kwargs)-> bool :
      '''setOrientation( (RasterImage)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> bool :

    C++ signature :
        bool setOrientation(class PyDbRasterImage {lvalue},class AcGePoint3d,class AcGeVector3d,class AcGeVector3d)'''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReactorId (self, *args, **kwargs)-> None :
      '''setReactorId( (RasterImage)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setReactorId(class PyDbRasterImage {lvalue},class PyDbObjectId)'''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setRotation (self, *args, **kwargs)-> None :
      '''setRotation( (RasterImage)arg1, (float)arg2) -> None :

    C++ signature :
        void setRotation(class PyDbRasterImage {lvalue},double)'''
    ...
    def setShowClipped (self, *args, **kwargs)-> None :
      '''setShowClipped( (RasterImage)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShowClipped(class PyDbRasterImage {lvalue},bool)'''
    ...
    def setShowImage (self, *args, **kwargs)-> None :
      '''setShowImage( (RasterImage)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShowImage(class PyDbRasterImage {lvalue},bool)'''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setWidth (self, *args, **kwargs)-> None :
      '''setWidth( (RasterImage)arg1, (float)arg2) -> None :

    C++ signature :
        void setWidth(class PyDbRasterImage {lvalue},double)'''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def width (self, *args, **kwargs)-> float :
      '''width( (RasterImage)arg1) -> float :

    C++ signature :
        double width(class PyDbRasterImage {lvalue})'''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class RasterImageDef:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def activeFileName (self, *args, **kwargs)-> str :
      '''activeFileName( (RasterImageDef)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > activeFileName(class PyDbRasterImageDef {lvalue})'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.RasterImageDef :
      '''cast( (RxObject)arg1) -> RasterImageDef :

    C++ signature :
        class PyDbRasterImageDef cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.RasterImageDef :
      '''cloneFrom( (RxObject)arg1) -> RasterImageDef :

    C++ signature :
        class PyDbRasterImageDef cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def createImageDictionary (self, *args, **kwargs)-> PyDb.ObjectId :
      '''createImageDictionary( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId createImageDictionary(class PyDbDatabase {lvalue})'''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def embed (self, *args, **kwargs)-> None :
      '''embed( (RasterImageDef)arg1) -> None :

    C++ signature :
        void embed(class PyDbRasterImageDef {lvalue})'''
    ...
    def entityCount (self, *args, **kwargs)-> int :
      '''entityCount( (RasterImageDef)arg1) -> int :

    C++ signature :
        int entityCount(class PyDbRasterImageDef {lvalue})'''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def fileType (self, *args, **kwargs)-> str :
      '''fileType( (RasterImageDef)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > fileType(class PyDbRasterImageDef {lvalue})'''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def imageDictionary (self, *args, **kwargs)-> PyDb.ObjectId :
      '''imageDictionary( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId imageDictionary(class PyDbDatabase {lvalue})'''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEmbedded (self, *args, **kwargs)-> bool :
      '''isEmbedded( (RasterImageDef)arg1) -> bool :

    C++ signature :
        bool isEmbedded(class PyDbRasterImageDef {lvalue})'''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isLoaded (self, *args, **kwargs)-> bool :
      '''isLoaded( (RasterImageDef)arg1) -> bool :

    C++ signature :
        bool isLoaded(class PyDbRasterImageDef {lvalue})'''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def load (self, *args, **kwargs)-> None :
      '''load( (RasterImageDef)arg1) -> None :

    C++ signature :
        void load(class PyDbRasterImageDef {lvalue})'''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def resolutionMMPerPixel (self, *args, **kwargs)-> PyGe.Vector2d :
      '''resolutionMMPerPixel( (RasterImageDef)arg1) -> Vector2d :

    C++ signature :
        class AcGeVector2d resolutionMMPerPixel(class PyDbRasterImageDef {lvalue})'''
    ...
    def resolutionUnits (self, *args, **kwargs)-> PyDb.ImageUnits :
      '''resolutionUnits( (RasterImageDef)arg1) -> ImageUnits :

    C++ signature :
        enum AcDbRasterImageDef::Units resolutionUnits(class PyDbRasterImageDef {lvalue})'''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def searchForActivePath (self, *args, **kwargs)-> str :
      '''searchForActivePath( (RasterImageDef)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > searchForActivePath(class PyDbRasterImageDef {lvalue})'''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setActiveFileName (self, *args, **kwargs)-> None :
      '''setActiveFileName( (RasterImageDef)arg1, (str)arg2) -> None :

    C++ signature :
        void setActiveFileName(class PyDbRasterImageDef {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setResolutionMMPerPixel (self, *args, **kwargs)-> None :
      '''setResolutionMMPerPixel( (RasterImageDef)arg1, (Vector2d)arg2) -> None :

    C++ signature :
        void setResolutionMMPerPixel(class PyDbRasterImageDef {lvalue},class AcGeVector2d)'''
    ...
    def setResolutionUnits (self, *args, **kwargs)-> None :
      '''setResolutionUnits( (RasterImageDef)arg1, (ImageUnits)arg2) -> None :

    C++ signature :
        void setResolutionUnits(class PyDbRasterImageDef {lvalue},enum AcDbRasterImageDef::Units)'''
    ...
    def setSourceFileName (self, *args, **kwargs)-> None :
      '''setSourceFileName( (RasterImageDef)arg1, (str)arg2) -> None :

    C++ signature :
        void setSourceFileName(class PyDbRasterImageDef {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def size (self, *args, **kwargs)-> PyGe.Vector2d :
      '''size( (RasterImageDef)arg1) -> Vector2d :

    C++ signature :
        class AcGeVector2d size(class PyDbRasterImageDef {lvalue})'''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def sourceFileName (self, *args, **kwargs)-> str :
      '''sourceFileName( (RasterImageDef)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > sourceFileName(class PyDbRasterImageDef {lvalue})'''
    ...
    def suggestName (self, *args, **kwargs)-> str :
      '''suggestName( (Dictionary)arg1, (str)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > suggestName(class PyDbDictionary {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def unload (self, *args, **kwargs)-> None :
      '''unload( (RasterImageDef)arg1) -> None :

    C++ signature :
        void unload(class PyDbRasterImageDef {lvalue})

unload( (RasterImageDef)arg1, (bool)arg2) -> None :

    C++ signature :
        void unload(class PyDbRasterImageDef {lvalue},bool)'''
    ...
    def updateEntities (self, *args, **kwargs)-> None :
      '''updateEntities( (RasterImageDef)arg1) -> None :

    C++ signature :
        void updateEntities(class PyDbRasterImageDef {lvalue})'''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class RasterImageDefReactor:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.RasterImageDefReactor :
      '''cast( (RxObject)arg1) -> RasterImageDefReactor :

    C++ signature :
        class PyDbRasterImageDefReactor cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.RasterImageDefReactor :
      '''cloneFrom( (RxObject)arg1) -> RasterImageDefReactor :

    C++ signature :
        class PyDbRasterImageDefReactor cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setEnable (self, *args, **kwargs)-> None :
      '''setEnable( (bool)arg1) -> None :

    C++ signature :
        void setEnable(bool)'''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class RegAppTable:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def add (self, *args, **kwargs)-> PyDb.ObjectId :
      '''add( (RegAppTable)arg1, (RegAppTableRecord)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId add(class PyDbRegAppTable {lvalue},class PyDbRegAppTableRecord)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.RegAppTable :
      '''cast( (RxObject)arg1) -> RegAppTable :

    C++ signature :
        class PyDbRegAppTable cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.RegAppTable :
      '''cloneFrom( (RxObject)arg1) -> RegAppTable :

    C++ signature :
        class PyDbRegAppTable cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getAt (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getAt( (SymbolTable)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getAt(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has (self, *args, **kwargs)-> bool :
      '''has( (SymbolTable)arg1, (str)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

has( (SymbolTable)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class PyDbObjectId)'''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def recordIds (self, *args, **kwargs)-> list :
      '''recordIds( (SymbolTable)arg1) -> list :

    C++ signature :
        class boost::python::list recordIds(class PyDbSymbolTable {lvalue})'''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def toDict (self, *args, **kwargs)-> dict :
      '''toDict( (SymbolTable)arg1) -> dict :

    C++ signature :
        class boost::python::dict toDict(class PyDbSymbolTable {lvalue})'''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class RegAppTableRecord:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.RegAppTableRecord :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.RegAppTableRecord :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getName (self: SymbolTableRecord)-> str :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isDependent (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isRenamable (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isResolved (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def name (self: SymbolTableRecord)-> str :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setName (self: SymbolTableRecord,name: str)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class Region:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.Region :
      '''cast( (RxObject)arg1) -> Region :

    C++ signature :
        class PyDbRegion cast(class PyRxObject)'''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.Region :
      '''cloneFrom( (RxObject)arg1) -> Region :

    C++ signature :
        class PyDbRegion cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def createFromCurves (self, *args, **kwargs)-> list :
      '''createFromCurves( (list)arg1) -> list :

    C++ signature :
        class boost::python::list createFromCurves(class boost::python::list)'''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (Region)arg1) -> bool :

    C++ signature :
        bool isNull(class PyDbRegion {lvalue})'''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class RemapFileContext:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kAfterXrefResolution (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDrawingOpen (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kRasterResolution (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kXrefResolution (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class ReservedStringEnumType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kByBlock (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kByColor (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kByLayer (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kContinuous (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kData (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDefPoints (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDefault (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kGlobal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHeader (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMissing (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kModel (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNormal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kReservedStringCount (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kStandard (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTitle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVS2DWireframe (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVS3DHidden (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVS3DWireframe (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVSConceptual (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVSRealistic (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVSShaded (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVSShadedWithEdges (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVSShadesOfGray (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVSSketchy (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVSXRay (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class RevolveOptions:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def checkRevolveCurve (self, *args, **kwargs)-> tuple :
      '''checkRevolveCurve( (RevolveOptions)arg1, (Entity)arg2, (Point3d)arg3, (Vector3d)arg4) -> tuple :

    C++ signature :
        class boost::python::tuple checkRevolveCurve(class PyDbRevolveOptions {lvalue},class PyDbEntity {lvalue},class AcGePoint3d,class AcGeVector3d)

checkRevolveCurve( (RevolveOptions)arg1, (Entity)arg2, (Point3d)arg3, (Vector3d)arg4, (bool)arg5) -> tuple :

    C++ signature :
        class boost::python::tuple checkRevolveCurve(class PyDbRevolveOptions {lvalue},class PyDbEntity {lvalue},class AcGePoint3d,class AcGeVector3d,bool)'''
    ...
    def closeToAxis (self, *args, **kwargs)-> bool :
      '''closeToAxis( (RevolveOptions)arg1) -> bool :

    C++ signature :
        bool closeToAxis(class PyDbRevolveOptions {lvalue})'''
    ...
    def draftAngle (self, *args, **kwargs)-> float :
      '''draftAngle( (RevolveOptions)arg1) -> float :

    C++ signature :
        double draftAngle(class PyDbRevolveOptions {lvalue})'''
    ...
    def setCloseToAxis (self, *args, **kwargs)-> None :
      '''setCloseToAxis( (RevolveOptions)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCloseToAxis(class PyDbRevolveOptions {lvalue},bool)'''
    ...
    def setDraftAngle (self, *args, **kwargs)-> None :
      '''setDraftAngle( (RevolveOptions)arg1, (float)arg2) -> None :

    C++ signature :
        void setDraftAngle(class PyDbRevolveOptions {lvalue},double)'''
    ...
    def setTwistAngle (self, *args, **kwargs)-> None :
      '''setTwistAngle( (RevolveOptions)arg1, (float)arg2) -> None :

    C++ signature :
        void setTwistAngle(class PyDbRevolveOptions {lvalue},double)'''
    ...
    def twistAngle (self, *args, **kwargs)-> float :
      '''twistAngle( (RevolveOptions)arg1) -> float :

    C++ signature :
        double twistAngle(class PyDbRevolveOptions {lvalue})'''
    ...

class RevolvedSurface:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.RevolvedSurface :
      '''cast( (RxObject)arg1) -> RevolvedSurface :

    C++ signature :
        class PyDbRevolvedSurface cast(class PyRxObject)'''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.RevolvedSurface :
      '''cloneFrom( (RxObject)arg1) -> RevolvedSurface :

    C++ signature :
        class PyDbRevolvedSurface cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def createExtrudedSurface (self, *args, **kwargs)-> PyDb.ExtrudedSurface :
      '''createExtrudedSurface( (Profile3d)arg1, (Vector3d)arg2, (SweepOptions)arg3) -> ExtrudedSurface :

    C++ signature :
        class PyDbExtrudedSurface createExtrudedSurface(class PyDb3dProfile {lvalue},class AcGeVector3d,class PyDbSweepOptions {lvalue})'''
    ...
    def createFrom (self, *args, **kwargs)-> PyDb.Surface :
      '''createFrom( (Entity)arg1) -> Surface :

    C++ signature :
        class PyDbSurface createFrom(class PyDbEntity)'''
    ...
    def creationActionBodyId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''creationActionBodyId( (Surface)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId creationActionBodyId(class PyDbSurface {lvalue})'''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extendEdges (self, *args, **kwargs)-> None :
      '''extendEdges( (Surface)arg1, (list)arg2, (float)arg3, (SurfaceEdgeExtensionType)arg4, (bool)arg5) -> None :

    C++ signature :
        void extendEdges(class PyDbSurface {lvalue},class boost::python::list {lvalue},double,enum AcDbSurface::EdgeExtensionType,bool)'''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getArea (self, *args, **kwargs)-> float :
      '''getArea( (Surface)arg1) -> float :

    C++ signature :
        double getArea(class PyDbSurface {lvalue})'''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPerimeter (self, *args, **kwargs)-> float :
      '''getPerimeter( (Surface)arg1) -> float :

    C++ signature :
        double getPerimeter(class PyDbSurface {lvalue})'''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def getWireframeType (self, *args, **kwargs)-> PyDb.SurfaceWireframeType :
      '''getWireframeType( (Surface)arg1) -> SurfaceWireframeType :

    C++ signature :
        enum AcDbSurface::WireframeType getWireframeType(class PyDbSurface {lvalue})'''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def modificationActionBodyIds (self, *args, **kwargs)-> list :
      '''modificationActionBodyIds( (Surface)arg1) -> list :

    C++ signature :
        class boost::python::list modificationActionBodyIds(class PyDbSurface {lvalue})'''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def projectOnToSurface (self, *args, **kwargs)-> list :
      '''projectOnToSurface( (Surface)arg1, (Entity)arg2, (Vector3d)arg3) -> list :

    C++ signature :
        class boost::python::list projectOnToSurface(class PyDbSurface {lvalue},class PyDbEntity,class AcGeVector3d)'''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def rayTest (self, *args, **kwargs)-> tuple :
      '''rayTest( (Surface)arg1, (Point3d)arg2, (Vector3d)arg3, (float)arg4) -> tuple :

    C++ signature :
        class boost::python::tuple rayTest(class PyDbSurface {lvalue},class AcGePoint3d,class AcGeVector3d,double)'''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setUIsolineDensity (self, *args, **kwargs)-> None :
      '''setUIsolineDensity( (Surface)arg1, (int)arg2) -> None :

    C++ signature :
        void setUIsolineDensity(class PyDbSurface {lvalue},unsigned short)'''
    ...
    def setVIsolineDensity (self, *args, **kwargs)-> None :
      '''setVIsolineDensity( (Surface)arg1, (int)arg2) -> None :

    C++ signature :
        void setVIsolineDensity(class PyDbSurface {lvalue},unsigned short)'''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setWireframeType (self, *args, **kwargs)-> None :
      '''setWireframeType( (Surface)arg1, (SurfaceWireframeType)arg2) -> None :

    C++ signature :
        void setWireframeType(class PyDbSurface {lvalue},enum AcDbSurface::WireframeType)'''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def uIsolineDensity (self, *args, **kwargs)-> int :
      '''uIsolineDensity( (Surface)arg1) -> int :

    C++ signature :
        unsigned short uIsolineDensity(class PyDbSurface {lvalue})'''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def vIsolineDensity (self, *args, **kwargs)-> int :
      '''vIsolineDensity( (Surface)arg1) -> int :

    C++ signature :
        unsigned short vIsolineDensity(class PyDbSurface {lvalue})'''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class RotatedDimType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kParallel (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPerpendicular (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnknown (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class RotatedDimension:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (float)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,double,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d)

__init__( (object)arg1, (float)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (str)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,double,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (float)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (str)arg6, (ObjectId)arg7) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,double,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def altSuppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altSuppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altSuppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def altSuppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def alternatePrefix (self: Dimension)-> str :
      '''                             '''
    ...
    def alternateSuffix (self: Dimension)-> str :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockTransform (self: Dimension)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.RotatedDimension :
      '''cast( (RxObject)arg1) -> RotatedDimension :

    C++ signature :
        class PyDbRotatedDimension cast(class PyRxObject)'''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def centerMarkSize (self: Dimension)-> float :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.RotatedDimension :
      '''cloneFrom( (RxObject)arg1) -> RotatedDimension :

    C++ signature :
        class PyDbRotatedDimension cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimBlockPosition (self: Dimension)-> PyGe.Point3d :
      '''                             '''
    ...
    def dimExt1Linetype (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimExt2Linetype (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimLineLinetype (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimLinePoint (self, *args, **kwargs)-> PyGe.Point3d :
      '''dimLinePoint( (RotatedDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimLinePoint(class PyDbRotatedDimension {lvalue})'''
    ...
    def dimensionStyle (self: Dimension)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimensionText (self: Dimension)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevation (self: Dimension)-> float :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def fieldFromMText (self: Dimension,ref : PyDb.MText)-> None :
      '''                             '''
    ...
    def fieldToMText (self: Dimension,ref : PyDb.MText)-> None :
      '''                             '''
    ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self: Dimension)-> None :
      '''                             '''
    ...
    def getArrowFirstIsFlipped (self: Dimension)-> bool :
      '''                             '''
    ...
    def getArrowSecondIsFlipped (self: Dimension)-> bool :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDimstyleData (self: Dimension)-> PyDb.DimStyleTableRecord :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def horizontalRotation (self: Dimension)-> float :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def inspection (self: Dimension)-> bool :
      '''                             '''
    ...
    def inspectionFrame (self: Dimension)-> int :
      '''                             '''
    ...
    def inspectionLabel (self: Dimension)-> str :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self: Dimension)-> bool :
      '''                             '''
    ...
    def isConstraintObject (self: Dimension)-> tuple :
      '''                             '''
    ...
    def isDynamicDimension (self: Dimension)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self: Dimension)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self: Dimension)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def jogSymbolOn (self, *args, **kwargs)-> bool :
      '''jogSymbolOn( (RotatedDimension)arg1) -> bool :

    C++ signature :
        bool jogSymbolOn(class PyDbRotatedDimension {lvalue})'''
    ...
    def jogSymbolPosition (self, *args, **kwargs)-> PyGe.Point3d :
      '''jogSymbolPosition( (RotatedDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d jogSymbolPosition(class PyDbRotatedDimension {lvalue})'''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def measurement (self: Dimension)-> float :
      '''                             '''
    ...
    def normal (self: Dimension)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def oblique (self, *args, **kwargs)-> float :
      '''oblique( (RotatedDimension)arg1) -> float :

    C++ signature :
        double oblique(class PyDbRotatedDimension {lvalue})'''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def prefix (self: Dimension)-> str :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recomputeDimBlock (self: Dimension,force : bool=False)-> None :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def removeTextField (self: Dimension)-> None :
      '''                             '''
    ...
    def resetTextDefinedSize (self: Dimension)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self, *args, **kwargs)-> float :
      '''rotation( (RotatedDimension)arg1) -> float :

    C++ signature :
        double rotation(class PyDbRotatedDimension {lvalue})'''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAltSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAlternatePrefix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setAlternateSuffix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setArrowFirstIsFlipped (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setArrowSecondIsFlipped (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setConstraintDynamic (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDimBlockId (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimBlockPosition (self: Dimension,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setDimExt1Linetype (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimExt2Linetype (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimLineLinetype (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimLinePoint (self, *args, **kwargs)-> None :
      '''setDimLinePoint( (RotatedDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setDimLinePoint(class PyDbRotatedDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimensionStyle (self: Dimension,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimensionText (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setDimstyleData (self, *args, **kwargs)-> None :
      '''setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> None :

    C++ signature :
        void setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setElevation (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setHorizontalRefTextRotation (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setHorizontalRotation (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setInspection (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setInspectionFrame (self: Dimension,val : int)-> None :
      '''                             '''
    ...
    def setInspectionLabel (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setJogSymbolOn (self, *args, **kwargs)-> None :
      '''setJogSymbolOn( (RotatedDimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setJogSymbolOn(class PyDbRotatedDimension {lvalue},bool)'''
    ...
    def setJogSymbolPosition (self, *args, **kwargs)-> None :
      '''setJogSymbolPosition( (RotatedDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setJogSymbolPosition(class PyDbRotatedDimension {lvalue},class AcGePoint3d)'''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self: Dimension,val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOblique (self, *args, **kwargs)-> None :
      '''setOblique( (RotatedDimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setOblique(class PyDbRotatedDimension {lvalue},double)'''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setRotation (self, *args, **kwargs)-> None :
      '''setRotation( (RotatedDimension)arg1, (float)arg2) -> None :

    C++ signature :
        void setRotation(class PyDbRotatedDimension {lvalue},double)'''
    ...
    def setShouldParticipateInOPM (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuffix (self: Dimension,val : str)-> None :
      '''                             '''
    ...
    def setSuppressAngularTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setTextAttachment (self: Dimension,val : PyDb.MTextAttachmentPoint)-> None :
      '''                             '''
    ...
    def setTextDefinedSize (self: Dimension,width : float,height : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingFactor (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingStyle (self: Dimension,val : PyDb.LineSpacingStyle)-> None :
      '''                             '''
    ...
    def setTextPosition (self: Dimension,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setTextRotation (self: Dimension,val : float)-> None :
      '''                             '''
    ...
    def setToleranceSuppressLeadingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressTrailingZeros (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroFeet (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroInches (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setUsingDefaultTextPosition (self: Dimension,val : bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def setXLine1Point (self, *args, **kwargs)-> None :
      '''setXLine1Point( (RotatedDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setXLine1Point(class PyDbRotatedDimension {lvalue},class AcGePoint3d)'''
    ...
    def setXLine2Point (self, *args, **kwargs)-> None :
      '''setXLine2Point( (RotatedDimension)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setXLine2Point(class PyDbRotatedDimension {lvalue},class AcGePoint3d)'''
    ...
    def shouldParticipateInOPM (self: Dimension)-> bool :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def suffix (self: Dimension)-> str :
      '''                             '''
    ...
    def suppressAngularLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressAngularTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def suppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAttachment (self: Dimension)-> PyDb.MTextAttachmentPoint :
      '''                             '''
    ...
    def textDefinedSize (self: Dimension)-> tuple :
      '''                             '''
    ...
    def textLineSpacingFactor (self: Dimension)-> float :
      '''                             '''
    ...
    def textLineSpacingStyle (self: Dimension)-> PyDb.LineSpacingStyle :
      '''                             '''
    ...
    def textPosition (self: Dimension)-> PyGe.Point3d :
      '''                             '''
    ...
    def textRotation (self: Dimension)-> float :
      '''                             '''
    ...
    def toleranceSuppressLeadingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def toleranceSuppressTrailingZeros (self: Dimension)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroFeet (self: Dimension)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroInches (self: Dimension)-> bool :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def useDefaultTextPosition (self: Dimension)-> None :
      '''                             '''
    ...
    def useSetTextPosition (self: Dimension)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xLine1Point (self, *args, **kwargs)-> PyGe.Point3d :
      '''xLine1Point( (RotatedDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine1Point(class PyDbRotatedDimension {lvalue})'''
    ...
    def xLine2Point (self, *args, **kwargs)-> PyGe.Point3d :
      '''xLine2Point( (RotatedDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine2Point(class PyDbRotatedDimension {lvalue})'''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class RotationAngle:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kDegrees000 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDegrees090 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDegrees180 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDegrees270 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDegreesUnknown (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class RowType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kAllRowTypes (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDataRow (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHeaderRow (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTitleRow (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnknownRow (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class SegType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kArc (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCoincident (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEmpty (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLine (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPoint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class SequenceEnd:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.SequenceEnd :
      '''cast( (RxObject)arg1) -> SequenceEnd :

    C++ signature :
        class PyDbSequenceEnd cast(class PyRxObject)'''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.SequenceEnd :
      '''cloneFrom( (RxObject)arg1) -> SequenceEnd :

    C++ signature :
        class PyDbSequenceEnd cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class ShadePlotResLevel:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kAsDisplayed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCustom (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMaximum (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNormal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPresentation (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPreview (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class ShadePlotType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kAsDisplayed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHidden (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kRenderPreset (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kRendered (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVisualStyle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kWireframe (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class SnoopDwgFiler:
    def __init__ (self: SnoopDwgFiler,filerType: PyDb.FilerType)-> None :
      '''                             '''
    ...
    def buffer (self: SnoopDwgFiler)-> list :
      '''                             '''
    ...

class SoftOwnershipId:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)'''
    ...
    def asOldId (self: ObjectId)-> int :
      '''                             '''
    ...
    def convertToRedirectedId (self: ObjectId)-> bool :
      '''                             '''
    ...
    def database (self: ObjectId)-> PyDb.Database :
      '''                             '''
    ...

    @staticmethod
    def fromOldId (oldid : int)-> PyDb.ObjectId :
      '''                             '''
    ...
    def handle (self: ObjectId)-> PyDb.Handle :
      '''                             '''
    ...
    def isDerivedFrom (self: ObjectId,desc : PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isEffectivelyErased (self: ObjectId)-> bool :
      '''                             '''
    ...
    def isErased (self: ObjectId)-> bool :
      '''                             '''
    ...
    def isNull (self: ObjectId)-> bool :
      '''                             '''
    ...
    def isResident (self: ObjectId)-> bool :
      '''                             '''
    ...
    def isValid (self: ObjectId)-> bool :
      '''                             '''
    ...
    def isWellBehaved (self: ObjectId)-> bool :
      '''                             '''
    ...
    def nonForwardedHandle (self: ObjectId)-> PyDb.Handle :
      '''                             '''
    ...
    def objectClass (self: ObjectId)-> PyRx.RxClass :
      '''                             '''
    ...
    def objectLeftOnDisk (self: ObjectId)-> bool :
      '''                             '''
    ...
    def originalDatabase (self: ObjectId)-> PyDb.Database :
      '''                             '''
    ...
    def setFromOldId (self: ObjectId,oldid : int)-> None :
      '''                             '''
    ...

class SoftPointerId:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)'''
    ...
    def asOldId (self: ObjectId)-> int :
      '''                             '''
    ...
    def convertToRedirectedId (self: ObjectId)-> bool :
      '''                             '''
    ...
    def database (self: ObjectId)-> PyDb.Database :
      '''                             '''
    ...

    @staticmethod
    def fromOldId (oldid : int)-> PyDb.ObjectId :
      '''                             '''
    ...
    def handle (self: ObjectId)-> PyDb.Handle :
      '''                             '''
    ...
    def isDerivedFrom (self: ObjectId,desc : PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isEffectivelyErased (self: ObjectId)-> bool :
      '''                             '''
    ...
    def isErased (self: ObjectId)-> bool :
      '''                             '''
    ...
    def isNull (self: ObjectId)-> bool :
      '''                             '''
    ...
    def isResident (self: ObjectId)-> bool :
      '''                             '''
    ...
    def isValid (self: ObjectId)-> bool :
      '''                             '''
    ...
    def isWellBehaved (self: ObjectId)-> bool :
      '''                             '''
    ...
    def nonForwardedHandle (self: ObjectId)-> PyDb.Handle :
      '''                             '''
    ...
    def objectClass (self: ObjectId)-> PyRx.RxClass :
      '''                             '''
    ...
    def objectLeftOnDisk (self: ObjectId)-> bool :
      '''                             '''
    ...
    def originalDatabase (self: ObjectId)-> PyDb.Database :
      '''                             '''
    ...
    def setFromOldId (self: ObjectId,oldid : int)-> None :
      '''                             '''
    ...

class Solid3d:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def booleanOper (self, *args, **kwargs)-> None :
      '''booleanOper( (Solid3d)arg1, (BoolOperType)arg2, (Solid3d)arg3) -> None :

    C++ signature :
        void booleanOper(class PyDb3dSolid {lvalue},enum AcDb::BoolOperType,class PyDb3dSolid {lvalue})'''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.Solid3d :
      '''cast( (RxObject)arg1) -> Solid3d :

    C++ signature :
        class PyDb3dSolid cast(class PyRxObject)'''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def chamferEdges (self, *args, **kwargs)-> None :
      '''chamferEdges( (Solid3d)arg1, (list)arg2, (SubentId)arg3, (float)arg4, (float)arg5) -> None :

    C++ signature :
        void chamferEdges(class PyDb3dSolid {lvalue},class boost::python::list,class PyDbSubentId,double,double)'''
    ...
    def checkInterference (self, *args, **kwargs)-> tuple :
      '''checkInterference( (Solid3d)arg1, (Solid3d)arg2, (bool)arg3) -> tuple :

    C++ signature :
        class boost::python::tuple checkInterference(class PyDb3dSolid {lvalue},class PyDb3dSolid,bool)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cleanBody (self, *args, **kwargs)-> None :
      '''cleanBody( (Solid3d)arg1) -> None :

    C++ signature :
        void cleanBody(class PyDb3dSolid {lvalue})'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.Solid3d :
      '''cloneFrom( (RxObject)arg1) -> Solid3d :

    C++ signature :
        class PyDb3dSolid cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyEdge (self, *args, **kwargs)-> PyDb.Entity :
      '''copyEdge( (Solid3d)arg1, (SubentId)arg2) -> Entity :

    C++ signature :
        class PyDbEntity copyEdge(class PyDb3dSolid {lvalue},class PyDbSubentId)'''
    ...
    def copyFace (self, *args, **kwargs)-> PyDb.Entity :
      '''copyFace( (Solid3d)arg1, (SubentId)arg2) -> Entity :

    C++ signature :
        class PyDbEntity copyFace(class PyDb3dSolid {lvalue},class PyDbSubentId)'''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createBox (self, *args, **kwargs)-> None :
      '''createBox( (Solid3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> None :

    C++ signature :
        void createBox(class PyDb3dSolid {lvalue},double,double,double)'''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def createExtrudedSolid (self, *args, **kwargs)-> None :
      '''createExtrudedSolid( (Solid3d)arg1, (Entity)arg2, (Vector3d)arg3, (SweepOptions)arg4) -> None :

    C++ signature :
        void createExtrudedSolid(class PyDb3dSolid {lvalue},class PyDbEntity {lvalue},class AcGeVector3d,class PyDbSweepOptions {lvalue})

createExtrudedSolid( (Solid3d)arg1, (Entity)arg2, (SubentId)arg3, (Vector3d)arg4, (SweepOptions)arg5) -> None :

    C++ signature :
        void createExtrudedSolid(class PyDb3dSolid {lvalue},class PyDbEntity {lvalue},class PyDbSubentId,class AcGeVector3d,class PyDbSweepOptions {lvalue})

createExtrudedSolid( (Solid3d)arg1, (Entity)arg2, (SubentId)arg3, (float)arg4, (SweepOptions)arg5) -> None :

    C++ signature :
        void createExtrudedSolid(class PyDb3dSolid {lvalue},class PyDbEntity {lvalue},class PyDbSubentId,double,class PyDbSweepOptions {lvalue})'''
    ...
    def createFrom (self, *args, **kwargs)-> None :
      '''createFrom( (Solid3d)arg1, (Entity)arg2) -> None :

    C++ signature :
        void createFrom(class PyDb3dSolid {lvalue},class PyDbEntity)'''
    ...
    def createFrustum (self, *args, **kwargs)-> None :
      '''createFrustum( (Solid3d)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> None :

    C++ signature :
        void createFrustum(class PyDb3dSolid {lvalue},double,double,double,double)'''
    ...
    def createPyramid (self, *args, **kwargs)-> None :
      '''createPyramid( (Solid3d)arg1, (float)arg2, (int)arg3, (float)arg4) -> None :

    C++ signature :
        void createPyramid(class PyDb3dSolid {lvalue},double,int,double)

createPyramid( (Solid3d)arg1, (float)arg2, (int)arg3, (float)arg4, (float)arg5) -> None :

    C++ signature :
        void createPyramid(class PyDb3dSolid {lvalue},double,int,double,double)'''
    ...
    def createRevolvedSolid (self, *args, **kwargs)-> None :
      '''createRevolvedSolid( (Solid3d)arg1, (Entity)arg2, (Point3d)arg3, (Vector3d)arg4, (float)arg5, (float)arg6, (RevolveOptions)arg7) -> None :

    C++ signature :
        void createRevolvedSolid(class PyDb3dSolid {lvalue},class PyDbEntity {lvalue},class AcGePoint3d,class AcGeVector3d,double,double,class PyDbRevolveOptions {lvalue})

createRevolvedSolid( (Solid3d)arg1, (Entity)arg2, (SubentId)arg3, (Point3d)arg4, (Vector3d)arg5, (float)arg6, (float)arg7, (RevolveOptions)arg8) -> None :

    C++ signature :
        void createRevolvedSolid(class PyDb3dSolid {lvalue},class PyDbEntity {lvalue},class PyDbSubentId,class AcGePoint3d,class AcGeVector3d,double,double,class PyDbRevolveOptions {lvalue})'''
    ...
    def createSculptedSolid (self, *args, **kwargs)-> None :
      '''createSculptedSolid( (Solid3d)arg1, (list)arg2, (list)arg3) -> None :

    C++ signature :
        void createSculptedSolid(class PyDb3dSolid {lvalue},class boost::python::list,class boost::python::list)'''
    ...
    def createSphere (self, *args, **kwargs)-> None :
      '''createSphere( (Solid3d)arg1, (float)arg2) -> None :

    C++ signature :
        void createSphere(class PyDb3dSolid {lvalue},double)'''
    ...
    def createSweptSolid (self, *args, **kwargs)-> None :
      '''createSweptSolid( (Solid3d)arg1, (Entity)arg2, (Entity)arg3, (SweepOptions)arg4) -> None :

    C++ signature :
        void createSweptSolid(class PyDb3dSolid {lvalue},class PyDbEntity {lvalue},class PyDbEntity {lvalue},class PyDbSweepOptions {lvalue})

createSweptSolid( (Solid3d)arg1, (Entity)arg2, (SubentId)arg3, (Entity)arg4, (SweepOptions)arg5) -> None :

    C++ signature :
        void createSweptSolid(class PyDb3dSolid {lvalue},class PyDbEntity {lvalue},class PyDbSubentId,class PyDbEntity {lvalue},class PyDbSweepOptions {lvalue})'''
    ...
    def createTorus (self, *args, **kwargs)-> None :
      '''createTorus( (Solid3d)arg1, (float)arg2, (float)arg3) -> None :

    C++ signature :
        void createTorus(class PyDb3dSolid {lvalue},double,double)'''
    ...
    def createWedge (self, *args, **kwargs)-> None :
      '''createWedge( (Solid3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> None :

    C++ signature :
        void createWedge(class PyDb3dSolid {lvalue},double,double,double)'''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def extrude (self, *args, **kwargs)-> None :
      '''extrude( (Solid3d)arg1, (Region)arg2, (float)arg3) -> None :

    C++ signature :
        void extrude(class PyDb3dSolid {lvalue},class PyDbRegion,double)

extrude( (Solid3d)arg1, (Region)arg2, (float)arg3, (float)arg4) -> None :

    C++ signature :
        void extrude(class PyDb3dSolid {lvalue},class PyDbRegion,double,double)'''
    ...
    def extrudeAlongPath (self, *args, **kwargs)-> None :
      '''extrudeAlongPath( (Solid3d)arg1, (Region)arg2, (Curve)arg3) -> None :

    C++ signature :
        void extrudeAlongPath(class PyDb3dSolid {lvalue},class PyDbRegion,class PyDbCurve)

extrudeAlongPath( (Solid3d)arg1, (Region)arg2, (Curve)arg3, (float)arg4) -> None :

    C++ signature :
        void extrudeAlongPath(class PyDb3dSolid {lvalue},class PyDbRegion,class PyDbCurve,double)'''
    ...
    def extrudeFaces (self, *args, **kwargs)-> None :
      '''extrudeFaces( (Solid3d)arg1, (list)arg2, (float)arg3, (float)arg4) -> None :

    C++ signature :
        void extrudeFaces(class PyDb3dSolid {lvalue},class boost::python::list,double,double)'''
    ...
    def extrudeFacesAlongPath (self, *args, **kwargs)-> None :
      '''extrudeFacesAlongPath( (Solid3d)arg1, (list)arg2, (Curve)arg3) -> None :

    C++ signature :
        void extrudeFacesAlongPath(class PyDb3dSolid {lvalue},class boost::python::list {lvalue},class PyDbCurve)'''
    ...
    def filletEdges (self, *args, **kwargs)-> None :
      '''filletEdges( (Solid3d)arg1, (list)arg2, (list)arg3, (list)arg4, (list)arg5) -> None :

    C++ signature :
        void filletEdges(class PyDb3dSolid {lvalue},class boost::python::list,class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getArea (self, *args, **kwargs)-> float :
      '''getArea( (Solid3d)arg1) -> float :

    C++ signature :
        double getArea(class PyDb3dSolid {lvalue})'''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getMassProp (self, *args, **kwargs)-> tuple :
      '''getMassProp( (Solid3d)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getMassProp(class PyDb3dSolid {lvalue})'''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getSection (self, *args, **kwargs)-> PyDb.Region :
      '''getSection( (Solid3d)arg1, (Plane)arg2) -> Region :

    C++ signature :
        class PyDbRegion getSection(class PyDb3dSolid {lvalue},class PyGePlane)'''
    ...
    def getSlice (self, *args, **kwargs)-> PyDb.Solid3d :
      '''getSlice( (Solid3d)arg1, (Plane)arg2, (bool)arg3) -> Solid3d :

    C++ signature :
        class PyDb3dSolid getSlice(class PyDb3dSolid {lvalue},class PyGePlane,bool)

getSlice( (Solid3d)arg1, (Surface)arg2, (bool)arg3) -> Solid3d :

    C++ signature :
        class PyDb3dSolid getSlice(class PyDb3dSolid {lvalue},class PyDbSurface,bool)'''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentColor (self, *args, **kwargs)-> PyDb.Color :
      '''getSubentColor( (Solid3d)arg1, (SubentId)arg2) -> Color :

    C++ signature :
        class AcCmColor getSubentColor(class PyDb3dSolid {lvalue},class PyDbSubentId)'''
    ...
    def getSubentMaterial (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getSubentMaterial( (Solid3d)arg1, (SubentId)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getSubentMaterial(class PyDb3dSolid {lvalue},class PyDbSubentId)'''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def imprintEntity (self, *args, **kwargs)-> None :
      '''imprintEntity( (Solid3d)arg1, (Entity)arg2) -> None :

    C++ signature :
        void imprintEntity(class PyDb3dSolid {lvalue},class PyDbEntity)'''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (Solid3d)arg1) -> bool :

    C++ signature :
        bool isNull(class PyDb3dSolid {lvalue})'''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def numChanges (self, *args, **kwargs)-> int :
      '''numChanges( (Solid3d)arg1) -> int :

    C++ signature :
        unsigned int numChanges(class PyDb3dSolid {lvalue})'''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def offsetBody (self, *args, **kwargs)-> None :
      '''offsetBody( (Solid3d)arg1, (float)arg2) -> None :

    C++ signature :
        void offsetBody(class PyDb3dSolid {lvalue},double)'''
    ...
    def offsetFaces (self, *args, **kwargs)-> None :
      '''offsetFaces( (Solid3d)arg1, (list)arg2, (float)arg3) -> None :

    C++ signature :
        void offsetFaces(class PyDb3dSolid {lvalue},class boost::python::list,double)'''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def projectOnToSolid (self, *args, **kwargs)-> list :
      '''projectOnToSolid( (Solid3d)arg1, (Entity)arg2, (Vector3d)arg3) -> list :

    C++ signature :
        class boost::python::list projectOnToSolid(class PyDb3dSolid {lvalue},class PyDbEntity,class AcGeVector3d)'''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def recordHistory (self, *args, **kwargs)-> bool :
      '''recordHistory( (Solid3d)arg1) -> bool :

    C++ signature :
        bool recordHistory(class PyDb3dSolid {lvalue})'''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeFaces (self, *args, **kwargs)-> None :
      '''removeFaces( (Solid3d)arg1, (list)arg2) -> None :

    C++ signature :
        void removeFaces(class PyDb3dSolid {lvalue},class boost::python::list)'''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def separateBody (self, *args, **kwargs)-> list :
      '''separateBody( (Solid3d)arg1) -> list :

    C++ signature :
        class boost::python::list separateBody(class PyDb3dSolid {lvalue})'''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setRecordHistory (self, *args, **kwargs)-> None :
      '''setRecordHistory( (Solid3d)arg1, (bool)arg2) -> None :

    C++ signature :
        void setRecordHistory(class PyDb3dSolid {lvalue},bool)'''
    ...
    def setShowHistory (self, *args, **kwargs)-> None :
      '''setShowHistory( (Solid3d)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShowHistory(class PyDb3dSolid {lvalue},bool)'''
    ...
    def setSubentColor (self, *args, **kwargs)-> None :
      '''setSubentColor( (Solid3d)arg1, (SubentId)arg2, (Color)arg3) -> None :

    C++ signature :
        void setSubentColor(class PyDb3dSolid {lvalue},class PyDbSubentId,class AcCmColor)'''
    ...
    def setSubentMaterial (self, *args, **kwargs)-> None :
      '''setSubentMaterial( (Solid3d)arg1, (SubentId)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void setSubentMaterial(class PyDb3dSolid {lvalue},class PyDbSubentId,class PyDbObjectId {lvalue})'''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def shellBody (self, *args, **kwargs)-> None :
      '''shellBody( (Solid3d)arg1, (list)arg2, (float)arg3) -> None :

    C++ signature :
        void shellBody(class PyDb3dSolid {lvalue},class boost::python::list,double)'''
    ...
    def showHistory (self, *args, **kwargs)-> bool :
      '''showHistory( (Solid3d)arg1) -> bool :

    C++ signature :
        bool showHistory(class PyDb3dSolid {lvalue})'''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def stlOut (self, *args, **kwargs)-> None :
      '''stlOut( (Solid3d)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void stlOut(class PyDb3dSolid {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

stlOut( (Solid3d)arg1, (str)arg2, (bool)arg3, (float)arg4) -> None :

    C++ signature :
        void stlOut(class PyDb3dSolid {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,double)'''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def taperFaces (self, *args, **kwargs)-> None :
      '''taperFaces( (Solid3d)arg1, (list)arg2, (Point3d)arg3, (Vector3d)arg4, (float)arg5) -> None :

    C++ signature :
        void taperFaces(class PyDb3dSolid {lvalue},class boost::python::list,class AcGePoint3d,class AcGeVector3d,double)'''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def transformFaces (self, *args, **kwargs)-> None :
      '''transformFaces( (Solid3d)arg1, (list)arg2, (Matrix3d)arg3) -> None :

    C++ signature :
        void transformFaces(class PyDb3dSolid {lvalue},class boost::python::list,class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def usesGraphicsCache (self, *args, **kwargs)-> bool :
      '''usesGraphicsCache( (Solid3d)arg1) -> bool :

    C++ signature :
        bool usesGraphicsCache(class PyDb3dSolid {lvalue})'''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class SpatialFilter:
    def __init__ (self: SpatialFilter,id: PyDb.ObjectId,mode: OpenMode=kForRead,erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.SpatialFilter :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def clipVolumeIntersectsExtents (self: SpatialFilter,val : PyDb.Extents)-> bool :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.SpatialFilter :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getClipSpaceToWCSMatrix (self: SpatialFilter)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDefinition (self: SpatialFilter)-> tuple :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getOriginalInverseBlockXform (self: SpatialFilter)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getVolume (self: SpatialFilter)-> tuple :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasPerspectiveCamera (self: SpatialFilter)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def indexClass (self: SpatialFilter)-> PyRx.RxClass :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isInverted (self: SpatialFilter)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryBounds (self: SpatialFilter,ref : PyDbBlockReference=None)-> PyDb.Extents :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setDefinition (self: SpatialFilter,pnt2d: List[PyGe.Point2d],normal: PyGe.Vector3d,elev: float,frontclip: float,backclip: float,enabled: bool)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setInverted (self: SpatialFilter,val : bool)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPerspectiveCamera (self: SpatialFilter,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class Spline:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3, (bool)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode,bool)

__init__( (object)arg1, (list)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class boost::python::list)

__init__( (object)arg1, (list)arg2, (int)arg3, (float)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class boost::python::list,int,double)

__init__( (object)arg1, (list)arg2, (Vector3d)arg3, (Vector3d)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class boost::python::list,class AcGeVector3d,class AcGeVector3d)

__init__( (object)arg1, (list)arg2, (Vector3d)arg3, (Vector3d)arg4, (int)arg5, (float)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class boost::python::list,class AcGeVector3d,class AcGeVector3d,int,double)

__init__( (object)arg1, (list)arg2, (bool)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class boost::python::list,bool)

__init__( (object)arg1, (list)arg2, (bool)arg3, (AcGeKnotParameterization)arg4, (int)arg5, (float)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class boost::python::list,bool,enum AcGe::KnotParameterization,int,double)

__init__( (object)arg1, (list)arg2, (AcGeKnotParameterization)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class boost::python::list,enum AcGe::KnotParameterization)

__init__( (object)arg1, (list)arg2, (AcGeKnotParameterization)arg3, (int)arg4, (float)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class boost::python::list,enum AcGe::KnotParameterization,int,double)

__init__( (object)arg1, (list)arg2, (Vector3d)arg3, (Vector3d)arg4, (AcGeKnotParameterization)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class boost::python::list,class AcGeVector3d,class AcGeVector3d,enum AcGe::KnotParameterization)

__init__( (object)arg1, (list)arg2, (Vector3d)arg3, (Vector3d)arg4, (AcGeKnotParameterization)arg5, (int)arg6, (float)arg7) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class boost::python::list,class AcGeVector3d,class AcGeVector3d,enum AcGe::KnotParameterization,int,double)

__init__( (object)arg1, (int)arg2, (bool)arg3, (bool)arg4, (bool)arg5, (list)arg6, (list)arg7, (list)arg8) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,int,bool,bool,bool,class boost::python::list,class boost::python::list,class boost::python::list)

__init__( (object)arg1, (int)arg2, (bool)arg3, (bool)arg4, (bool)arg5, (list)arg6, (list)arg7, (list)arg8, (float)arg9, (float)arg10) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,int,bool,bool,bool,class boost::python::list,class boost::python::list,class boost::python::list,double,double)

__init__( (object)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4, (float)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGeVector3d,class AcGeVector3d,double)

__init__( (object)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4, (float)arg5, (float)arg6, (float)arg7) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGeVector3d,class AcGeVector3d,double,double,double)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: RxObject)-> PyDb.Spline :
      '''                             '''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: RxObject)-> PyDb.Spline :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def createFromAcGeCurve (curve: PyGe.Curve3d,normal: PyGe.Vector3d = kZAxis,tol: Tol = default)-> PyDb.Curve :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def degree (self: Spline)-> int :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevateDegree (self: Spline,val : int)-> None :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> None :
      '''extend( (Curve)arg1, (float)arg2) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def fitTolerance (self: Spline)-> float :
      '''                             '''
    ...
    def getAcGeCurve (self: Curve,tol: Tol = default)-> PyGe.Curve3d :
      '''                             '''
    ...
    def getArea (self: Curve)-> float :
      '''                             '''
    ...
    def getClosestPointTo (self: Curve,point3d: PyGe.Point3d,direction: PyGe.Vector3d=None,extend: bool=False)-> PyGe.Point3d :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getControlPointAt (self: Spline,idx:int)-> PyGe.Point3d :
      '''                             '''
    ...
    def getDistAtParam (self: Curve,param: float)-> float :
      '''                             '''
    ...
    def getDistAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEndParam (self: Curve)-> float :
      '''                             '''
    ...
    def getEndPoint (self: Curve)-> PyGe.Point3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self: Curve,param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getFitData (self: Spline)-> tuple :
      '''                             '''
    ...
    def getFitDataKnot (self: Spline)-> tuple :
      '''                             '''
    ...
    def getFitPointAt (self: Spline,idx:int)-> PyGe.Point3d :
      '''                             '''
    ...
    def getFitTangents (self: Spline)-> tuple :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getNurbsData (self: Spline)-> tuple :
      '''                             '''
    ...
    def getOffsetCurves (self: Curve,dist: float)-> list :
      '''                             '''
    ...
    def getOffsetCurvesGivenPlaneNormal (self, *args, **kwargs)-> list :
      '''getOffsetCurvesGivenPlaneNormal( (Spline)arg1, (Vector3d)arg2, (float)arg3) -> list :

    C++ signature :
        class boost::python::list getOffsetCurvesGivenPlaneNormal(class PyDbSpline {lvalue},class AcGeVector3d,double)'''
    ...
    def getOrthoProjectedCurve (self: Curve,plane: PyGe.Plane)-> PyDb.Curve :
      '''                             '''
    ...
    def getParamAtDist (self: Curve,dist: float)-> float :
      '''                             '''
    ...
    def getParamAtPoint (self: Curve,point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getPointAtDist (self: Curve,dist: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getPointAtParam (self: Curve,param: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getProjectedCurve (self: Curve,plane: PyGe.Plane,projDir: PyGe.Vector3d)-> PyDb.Curve :
      '''                             '''
    ...
    def getSecondDeriv (self: Curve,param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getSpline (self: Curve)-> PyDb.Spline :
      '''                             '''
    ...
    def getSplitCurves (self: Curve,paramsOrPoints: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParam (self: Curve,param: float)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParams (self: Curve,params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoint (self: Curve,point: PyGe.Point3d)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoints (self: Curve,points: list)-> list :
      '''                             '''
    ...
    def getStartParam (self: Curve)-> float :
      '''                             '''
    ...
    def getStartPoint (self: Curve)-> PyGe.Point3d :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasFitData (self: Spline)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def insertControlPointAt (self, *args, **kwargs)-> None :
      '''insertControlPointAt( (Spline)arg1, (float)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void insertControlPointAt(class PyDbSpline {lvalue},double,class AcGePoint3d)

insertControlPointAt( (Spline)arg1, (float)arg2, (Point3d)arg3, (float)arg4) -> None :

    C++ signature :
        void insertControlPointAt(class PyDbSpline {lvalue},double,class AcGePoint3d,double)'''
    ...
    def insertFitPointAt (self: Spline,idx:int,pnt:PyGe.Point3d)-> None :
      '''                             '''
    ...
    def insertKnot (self: Spline,val : float)-> None :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isClosed (self: Curve)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self: Spline)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPeriodic (self: Curve)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isRational (self: Spline)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def numControlPoints (self: Spline)-> int :
      '''                             '''
    ...
    def numFitPoints (self: Spline)-> int :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def purgeFitData (self: Spline)-> None :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def rebuild (self, *args, **kwargs)-> None :
      '''rebuild( (Spline)arg1, (int)arg2, (int)arg3) -> None :

    C++ signature :
        void rebuild(class PyDbSpline {lvalue},int,int)'''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeControlPointAt (self: Spline,val : int)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removeFitPointAt (self: Spline,idx:int)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def reverseCurve (self: Curve)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setControlPointAt (self: Spline,idx:int,pnt:PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setFitData (self, *args, **kwargs)-> None :
      '''setFitData( (Spline)arg1, (list)arg2, (int)arg3, (float)arg4, (Vector3d)arg5, (Vector3d)arg6) -> None :

    C++ signature :
        void setFitData(class PyDbSpline {lvalue},class boost::python::list,int,double,class AcGeVector3d,class AcGeVector3d)'''
    ...
    def setFitDataKnot (self, *args, **kwargs)-> None :
      '''setFitDataKnot( (Spline)arg1, (list)arg2, (Vector3d)arg3, (Vector3d)arg4, (AcGeKnotParameterization)arg5) -> None :

    C++ signature :
        void setFitDataKnot(class PyDbSpline {lvalue},class boost::python::list,class AcGeVector3d,class AcGeVector3d,enum AcGe::KnotParameterization)

setFitDataKnot( (Spline)arg1, (list)arg2, (Vector3d)arg3, (Vector3d)arg4, (AcGeKnotParameterization)arg5, (int)arg6, (float)arg7) -> None :

    C++ signature :
        void setFitDataKnot(class PyDbSpline {lvalue},class boost::python::list,class AcGeVector3d,class AcGeVector3d,enum AcGe::KnotParameterization,int,double)

setFitDataKnot( (Spline)arg1, (list)arg2, (bool)arg3, (AcGeKnotParameterization)arg4) -> None :

    C++ signature :
        void setFitDataKnot(class PyDbSpline {lvalue},class boost::python::list,bool,enum AcGe::KnotParameterization)

setFitDataKnot( (Spline)arg1, (list)arg2, (bool)arg3, (AcGeKnotParameterization)arg4, (int)arg5, (float)arg6) -> None :

    C++ signature :
        void setFitDataKnot(class PyDbSpline {lvalue},class boost::python::list,bool,enum AcGe::KnotParameterization,int,double)'''
    ...
    def setFitPointAt (self: Spline,idx:int,pnt:PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setFitTangents (self: Spline,start : PyGe.Vector3d,end : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setFitTol (self: Spline,val : float)-> None :
      '''                             '''
    ...
    def setFromAcGeCurve (self: Curve,curve: PyGe.Curve3d,normal: PyGe.Vector3d = kZAxis,tol: Tol = default)-> None :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNurbsData (self, *args, **kwargs)-> None :
      '''setNurbsData( (Spline)arg1, (int)arg2, (bool)arg3, (bool)arg4, (bool)arg5, (list)arg6, (list)arg7, (list)arg8) -> None :

    C++ signature :
        void setNurbsData(class PyDbSpline {lvalue},int,bool,bool,bool,class boost::python::list,class boost::python::list,class boost::python::list)

setNurbsData( (Spline)arg1, (int)arg2, (bool)arg3, (bool)arg4, (bool)arg5, (list)arg6, (list)arg7, (list)arg8, (float)arg9, (float)arg10) -> None :

    C++ signature :
        void setNurbsData(class PyDbSpline {lvalue},int,bool,bool,bool,class boost::python::list,class boost::python::list,class boost::python::list,double,double)'''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setType (self, *args, **kwargs)-> None :
      '''setType( (Spline)arg1, (SplineType)arg2) -> None :

    C++ signature :
        void setType(class PyDbSpline {lvalue},enum SplineType)'''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def toPolyline (self: Spline)-> PyDb.Polyline :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def type (self: Spline)-> PyDb.SplineType :
      '''                             '''
    ...
    def updateFitData (self: Spline)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def weightAt (self: Spline,val : int)-> float :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class SplineType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kControlPoints (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kFitPoints (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class StandardScaleType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def k100_1 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k10_1 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_1 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_10 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_100 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_128in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_16 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_16in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_2 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_20 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_2in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_30 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_32in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_4 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_40 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_4in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_5 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_50 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_64in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_8 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_8in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1and1_2in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1ft_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k2_1 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k3_16in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k3_32in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k3_4in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k3_8in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k3in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k4_1 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k6in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k8_1 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCustomScale (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kScaleToFit (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class StdScaleType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def k1000_1 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k100_1 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k10_1 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_1 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_10 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_100 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_128in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_16 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_16in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_2 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_20 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_2in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_30 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_32in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_4 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_40 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_4in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_5 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_50 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_64in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_8 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_8in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1and1_2in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1ft_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k2_1 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k3_16in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k3_32in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k3_4in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k3_8in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k3in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k4_1 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k6in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k8_1 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kScaleToFit (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class SubentId:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (SubentType)arg2, (int)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,unsigned int,__int64)

__init__( (object)arg1, (RxClass)arg2, (int)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyRxClass {lvalue},__int64)'''
    ...
    def index (self: SubentId)-> int :
      '''                             '''
    ...
    def kNull (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def setIndex (self, *args, **kwargs)-> None :
      '''setIndex( (SubentId)arg1, (int)arg2) -> None :

    C++ signature :
        void setIndex(class PyDbSubentId {lvalue},__int64)'''
    ...
    def setType (self, *args, **kwargs)-> None :
      '''setType( (SubentId)arg1, (SubentType)arg2) -> None :

    C++ signature :
        void setType(class PyDbSubentId {lvalue},unsigned int)'''
    ...
    def setTypeClass (self, *args, **kwargs)-> None :
      '''setTypeClass( (SubentId)arg1, (RxClass)arg2) -> None :

    C++ signature :
        void setTypeClass(class PyDbSubentId {lvalue},class PyRxClass {lvalue})'''
    ...
    def type (self: SubentId)-> int :
      '''                             '''
    ...
    def typeClass (self: SubentId)-> PyRx.RxClass :
      '''                             '''
    ...

class SubentType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kAxisSubentType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kClassSubentType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEdgeSubentType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kFaceSubentType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMlineSubentCache (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNullSubentType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSilhouetteSubentType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVertexSubentType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class Surface:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.Surface :
      '''cast( (RxObject)arg1) -> Surface :

    C++ signature :
        class PyDbSurface cast(class PyRxObject)'''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.Surface :
      '''cloneFrom( (RxObject)arg1) -> Surface :

    C++ signature :
        class PyDbSurface cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def createExtrudedSurface (self, *args, **kwargs)-> PyDb.ExtrudedSurface :
      '''createExtrudedSurface( (Profile3d)arg1, (Vector3d)arg2, (SweepOptions)arg3) -> ExtrudedSurface :

    C++ signature :
        class PyDbExtrudedSurface createExtrudedSurface(class PyDb3dProfile {lvalue},class AcGeVector3d,class PyDbSweepOptions {lvalue})'''
    ...
    def createFrom (self, *args, **kwargs)-> PyDb.Surface :
      '''createFrom( (Entity)arg1) -> Surface :

    C++ signature :
        class PyDbSurface createFrom(class PyDbEntity)'''
    ...
    def creationActionBodyId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''creationActionBodyId( (Surface)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId creationActionBodyId(class PyDbSurface {lvalue})'''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extendEdges (self, *args, **kwargs)-> None :
      '''extendEdges( (Surface)arg1, (list)arg2, (float)arg3, (SurfaceEdgeExtensionType)arg4, (bool)arg5) -> None :

    C++ signature :
        void extendEdges(class PyDbSurface {lvalue},class boost::python::list {lvalue},double,enum AcDbSurface::EdgeExtensionType,bool)'''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getArea (self, *args, **kwargs)-> float :
      '''getArea( (Surface)arg1) -> float :

    C++ signature :
        double getArea(class PyDbSurface {lvalue})'''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPerimeter (self, *args, **kwargs)-> float :
      '''getPerimeter( (Surface)arg1) -> float :

    C++ signature :
        double getPerimeter(class PyDbSurface {lvalue})'''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def getWireframeType (self, *args, **kwargs)-> PyDb.SurfaceWireframeType :
      '''getWireframeType( (Surface)arg1) -> SurfaceWireframeType :

    C++ signature :
        enum AcDbSurface::WireframeType getWireframeType(class PyDbSurface {lvalue})'''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def modificationActionBodyIds (self, *args, **kwargs)-> list :
      '''modificationActionBodyIds( (Surface)arg1) -> list :

    C++ signature :
        class boost::python::list modificationActionBodyIds(class PyDbSurface {lvalue})'''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def projectOnToSurface (self, *args, **kwargs)-> list :
      '''projectOnToSurface( (Surface)arg1, (Entity)arg2, (Vector3d)arg3) -> list :

    C++ signature :
        class boost::python::list projectOnToSurface(class PyDbSurface {lvalue},class PyDbEntity,class AcGeVector3d)'''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def rayTest (self, *args, **kwargs)-> tuple :
      '''rayTest( (Surface)arg1, (Point3d)arg2, (Vector3d)arg3, (float)arg4) -> tuple :

    C++ signature :
        class boost::python::tuple rayTest(class PyDbSurface {lvalue},class AcGePoint3d,class AcGeVector3d,double)'''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setUIsolineDensity (self, *args, **kwargs)-> None :
      '''setUIsolineDensity( (Surface)arg1, (int)arg2) -> None :

    C++ signature :
        void setUIsolineDensity(class PyDbSurface {lvalue},unsigned short)'''
    ...
    def setVIsolineDensity (self, *args, **kwargs)-> None :
      '''setVIsolineDensity( (Surface)arg1, (int)arg2) -> None :

    C++ signature :
        void setVIsolineDensity(class PyDbSurface {lvalue},unsigned short)'''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setWireframeType (self, *args, **kwargs)-> None :
      '''setWireframeType( (Surface)arg1, (SurfaceWireframeType)arg2) -> None :

    C++ signature :
        void setWireframeType(class PyDbSurface {lvalue},enum AcDbSurface::WireframeType)'''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def uIsolineDensity (self, *args, **kwargs)-> int :
      '''uIsolineDensity( (Surface)arg1) -> int :

    C++ signature :
        unsigned short uIsolineDensity(class PyDbSurface {lvalue})'''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def vIsolineDensity (self, *args, **kwargs)-> int :
      '''vIsolineDensity( (Surface)arg1) -> int :

    C++ signature :
        unsigned short vIsolineDensity(class PyDbSurface {lvalue})'''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class SurfaceEdgeExtensionType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kExtendEdge (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kStretchEdge (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class SurfaceWireframeType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kIsolines (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kIsoparms (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class SweepAlignOption:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kAlignSweepEntityToPath (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNoAlignment (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTranslatePathToSweepEntity (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTranslateSweepEntityToPath (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class SweepMiterOption:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kBendMiter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCrimpMiter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDefaultMiter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNewMiter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOldMiter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class SweepOptions:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def align (self, *args, **kwargs)-> PyDb.SweepAlignOption :
      '''align( (SweepOptions)arg1) -> SweepAlignOption :

    C++ signature :
        enum AcDbSweepOptions::AlignOption align(class PyDbSweepOptions {lvalue})'''
    ...
    def alignAngle (self, *args, **kwargs)-> float :
      '''alignAngle( (SweepOptions)arg1) -> float :

    C++ signature :
        double alignAngle(class PyDbSweepOptions {lvalue})'''
    ...
    def alignStart (self, *args, **kwargs)-> bool :
      '''alignStart( (SweepOptions)arg1) -> bool :

    C++ signature :
        bool alignStart(class PyDbSweepOptions {lvalue})'''
    ...
    def bank (self, *args, **kwargs)-> bool :
      '''bank( (SweepOptions)arg1) -> bool :

    C++ signature :
        bool bank(class PyDbSweepOptions {lvalue})'''
    ...
    def basePoint (self, *args, **kwargs)-> PyGe.Point3d :
      '''basePoint( (SweepOptions)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d basePoint(class PyDbSweepOptions {lvalue})'''
    ...
    def checkIntersections (self, *args, **kwargs)-> bool :
      '''checkIntersections( (SweepOptions)arg1) -> bool :

    C++ signature :
        bool checkIntersections(class PyDbSweepOptions {lvalue})'''
    ...
    def checkPathCurve (self, *args, **kwargs)-> None :
      '''checkPathCurve( (SweepOptions)arg1, (Entity)arg2) -> None :

    C++ signature :
        void checkPathCurve(class PyDbSweepOptions {lvalue},class PyDbEntity {lvalue})

checkPathCurve( (SweepOptions)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void checkPathCurve(class PyDbSweepOptions {lvalue},class PyDbEntity {lvalue},bool)'''
    ...
    def checkSweepCurve (self, *args, **kwargs)-> tuple :
      '''checkSweepCurve( (SweepOptions)arg1, (Entity)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple checkSweepCurve(class PyDbSweepOptions {lvalue},class PyDbEntity {lvalue})

checkSweepCurve( (SweepOptions)arg1, (Entity)arg2, (bool)arg3) -> tuple :

    C++ signature :
        class boost::python::tuple checkSweepCurve(class PyDbSweepOptions {lvalue},class PyDbEntity {lvalue},bool)'''
    ...
    def draftAngle (self, *args, **kwargs)-> float :
      '''draftAngle( (SweepOptions)arg1) -> float :

    C++ signature :
        double draftAngle(class PyDbSweepOptions {lvalue})'''
    ...
    def endDraftDist (self, *args, **kwargs)-> float :
      '''endDraftDist( (SweepOptions)arg1) -> float :

    C++ signature :
        double endDraftDist(class PyDbSweepOptions {lvalue})'''
    ...
    def getPathEntityTransform (self, *args, **kwargs)-> bool :
      '''getPathEntityTransform( (SweepOptions)arg1, (Matrix3d)arg2) -> bool :

    C++ signature :
        bool getPathEntityTransform(class PyDbSweepOptions {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getSweepEntityTransform (self, *args, **kwargs)-> bool :
      '''getSweepEntityTransform( (SweepOptions)arg1, (Matrix3d)arg2) -> bool :

    C++ signature :
        bool getSweepEntityTransform(class PyDbSweepOptions {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def miterOption (self, *args, **kwargs)-> PyDb.SweepMiterOption :
      '''miterOption( (SweepOptions)arg1) -> SweepMiterOption :

    C++ signature :
        enum AcDbSweepOptions::MiterOption miterOption(class PyDbSweepOptions {lvalue})'''
    ...
    def scaleFactor (self, *args, **kwargs)-> float :
      '''scaleFactor( (SweepOptions)arg1) -> float :

    C++ signature :
        double scaleFactor(class PyDbSweepOptions {lvalue})'''
    ...
    def setAlign (self, *args, **kwargs)-> None :
      '''setAlign( (SweepOptions)arg1, (SweepAlignOption)arg2) -> None :

    C++ signature :
        void setAlign(class PyDbSweepOptions {lvalue},enum AcDbSweepOptions::AlignOption)'''
    ...
    def setAlignAngle (self, *args, **kwargs)-> None :
      '''setAlignAngle( (SweepOptions)arg1, (float)arg2) -> None :

    C++ signature :
        void setAlignAngle(class PyDbSweepOptions {lvalue},double)'''
    ...
    def setAlignStart (self, *args, **kwargs)-> None :
      '''setAlignStart( (SweepOptions)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAlignStart(class PyDbSweepOptions {lvalue},bool)'''
    ...
    def setBank (self, *args, **kwargs)-> None :
      '''setBank( (SweepOptions)arg1, (bool)arg2) -> None :

    C++ signature :
        void setBank(class PyDbSweepOptions {lvalue},bool)'''
    ...
    def setBasePoint (self, *args, **kwargs)-> None :
      '''setBasePoint( (SweepOptions)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setBasePoint(class PyDbSweepOptions {lvalue},class AcGePoint3d {lvalue})'''
    ...
    def setCheckIntersections (self, *args, **kwargs)-> None :
      '''setCheckIntersections( (SweepOptions)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCheckIntersections(class PyDbSweepOptions {lvalue},bool)'''
    ...
    def setDraftAngle (self, *args, **kwargs)-> None :
      '''setDraftAngle( (SweepOptions)arg1, (float)arg2) -> None :

    C++ signature :
        void setDraftAngle(class PyDbSweepOptions {lvalue},double)'''
    ...
    def setEndDraftDist (self, *args, **kwargs)-> None :
      '''setEndDraftDist( (SweepOptions)arg1, (float)arg2) -> None :

    C++ signature :
        void setEndDraftDist(class PyDbSweepOptions {lvalue},double)'''
    ...
    def setMiterOption (self, *args, **kwargs)-> None :
      '''setMiterOption( (SweepOptions)arg1, (SweepMiterOption)arg2) -> None :

    C++ signature :
        void setMiterOption(class PyDbSweepOptions {lvalue},enum AcDbSweepOptions::MiterOption)'''
    ...
    def setPathEntityTransform (self, *args, **kwargs)-> None :
      '''setPathEntityTransform( (SweepOptions)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void setPathEntityTransform(class PyDbSweepOptions {lvalue},class AcGeMatrix3d {lvalue})

setPathEntityTransform( (SweepOptions)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPathEntityTransform(class PyDbSweepOptions {lvalue},class PyDbEntity {lvalue})

setPathEntityTransform( (SweepOptions)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPathEntityTransform(class PyDbSweepOptions {lvalue},class PyDbEntity {lvalue},bool)'''
    ...
    def setScaleFactor (self, *args, **kwargs)-> None :
      '''setScaleFactor( (SweepOptions)arg1, (float)arg2) -> None :

    C++ signature :
        void setScaleFactor(class PyDbSweepOptions {lvalue},double)'''
    ...
    def setStartDraftDist (self, *args, **kwargs)-> None :
      '''setStartDraftDist( (SweepOptions)arg1, (float)arg2) -> None :

    C++ signature :
        void setStartDraftDist(class PyDbSweepOptions {lvalue},double)'''
    ...
    def setSweepEntityTransform (self, *args, **kwargs)-> None :
      '''setSweepEntityTransform( (SweepOptions)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void setSweepEntityTransform(class PyDbSweepOptions {lvalue},class AcGeMatrix3d {lvalue})

setSweepEntityTransform( (SweepOptions)arg1, (list)arg2) -> None :

    C++ signature :
        void setSweepEntityTransform(class PyDbSweepOptions {lvalue},class boost::python::list {lvalue})

setSweepEntityTransform( (SweepOptions)arg1, (list)arg2, (bool)arg3) -> None :

    C++ signature :
        void setSweepEntityTransform(class PyDbSweepOptions {lvalue},class boost::python::list {lvalue},bool)'''
    ...
    def setTwistAngle (self, *args, **kwargs)-> None :
      '''setTwistAngle( (SweepOptions)arg1, (float)arg2) -> None :

    C++ signature :
        void setTwistAngle(class PyDbSweepOptions {lvalue},double)'''
    ...
    def setTwistRefVec (self, *args, **kwargs)-> None :
      '''setTwistRefVec( (SweepOptions)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setTwistRefVec(class PyDbSweepOptions {lvalue},class AcGeVector3d)'''
    ...
    def startDraftDist (self, *args, **kwargs)-> float :
      '''startDraftDist( (SweepOptions)arg1) -> float :

    C++ signature :
        double startDraftDist(class PyDbSweepOptions {lvalue})'''
    ...
    def twistAngle (self, *args, **kwargs)-> float :
      '''twistAngle( (SweepOptions)arg1) -> float :

    C++ signature :
        double twistAngle(class PyDbSweepOptions {lvalue})'''
    ...
    def twistRefVec (self, *args, **kwargs)-> PyGe.Vector3d :
      '''twistRefVec( (SweepOptions)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d twistRefVec(class PyDbSweepOptions {lvalue})'''
    ...

class SweptSurface:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.SweptSurface :
      '''cast( (RxObject)arg1) -> SweptSurface :

    C++ signature :
        class PyDbSweptSurface cast(class PyRxObject)'''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.SweptSurface :
      '''cloneFrom( (RxObject)arg1) -> SweptSurface :

    C++ signature :
        class PyDbSweptSurface cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def createExtrudedSurface (self, *args, **kwargs)-> PyDb.ExtrudedSurface :
      '''createExtrudedSurface( (Profile3d)arg1, (Vector3d)arg2, (SweepOptions)arg3) -> ExtrudedSurface :

    C++ signature :
        class PyDbExtrudedSurface createExtrudedSurface(class PyDb3dProfile {lvalue},class AcGeVector3d,class PyDbSweepOptions {lvalue})'''
    ...
    def createFrom (self, *args, **kwargs)-> PyDb.Surface :
      '''createFrom( (Entity)arg1) -> Surface :

    C++ signature :
        class PyDbSurface createFrom(class PyDbEntity)'''
    ...
    def creationActionBodyId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''creationActionBodyId( (Surface)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId creationActionBodyId(class PyDbSurface {lvalue})'''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extendEdges (self, *args, **kwargs)-> None :
      '''extendEdges( (Surface)arg1, (list)arg2, (float)arg3, (SurfaceEdgeExtensionType)arg4, (bool)arg5) -> None :

    C++ signature :
        void extendEdges(class PyDbSurface {lvalue},class boost::python::list {lvalue},double,enum AcDbSurface::EdgeExtensionType,bool)'''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getArea (self, *args, **kwargs)-> float :
      '''getArea( (Surface)arg1) -> float :

    C++ signature :
        double getArea(class PyDbSurface {lvalue})'''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPerimeter (self, *args, **kwargs)-> float :
      '''getPerimeter( (Surface)arg1) -> float :

    C++ signature :
        double getPerimeter(class PyDbSurface {lvalue})'''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def getWireframeType (self, *args, **kwargs)-> PyDb.SurfaceWireframeType :
      '''getWireframeType( (Surface)arg1) -> SurfaceWireframeType :

    C++ signature :
        enum AcDbSurface::WireframeType getWireframeType(class PyDbSurface {lvalue})'''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def modificationActionBodyIds (self, *args, **kwargs)-> list :
      '''modificationActionBodyIds( (Surface)arg1) -> list :

    C++ signature :
        class boost::python::list modificationActionBodyIds(class PyDbSurface {lvalue})'''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def projectOnToSurface (self, *args, **kwargs)-> list :
      '''projectOnToSurface( (Surface)arg1, (Entity)arg2, (Vector3d)arg3) -> list :

    C++ signature :
        class boost::python::list projectOnToSurface(class PyDbSurface {lvalue},class PyDbEntity,class AcGeVector3d)'''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def rayTest (self, *args, **kwargs)-> tuple :
      '''rayTest( (Surface)arg1, (Point3d)arg2, (Vector3d)arg3, (float)arg4) -> tuple :

    C++ signature :
        class boost::python::tuple rayTest(class PyDbSurface {lvalue},class AcGePoint3d,class AcGeVector3d,double)'''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setUIsolineDensity (self, *args, **kwargs)-> None :
      '''setUIsolineDensity( (Surface)arg1, (int)arg2) -> None :

    C++ signature :
        void setUIsolineDensity(class PyDbSurface {lvalue},unsigned short)'''
    ...
    def setVIsolineDensity (self, *args, **kwargs)-> None :
      '''setVIsolineDensity( (Surface)arg1, (int)arg2) -> None :

    C++ signature :
        void setVIsolineDensity(class PyDbSurface {lvalue},unsigned short)'''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setWireframeType (self, *args, **kwargs)-> None :
      '''setWireframeType( (Surface)arg1, (SurfaceWireframeType)arg2) -> None :

    C++ signature :
        void setWireframeType(class PyDbSurface {lvalue},enum AcDbSurface::WireframeType)'''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def uIsolineDensity (self, *args, **kwargs)-> int :
      '''uIsolineDensity( (Surface)arg1) -> int :

    C++ signature :
        unsigned short uIsolineDensity(class PyDbSurface {lvalue})'''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def vIsolineDensity (self, *args, **kwargs)-> int :
      '''vIsolineDensity( (Surface)arg1) -> int :

    C++ signature :
        unsigned short vIsolineDensity(class PyDbSurface {lvalue})'''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class SymUtilServices:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def blockModelSpaceId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''blockModelSpaceId( (SymUtilServices)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockModelSpaceId(class PyDbSymUtilServices {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def blockModelSpaceName (self, *args, **kwargs)-> str :
      '''blockModelSpaceName( (SymUtilServices)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > blockModelSpaceName(class PyDbSymUtilServices {lvalue})'''
    ...
    def blockPaperSpaceId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''blockPaperSpaceId( (SymUtilServices)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockPaperSpaceId(class PyDbSymUtilServices {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def blockPaperSpaceName (self, *args, **kwargs)-> str :
      '''blockPaperSpaceName( (SymUtilServices)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > blockPaperSpaceName(class PyDbSymUtilServices {lvalue})'''
    ...
    def compareSymbolName (self, *args, **kwargs)-> int :
      '''compareSymbolName( (SymUtilServices)arg1, (str)arg2, (str)arg3) -> int :

    C++ signature :
        int compareSymbolName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def compatibilityMode (self, *args, **kwargs)-> bool :
      '''compatibilityMode( (SymUtilServices)arg1, (Database)arg2) -> bool :

    C++ signature :
        bool compatibilityMode(class PyDbSymUtilServices {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def getBlockNameFromInsertPathName (self, *args, **kwargs)-> str :
      '''getBlockNameFromInsertPathName( (SymUtilServices)arg1, (str)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getBlockNameFromInsertPathName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getInsertPathNameFromBlockName (self, *args, **kwargs)-> str :
      '''getInsertPathNameFromBlockName( (SymUtilServices)arg1, (str)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getInsertPathNameFromBlockName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getPathNameFromSymbolName (self, *args, **kwargs)-> str :
      '''getPathNameFromSymbolName( (SymUtilServices)arg1, (str)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getPathNameFromSymbolName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getSymbolNameFromPathName (self, *args, **kwargs)-> str :
      '''getSymbolNameFromPathName( (SymUtilServices)arg1, (str)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getSymbolNameFromPathName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def hasVerticalBar (self, *args, **kwargs)-> bool :
      '''hasVerticalBar( (SymUtilServices)arg1, (str)arg2) -> bool :

    C++ signature :
        bool hasVerticalBar(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def isBlockLayoutName (self, *args, **kwargs)-> bool :
      '''isBlockLayoutName( (SymUtilServices)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isBlockLayoutName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def isBlockModelSpaceName (self, *args, **kwargs)-> bool :
      '''isBlockModelSpaceName( (SymUtilServices)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isBlockModelSpaceName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def isBlockPaperSpaceName (self, *args, **kwargs)-> bool :
      '''isBlockPaperSpaceName( (SymUtilServices)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isBlockPaperSpaceName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def isLayerDefpointsName (self, *args, **kwargs)-> bool :
      '''isLayerDefpointsName( (SymUtilServices)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isLayerDefpointsName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def isLayerZeroName (self, *args, **kwargs)-> bool :
      '''isLayerZeroName( (SymUtilServices)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isLayerZeroName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def isLinetypeByBlockName (self, *args, **kwargs)-> bool :
      '''isLinetypeByBlockName( (SymUtilServices)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isLinetypeByBlockName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def isLinetypeByLayerName (self, *args, **kwargs)-> bool :
      '''isLinetypeByLayerName( (SymUtilServices)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isLinetypeByLayerName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def isLinetypeContinuousName (self, *args, **kwargs)-> bool :
      '''isLinetypeContinuousName( (SymUtilServices)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isLinetypeContinuousName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def isRegAppAcadName (self, *args, **kwargs)-> bool :
      '''isRegAppAcadName( (SymUtilServices)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isRegAppAcadName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def isTextStyleStandardName (self, *args, **kwargs)-> bool :
      '''isTextStyleStandardName( (SymUtilServices)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isTextStyleStandardName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def isViewportActiveName (self, *args, **kwargs)-> bool :
      '''isViewportActiveName( (SymUtilServices)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isViewportActiveName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def layerDefpointsId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''layerDefpointsId( (SymUtilServices)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerDefpointsId(class PyDbSymUtilServices {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def layerDefpointsName (self, *args, **kwargs)-> str :
      '''layerDefpointsName( (SymUtilServices)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layerDefpointsName(class PyDbSymUtilServices {lvalue})'''
    ...
    def layerZeroId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''layerZeroId( (SymUtilServices)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerZeroId(class PyDbSymUtilServices {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def layerZeroName (self, *args, **kwargs)-> str :
      '''layerZeroName( (SymUtilServices)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layerZeroName(class PyDbSymUtilServices {lvalue})'''
    ...
    def linetypeByBlockId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''linetypeByBlockId( (SymUtilServices)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeByBlockId(class PyDbSymUtilServices {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def linetypeByBlockName (self, *args, **kwargs)-> str :
      '''linetypeByBlockName( (SymUtilServices)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetypeByBlockName(class PyDbSymUtilServices {lvalue})'''
    ...
    def linetypeByLayerId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''linetypeByLayerId( (SymUtilServices)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeByLayerId(class PyDbSymUtilServices {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def linetypeByLayerName (self, *args, **kwargs)-> str :
      '''linetypeByLayerName( (SymUtilServices)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetypeByLayerName(class PyDbSymUtilServices {lvalue})'''
    ...
    def linetypeContinuousId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''linetypeContinuousId( (SymUtilServices)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeContinuousId(class PyDbSymUtilServices {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def linetypeContinuousName (self, *args, **kwargs)-> str :
      '''linetypeContinuousName( (SymUtilServices)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetypeContinuousName(class PyDbSymUtilServices {lvalue})'''
    ...
    def makeDependentName (self, *args, **kwargs)-> str :
      '''makeDependentName( (SymUtilServices)arg1, (str)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > makeDependentName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def regAppAcadId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''regAppAcadId( (SymUtilServices)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId regAppAcadId(class PyDbSymUtilServices {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def regAppAcadName (self, *args, **kwargs)-> str :
      '''regAppAcadName( (SymUtilServices)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > regAppAcadName(class PyDbSymUtilServices {lvalue})'''
    ...
    def repairPreExtendedSymbolName (self, *args, **kwargs)-> str :
      '''repairPreExtendedSymbolName( (SymUtilServices)arg1, (str)arg2, (bool)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > repairPreExtendedSymbolName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)'''
    ...
    def repairSymbolName (self, *args, **kwargs)-> str :
      '''repairSymbolName( (SymUtilServices)arg1, (str)arg2, (bool)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > repairSymbolName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)'''
    ...
    def textStyleStandardId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''textStyleStandardId( (SymUtilServices)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyleStandardId(class PyDbSymUtilServices {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def textStyleStandardName (self, *args, **kwargs)-> str :
      '''textStyleStandardName( (SymUtilServices)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > textStyleStandardName(class PyDbSymUtilServices {lvalue})'''
    ...
    def validateCompatibleSymbolName (self, *args, **kwargs)-> PyDb.ErrorStatus :
      '''validateCompatibleSymbolName( (SymUtilServices)arg1, (str)arg2, (bool)arg3, (bool)arg4, (bool)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus validateCompatibleSymbolName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool,bool)'''
    ...
    def validatePreExtendedSymbolName (self, *args, **kwargs)-> PyDb.ErrorStatus :
      '''validatePreExtendedSymbolName( (SymUtilServices)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus validatePreExtendedSymbolName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)'''
    ...
    def validateSymbolName (self, *args, **kwargs)-> PyDb.ErrorStatus :
      '''validateSymbolName( (SymUtilServices)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus validateSymbolName(class PyDbSymUtilServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)'''
    ...
    def viewportActiveName (self, *args, **kwargs)-> str :
      '''viewportActiveName( (SymUtilServices)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > viewportActiveName(class PyDbSymUtilServices {lvalue})'''
    ...

class SymbolTable:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def add (self, *args, **kwargs)-> PyDb.ObjectId :
      '''add( (SymbolTable)arg1, (SymbolTableRecord)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId add(class PyDbSymbolTable {lvalue},class PyDbSymbolTableRecord)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.SymbolTable :
      '''cast( (RxObject)arg1) -> SymbolTable :

    C++ signature :
        class PyDbSymbolTable cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.SymbolTable :
      '''cloneFrom( (RxObject)arg1) -> SymbolTable :

    C++ signature :
        class PyDbSymbolTable cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getAt (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getAt( (SymbolTable)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getAt(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has (self, *args, **kwargs)-> bool :
      '''has( (SymbolTable)arg1, (str)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

has( (SymbolTable)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class PyDbObjectId)'''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def recordIds (self, *args, **kwargs)-> list :
      '''recordIds( (SymbolTable)arg1) -> list :

    C++ signature :
        class boost::python::list recordIds(class PyDbSymbolTable {lvalue})'''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def toDict (self, *args, **kwargs)-> dict :
      '''toDict( (SymbolTable)arg1) -> dict :

    C++ signature :
        class boost::python::dict toDict(class PyDbSymbolTable {lvalue})'''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class SymbolTableRecord:
    def __init__ (self: SymbolTableRecord,id: ObjectId,mode: OpenMode=kForRead)-> None :
      '''                             '''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.SymbolTableRecord :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.SymbolTableRecord :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getName (self: SymbolTableRecord)-> str :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isDependent (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isRenamable (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isResolved (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def name (self: SymbolTableRecord)-> str :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setName (self: SymbolTableRecord,name: str)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class Table:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def alignment (self, *args, **kwargs)-> PyDb.CellAlignment :
      '''alignment( (Table)arg1, (RowType)arg2) -> CellAlignment :

    C++ signature :
        enum AcDb::CellAlignment alignment(class PyDbTable {lvalue},enum AcDb::RowType)

alignment( (Table)arg1, (int)arg2, (int)arg3) -> CellAlignment :

    C++ signature :
        enum AcDb::CellAlignment alignment(class PyDbTable {lvalue},int,int)'''
    ...
    def appendAttribute (self: BlockReference,val : Attribute)-> PyDb.ObjectId :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def attachmentPoint (self, *args, **kwargs)-> PyGe.Point3d :
      '''attachmentPoint( (Table)arg1, (int)arg2, (int)arg3) -> Point3d :

    C++ signature :
        class AcGePoint3d attachmentPoint(class PyDbTable {lvalue},int,int)

attachmentPoint( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> Point3d :

    C++ signature :
        class AcGePoint3d attachmentPoint(class PyDbTable {lvalue},int,int,int)'''
    ...
    def attributeIds (self: BlockReference)-> list :
      '''                             '''
    ...
    def backgroundColor (self, *args, **kwargs)-> PyDb.Color :
      '''backgroundColor( (Table)arg1, (RowType)arg2) -> Color :

    C++ signature :
        class AcCmColor backgroundColor(class PyDbTable {lvalue},enum AcDb::RowType)

backgroundColor( (Table)arg1, (int)arg2, (int)arg3) -> Color :

    C++ signature :
        class AcCmColor backgroundColor(class PyDbTable {lvalue},int,int)'''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockRotation (self: Table,row: int,col: int)-> float :
      '''                             '''
    ...
    def blockScale (self: Table,row: int,col: int)-> float :
      '''                             '''
    ...
    def blockTableRecord (self: BlockReference)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockTableRecordId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''blockTableRecordId( (Table)arg1, (int)arg2, (int)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockTableRecordId(class PyDbTable {lvalue},int,int)

blockTableRecordId( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockTableRecordId(class PyDbTable {lvalue},int,int,int)'''
    ...
    def blockTransform (self: BlockReference)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def breakFlowDirection (self, *args, **kwargs)-> PyDb.TableBreakFlowDirection :
      '''breakFlowDirection( (Table)arg1) -> TableBreakFlowDirection :

    C++ signature :
        enum AcDb::TableBreakFlowDirection breakFlowDirection(class PyDbTable {lvalue})'''
    ...
    def breakHeight (self: Table,val : int)-> float :
      '''                             '''
    ...
    def breakOffset (self, *args, **kwargs)-> PyGe.Vector3d :
      '''breakOffset( (Table)arg1, (int)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d breakOffset(class PyDbTable {lvalue},int)'''
    ...
    def breakOption (self: Table)-> PyDb.TableBreakOption :
      '''                             '''
    ...
    def breakSpacing (self: Table)-> float :
      '''                             '''
    ...
    def canDelete (self: Table,row: int,col: int,brow : bool)-> bool :
      '''                             '''
    ...
    def canInsert (self: Table,index: int,brow: bool)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Table :
      '''                             '''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def cellRange (self: Table)-> PyDb.CellRange :
      '''                             '''
    ...
    def cellState (self: Table,row: int,col: int)-> PyDb.CellState :
      '''                             '''
    ...
    def cellStyle (self: Table,row: int,col: int)-> str :
      '''                             '''
    ...
    def cellStyleOverrides (self, *args, **kwargs)-> list :
      '''cellStyleOverrides( (Table)arg1, (int)arg2, (int)arg3) -> list :

    C++ signature :
        class boost::python::list cellStyleOverrides(class PyDbTable {lvalue},int,int)'''
    ...
    def cellType (self, *args, **kwargs)-> PyDb.CellType :
      '''cellType( (Table)arg1, (int)arg2, (int)arg3) -> CellType :

    C++ signature :
        enum AcDb::CellType cellType(class PyDbTable {lvalue},int,int)'''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def clearCellOverrides (self, *args, **kwargs)-> None :
      '''clearCellOverrides( (Table)arg1, (int)arg2, (int)arg3) -> None :

    C++ signature :
        void clearCellOverrides(class PyDbTable {lvalue},int,int)'''
    ...
    def clearSubSelection (self: Table)-> None :
      '''                             '''
    ...
    def clearTableStyleOverrides (self, *args, **kwargs)-> None :
      '''clearTableStyleOverrides( (Table)arg1) -> None :

    C++ signature :
        void clearTableStyleOverrides(class PyDbTable {lvalue})'''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Table :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def columnWidth (self: Table,col : int)-> float :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def contentColor (self, *args, **kwargs)-> PyDb.Color :
      '''contentColor( (Table)arg1, (RowType)arg2) -> Color :

    C++ signature :
        class AcCmColor contentColor(class PyDbTable {lvalue},enum AcDb::RowType)

contentColor( (Table)arg1, (int)arg2, (int)arg3) -> Color :

    C++ signature :
        class AcCmColor contentColor(class PyDbTable {lvalue},int,int)

contentColor( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> Color :

    C++ signature :
        class AcCmColor contentColor(class PyDbTable {lvalue},int,int,int)'''
    ...
    def contentLayout (self: Table,row: int,col: int)-> PyDb.CellContentLayout :
      '''                             '''
    ...
    def contentType (self, *args, **kwargs)-> PyDb.CellContentType :
      '''contentType( (Table)arg1, (int)arg2, (int)arg3) -> CellContentType :

    C++ signature :
        enum AcDb::CellContentType contentType(class PyDbTable {lvalue},int,int)

contentType( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> CellContentType :

    C++ signature :
        enum AcDb::CellContentType contentType(class PyDbTable {lvalue},int,int,int)'''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createContent (self: Table,row: int,col: int,idx: int)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def dataFormat (self, *args, **kwargs)-> str :
      '''dataFormat( (Table)arg1, (int)arg2, (int)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dataFormat(class PyDbTable {lvalue},int,int)

dataFormat( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dataFormat(class PyDbTable {lvalue},int,int,int)'''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def deleteCellContent (self, *args, **kwargs)-> None :
      '''deleteCellContent( (Table)arg1, (int)arg2, (int)arg3) -> None :

    C++ signature :
        void deleteCellContent(class PyDbTable {lvalue},int,int)'''
    ...
    def deleteColumns (self: Table,row: int,nCols: int)-> None :
      '''                             '''
    ...
    def deleteContent (self, *args, **kwargs)-> None :
      '''deleteContent( (Table)arg1, (int)arg2, (int)arg3) -> None :

    C++ signature :
        void deleteContent(class PyDbTable {lvalue},int,int)

deleteContent( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> None :

    C++ signature :
        void deleteContent(class PyDbTable {lvalue},int,int,int)

deleteContent( (Table)arg1, (CellRange)arg2) -> None :

    C++ signature :
        void deleteContent(class PyDbTable {lvalue},struct AcCellRange)'''
    ...
    def deleteRows (self: Table,row: int,nRows: int)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def direction (self: Table)-> PyGe.Vector3d :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def enableBreak (self: Table,val : bool)-> None :
      '''                             '''
    ...
    def enableMergeAll (self: Table,row: int,col: int,val : bool)-> None :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def explodeToOwnerSpace (self: BlockReference)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def fieldId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''fieldId( (Table)arg1, (int)arg2, (int)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId fieldId(class PyDbTable {lvalue},int,int)

fieldId( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> ObjectId :

    C++ signature :
        class PyDbObjectId fieldId(class PyDbTable {lvalue},int,int,int)'''
    ...
    def flowDirection (self: Table)-> PyDb.TableFlowDirection :
      '''                             '''
    ...
    def generateLayout (self: Table)-> None :
      '''                             '''
    ...
    def geomExtentsBestFit (self: BlockReference,val : PyGe.Matrix3d=kIdentity)-> PyDb.Extents :
      '''                             '''
    ...
    def getBlockAttributeValue (self, *args, **kwargs)-> str :
      '''getBlockAttributeValue( (Table)arg1, (int)arg2, (int)arg3, (ObjectId)arg4) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getBlockAttributeValue(class PyDbTable {lvalue},int,int,class PyDbObjectId)

getBlockAttributeValue( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (ObjectId)arg5) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getBlockAttributeValue(class PyDbTable {lvalue},int,int,int,class PyDbObjectId)'''
    ...
    def getBlockName (self: BlockReference)-> str :
      '''                             '''
    ...
    def getCellExtents (self, *args, **kwargs)-> list :
      '''getCellExtents( (Table)arg1, (int)arg2, (int)arg3, (bool)arg4) -> list :

    C++ signature :
        class boost::python::list getCellExtents(class PyDbTable {lvalue},int,int,bool)'''
    ...
    def getCellOverride (self: Table,row: int,col: int,content: int)-> PyDb.CellProperty :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDataLink (self: Table,row: int,col: int)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getDataLinkRange (self: Table,row: int,col: int)-> PyDb.CellRange :
      '''                             '''
    ...
    def getDataType (self, *args, **kwargs)-> tuple :
      '''getDataType( (Table)arg1, (RowType)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple getDataType(class PyDbTable {lvalue},enum AcDb::RowType)

getDataType( (Table)arg1, (int)arg2, (int)arg3) -> tuple :

    C++ signature :
        class boost::python::tuple getDataType(class PyDbTable {lvalue},int,int)

getDataType( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> tuple :

    C++ signature :
        class boost::python::tuple getDataType(class PyDbTable {lvalue},int,int,int)'''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFormula (self: Table,row: int,col: int,content: int)-> str :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGridOverride (self: Table,row: int,col: int,nGridLineType: PyDb.GridLineType)-> PyDb.GridProperty :
      '''                             '''
    ...
    def getGridProperty (self, *args, **kwargs)-> object :
      '''getGridProperty( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4) -> object :

    C++ signature :
        struct AcGridProperty getGridProperty(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType)'''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getIterator (self, *args, **kwargs)-> list :
      '''getIterator( (Table)arg1) -> list :

    C++ signature :
        class boost::python::list getIterator(class PyDbTable {lvalue})

getIterator( (Table)arg1, (TableIteratorOption)arg2) -> list :

    C++ signature :
        class boost::python::list getIterator(class PyDbTable {lvalue},enum AcDb::TableIteratorOption)

getIterator( (Table)arg1, (CellRange)arg2 [, (TableIteratorOption)arg3]) -> list :

    C++ signature :
        class boost::python::list getIterator(class PyDbTable {lvalue},struct AcCellRange [,enum AcDb::TableIteratorOption])'''
    ...
    def getMergeRange (self: Table,row: int,col: int)-> PyDb.CellRange :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubSelection (self: Table)-> PyDb.CellRange :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def gridColor (self, *args, **kwargs)-> PyDb.Color :
      '''gridColor( (Table)arg1, (GridLineType)arg2, (RowType)arg3) -> Color :

    C++ signature :
        class AcCmColor gridColor(class PyDbTable {lvalue},enum AcDb::GridLineType,enum AcDb::RowType)

gridColor( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4) -> Color :

    C++ signature :
        class AcCmColor gridColor(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType)'''
    ...
    def gridDoubleLineSpacing (self, *args, **kwargs)-> float :
      '''gridDoubleLineSpacing( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4) -> float :

    C++ signature :
        double gridDoubleLineSpacing(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType)'''
    ...
    def gridEdgeColor (self, *args, **kwargs)-> PyDb.Color :
      '''gridEdgeColor( (Table)arg1, (int)arg2, (int)arg3, (CellEdgeMask)arg4) -> Color :

    C++ signature :
        class AcCmColor gridEdgeColor(class PyDbTable {lvalue},int,int,enum AcDb::CellEdgeMask)'''
    ...
    def gridEdgeLineWeight (self, *args, **kwargs)-> PyDb.LineWeight :
      '''gridEdgeLineWeight( (Table)arg1, (int)arg2, (int)arg3, (CellEdgeMask)arg4) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight gridEdgeLineWeight(class PyDbTable {lvalue},int,int,enum AcDb::CellEdgeMask)'''
    ...
    def gridEdgeVisibility (self, *args, **kwargs)-> PyDb.Visibility :
      '''gridEdgeVisibility( (Table)arg1, (int)arg2, (int)arg3, (CellEdgeMask)arg4) -> Visibility :

    C++ signature :
        enum AcDb::Visibility gridEdgeVisibility(class PyDbTable {lvalue},int,int,enum AcDb::CellEdgeMask)'''
    ...
    def gridLineStyle (self: Table,row: int,col: int,nGridLineType: PyDb.GridLineType)-> PyDb.GridLineStyle :
      '''                             '''
    ...
    def gridLineWeight (self, *args, **kwargs)-> PyDb.LineWeight :
      '''gridLineWeight( (Table)arg1, (GridLineType)arg2, (RowType)arg3) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight gridLineWeight(class PyDbTable {lvalue},enum AcDb::GridLineType,enum AcDb::RowType)

gridLineWeight( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight gridLineWeight(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType)'''
    ...
    def gridLinetype (self: Table,row: int,col: int,nGridLineType: PyDb.GridLineType)-> PyDb.ObjectId :
      '''                             '''
    ...
    def gridVisibility (self, *args, **kwargs)-> PyDb.Visibility :
      '''gridVisibility( (Table)arg1, (GridLineType)arg2, (RowType)arg3) -> Visibility :

    C++ signature :
        enum AcDb::Visibility gridVisibility(class PyDbTable {lvalue},enum AcDb::GridLineType,enum AcDb::RowType)

gridVisibility( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4) -> Visibility :

    C++ signature :
        enum AcDb::Visibility gridVisibility(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType)'''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasFormula (self: Table,row: int,col: int,content: int)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasSubSelection (self: Table)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def height (self, *args, **kwargs)-> float :
      '''height( (Table)arg1) -> float :

    C++ signature :
        double height(class PyDbTable {lvalue})'''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def hitTest (self: Table,wpt: PyGe.Point3d,viewvec: PyGe.Vector3d,wx: float=0.0,wy: float=0.0)-> tuple :
      '''                             '''
    ...
    def horzCellMargin (self: Table)-> float :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def insertColumns (self: Table,row: int,width : float,nCols: int)-> None :
      '''                             '''
    ...
    def insertColumnsAndInherit (self: Table,nIndex: int,nInheritFrom: int,nNumCols: int)-> None :
      '''                             '''
    ...
    def insertRows (self: Table,row: int,height : float,nRows: int)-> None :
      '''                             '''
    ...
    def insertRowsAndInherit (self: Table,nIndex: int,nInheritFrom: int,nNumRows: int)-> None :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isAutoScale (self, *args, **kwargs)-> bool :
      '''isAutoScale( (Table)arg1, (int)arg2, (int)arg3) -> bool :

    C++ signature :
        bool isAutoScale(class PyDbTable {lvalue},int,int)

isAutoScale( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> bool :

    C++ signature :
        bool isAutoScale(class PyDbTable {lvalue},int,int,int)'''
    ...
    def isBackgroundColorNone (self, *args, **kwargs)-> bool :
      '''isBackgroundColorNone( (Table)arg1, (RowType)arg2) -> bool :

    C++ signature :
        bool isBackgroundColorNone(class PyDbTable {lvalue},enum AcDb::RowType)

isBackgroundColorNone( (Table)arg1, (int)arg2, (int)arg3) -> bool :

    C++ signature :
        bool isBackgroundColorNone(class PyDbTable {lvalue},int,int)'''
    ...
    def isBreakEnabled (self: Table)-> bool :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isContentEditable (self: Table,row: int,col: int)-> bool :
      '''                             '''
    ...
    def isEmpty (self: Table,row: int,col: int)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isFormatEditable (self: Table,row: int,col: int)-> bool :
      '''                             '''
    ...
    def isHeaderSuppressed (self: Table)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isLinked (self: Table,row: int,col: int)-> bool :
      '''                             '''
    ...
    def isMergeAllEnabled (self: Table,row: int,col: int)-> bool :
      '''                             '''
    ...
    def isMergedCell (self: Table,row: int,col: int)-> tuple :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isRegenerateTableSuppressed (self: Table)-> bool :
      '''                             '''
    ...
    def isTitleSuppressed (self: Table)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def margin (self: Table,row: int,col: int,nMargin: PyDb.CellMargin)-> float :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def mergeCells (self: Table,minRow: int,maxRow: int,minCol: int,maxCol: int)-> None :
      '''                             '''
    ...
    def minimumColumnWidth (self: Table,col: int)-> float :
      '''                             '''
    ...
    def minimumRowHeight (self: Table,row: int)-> float :
      '''                             '''
    ...
    def minimumTableHeight (self: Table)-> float :
      '''                             '''
    ...
    def minimumTableWidth (self: Table)-> float :
      '''                             '''
    ...
    def moveContent (self: Table,row: int,col: int,frm: int,to: int)-> None :
      '''                             '''
    ...
    def nonAnnotationBlockTransform (self: BlockReference)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def nonAnnotationScaleFactors (self: BlockReference)-> PyGe.Scale3d :
      '''                             '''
    ...
    def normal (self: BlockReference)-> PyGe.Vector3d :
      '''                             '''
    ...
    def numColumns (self: Table)-> int :
      '''                             '''
    ...
    def numContents (self: Table,row: int,col: int)-> int :
      '''                             '''
    ...
    def numRows (self: Table)-> int :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def position (self: BlockReference)-> PyGe.Point3d :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recomputeTableBlock (self: Table,val : bool)-> None :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeAllOverrides (self: Table,row: int,col: int)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeDataLink (self, *args, **kwargs)-> None :
      '''removeDataLink( (Table)arg1) -> None :

    C++ signature :
        void removeDataLink(class PyDbTable {lvalue})

removeDataLink( (Table)arg1, (int)arg2, (int)arg3) -> None :

    C++ signature :
        void removeDataLink(class PyDbTable {lvalue},int,int)'''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self, *args, **kwargs)-> float :
      '''rotation( (Table)arg1) -> float :

    C++ signature :
        double rotation(class PyDbTable {lvalue})

rotation( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> float :

    C++ signature :
        double rotation(class PyDbTable {lvalue},int,int,int)'''
    ...
    def rowHeight (self: Table,row : int)-> float :
      '''                             '''
    ...
    def rowType (self, *args, **kwargs)-> PyDb.RowType :
      '''rowType( (Table)arg1, (int)arg2) -> RowType :

    C++ signature :
        enum AcDb::RowType rowType(class PyDbTable {lvalue},int)'''
    ...
    def scale (self: Table,row: int,col: int,content: int)-> float :
      '''                             '''
    ...
    def scaleFactors (self: BlockReference)-> PyGe.Scale3d :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAlignment (self, *args, **kwargs)-> None :
      '''setAlignment( (Table)arg1, (CellAlignment)arg2, (RowType)arg3) -> None :

    C++ signature :
        void setAlignment(class PyDbTable {lvalue},enum AcDb::CellAlignment,enum AcDb::RowType)

setAlignment( (Table)arg1, (int)arg2, (int)arg3, (CellAlignment)arg4) -> None :

    C++ signature :
        void setAlignment(class PyDbTable {lvalue},int,int,enum AcDb::CellAlignment)'''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setAutoScale (self, *args, **kwargs)-> None :
      '''setAutoScale( (Table)arg1, (int)arg2, (int)arg3, (bool)arg4) -> None :

    C++ signature :
        void setAutoScale(class PyDbTable {lvalue},int,int,bool)

setAutoScale( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (bool)arg5) -> None :

    C++ signature :
        void setAutoScale(class PyDbTable {lvalue},int,int,int,bool)'''
    ...
    def setBackgroundColor (self, *args, **kwargs)-> None :
      '''setBackgroundColor( (Table)arg1, (Color)arg2, (RowType)arg3) -> None :

    C++ signature :
        void setBackgroundColor(class PyDbTable {lvalue},class AcCmColor,enum AcDb::RowType)

setBackgroundColor( (Table)arg1, (int)arg2, (int)arg3, (Color)arg4) -> None :

    C++ signature :
        void setBackgroundColor(class PyDbTable {lvalue},int,int,class AcCmColor)'''
    ...
    def setBackgroundColorNone (self, *args, **kwargs)-> None :
      '''setBackgroundColorNone( (Table)arg1, (bool)arg2, (RowType)arg3) -> None :

    C++ signature :
        void setBackgroundColorNone(class PyDbTable {lvalue},bool,enum AcDb::RowType)

setBackgroundColorNone( (Table)arg1, (int)arg2, (int)arg3, (bool)arg4) -> None :

    C++ signature :
        void setBackgroundColorNone(class PyDbTable {lvalue},int,int,bool)'''
    ...
    def setBlockAttributeValue (self, *args, **kwargs)-> None :
      '''setBlockAttributeValue( (Table)arg1, (int)arg2, (int)arg3, (ObjectId)arg4, (str)arg5) -> None :

    C++ signature :
        void setBlockAttributeValue(class PyDbTable {lvalue},int,int,class PyDbObjectId,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setBlockAttributeValue( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (ObjectId)arg5, (str)arg6) -> None :

    C++ signature :
        void setBlockAttributeValue(class PyDbTable {lvalue},int,int,int,class PyDbObjectId,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setBlockRotation (self: Table,row: int,col: int,rotAng : float)-> None :
      '''                             '''
    ...
    def setBlockScale (self: Table,row: int,col: int,scale : float)-> None :
      '''                             '''
    ...
    def setBlockTableRecord (self: BlockReference,val : ObjectId)-> None :
      '''                             '''
    ...
    def setBlockTableRecordId (self, *args, **kwargs)-> None :
      '''setBlockTableRecordId( (Table)arg1, (int)arg2, (int)arg3, (ObjectId)arg4, (bool)arg5) -> None :

    C++ signature :
        void setBlockTableRecordId(class PyDbTable {lvalue},int,int,class PyDbObjectId,bool)

setBlockTableRecordId( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (ObjectId)arg5, (bool)arg6) -> None :

    C++ signature :
        void setBlockTableRecordId(class PyDbTable {lvalue},int,int,int,class PyDbObjectId,bool)'''
    ...
    def setBlockTransform (self: BlockReference,val : PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def setBreakFlowDirection (self, *args, **kwargs)-> None :
      '''setBreakFlowDirection( (Table)arg1, (TableBreakFlowDirection)arg2) -> None :

    C++ signature :
        void setBreakFlowDirection(class PyDbTable {lvalue},enum AcDb::TableBreakFlowDirection)'''
    ...
    def setBreakHeight (self: Table,val : int,height : float)-> None :
      '''                             '''
    ...
    def setBreakOffset (self, *args, **kwargs)-> None :
      '''setBreakOffset( (Table)arg1, (int)arg2, (Vector3d)arg3) -> None :

    C++ signature :
        void setBreakOffset(class PyDbTable {lvalue},int,class AcGeVector3d)'''
    ...
    def setBreakOption (self, *args, **kwargs)-> None :
      '''setBreakOption( (Table)arg1, (TableBreakOption)arg2) -> None :

    C++ signature :
        void setBreakOption(class PyDbTable {lvalue},enum AcDb::TableBreakOption)'''
    ...
    def setBreakSpacing (self: Table,val : float)-> None :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setCellOverride (self: Table,row: int,col: int,content: int,nOverride: PyDb.CellProperty)-> None :
      '''                             '''
    ...
    def setCellState (self: Table,row: int,col: int,val : PyDb.CellState)-> None :
      '''                             '''
    ...
    def setCellStyle (self: Table,row: int,col: int,style: str)-> None :
      '''                             '''
    ...
    def setCellType (self, *args, **kwargs)-> None :
      '''setCellType( (Table)arg1, (int)arg2, (int)arg3, (CellType)arg4) -> None :

    C++ signature :
        void setCellType(class PyDbTable {lvalue},int,int,enum AcDb::CellType)'''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setColumnWidth (self, *args, **kwargs)-> None :
      '''setColumnWidth( (Table)arg1, (int)arg2, (float)arg3) -> None :

    C++ signature :
        void setColumnWidth(class PyDbTable {lvalue},int,double)

setColumnWidth( (Table)arg1, (float)arg2) -> None :

    C++ signature :
        void setColumnWidth(class PyDbTable {lvalue},double)'''
    ...
    def setContentColor (self, *args, **kwargs)-> None :
      '''setContentColor( (Table)arg1, (Color)arg2, (RowType)arg3) -> None :

    C++ signature :
        void setContentColor(class PyDbTable {lvalue},class AcCmColor,enum AcDb::RowType)

setContentColor( (Table)arg1, (int)arg2, (int)arg3, (Color)arg4) -> None :

    C++ signature :
        void setContentColor(class PyDbTable {lvalue},int,int,class AcCmColor)

setContentColor( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (Color)arg5) -> None :

    C++ signature :
        void setContentColor(class PyDbTable {lvalue},int,int,int,class AcCmColor)'''
    ...
    def setContentLayout (self: Table,row: int,col: int,val: PyDb.CellContentLayout)-> None :
      '''                             '''
    ...
    def setDataFormat (self, *args, **kwargs)-> None :
      '''setDataFormat( (Table)arg1, (int)arg2, (int)arg3, (str)arg4) -> None :

    C++ signature :
        void setDataFormat(class PyDbTable {lvalue},int,int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setDataFormat( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (str)arg5) -> None :

    C++ signature :
        void setDataFormat(class PyDbTable {lvalue},int,int,int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDataLink (self: Table,row: int,col: int,id : PyDb.ObjectId,update : bool)-> None :
      '''                             '''
    ...
    def setDataType (self, *args, **kwargs)-> None :
      '''setDataType( (Table)arg1, (object)arg2, (object)arg3) -> None :

    C++ signature :
        void setDataType(class PyDbTable {lvalue},enum AcValue::DataType,enum AcValue::UnitType)

setDataType( (Table)arg1, (object)arg2, (object)arg3, (RowType)arg4) -> None :

    C++ signature :
        void setDataType(class PyDbTable {lvalue},enum AcValue::DataType,enum AcValue::UnitType,enum AcDb::RowType)

setDataType( (Table)arg1, (int)arg2, (int)arg3, (object)arg4, (object)arg5) -> None :

    C++ signature :
        void setDataType(class PyDbTable {lvalue},int,int,enum AcValue::DataType,enum AcValue::UnitType)

setDataType( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (object)arg5, (object)arg6) -> None :

    C++ signature :
        void setDataType(class PyDbTable {lvalue},int,int,int,enum AcValue::DataType,enum AcValue::UnitType)'''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDirection (self: Table,val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setFieldId (self, *args, **kwargs)-> None :
      '''setFieldId( (Table)arg1, (int)arg2, (int)arg3, (ObjectId)arg4) -> None :

    C++ signature :
        void setFieldId(class PyDbTable {lvalue},int,int,class PyDbObjectId)

setFieldId( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (ObjectId)arg5, (object)arg6) -> None :

    C++ signature :
        void setFieldId(class PyDbTable {lvalue},int,int,int,class PyDbObjectId,enum AcDb::CellOption)'''
    ...
    def setFlowDirection (self: Table,val : PyDb.TableFlowDirection)-> None :
      '''                             '''
    ...
    def setFormat (self, *args, **kwargs)-> None :
      '''setFormat( (Table)arg1, (int)arg2, (int)arg3, (str)arg4) -> None :

    C++ signature :
        void setFormat(class PyDbTable {lvalue},int,int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setFormula (self: Table,row: int,col: int,content: int,val: str)-> None :
      '''                             '''
    ...
    def setGridColor (self, *args, **kwargs)-> None :
      '''setGridColor( (Table)arg1, (Color)arg2, (int)arg3, (int)arg4) -> None :

    C++ signature :
        void setGridColor(class PyDbTable {lvalue},class AcCmColor,int,int)

setGridColor( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4, (Color)arg5) -> None :

    C++ signature :
        void setGridColor(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType,class AcCmColor)'''
    ...
    def setGridDoubleLineSpacing (self, *args, **kwargs)-> None :
      '''setGridDoubleLineSpacing( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4, (float)arg5) -> None :

    C++ signature :
        void setGridDoubleLineSpacing(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType,double)'''
    ...
    def setGridEdgeColor (self, *args, **kwargs)-> None :
      '''setGridEdgeColor( (Table)arg1, (int)arg2, (int)arg3, (CellEdgeMask)arg4, (Color)arg5) -> None :

    C++ signature :
        void setGridEdgeColor(class PyDbTable {lvalue},int,int,enum AcDb::CellEdgeMask,class AcCmColor)'''
    ...
    def setGridEdgeLineWeight (self, *args, **kwargs)-> None :
      '''setGridEdgeLineWeight( (Table)arg1, (int)arg2, (int)arg3, (CellEdgeMask)arg4, (LineWeight)arg5) -> None :

    C++ signature :
        void setGridEdgeLineWeight(class PyDbTable {lvalue},int,int,enum AcDb::CellEdgeMask,enum AcDb::LineWeight)'''
    ...
    def setGridEdgeVisibility (self, *args, **kwargs)-> None :
      '''setGridEdgeVisibility( (Table)arg1, (int)arg2, (int)arg3, (CellEdgeMask)arg4, (Visibility)arg5) -> None :

    C++ signature :
        void setGridEdgeVisibility(class PyDbTable {lvalue},int,int,enum AcDb::CellEdgeMask,enum AcDb::Visibility)'''
    ...
    def setGridLineStyle (self: Table,row: int,col: int,nGridLineType: PyDb.GridLineTypes,nLineStyle: PyDb.GridLineStyle)-> None :
      '''                             '''
    ...
    def setGridLineWeight (self, *args, **kwargs)-> None :
      '''setGridLineWeight( (Table)arg1, (LineWeight)arg2, (int)arg3, (int)arg4) -> None :

    C++ signature :
        void setGridLineWeight(class PyDbTable {lvalue},enum AcDb::LineWeight,int,int)

setGridLineWeight( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4, (LineWeight)arg5) -> None :

    C++ signature :
        void setGridLineWeight(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType,enum AcDb::LineWeight)'''
    ...
    def setGridLinetype (self: Table,row: int,col: int,nGridLineType: PyDb.GridLineTypes,idLinetype: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setGridOverride (self: Table,row: int,col: int,nGridLineType: PyDb.GridLineType,nOverride: PyDb.GridProperty)-> None :
      '''                             '''
    ...
    def setGridProperty (self, *args, **kwargs)-> None :
      '''setGridProperty( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4, (object)arg5) -> None :

    C++ signature :
        void setGridProperty(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType,struct AcGridProperty)

setGridProperty( (Table)arg1, (CellRange)arg2, (GridLineType)arg3, (object)arg4) -> None :

    C++ signature :
        void setGridProperty(class PyDbTable {lvalue},struct AcCellRange,enum AcDb::GridLineType,struct AcGridProperty)'''
    ...
    def setGridVisibility (self, *args, **kwargs)-> None :
      '''setGridVisibility( (Table)arg1, (Visibility)arg2, (int)arg3, (int)arg4) -> None :

    C++ signature :
        void setGridVisibility(class PyDbTable {lvalue},enum AcDb::Visibility,int,int)'''
    ...
    def setGridVisibility3 (self, *args, **kwargs)-> None :
      '''setGridVisibility3( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4, (Visibility)arg5) -> None :

    C++ signature :
        void setGridVisibility3(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType,enum AcDb::Visibility)'''
    ...
    def setHeight (self: Table,val : float)-> None :
      '''                             '''
    ...
    def setHorzCellMargin (self: Table,val : float)-> None :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMargin (self: Table,row: int,col: int,nMargin: PyDb.CellMargin,val : float)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self: Table,val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self: Table,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setRecomputeTableBlock (self: Table,val : bool)-> None :
      '''                             '''
    ...
    def setRegen (self: Table)-> None :
      '''                             '''
    ...
    def setRotation (self, *args, **kwargs)-> None :
      '''setRotation( (Table)arg1, (float)arg2) -> None :

    C++ signature :
        void setRotation(class PyDbTable {lvalue},double)

setRotation( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (float)arg5) -> None :

    C++ signature :
        void setRotation(class PyDbTable {lvalue},int,int,int,double)'''
    ...
    def setRowHeight (self, *args, **kwargs)-> None :
      '''setRowHeight( (Table)arg1, (int)arg2, (float)arg3) -> None :

    C++ signature :
        void setRowHeight(class PyDbTable {lvalue},int,double)

setRowHeight( (Table)arg1, (float)arg2) -> None :

    C++ signature :
        void setRowHeight(class PyDbTable {lvalue},double)'''
    ...
    def setScale (self: Table,row: int,col: int,content: int,val : float)-> None :
      '''                             '''
    ...
    def setScaleFactors (self: BlockReference,val : PyGe.Scale3d)-> None :
      '''                             '''
    ...
    def setSize (self: Table,rows: int,cols: int)-> None :
      '''                             '''
    ...
    def setSubSelection (self: Table,val : PyDb.CellRange)-> None :
      '''                             '''
    ...
    def setTableStyle (self: Table,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setTextHeight (self, *args, **kwargs)-> None :
      '''setTextHeight( (Table)arg1, (float)arg2, (RowType)arg3) -> None :

    C++ signature :
        void setTextHeight(class PyDbTable {lvalue},double,enum AcDb::RowType)

setTextHeight( (Table)arg1, (int)arg2, (int)arg3, (float)arg4) -> None :

    C++ signature :
        void setTextHeight(class PyDbTable {lvalue},int,int,double)

setTextHeight( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (float)arg5) -> None :

    C++ signature :
        void setTextHeight(class PyDbTable {lvalue},int,int,int,double)'''
    ...
    def setTextRotation (self, *args, **kwargs)-> None :
      '''setTextRotation( (Table)arg1, (int)arg2, (int)arg3, (RotationAngle)arg4) -> None :

    C++ signature :
        void setTextRotation(class PyDbTable {lvalue},int,int,enum AcDb::RotationAngle)'''
    ...
    def setTextString (self, *args, **kwargs)-> None :
      '''setTextString( (Table)arg1, (int)arg2, (int)arg3, (str)arg4) -> None :

    C++ signature :
        void setTextString(class PyDbTable {lvalue},int,int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setTextString( (Table)arg1, (Cell)arg2, (str)arg3) -> None :

    C++ signature :
        void setTextString(class PyDbTable {lvalue},struct AcCell,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setTextString( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (str)arg5) -> None :

    C++ signature :
        void setTextString(class PyDbTable {lvalue},int,int,int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setTextStyle (self, *args, **kwargs)-> None :
      '''setTextStyle( (Table)arg1, (ObjectId)arg2, (RowType)arg3) -> None :

    C++ signature :
        void setTextStyle(class PyDbTable {lvalue},class PyDbObjectId,enum AcDb::RowType)

setTextStyle( (Table)arg1, (int)arg2, (int)arg3, (ObjectId)arg4) -> None :

    C++ signature :
        void setTextStyle(class PyDbTable {lvalue},int,int,class PyDbObjectId)

setTextStyle( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (ObjectId)arg5) -> None :

    C++ signature :
        void setTextStyle(class PyDbTable {lvalue},int,int,int,class PyDbObjectId)'''
    ...
    def setVertCellMargin (self: Table,val : float)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setWidth (self: Table,val : float)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def suppressHeaderRow (self: Table,val : bool)-> None :
      '''                             '''
    ...
    def suppressInvisibleGrid (self: Table,val : bool)-> None :
      '''                             '''
    ...
    def suppressRegenerateTable (self: Table,val : bool)-> None :
      '''                             '''
    ...
    def suppressTitleRow (self: Table,val : bool)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def tableStyle (self: Table)-> PyDb.ObjectId :
      '''                             '''
    ...
    def tableStyleOverrides (self, *args, **kwargs)-> list :
      '''tableStyleOverrides( (Table)arg1) -> list :

    C++ signature :
        class boost::python::list tableStyleOverrides(class PyDbTable {lvalue})'''
    ...
    def textHeight (self, *args, **kwargs)-> float :
      '''textHeight( (Table)arg1, (RowType)arg2) -> float :

    C++ signature :
        double textHeight(class PyDbTable {lvalue},enum AcDb::RowType)

textHeight( (Table)arg1, (int)arg2, (int)arg3) -> float :

    C++ signature :
        double textHeight(class PyDbTable {lvalue},int,int)

textHeight( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> float :

    C++ signature :
        double textHeight(class PyDbTable {lvalue},int,int,int)'''
    ...
    def textRotation (self, *args, **kwargs)-> PyDb.RotationAngle :
      '''textRotation( (Table)arg1, (int)arg2, (int)arg3) -> RotationAngle :

    C++ signature :
        enum AcDb::RotationAngle textRotation(class PyDbTable {lvalue},int,int)'''
    ...
    def textString (self, *args, **kwargs)-> str :
      '''textString( (Table)arg1, (int)arg2, (int)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > textString(class PyDbTable {lvalue},int,int)

textString( (Table)arg1, (Cell)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > textString(class PyDbTable {lvalue},struct AcCell)

textString( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > textString(class PyDbTable {lvalue},int,int,int)'''
    ...
    def textStringFmt (self, *args, **kwargs)-> str :
      '''textStringFmt( (Table)arg1, (int)arg2, (int)arg3, (FormatOption)arg4) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > textStringFmt(class PyDbTable {lvalue},int,int,enum AcValue::FormatOption)

textStringFmt( (Table)arg1, (Cell)arg2, (FormatOption)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > textStringFmt(class PyDbTable {lvalue},struct AcCell,enum AcValue::FormatOption)

textStringFmt( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (FormatOption)arg5) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > textStringFmt(class PyDbTable {lvalue},int,int,int,enum AcValue::FormatOption)'''
    ...
    def textStyle (self, *args, **kwargs)-> PyDb.ObjectId :
      '''textStyle( (Table)arg1, (RowType)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyle(class PyDbTable {lvalue},enum AcDb::RowType)

textStyle( (Table)arg1, (int)arg2, (int)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyle(class PyDbTable {lvalue},int,int)

textStyle( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyle(class PyDbTable {lvalue},int,int,int)'''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def treatAsAcDbBlockRefForExplode (self: BlockReference)-> bool :
      '''                             '''
    ...
    def unmergeCells (self: Table,minRow: int,maxRow: int,minCol: int,maxCol: int)-> None :
      '''                             '''
    ...
    def updateDataLink (self, *args, **kwargs)-> None :
      '''updateDataLink( (Table)arg1, (UpdateDirection)arg2, (UpdateOption)arg3) -> None :

    C++ signature :
        void updateDataLink(class PyDbTable {lvalue},enum AcDb::UpdateDirection,enum AcDb::UpdateOption)

updateDataLink( (Table)arg1, (int)arg2, (int)arg3, (UpdateDirection)arg4, (UpdateOption)arg5) -> None :

    C++ signature :
        void updateDataLink(class PyDbTable {lvalue},int,int,enum AcDb::UpdateDirection,enum AcDb::UpdateOption)'''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def vertCellMargin (self: Table)-> float :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def width (self: Table)-> float :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class TableBreakFlowDirection:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kTableBreakFlowDownOrUp (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableBreakFlowLeft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableIteratorNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class TableBreakOption:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kTableBreakAllowManualHeights (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableBreakAllowManualPositions (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableBreakEnableBreaking (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableBreakNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableBreakRepeatBottomLabels (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableBreakRepeatTopLabels (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class TableFlowDirection:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kExactly (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTtoB (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class TableHitItem:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kTableHitCell (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableHitColumnIndicator (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableHitGridLine (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableHitNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableHitRowIndicator (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class TableIteratorOption:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kTableIteratorIterateColumns (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableIteratorIterateDataLinks (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableIteratorIterateRows (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableIteratorIterateSelection (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableIteratorNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableIteratorReverseOrder (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableIteratorSkipMerged (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableIteratorSkipReadOnlyContent (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableIteratorSkipReadOnlyFormat (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class TableStyle:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3, (bool)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode,bool)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def alignment (self, *args, **kwargs)-> PyDb.CellAlignment :
      '''alignment( (TableStyle)arg1, (RowType)arg2) -> CellAlignment :

    C++ signature :
        enum AcDb::CellAlignment alignment(class PyDbTableStyle {lvalue},enum AcDb::RowType)

alignment( (TableStyle)arg1, (str)arg2) -> CellAlignment :

    C++ signature :
        enum AcDb::CellAlignment alignment(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def backgroundColor (self, *args, **kwargs)-> PyDb.Color :
      '''backgroundColor( (TableStyle)arg1, (RowType)arg2) -> Color :

    C++ signature :
        class AcCmColor backgroundColor(class PyDbTableStyle {lvalue},enum AcDb::RowType)

backgroundColor( (TableStyle)arg1, (str)arg2) -> Color :

    C++ signature :
        class AcCmColor backgroundColor(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def bitFlags (self, *args, **kwargs)-> int :
      '''bitFlags( (TableStyle)arg1) -> int :

    C++ signature :
        unsigned int bitFlags(class PyDbTableStyle {lvalue})'''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.TableStyle :
      '''cast( (RxObject)arg1) -> TableStyle :

    C++ signature :
        class PyDbTableStyle cast(class PyRxObject)'''
    ...
    def cellClass (self, *args, **kwargs)-> int :
      '''cellClass( (TableStyle)arg1, (str)arg2) -> int :

    C++ signature :
        int cellClass(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.TableStyle :
      '''cloneFrom( (RxObject)arg1) -> TableStyle :

    C++ signature :
        class PyDbTableStyle cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def color (self, *args, **kwargs)-> PyDb.Color :
      '''color( (TableStyle)arg1, (RowType)arg2) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbTableStyle {lvalue},enum AcDb::RowType)

color( (TableStyle)arg1, (str)arg2) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyCellStyle (self, *args, **kwargs)-> None :
      '''copyCellStyle( (TableStyle)arg1, (str)arg2, (str)arg3) -> None :

    C++ signature :
        void copyCellStyle(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createCellStyle (self, *args, **kwargs)-> str :
      '''createCellStyle( (TableStyle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > createCellStyle(class PyDbTableStyle {lvalue})

createCellStyle( (TableStyle)arg1, (str)arg2) -> None :

    C++ signature :
        void createCellStyle(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

createCellStyle( (TableStyle)arg1, (str)arg2, (str)arg3) -> None :

    C++ signature :
        void createCellStyle(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def deleteCellStyle (self, *args, **kwargs)-> None :
      '''deleteCellStyle( (TableStyle)arg1, (str)arg2) -> None :

    C++ signature :
        void deleteCellStyle(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def description (self, *args, **kwargs)-> str :
      '''description( (TableStyle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > description(class PyDbTableStyle {lvalue})'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def enableMergeAll (self, *args, **kwargs)-> None :
      '''enableMergeAll( (TableStyle)arg1, (bool)arg2, (str)arg3) -> None :

    C++ signature :
        void enableMergeAll(class PyDbTableStyle {lvalue},bool,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def flowDirection (self, *args, **kwargs)-> PyDb.TableFlowDirection :
      '''flowDirection( (TableStyle)arg1) -> TableFlowDirection :

    C++ signature :
        enum AcDb::FlowDirection flowDirection(class PyDbTableStyle {lvalue})'''
    ...
    def format (self, *args, **kwargs)-> str :
      '''format( (TableStyle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > format(class PyDbTableStyle {lvalue})

format( (TableStyle)arg1, (RowType)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > format(class PyDbTableStyle {lvalue},enum AcDb::RowType)

format( (TableStyle)arg1, (str)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > format(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getCellStyles (self, *args, **kwargs)-> list :
      '''getCellStyles( (TableStyle)arg1) -> list :

    C++ signature :
        class boost::python::list getCellStyles(class PyDbTableStyle {lvalue})'''
    ...
    def getDataType (self, *args, **kwargs)-> tuple :
      '''getDataType( (TableStyle)arg1, (RowType)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple getDataType(class PyDbTableStyle {lvalue},enum AcDb::RowType)

getDataType( (TableStyle)arg1, (str)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple getDataType(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGridProperty (self, *args, **kwargs)-> object :
      '''getGridProperty( (TableStyle)arg1, (GridLineType)arg2, (str)arg3) -> object :

    C++ signature :
        struct AcGridProperty getGridProperty(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getName (self, *args, **kwargs)-> str :
      '''getName( (TableStyle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getName(class PyDbTableStyle {lvalue})'''
    ...
    def getTemplate (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getTemplate( (TableStyle)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getTemplate(class PyDbTableStyle {lvalue})'''
    ...
    def gridColor (self, *args, **kwargs)-> PyDb.Color :
      '''gridColor( (TableStyle)arg1, (GridLineType)arg2, (RowType)arg3) -> Color :

    C++ signature :
        class AcCmColor gridColor(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,enum AcDb::RowType)

gridColor( (TableStyle)arg1, (GridLineType)arg2, (str)arg3) -> Color :

    C++ signature :
        class AcCmColor gridColor(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def gridDoubleLineSpacing (self, *args, **kwargs)-> float :
      '''gridDoubleLineSpacing( (TableStyle)arg1, (GridLineType)arg2, (str)arg3) -> float :

    C++ signature :
        double gridDoubleLineSpacing(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def gridLineStyle (self, *args, **kwargs)-> PyDb.GridLineStyle :
      '''gridLineStyle( (TableStyle)arg1, (GridLineType)arg2, (str)arg3) -> GridLineStyle :

    C++ signature :
        enum AcDb::GridLineStyle gridLineStyle(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def gridLineWeight (self, *args, **kwargs)-> PyDb.LineWeight :
      '''gridLineWeight( (TableStyle)arg1, (GridLineType)arg2, (RowType)arg3) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight gridLineWeight(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,enum AcDb::RowType)

gridLineWeight( (TableStyle)arg1, (GridLineType)arg2, (str)arg3) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight gridLineWeight(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def gridLinetype (self, *args, **kwargs)-> PyDb.ObjectId :
      '''gridLinetype( (TableStyle)arg1, (GridLineType)arg2, (str)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId gridLinetype(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def gridVisibility (self, *args, **kwargs)-> PyDb.Visibility :
      '''gridVisibility( (TableStyle)arg1, (GridLineType)arg2, (RowType)arg3) -> Visibility :

    C++ signature :
        enum AcDb::Visibility gridVisibility(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,enum AcDb::RowType)

gridVisibility( (TableStyle)arg1, (GridLineType)arg2, (str)arg3) -> Visibility :

    C++ signature :
        enum AcDb::Visibility gridVisibility(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def horzCellMargin (self, *args, **kwargs)-> float :
      '''horzCellMargin( (TableStyle)arg1) -> float :

    C++ signature :
        double horzCellMargin(class PyDbTableStyle {lvalue})'''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isBackgroundColorNone (self, *args, **kwargs)-> bool :
      '''isBackgroundColorNone( (TableStyle)arg1, (RowType)arg2) -> bool :

    C++ signature :
        bool isBackgroundColorNone(class PyDbTableStyle {lvalue},enum AcDb::RowType)'''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isCellStyleInUse (self, *args, **kwargs)-> bool :
      '''isCellStyleInUse( (TableStyle)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isCellStyleInUse(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isHeaderSuppressed (self, *args, **kwargs)-> bool :
      '''isHeaderSuppressed( (TableStyle)arg1) -> bool :

    C++ signature :
        bool isHeaderSuppressed(class PyDbTableStyle {lvalue})'''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isMergeAllEnabled (self, *args, **kwargs)-> bool :
      '''isMergeAllEnabled( (TableStyle)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isMergeAllEnabled(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTitleSuppressed (self, *args, **kwargs)-> bool :
      '''isTitleSuppressed( (TableStyle)arg1) -> bool :

    C++ signature :
        bool isTitleSuppressed(class PyDbTableStyle {lvalue})'''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def margin (self, *args, **kwargs)-> float :
      '''margin( (TableStyle)arg1, (CellMargin)arg2, (str)arg3) -> float :

    C++ signature :
        double margin(class PyDbTableStyle {lvalue},enum AcDb::CellMargin,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def numCellStyles (self, *args, **kwargs)-> int :
      '''numCellStyles( (TableStyle)arg1) -> int :

    C++ signature :
        int numCellStyles(class PyDbTableStyle {lvalue})'''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def postTableStyleToDb (self, *args, **kwargs)-> PyDb.ObjectId :
      '''postTableStyleToDb( (TableStyle)arg1, (Database)arg2, (str)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId postTableStyleToDb(class PyDbTableStyle {lvalue},class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def removeTemplate (self, *args, **kwargs)-> PyDb.ObjectId :
      '''removeTemplate( (TableStyle)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId removeTemplate(class PyDbTableStyle {lvalue})'''
    ...
    def renameCellStyle (self, *args, **kwargs)-> None :
      '''renameCellStyle( (TableStyle)arg1, (str)arg2, (str)arg3) -> None :

    C++ signature :
        void renameCellStyle(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self, *args, **kwargs)-> float :
      '''rotation( (TableStyle)arg1, (str)arg2) -> float :

    C++ signature :
        double rotation(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAlignment (self, *args, **kwargs)-> None :
      '''setAlignment( (TableStyle)arg1, (CellAlignment)arg2, (RowType)arg3) -> None :

    C++ signature :
        void setAlignment(class PyDbTableStyle {lvalue},enum AcDb::CellAlignment,enum AcDb::RowType)

setAlignment( (TableStyle)arg1, (CellAlignment)arg2, (str)arg3) -> None :

    C++ signature :
        void setAlignment(class PyDbTableStyle {lvalue},enum AcDb::CellAlignment,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBackgroundColor (self, *args, **kwargs)-> None :
      '''setBackgroundColor( (TableStyle)arg1, (Color)arg2, (RowType)arg3) -> None :

    C++ signature :
        void setBackgroundColor(class PyDbTableStyle {lvalue},class AcCmColor,enum AcDb::RowType)

setBackgroundColor( (TableStyle)arg1, (Color)arg2, (str)arg3) -> None :

    C++ signature :
        void setBackgroundColor(class PyDbTableStyle {lvalue},class AcCmColor,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setBackgroundColorNone (self, *args, **kwargs)-> None :
      '''setBackgroundColorNone( (TableStyle)arg1, (bool)arg2, (RowType)arg3) -> None :

    C++ signature :
        void setBackgroundColorNone(class PyDbTableStyle {lvalue},bool,enum AcDb::RowType)'''
    ...
    def setBitFlags (self, *args, **kwargs)-> None :
      '''setBitFlags( (TableStyle)arg1, (SubentType)arg2) -> None :

    C++ signature :
        void setBitFlags(class PyDbTableStyle {lvalue},unsigned int)'''
    ...
    def setCellClass (self, *args, **kwargs)-> None :
      '''setCellClass( (TableStyle)arg1, (int)arg2, (str)arg3) -> None :

    C++ signature :
        void setCellClass(class PyDbTableStyle {lvalue},int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setColor (self, *args, **kwargs)-> None :
      '''setColor( (TableStyle)arg1, (Color)arg2, (RowType)arg3) -> None :

    C++ signature :
        void setColor(class PyDbTableStyle {lvalue},class AcCmColor,enum AcDb::RowType)

setColor( (TableStyle)arg1, (Color)arg2, (str)arg3) -> None :

    C++ signature :
        void setColor(class PyDbTableStyle {lvalue},class AcCmColor,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDataType (self, *args, **kwargs)-> None :
      '''setDataType( (TableStyle)arg1, (object)arg2, (object)arg3) -> None :

    C++ signature :
        void setDataType(class PyDbTableStyle {lvalue},enum AcValue::DataType,enum AcValue::UnitType)

setDataType( (TableStyle)arg1, (object)arg2, (object)arg3, (RowType)arg4) -> None :

    C++ signature :
        void setDataType(class PyDbTableStyle {lvalue},enum AcValue::DataType,enum AcValue::UnitType,enum AcDb::RowType)

setDataType( (TableStyle)arg1, (object)arg2, (object)arg3, (str)arg4) -> None :

    C++ signature :
        void setDataType(class PyDbTableStyle {lvalue},enum AcValue::DataType,enum AcValue::UnitType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDescription (self, *args, **kwargs)-> None :
      '''setDescription( (TableStyle)arg1, (str)arg2) -> None :

    C++ signature :
        void setDescription(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setFlowDirection (self, *args, **kwargs)-> None :
      '''setFlowDirection( (TableStyle)arg1, (TableFlowDirection)arg2) -> None :

    C++ signature :
        void setFlowDirection(class PyDbTableStyle {lvalue},enum AcDb::FlowDirection)'''
    ...
    def setFormat (self, *args, **kwargs)-> None :
      '''setFormat( (TableStyle)arg1, (str)arg2) -> None :

    C++ signature :
        void setFormat(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setFormat( (TableStyle)arg1, (str)arg2, (RowType)arg3) -> None :

    C++ signature :
        void setFormat(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,enum AcDb::RowType)

setFormat( (TableStyle)arg1, (str)arg2, (str)arg3) -> None :

    C++ signature :
        void setFormat(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setGridColor (self, *args, **kwargs)-> None :
      '''setGridColor( (TableStyle)arg1, (Color)arg2, (GridLineType)arg3, (RowType)arg4) -> None :

    C++ signature :
        void setGridColor(class PyDbTableStyle {lvalue},class AcCmColor,enum AcDb::GridLineType,enum AcDb::RowType)

setGridColor( (TableStyle)arg1, (Color)arg2, (GridLineType)arg3, (str)arg4) -> None :

    C++ signature :
        void setGridColor(class PyDbTableStyle {lvalue},class AcCmColor,enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setGridDoubleLineSpacing (self, *args, **kwargs)-> None :
      '''setGridDoubleLineSpacing( (TableStyle)arg1, (float)arg2, (GridLineType)arg3, (str)arg4) -> None :

    C++ signature :
        void setGridDoubleLineSpacing(class PyDbTableStyle {lvalue},double,enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setGridLineStyle (self, *args, **kwargs)-> None :
      '''setGridLineStyle( (TableStyle)arg1, (GridLineStyle)arg2, (GridLineType)arg3, (str)arg4) -> None :

    C++ signature :
        void setGridLineStyle(class PyDbTableStyle {lvalue},enum AcDb::GridLineStyle,enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setGridLineWeight (self, *args, **kwargs)-> None :
      '''setGridLineWeight( (TableStyle)arg1, (LineWeight)arg2, (GridLineType)arg3, (RowType)arg4) -> None :

    C++ signature :
        void setGridLineWeight(class PyDbTableStyle {lvalue},enum AcDb::LineWeight,enum AcDb::GridLineType,enum AcDb::RowType)

setGridLineWeight( (TableStyle)arg1, (LineWeight)arg2, (GridLineType)arg3, (str)arg4) -> None :

    C++ signature :
        void setGridLineWeight(class PyDbTableStyle {lvalue},enum AcDb::LineWeight,enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setGridLinetype (self, *args, **kwargs)-> None :
      '''setGridLinetype( (TableStyle)arg1, (ObjectId)arg2, (GridLineType)arg3, (str)arg4) -> None :

    C++ signature :
        void setGridLinetype(class PyDbTableStyle {lvalue},class PyDbObjectId,enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setGridProperty (self, *args, **kwargs)-> None :
      '''setGridProperty( (TableStyle)arg1, (object)arg2, (GridLineType)arg3, (str)arg4) -> None :

    C++ signature :
        void setGridProperty(class PyDbTableStyle {lvalue},struct AcGridProperty,enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setGridVisibility (self, *args, **kwargs)-> None :
      '''setGridVisibility( (TableStyle)arg1, (Visibility)arg2, (GridLineType)arg3, (RowType)arg4) -> None :

    C++ signature :
        void setGridVisibility(class PyDbTableStyle {lvalue},enum AcDb::Visibility,enum AcDb::GridLineType,enum AcDb::RowType)

setGridVisibility( (TableStyle)arg1, (Visibility)arg2, (GridLineType)arg3, (str)arg4) -> None :

    C++ signature :
        void setGridVisibility(class PyDbTableStyle {lvalue},enum AcDb::Visibility,enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setHorzCellMargin (self, *args, **kwargs)-> None :
      '''setHorzCellMargin( (TableStyle)arg1, (float)arg2) -> None :

    C++ signature :
        void setHorzCellMargin(class PyDbTableStyle {lvalue},double)'''
    ...
    def setMargin (self, *args, **kwargs)-> None :
      '''setMargin( (TableStyle)arg1, (CellMargin)arg2, (float)arg3, (str)arg4) -> None :

    C++ signature :
        void setMargin(class PyDbTableStyle {lvalue},enum AcDb::CellMargin,double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setName (self, *args, **kwargs)-> None :
      '''setName( (TableStyle)arg1, (str)arg2) -> None :

    C++ signature :
        void setName(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setRotation (self, *args, **kwargs)-> None :
      '''setRotation( (TableStyle)arg1, (float)arg2, (str)arg3) -> None :

    C++ signature :
        void setRotation(class PyDbTableStyle {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setTemplate (self, *args, **kwargs)-> None :
      '''setTemplate( (TableStyle)arg1, (ObjectId)arg2, (MergeCellStyleOption)arg3) -> None :

    C++ signature :
        void setTemplate(class PyDbTableStyle {lvalue},class PyDbObjectId,enum AcDb::MergeCellStyleOption)'''
    ...
    def setTextHeight (self, *args, **kwargs)-> None :
      '''setTextHeight( (TableStyle)arg1, (float)arg2, (RowType)arg3) -> None :

    C++ signature :
        void setTextHeight(class PyDbTableStyle {lvalue},double,enum AcDb::RowType)

setTextHeight( (TableStyle)arg1, (float)arg2, (str)arg3) -> None :

    C++ signature :
        void setTextHeight(class PyDbTableStyle {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setTextStyle (self, *args, **kwargs)-> None :
      '''setTextStyle( (TableStyle)arg1, (ObjectId)arg2, (RowType)arg3) -> None :

    C++ signature :
        void setTextStyle(class PyDbTableStyle {lvalue},class PyDbObjectId,enum AcDb::RowType)

setTextStyle( (TableStyle)arg1, (ObjectId)arg2, (str)arg3) -> None :

    C++ signature :
        void setTextStyle(class PyDbTableStyle {lvalue},class PyDbObjectId,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setVertCellMargin (self, *args, **kwargs)-> None :
      '''setVertCellMargin( (TableStyle)arg1, (float)arg2) -> None :

    C++ signature :
        void setVertCellMargin(class PyDbTableStyle {lvalue},double)'''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def suppressHeaderRow (self, *args, **kwargs)-> None :
      '''suppressHeaderRow( (TableStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void suppressHeaderRow(class PyDbTableStyle {lvalue},bool)'''
    ...
    def suppressTitleRow (self, *args, **kwargs)-> None :
      '''suppressTitleRow( (TableStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void suppressTitleRow(class PyDbTableStyle {lvalue},bool)'''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textHeight (self, *args, **kwargs)-> float :
      '''textHeight( (TableStyle)arg1, (RowType)arg2) -> float :

    C++ signature :
        double textHeight(class PyDbTableStyle {lvalue},enum AcDb::RowType)

textHeight( (TableStyle)arg1, (str)arg2) -> float :

    C++ signature :
        double textHeight(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def textStyle (self, *args, **kwargs)-> PyDb.ObjectId :
      '''textStyle( (TableStyle)arg1, (RowType)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyle(class PyDbTableStyle {lvalue},enum AcDb::RowType)

textStyle( (TableStyle)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyle(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def vertCellMargin (self, *args, **kwargs)-> float :
      '''vertCellMargin( (TableStyle)arg1) -> float :

    C++ signature :
        double vertCellMargin(class PyDbTableStyle {lvalue})'''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class Text:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2, (str)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (Point3d)arg2, (str)arg3, (ObjectId)arg4, (float)arg5, (float)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId {lvalue},double,double)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def adjustAlignment (self: Text,val : Database)-> None :
      '''                             '''
    ...
    def alignmentPoint (self: Text)-> PyGe.Point3d :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: RxObject)-> PyDb.Text :
      '''                             '''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: RxObject)-> PyDb.Text :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def convertFieldToText (self: Text)-> None :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def correctSpelling (self: Text)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getBoundingPoints (self: Text)-> list :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def height (self: Text)-> float :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def hitTest (self: Text,val : PyGe.Point3d)-> bool :
      '''                             '''
    ...
    def horizontalMode (self: Text)-> PyDb.TextHorzMode :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isDefaultAlignment (self: Text)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isMirroredInX (self: Text)-> bool :
      '''                             '''
    ...
    def isMirroredInY (self: Text)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def justification (self: Text)-> PyDb.TextAlignment :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def mirrorInX (self: Text,val : bool)-> None :
      '''                             '''
    ...
    def mirrorInY (self: Text,val : bool)-> None :
      '''                             '''
    ...
    def normal (self: Text)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def oblique (self: Text)-> float :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def position (self: Text)-> PyGe.Point3d :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self: Text)-> float :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAlignmentPoint (self: Text,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setHeight (self: Text,val : float)-> None :
      '''                             '''
    ...
    def setHorizontalMode (self: Text,val : TextHorzMode)-> None :
      '''                             '''
    ...
    def setJustification (self: Text,val : TextAlignment)-> None :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self: Text,val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOblique (self: Text,val : float)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self: Text,pos : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setRotation (self: Text,val : float)-> None :
      '''                             '''
    ...
    def setTextString (self: Text,val : str)-> None :
      '''                             '''
    ...
    def setTextStyle (self: Text,val : ObjectId)-> None :
      '''                             '''
    ...
    def setThickness (self: Text,val : float)-> None :
      '''                             '''
    ...
    def setVerticalMode (self: Text,val : TextVertMode)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setWidthFactor (self: Text,val : float)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textString (self: Text)-> str :
      '''                             '''
    ...
    def textStyle (self: Text)-> PyDb.ObjectId :
      '''                             '''
    ...
    def thickness (self: Text)-> float :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def verticalMode (self: Text)-> PyDb.TextHorzMode :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def widthFactor (self: Text)-> float :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class TextAlignment:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kTextAlignmentAligned (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextAlignmentBottomCenter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextAlignmentBottomLeft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextAlignmentBottomRight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextAlignmentCenter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextAlignmentFit (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextAlignmentLeft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextAlignmentMiddle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextAlignmentMiddleCenter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextAlignmentMiddleLeft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextAlignmentMiddleRight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextAlignmentRight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextAlignmentTopCenter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextAlignmentTopLeft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextAlignmentTopRight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class TextHorzMode:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kTextAlign (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextCenter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextFit (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextLeft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextMid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextRight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class TextStyleTable:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def add (self, *args, **kwargs)-> PyDb.ObjectId :
      '''add( (TextStyleTable)arg1, (TextStyleTableRecord)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId add(class PyDbTextStyleTable {lvalue},class PyDbTextStyleTableRecord)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.TextStyleTable :
      '''cast( (RxObject)arg1) -> TextStyleTable :

    C++ signature :
        class PyDbTextStyleTable cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.TextStyleTable :
      '''cloneFrom( (RxObject)arg1) -> TextStyleTable :

    C++ signature :
        class PyDbTextStyleTable cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getAt (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getAt( (SymbolTable)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getAt(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has (self, *args, **kwargs)-> bool :
      '''has( (SymbolTable)arg1, (str)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

has( (SymbolTable)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class PyDbObjectId)'''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def recordIds (self, *args, **kwargs)-> list :
      '''recordIds( (SymbolTable)arg1) -> list :

    C++ signature :
        class boost::python::list recordIds(class PyDbSymbolTable {lvalue})'''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def toDict (self, *args, **kwargs)-> dict :
      '''toDict( (SymbolTable)arg1) -> dict :

    C++ signature :
        class boost::python::dict toDict(class PyDbSymbolTable {lvalue})'''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class TextStyleTableRecord:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def bigFontFileName (self: TextStyleTableRecord)-> str :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.TextStyleTableRecord :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.TextStyleTableRecord :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def fileName (self: TextStyleTableRecord)-> str :
      '''                             '''
    ...
    def flagBits (self: TextStyleTableRecord)-> int :
      '''                             '''
    ...
    def font (self: TextStyleTableRecord)-> tuple :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getName (self: SymbolTableRecord)-> str :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isDependent (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isRenamable (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isResolved (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isShapeFile (self: TextStyleTableRecord)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isVertical (self: TextStyleTableRecord)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def name (self: SymbolTableRecord)-> str :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def obliquingAngle (self: TextStyleTableRecord)-> float :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def priorSize (self: TextStyleTableRecord)-> float :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBigFontFileName (self: TextStyleTableRecord,val : str)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setFileName (self: TextStyleTableRecord,val : str)-> None :
      '''                             '''
    ...
    def setFlagBits (self, *args, **kwargs)-> None :
      '''setFlagBits( (TextStyleTableRecord)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlagBits(class PyDbTextStyleTableRecord {lvalue},unsigned char)'''
    ...
    def setFont (self, *args, **kwargs)-> None :
      '''setFont( (TextStyleTableRecord)arg1, (str)arg2, (bool)arg3, (bool)arg4, (int)arg5, (int)arg6, (int)arg7, (bool)arg8) -> None :

    C++ signature :
        void setFont(class PyDbTextStyleTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool,int,int,int,bool)'''
    ...
    def setIsShapeFile (self: TextStyleTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setIsVertical (self: TextStyleTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setName (self: SymbolTableRecord,name: str)-> None :
      '''                             '''
    ...
    def setObliquingAngle (self: TextStyleTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPriorSize (self: TextStyleTableRecord,val : int)-> None :
      '''                             '''
    ...
    def setTextSize (self: TextStyleTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def setXScale (self: TextStyleTableRecord,val : float)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textSize (self: TextStyleTableRecord)-> float :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xScale (self: TextStyleTableRecord)-> float :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class TimeZone:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kAbuDhabi (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAdelaide (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAlaska (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAlmaty (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kArizona (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAthens (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAtlanticCanada (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAzores (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBaghdad (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBangkok (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBeijing (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBerlin (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBogota (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBrasilia (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBrisbane (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBuenosAires (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCairo (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCapeVerde (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCaracas (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCaucasus (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCentral (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCentralAmerica (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDarwin (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDhaka (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEastAfrica (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEastern (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEasternEurope (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEkaterinburg (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kFiji (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kGMT (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kGreenland (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kGuam (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHarare (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHawaii (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHelsinki (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHobart (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kIndiana (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kInternationalDateLine (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kIrkutsk (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kIslamabad (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kJerusalem (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kKabul (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kKathmandu (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kKolkata (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kKrasnoyarsk (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMagadan (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMazatlan (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMexicoCity (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMidAtlantic (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMidwayIsland (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMonrovia (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMoscow (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMountain (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNewfoundland (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPacific (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kParis (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPerth (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPrague (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kRangoon (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kRiyadh (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSantiago (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSarajevo (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSaskatchewan (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSeoul (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSingapore (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSriLanka (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSydney (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTaipei (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTehran (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTokyo (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTonga (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUTC (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVladivostock (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kWellington (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kWestCentralAfrica (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kYakutsk (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class Transaction:
    def __init__ (self, *args, **kwargs)-> None :
      '''Raises an exception
This class cannot be instantiated from Python'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def getAllObjects (self, *args, **kwargs)-> list :
      '''getAllObjects( (Transaction)arg1) -> list :

    C++ signature :
        class boost::python::list getAllObjects(class PyTransaction {lvalue})'''
    ...
    def getObject (self, *args, **kwargs)-> PyDb.DbObject :
      '''getObject( (Transaction)arg1, (ObjectId)arg2) -> DbObject :

    C++ signature :
        class PyDbObject getObject(class PyTransaction {lvalue},class PyDbObjectId)

getObject( (Transaction)arg1, (ObjectId)arg2, (OpenMode)arg3) -> DbObject :

    C++ signature :
        class PyDbObject getObject(class PyTransaction {lvalue},class PyDbObjectId,enum AcDb::OpenMode)

getObject( (Transaction)arg1, (ObjectId)arg2, (OpenMode)arg3, (bool)arg4) -> DbObject :

    C++ signature :
        class PyDbObject getObject(class PyTransaction {lvalue},class PyDbObjectId,enum AcDb::OpenMode,bool)'''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def numOpenedObjects (self, *args, **kwargs)-> int :
      '''numOpenedObjects( (TransactionManager)arg1) -> int :

    C++ signature :
        int numOpenedObjects(class PyDbTransactionManager {lvalue})'''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...

class TransactionManager:
    def __init__ (self: TransactionManager)-> None :
      '''                             '''
    ...
    def abortTransaction (self: TransactionManager)-> None :
      '''                             '''
    ...
    def addNewlyCreatedDBRObject (self: TransactionManager,obj: DbObject,add: bool=True)-> None :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def endTransaction (self: TransactionManager)-> None :
      '''                             '''
    ...
    def getAllObjects (self: TransactionManager)-> list :
      '''                             '''
    ...
    def getObject (self: TransactionManager,id: ObjectId,mode: OpenMode=OpenMode.kForRead,openErasedObject: bool=False)-> PyDb.DbObject :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def numActiveTransactions (self: TransactionManager)-> int :
      '''                             '''
    ...
    def numOpenedObjects (self: TransactionManager)-> int :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def queueForGraphicsFlush (self: TransactionManager)-> None :
      '''                             '''
    ...
    def startTransaction (self: TransactionManager)-> PyDb.Transaction :
      '''                             '''
    ...
    def topTransaction (self: TransactionManager)-> PyDb.Transaction :
      '''                             '''
    ...

class Transparency:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (int)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,unsigned char)

__init__( (object)arg1, (float)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,double)'''
    ...
    def alpha (self: Transparency)-> int :
      '''                             '''
    ...
    def alphaPercent (self: Transparency)-> float :
      '''                             '''
    ...
    def isByAlpha (self: Transparency)-> bool :
      '''                             '''
    ...
    def isByBlock (self: Transparency)-> bool :
      '''                             '''
    ...
    def isByLayer (self: Transparency)-> bool :
      '''                             '''
    ...
    def isClear (self: Transparency)-> bool :
      '''                             '''
    ...
    def isInvalid (self: Transparency)-> bool :
      '''                             '''
    ...
    def isSolid (self: Transparency)-> bool :
      '''                             '''
    ...
    def setAlpha (self: Transparency,alpha : int)-> None :
      '''                             '''
    ...
    def setAlphaPercent (self: Transparency,alphaPercent : float)-> None :
      '''                             '''
    ...

class TransparencyMethod:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kByAlpha (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kByBlock (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kByLayer (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kErrorValue (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class UCSTable:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def add (self, *args, **kwargs)-> PyDb.ObjectId :
      '''add( (UCSTable)arg1, (UCSTableRecord)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId add(class PyDbUCSTable {lvalue},class PyDbUCSTableRecord)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.UCSTable :
      '''cast( (RxObject)arg1) -> UCSTable :

    C++ signature :
        class PyDbUCSTable cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.UCSTable :
      '''cloneFrom( (RxObject)arg1) -> UCSTable :

    C++ signature :
        class PyDbUCSTable cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getAt (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getAt( (SymbolTable)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getAt(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has (self, *args, **kwargs)-> bool :
      '''has( (SymbolTable)arg1, (str)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

has( (SymbolTable)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class PyDbObjectId)'''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def recordIds (self, *args, **kwargs)-> list :
      '''recordIds( (SymbolTable)arg1) -> list :

    C++ signature :
        class boost::python::list recordIds(class PyDbSymbolTable {lvalue})'''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def toDict (self, *args, **kwargs)-> dict :
      '''toDict( (SymbolTable)arg1) -> dict :

    C++ signature :
        class boost::python::dict toDict(class PyDbSymbolTable {lvalue})'''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class UCSTableRecord:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.UCSTableRecord :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.UCSTableRecord :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getName (self: SymbolTableRecord)-> str :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isDependent (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isRenamable (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isResolved (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def name (self: SymbolTableRecord)-> str :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def origin (self: UCSTableRecord)-> PyGe.Point3d :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setName (self: SymbolTableRecord,name: str)-> None :
      '''                             '''
    ...
    def setOrigin (self: UCSTableRecord,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setUcsBaseOrigin (self: UCSTableRecord,val : PyGe.Point3d,view : PyDb.OrthographicView)-> None :
      '''                             '''
    ...
    def setXAxis (self: UCSTableRecord,val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def setYAxis (self: UCSTableRecord,val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def ucsBaseOrigin (self: UCSTableRecord,view : PyDb.OrthographicView)-> PyGe.Point3d :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xAxis (self: UCSTableRecord)-> PyGe.Vector3d :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def yAxis (self: UCSTableRecord)-> PyGe.Vector3d :
      '''                             '''
    ...

class UnderlayDefinition:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.UnderlayDefinition :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.UnderlayDefinition :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...

    @staticmethod
    def dictionaryKey (underlayDefinitionType: PyRx.RxClass)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getActiveFileName (self: UnderlayDefinition)-> str :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getItemName (self: UnderlayDefinition)-> str :
      '''                             '''
    ...
    def getSourceFileName (self: UnderlayDefinition)-> str :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isLoaded (self: UnderlayDefinition)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def load (self: UnderlayDefinition,passwd : str=None)-> None :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setItemName (self: UnderlayDefinition,item : str)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setSourceFileName (self: UnderlayDefinition,file : str)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def unload (self: UnderlayDefinition)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class UnderlayLayer:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def name (self: UnderlayLayer)-> str :
      '''                             '''
    ...
    def setName (self: UnderlayLayer,name : str)-> None :
      '''                             '''
    ...
    def setState (self: UnderlayLayer,state : bool)-> None :
      '''                             '''
    ...
    def state (self: UnderlayLayer)-> bool :
      '''                             '''
    ...

class UnderlayReference:
    def __init__ (self: UnderlayReference,id: PyDb.ObjectId,mode: OpenMode=kForRead,erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.UnderlayReference :
      '''                             '''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def clipBoundary (self: UnderlayReference)-> list :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.UnderlayReference :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def contrast (self: UnderlayReference)-> int :
      '''                             '''
    ...

    @staticmethod
    def contrastDefault ()-> int :
      '''                             '''
    ...

    @staticmethod
    def contrastLowerLimit ()-> int :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def definitionId (self: UnderlayReference)-> PyDb.ObjectId :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def fade (self: UnderlayReference)-> int :
      '''                             '''
    ...

    @staticmethod
    def fadeDefault ()-> int :
      '''                             '''
    ...

    @staticmethod
    def fadeLowerLimit ()-> int :
      '''                             '''
    ...

    @staticmethod
    def fadeUpperLimit ()-> int :
      '''                             '''
    ...
    def generateClipBoundaryFromPline (self: UnderlayReference,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def getUnderlayLayer (self: UnderlayReference,val : int)-> PyDb.UnderlayLayer :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def height (self: UnderlayReference)-> float :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAdjustedForBackground (self: UnderlayReference)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isClipInverted (self: UnderlayReference)-> bool :
      '''                             '''
    ...
    def isClipped (self: UnderlayReference)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isFramePlottable (self: UnderlayReference)-> bool :
      '''                             '''
    ...
    def isFrameVisible (self: UnderlayReference)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isMonochrome (self: UnderlayReference)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isOn (self: UnderlayReference)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def normal (self: UnderlayReference)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def position (self: UnderlayReference)-> PyGe.Point3d :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self: UnderlayReference)-> float :
      '''                             '''
    ...
    def scaleFactors (self: UnderlayReference)-> PyGe.Scale3d :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setClipBoundary (self: UnderlayReference,pnts : List[PyGe.Point2d])-> None :
      '''                             '''
    ...
    def setClipInverted (self: UnderlayReference,val : bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setContrast (self: UnderlayReference,val : int)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDefinitionId (self: UnderlayReference,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setFade (self: UnderlayReference,val : int)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setHeight (self: UnderlayReference,val : float)-> None :
      '''                             '''
    ...
    def setIsAdjustedForBackground (self: UnderlayReference,val : bool)-> None :
      '''                             '''
    ...
    def setIsClipped (self: UnderlayReference,val : bool)-> None :
      '''                             '''
    ...
    def setIsMonochrome (self: UnderlayReference,val : bool)-> None :
      '''                             '''
    ...
    def setIsOn (self: UnderlayReference,val : bool)-> None :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self: UnderlayReference,val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self: UnderlayReference,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setRotation (self: UnderlayReference,val : float)-> None :
      '''                             '''
    ...
    def setScaleFactors (self: UnderlayReference,val : PyGe.Scale3d)-> None :
      '''                             '''
    ...
    def setTransform (self: UnderlayReference,val : PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def setUnderlayLayer (self: UnderlayReference,val : int,layer : PyDb.UnderlayLayer)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setWidth (self: UnderlayReference,val : float)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transform (self: UnderlayReference)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def underlayLayerCount (self: UnderlayReference)-> int :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def width (self: UnderlayReference)-> float :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class UnitsValue:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kUnitsAngstroms (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsAstronomical (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsCentimeters (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsDecimeters (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsDekameters (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsFeet (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsGigameters (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsHectometers (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsInches (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsKilometers (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsLightYears (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsMax (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsMeters (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsMicroinches (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsMicrons (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsMiles (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsMillimeters (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsMils (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsNanometers (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsParsecs (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsUSSurveyFeet (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsUSSurveyInch (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsUSSurveyMile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsUSSurveyYard (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsUndefined (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsYards (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class UpdateDirection:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kUpdateDirDataToSource (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUpdateDirSourceToData (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class UpdateOption:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kSkipFormatAfterFirstUpdate (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUpdateOptionAllowSourceUpdate (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUpdateOptionForPreview (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUpdateOptionForceFullSourceUpdate (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUpdateOptionIncludeXrefs (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUpdateOptionNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUpdateOptionOverwriteContentModifiedAfterUpdate (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUpdateOptionOverwriteFormatModifiedAfterUpdate (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUpdateOptionSkipFormat (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUpdateOptionUpdateColumnWidth (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUpdateOptionUpdateRowHeight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class Vertex:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: RxObject)-> PyDb.Vertex :
      '''                             '''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: RxObject)-> PyDb.Vertex :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class Vertex2d:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d)

__init__( (object)arg1, (Point3d)arg2, (float)arg3, (float)arg4, (float)arg5, (float)arg6, (int)arg7) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,double,double,double,double,int)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def bulge (self: Vertex2d)-> float :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: RxObject)-> PyDb.Vertex2d :
      '''                             '''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: RxObject)-> PyDb.Vertex2d :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def endWidth (self: Vertex2d)-> float :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ignoreTangent (self: Vertex2d)-> None :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTangentUsed (self: Vertex2d)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def position (self: Vertex2d)-> PyGe.Point3d :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBulge (self: Vertex2d,val : float)-> None :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setEndWidth (self: Vertex2d,val : float)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self: Vertex2d,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setStartWidth (self: Vertex2d,val : float)-> None :
      '''                             '''
    ...
    def setTangent (self: Vertex2d,val : float)-> None :
      '''                             '''
    ...
    def setTangentUsed (self: Vertex2d,val : bool)-> None :
      '''                             '''
    ...
    def setVertexIdentifier (self: Vertex2d,val : int)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def startWidth (self: Vertex2d)-> float :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def tangent (self: Vertex2d)-> float :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def useTangent (self: Vertex2d)-> None :
      '''                             '''
    ...
    def vertexIdentifier (self: Vertex2d)-> int :
      '''                             '''
    ...
    def vertexType (self: Vertex2d)-> PyDb.Vertex2dType :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class Vertex2dType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def k2dCurveFitVertex (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k2dSplineCtlVertex (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k2dSplineFitVertex (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k2dVertex (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class ViewTable:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def add (self, *args, **kwargs)-> PyDb.ObjectId :
      '''add( (ViewTable)arg1, (AbstractViewTableRecord)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId add(class PyDbViewTable {lvalue},class PyDbAbstractViewTableRecord)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.AbstractViewTable :
      '''cast( (RxObject)arg1) -> AbstractViewTable :

    C++ signature :
        class PyDbAbstractViewTable cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.AbstractViewTable :
      '''cloneFrom( (RxObject)arg1) -> AbstractViewTable :

    C++ signature :
        class PyDbAbstractViewTable cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getAt (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getAt( (SymbolTable)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getAt(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has (self, *args, **kwargs)-> bool :
      '''has( (SymbolTable)arg1, (str)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

has( (SymbolTable)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class PyDbObjectId)'''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def recordIds (self, *args, **kwargs)-> list :
      '''recordIds( (SymbolTable)arg1) -> list :

    C++ signature :
        class boost::python::list recordIds(class PyDbSymbolTable {lvalue})'''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def toDict (self, *args, **kwargs)-> dict :
      '''toDict( (SymbolTable)arg1) -> dict :

    C++ signature :
        class boost::python::dict toDict(class PyDbSymbolTable {lvalue})'''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class ViewTableRecord:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def ambientLightColor (self: AbstractViewTableRecord)-> PyDb.Color :
      '''                             '''
    ...
    def annotationScale (self: ViewTableRecord)-> PyDb.AnnotationScale :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def backClipDistance (self: AbstractViewTableRecord)-> float :
      '''                             '''
    ...
    def backClipEnabled (self: AbstractViewTableRecord)-> bool :
      '''                             '''
    ...
    def background (self: AbstractViewTableRecord)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def brightness (self: AbstractViewTableRecord)-> float :
      '''                             '''
    ...
    def camera (self: ViewTableRecord)-> PyDb.ObjectId :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.ViewTableRecord :
      '''                             '''
    ...
    def centerPoint (self: AbstractViewTableRecord)-> PyGe.Point2d :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.ViewTableRecord :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def contrast (self: AbstractViewTableRecord)-> float :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def defaultLightingType (self: AbstractViewTableRecord)-> object :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def disassociateUcsFromView (self: ViewTableRecord)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevation (self: AbstractViewTableRecord)-> float :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def frontClipAtEye (self: AbstractViewTableRecord)-> bool :
      '''                             '''
    ...
    def frontClipDistance (self: AbstractViewTableRecord)-> float :
      '''                             '''
    ...
    def frontClipEnabled (self: AbstractViewTableRecord)-> bool :
      '''                             '''
    ...
    def getCategoryName (self: ViewTableRecord)-> str :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getLayerState (self: ViewTableRecord)-> str :
      '''                             '''
    ...
    def getLayout (self: ViewTableRecord)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getName (self: SymbolTableRecord)-> str :
      '''                             '''
    ...
    def getUcs (self: AbstractViewTableRecord)-> tuple :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def height (self: AbstractViewTableRecord)-> float :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCameraPlottable (self: ViewTableRecord)-> bool :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isDefaultLightingOn (self: AbstractViewTableRecord)-> bool :
      '''                             '''
    ...
    def isDependent (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPaperspaceView (self: ViewTableRecord)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isRenamable (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isResolved (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUcsAssociatedToView (self: ViewTableRecord)-> bool :
      '''                             '''
    ...
    def isUcsOrthographic (self: AbstractViewTableRecord)-> tuple :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isViewAssociatedToViewport (self: ViewTableRecord)-> bool :
      '''                             '''
    ...
    def isViewOrthographic (self: AbstractViewTableRecord)-> tuple :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def lensLength (self: AbstractViewTableRecord)-> float :
      '''                             '''
    ...
    def liveSection (self: ViewTableRecord)-> PyDb.ObjectId :
      '''                             '''
    ...
    def name (self: SymbolTableRecord)-> str :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def perspectiveEnabled (self: AbstractViewTableRecord)-> bool :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAmbientLightColor (self: AbstractViewTableRecord,val : PyDb.Color)-> None :
      '''                             '''
    ...
    def setAnnotationScale (self, *args, **kwargs)-> None :
      '''setAnnotationScale( (ViewTableRecord)arg1, (AnnotationScale)arg2) -> None :

    C++ signature :
        void setAnnotationScale(class PyDbViewTableRecord {lvalue},class PyDbAnnotationScale)'''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBackClipDistance (self: AbstractViewTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setBackClipEnabled (self: AbstractViewTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setBackground (self: AbstractViewTableRecord,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setBrightness (self: AbstractViewTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setCamera (self: ViewTableRecord,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setCategoryName (self: ViewTableRecord,val : str)-> None :
      '''                             '''
    ...
    def setCenterPoint (self: AbstractViewTableRecord,val : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setContrast (self: AbstractViewTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setDefaultLightingOn (self: AbstractViewTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setDefaultLightingType (self, *args, **kwargs)-> None :
      '''setDefaultLightingType( (AbstractViewTableRecord)arg1, (object)arg2) -> None :

    C++ signature :
        void setDefaultLightingType(class PyDbAbstractViewTableRecord {lvalue},enum AcGiViewportTraits::DefaultLightingType)'''
    ...
    def setElevation (self: AbstractViewTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setFrontClipAtEye (self: AbstractViewTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setFrontClipDistance (self: AbstractViewTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setFrontClipEnabled (self: AbstractViewTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setHeight (self: AbstractViewTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setIsCameraPlottable (self: ViewTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setIsPaperspaceView (self: ViewTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setLayerState (self: ViewTableRecord,val : str)-> None :
      '''                             '''
    ...
    def setLayout (self: ViewTableRecord,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setLensLength (self: AbstractViewTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setLiveSection (self: ViewTableRecord,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setName (self: SymbolTableRecord,name: str)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setParametersFromViewport (self, *args, **kwargs)-> None :
      '''setParametersFromViewport( (ViewTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setParametersFromViewport(class PyDbViewTableRecord {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def setPerspectiveEnabled (self: AbstractViewTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setSun (self: ViewTableRecord,retId : PyDb.ObjectId,pSun : PyDb.Object,eraseOldSun : bool=True)-> None :
      '''                             '''
    ...
    def setTarget (self: AbstractViewTableRecord,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setUcs (self, *args, **kwargs)-> None :
      '''setUcs( (AbstractViewTableRecord)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> None :

    C++ signature :
        void setUcs(class PyDbAbstractViewTableRecord {lvalue},class AcGePoint3d,class AcGeVector3d,class AcGeVector3d)

setUcs( (AbstractViewTableRecord)arg1, (OrthographicView)arg2) -> None :

    C++ signature :
        void setUcs(class PyDbAbstractViewTableRecord {lvalue},enum AcDb::OrthographicView)

setUcs( (AbstractViewTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setUcs(class PyDbAbstractViewTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setUcsToWorld (self: AbstractViewTableRecord)-> None :
      '''                             '''
    ...
    def setViewAssociatedToViewport (self: ViewTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setViewDirection (self, *args, **kwargs)-> None :
      '''setViewDirection( (AbstractViewTableRecord)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setViewDirection(class PyDbAbstractViewTableRecord {lvalue},class AcGeVector3d)

setViewDirection( (AbstractViewTableRecord)arg1, (OrthographicView)arg2) -> None :

    C++ signature :
        void setViewDirection(class PyDbAbstractViewTableRecord {lvalue},enum AcDb::OrthographicView)'''
    ...
    def setViewTwist (self: AbstractViewTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setVisualStyle (self: AbstractViewTableRecord,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setWidth (self: AbstractViewTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def sunId (self: ViewTableRecord)-> PyDb.ObjectId :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def target (self: AbstractViewTableRecord)-> PyGe.Point3d :
      '''                             '''
    ...
    def ucsName (self: AbstractViewTableRecord)-> PyDb.ObjectId :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewDirection (self: AbstractViewTableRecord)-> PyGe.Vector3d :
      '''                             '''
    ...
    def viewTwist (self: AbstractViewTableRecord)-> float :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visualStyle (self: AbstractViewTableRecord)-> PyDb.ObjectId :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def width (self: AbstractViewTableRecord)-> float :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class Viewport:
    def __init__ (self: Viewport,id: PyDb.ObjectId,mode: OpenMode=kForRead,erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def ambientLightColor (self: Viewport)-> PyDb.Color :
      '''                             '''
    ...
    def annotationScale (self: Viewport)-> PyDb.AnnotationScale :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def backClipDistance (self: Viewport)-> float :
      '''                             '''
    ...
    def background (self: Viewport)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def brightness (self: Viewport)-> float :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Viewport :
      '''                             '''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def centerPoint (self: Viewport)-> PyGe.Point3d :
      '''                             '''
    ...
    def circleSides (self: Viewport)-> int :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Viewport :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def contrast (self: Viewport)-> float :
      '''                             '''
    ...
    def copied (self, *args, **kwargs)-> None :
      '''copied( (Viewport)arg1, (DbObject)arg2, (DbObject)arg3) -> None :

    C++ signature :
        void copied(class PyDbViewport {lvalue},class PyDbObject,class PyDbObject)'''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def customScale (self: Viewport)-> float :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def defaultLightingType (self: Viewport)-> object :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def effectivePlotStyleSheet (self: Viewport)-> str :
      '''                             '''
    ...
    def elevation (self: Viewport)-> float :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def erased (self, *args, **kwargs)-> None :
      '''erased( (Viewport)arg1, (DbObject)arg2, (bool)arg3) -> None :

    C++ signature :
        void erased(class PyDbViewport {lvalue},class PyDbObject,bool)'''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def freezeLayersInViewport (self: Viewport,ids : List[PyDb.ObjectId])-> None :
      '''                             '''
    ...
    def frontClipDistance (self: Viewport)-> float :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFrozenLayerList (self: Viewport)-> list :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getLabelBlock (self: Viewport)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getModelView (self: Viewport)-> PyDb.XrefObjectId :
      '''                             '''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getSheetView (self: Viewport)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def getUcs (self: Viewport)-> tuple :
      '''                             '''
    ...
    def gridIncrement (self: Viewport)-> PyGe.Vector2d :
      '''                             '''
    ...
    def gridMajor (self: Viewport)-> int :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def height (self: Viewport)-> float :
      '''                             '''
    ...
    def hiddenLinesRemoved (self: Viewport)-> bool :
      '''                             '''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isBackClipOn (self: Viewport)-> bool :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isDefaultLightingOn (self: Viewport)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isFastZoomOn (self: Viewport)-> bool :
      '''                             '''
    ...
    def isFrontClipAtEyeOn (self: Viewport)-> bool :
      '''                             '''
    ...
    def isFrontClipOn (self: Viewport)-> bool :
      '''                             '''
    ...
    def isGridAdaptive (self: Viewport)-> bool :
      '''                             '''
    ...
    def isGridBoundToLimits (self: Viewport)-> bool :
      '''                             '''
    ...
    def isGridFollow (self: Viewport)-> bool :
      '''                             '''
    ...
    def isGridOn (self: Viewport)-> bool :
      '''                             '''
    ...
    def isGridSubdivisionRestricted (self: Viewport)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isLayerFrozenInViewport (self: Viewport,val : PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def isLocked (self: Viewport)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNonRectClipOn (self: Viewport)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isOn (self: Viewport)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPerspectiveOn (self: Viewport)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isSnapIsometric (self: Viewport)-> bool :
      '''                             '''
    ...
    def isSnapOn (self: Viewport)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransparent (self: Viewport)-> bool :
      '''                             '''
    ...
    def isUcsFollowModeOn (self: Viewport)-> bool :
      '''                             '''
    ...
    def isUcsIconAtOrigin (self: Viewport)-> bool :
      '''                             '''
    ...
    def isUcsIconVisible (self: Viewport)-> bool :
      '''                             '''
    ...
    def isUcsOrthographic (self: Viewport)-> tuple :
      '''                             '''
    ...
    def isUcsSavedWithViewport (self: Viewport)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isViewOrthographic (self: Viewport)-> tuple :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lensLength (self: Viewport)-> float :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def modified (self, *args, **kwargs)-> None :
      '''modified( (Viewport)arg1, (DbObject)arg2) -> None :

    C++ signature :
        void modified(class PyDbViewport {lvalue},class PyDbObject)'''
    ...
    def nonRectClipEntityId (self: Viewport)-> PyDb.ObjectId :
      '''                             '''
    ...
    def number (self: Viewport)-> int :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotAsRaster (self: Viewport)-> bool :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def plotStyleSheet (self: Viewport)-> str :
      '''                             '''
    ...
    def plotWireframe (self: Viewport)-> bool :
      '''                             '''
    ...
    def previousBackground (self, *args, **kwargs)-> PyDb.ObjectId :
      '''previousBackground( (Viewport)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId previousBackground(class PyDbViewport {lvalue})

previousBackground( (Viewport)arg1, (GiDrawableType)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId previousBackground(class PyDbViewport {lvalue},enum AcGiDrawable::DrawableType)'''
    ...
    def previousBackgroundForcedSwitch (self: Viewport)-> bool :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removeHiddenLines (self, *args, **kwargs)-> None :
      '''removeHiddenLines( (Viewport)arg1) -> None :

    C++ signature :
        void removeHiddenLines(class PyDbViewport {lvalue})

removeHiddenLines( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void removeHiddenLines(class PyDbViewport {lvalue},bool)'''
    ...
    def removeLabelBlock (self: Viewport)-> None :
      '''                             '''
    ...
    def removeModelView (self: Viewport)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def removeSheetView (self: Viewport)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAmbientLightColor (self, *args, **kwargs)-> None :
      '''setAmbientLightColor( (Viewport)arg1, (Color)arg2) -> None :

    C++ signature :
        void setAmbientLightColor(class PyDbViewport {lvalue},class AcCmColor)'''
    ...
    def setAnnotationScale (self, *args, **kwargs)-> None :
      '''setAnnotationScale( (Viewport)arg1, (AnnotationScale)arg2) -> None :

    C++ signature :
        void setAnnotationScale(class PyDbViewport {lvalue},class PyDbAnnotationScale)'''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBackClipDistance (self, *args, **kwargs)-> None :
      '''setBackClipDistance( (Viewport)arg1, (float)arg2) -> None :

    C++ signature :
        void setBackClipDistance(class PyDbViewport {lvalue},double)'''
    ...
    def setBackClipOff (self: Viewport)-> None :
      '''                             '''
    ...
    def setBackClipOn (self, *args, **kwargs)-> None :
      '''setBackClipOn( (Viewport)arg1) -> None :

    C++ signature :
        void setBackClipOn(class PyDbViewport {lvalue})

setBackClipOn( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setBackClipOn(class PyDbViewport {lvalue},bool)'''
    ...
    def setBackground (self: Viewport,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setBrightness (self: Viewport,val : float)-> None :
      '''                             '''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setCenterPoint (self: Viewport,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setCircleSides (self: Viewport,val : int)-> None :
      '''                             '''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setContrast (self: Viewport,val : float)-> None :
      '''                             '''
    ...
    def setCustomScale (self, *args, **kwargs)-> None :
      '''setCustomScale( (Viewport)arg1, (float)arg2) -> None :

    C++ signature :
        void setCustomScale(class PyDbViewport {lvalue},double)'''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDefaultLightingOn (self: Viewport,val : bool)-> None :
      '''                             '''
    ...
    def setDefaultLightingType (self, *args, **kwargs)-> None :
      '''setDefaultLightingType( (Viewport)arg1, (object)arg2) -> None :

    C++ signature :
        void setDefaultLightingType(class PyDbViewport {lvalue},enum AcGiViewportTraits::DefaultLightingType)'''
    ...
    def setElevation (self, *args, **kwargs)-> None :
      '''setElevation( (Viewport)arg1, (float)arg2) -> None :

    C++ signature :
        void setElevation(class PyDbViewport {lvalue},double)'''
    ...
    def setFastZoomOff (self: Viewport)-> None :
      '''                             '''
    ...
    def setFastZoomOn (self, *args, **kwargs)-> None :
      '''setFastZoomOn( (Viewport)arg1) -> None :

    C++ signature :
        void setFastZoomOn(class PyDbViewport {lvalue})

setFastZoomOn( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setFastZoomOn(class PyDbViewport {lvalue},bool)'''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setFrontClipAtEyeOff (self: Viewport)-> None :
      '''                             '''
    ...
    def setFrontClipAtEyeOn (self, *args, **kwargs)-> None :
      '''setFrontClipAtEyeOn( (Viewport)arg1) -> None :

    C++ signature :
        void setFrontClipAtEyeOn(class PyDbViewport {lvalue})

setFrontClipAtEyeOn( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setFrontClipAtEyeOn(class PyDbViewport {lvalue},bool)'''
    ...
    def setFrontClipDistance (self, *args, **kwargs)-> None :
      '''setFrontClipDistance( (Viewport)arg1, (float)arg2) -> None :

    C++ signature :
        void setFrontClipDistance(class PyDbViewport {lvalue},double)'''
    ...
    def setFrontClipOff (self: Viewport)-> None :
      '''                             '''
    ...
    def setFrontClipOn (self, *args, **kwargs)-> None :
      '''setFrontClipOn( (Viewport)arg1) -> None :

    C++ signature :
        void setFrontClipOn(class PyDbViewport {lvalue})

setFrontClipOn( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setFrontClipOn(class PyDbViewport {lvalue},bool)'''
    ...
    def setGridAdaptive (self: Viewport,val : bool)-> None :
      '''                             '''
    ...
    def setGridBoundToLimits (self: Viewport,val : bool)-> None :
      '''                             '''
    ...
    def setGridFollow (self: Viewport,val : bool)-> None :
      '''                             '''
    ...
    def setGridIncrement (self: Viewport,val : PyGe.Vector2d)-> None :
      '''                             '''
    ...
    def setGridMajor (self: Viewport,val : int)-> None :
      '''                             '''
    ...
    def setGridOff (self: Viewport)-> None :
      '''                             '''
    ...
    def setGridOn (self, *args, **kwargs)-> None :
      '''setGridOn( (Viewport)arg1) -> None :

    C++ signature :
        void setGridOn(class PyDbViewport {lvalue})

setGridOn( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setGridOn(class PyDbViewport {lvalue},bool)'''
    ...
    def setGridSubdivisionRestricted (self: Viewport,val : bool)-> None :
      '''                             '''
    ...
    def setHeight (self: Viewport,val : float)-> None :
      '''                             '''
    ...
    def setIsOn (self: Viewport,val : bool)-> None :
      '''                             '''
    ...
    def setLabelBlock (self: Viewport,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLensLength (self: Viewport,val : float)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLocked (self, *args, **kwargs)-> None :
      '''setLocked( (Viewport)arg1) -> None :

    C++ signature :
        void setLocked(class PyDbViewport {lvalue})

setLocked( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setLocked(class PyDbViewport {lvalue},bool)'''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setModelView (self, *args, **kwargs)-> None :
      '''setModelView( (Viewport)arg1, (XrefObjectId)arg2) -> None :

    C++ signature :
        void setModelView(class PyDbViewport {lvalue},class PyDbXrefObjectId)'''
    ...
    def setNonRectClipEntityId (self, *args, **kwargs)-> None :
      '''setNonRectClipEntityId( (Viewport)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setNonRectClipEntityId(class PyDbViewport {lvalue},class PyDbObjectId)'''
    ...
    def setNonRectClipOff (self: Viewport)-> None :
      '''                             '''
    ...
    def setNonRectClipOn (self, *args, **kwargs)-> None :
      '''setNonRectClipOn( (Viewport)arg1) -> None :

    C++ signature :
        void setNonRectClipOn(class PyDbViewport {lvalue})

setNonRectClipOn( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setNonRectClipOn(class PyDbViewport {lvalue},bool)'''
    ...
    def setOff (self: Viewport)-> None :
      '''                             '''
    ...
    def setOn (self: Viewport)-> None :
      '''                             '''
    ...
    def setOpaque (self: Viewport)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPerspectiveOff (self, *args, **kwargs)-> None :
      '''setPerspectiveOff( (Viewport)arg1) -> None :

    C++ signature :
        void setPerspectiveOff(class PyDbViewport {lvalue})'''
    ...
    def setPerspectiveOn (self, *args, **kwargs)-> None :
      '''setPerspectiveOn( (Viewport)arg1) -> None :

    C++ signature :
        void setPerspectiveOn(class PyDbViewport {lvalue})

setPerspectiveOn( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPerspectiveOn(class PyDbViewport {lvalue},bool)'''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPlotStyleSheet (self: Viewport,val : str)-> None :
      '''                             '''
    ...
    def setPreviousBackground (self, *args, **kwargs)-> None :
      '''setPreviousBackground( (Viewport)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setPreviousBackground(class PyDbViewport {lvalue},class PyDbObjectId {lvalue})

setPreviousBackground( (Viewport)arg1, (ObjectId)arg2, (GiDrawableType)arg3) -> None :

    C++ signature :
        void setPreviousBackground(class PyDbViewport {lvalue},class PyDbObjectId {lvalue},enum AcGiDrawable::DrawableType)

setPreviousBackground( (Viewport)arg1, (ObjectId)arg2, (GiDrawableType)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPreviousBackground(class PyDbViewport {lvalue},class PyDbObjectId {lvalue},enum AcGiDrawable::DrawableType,bool)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setShadePlot (self, *args, **kwargs)-> None :
      '''setShadePlot( (Viewport)arg1, (VpShadePlotType)arg2) -> None :

    C++ signature :
        void setShadePlot(class PyDbViewport {lvalue},enum AcDbViewport::ShadePlotType)

setShadePlot( (Viewport)arg1, (VpShadePlotType)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void setShadePlot(class PyDbViewport {lvalue},enum AcDbViewport::ShadePlotType,class PyDbObjectId)'''
    ...
    def setSheetView (self: Viewport,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setSnapAngle (self: Viewport,val : float)-> None :
      '''                             '''
    ...
    def setSnapBasePoint (self: Viewport,val : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setSnapIncrement (self: Viewport,val : PyGe.Vector2d)-> None :
      '''                             '''
    ...
    def setSnapIsoPair (self: Viewport,val : int)-> None :
      '''                             '''
    ...
    def setSnapIsometric (self, *args, **kwargs)-> None :
      '''setSnapIsometric( (Viewport)arg1) -> None :

    C++ signature :
        void setSnapIsometric(class PyDbViewport {lvalue})

setSnapIsometric( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSnapIsometric(class PyDbViewport {lvalue},bool)'''
    ...
    def setSnapOff (self: Viewport)-> None :
      '''                             '''
    ...
    def setSnapOn (self, *args, **kwargs)-> None :
      '''setSnapOn( (Viewport)arg1) -> None :

    C++ signature :
        void setSnapOn(class PyDbViewport {lvalue})

setSnapOn( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSnapOn(class PyDbViewport {lvalue},bool)'''
    ...
    def setSnapStandard (self: Viewport)-> None :
      '''                             '''
    ...
    def setStandardScale (self, *args, **kwargs)-> None :
      '''setStandardScale( (Viewport)arg1, (StandardScaleType)arg2) -> None :

    C++ signature :
        void setStandardScale(class PyDbViewport {lvalue},enum AcDbViewport::StandardScaleType)'''
    ...
    def setSun (self, *args, **kwargs)-> None :
      '''setSun( (Viewport)arg1, (ObjectId)arg2, (DbObject)arg3) -> None :

    C++ signature :
        void setSun(class PyDbViewport {lvalue},class PyDbObjectId {lvalue},class PyDbObject {lvalue})

setSun( (Viewport)arg1, (ObjectId)arg2, (DbObject)arg3, (bool)arg4) -> None :

    C++ signature :
        void setSun(class PyDbViewport {lvalue},class PyDbObjectId {lvalue},class PyDbObject {lvalue},bool)'''
    ...
    def setTransparent (self, *args, **kwargs)-> None :
      '''setTransparent( (Viewport)arg1) -> None :

    C++ signature :
        void setTransparent(class PyDbViewport {lvalue})

setTransparent( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setTransparent(class PyDbViewport {lvalue},bool)'''
    ...
    def setTwistAngle (self: Viewport,val : float)-> None :
      '''                             '''
    ...
    def setUcs (self, *args, **kwargs)-> None :
      '''setUcs( (Viewport)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> None :

    C++ signature :
        void setUcs(class PyDbViewport {lvalue},class AcGePoint3d,class AcGeVector3d,class AcGeVector3d)

setUcs( (Viewport)arg1, (OrthographicView)arg2) -> None :

    C++ signature :
        void setUcs(class PyDbViewport {lvalue},enum AcDb::OrthographicView)

setUcs( (Viewport)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setUcs(class PyDbViewport {lvalue},class PyDbObjectId)'''
    ...
    def setUcsFollowModeOff (self, *args, **kwargs)-> None :
      '''setUcsFollowModeOff( (Viewport)arg1) -> None :

    C++ signature :
        void setUcsFollowModeOff(class PyDbViewport {lvalue})'''
    ...
    def setUcsFollowModeOn (self, *args, **kwargs)-> None :
      '''setUcsFollowModeOn( (Viewport)arg1) -> None :

    C++ signature :
        void setUcsFollowModeOn(class PyDbViewport {lvalue})

setUcsFollowModeOn( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setUcsFollowModeOn(class PyDbViewport {lvalue},bool)'''
    ...
    def setUcsIconAtCorner (self: Viewport)-> None :
      '''                             '''
    ...
    def setUcsIconAtOrigin (self, *args, **kwargs)-> None :
      '''setUcsIconAtOrigin( (Viewport)arg1) -> None :

    C++ signature :
        void setUcsIconAtOrigin(class PyDbViewport {lvalue})

setUcsIconAtOrigin( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setUcsIconAtOrigin(class PyDbViewport {lvalue},bool)'''
    ...
    def setUcsIconInvisible (self: Viewport)-> None :
      '''                             '''
    ...
    def setUcsIconVisible (self, *args, **kwargs)-> None :
      '''setUcsIconVisible( (Viewport)arg1) -> None :

    C++ signature :
        void setUcsIconVisible(class PyDbViewport {lvalue})

setUcsIconVisible( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setUcsIconVisible(class PyDbViewport {lvalue},bool)'''
    ...
    def setUcsPerViewport (self, *args, **kwargs)-> None :
      '''setUcsPerViewport( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setUcsPerViewport(class PyDbViewport {lvalue},bool)'''
    ...
    def setUcsToWorld (self: Viewport)-> None :
      '''                             '''
    ...
    def setUnlocked (self: Viewport)-> None :
      '''                             '''
    ...
    def setViewCenter (self: Viewport,val : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setViewDirection (self, *args, **kwargs)-> None :
      '''setViewDirection( (Viewport)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setViewDirection(class PyDbViewport {lvalue},class AcGeVector3d)

setViewDirection( (Viewport)arg1, (OrthographicView)arg2) -> None :

    C++ signature :
        void setViewDirection(class PyDbViewport {lvalue},enum AcDb::OrthographicView)'''
    ...
    def setViewHeight (self: Viewport,val : float)-> None :
      '''                             '''
    ...
    def setViewTarget (self: Viewport,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setVisualStyle (self: Viewport,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setWidth (self: Viewport,val : float)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def shadePlot (self: Viewport)-> PyDb.VpShadePlotType :
      '''                             '''
    ...
    def shadePlotId (self: Viewport)-> PyDb.ObjectId :
      '''                             '''
    ...
    def showHiddenLines (self: Viewport)-> None :
      '''                             '''
    ...
    def snapAngle (self: Viewport)-> float :
      '''                             '''
    ...
    def snapBasePoint (self: Viewport)-> PyGe.Point2d :
      '''                             '''
    ...
    def snapIncrement (self: Viewport)-> PyGe.Vector2d :
      '''                             '''
    ...
    def snapIsoPair (self: Viewport)-> int :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def standardScale (self: Viewport)-> PyDb.StandardScaleType :
      '''                             '''
    ...
    def subObjModified (self, *args, **kwargs)-> None :
      '''subObjModified( (Viewport)arg1, (DbObject)arg2, (DbObject)arg3) -> None :

    C++ signature :
        void subObjModified(class PyDbViewport {lvalue},class PyDbObject,class PyDbObject)'''
    ...
    def sunId (self: Viewport)-> PyDb.ObjectId :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def syncModelView (self: Viewport)-> None :
      '''                             '''
    ...
    def thawAllLayersInViewport (self: Viewport)-> None :
      '''                             '''
    ...
    def thawLayersInViewport (self: Viewport,ids : List[PyDb.ObjectId])-> None :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def twistAngle (self: Viewport)-> float :
      '''                             '''
    ...
    def ucsName (self: Viewport)-> PyDb.ObjectId :
      '''                             '''
    ...
    def updateDisplay (self: Viewport)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewCenter (self: Viewport)-> PyGe.Point2d :
      '''                             '''
    ...
    def viewDirection (self: Viewport)-> PyGe.Vector3d :
      '''                             '''
    ...
    def viewHeight (self: Viewport)-> float :
      '''                             '''
    ...
    def viewTarget (self: Viewport)-> PyGe.Point3d :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def visualStyle (self: Viewport)-> PyDb.ObjectId :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def width (self: Viewport)-> float :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class ViewportTable:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def add (self, *args, **kwargs)-> PyDb.ObjectId :
      '''add( (ViewportTable)arg1, (AbstractViewTableRecord)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId add(class PyDbViewportTable {lvalue},class PyDbAbstractViewTableRecord)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PyDb.AbstractViewTable :
      '''cast( (RxObject)arg1) -> AbstractViewTable :

    C++ signature :
        class PyDbAbstractViewTable cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.AbstractViewTable :
      '''cloneFrom( (RxObject)arg1) -> AbstractViewTable :

    C++ signature :
        class PyDbAbstractViewTable cloneFrom(class PyRxObject)'''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getAt (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getAt( (SymbolTable)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getAt(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has (self, *args, **kwargs)-> bool :
      '''has( (SymbolTable)arg1, (str)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

has( (SymbolTable)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class PyDbObjectId)'''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def recordIds (self, *args, **kwargs)-> list :
      '''recordIds( (SymbolTable)arg1) -> list :

    C++ signature :
        class boost::python::list recordIds(class PyDbSymbolTable {lvalue})'''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def toDict (self, *args, **kwargs)-> dict :
      '''toDict( (SymbolTable)arg1) -> dict :

    C++ signature :
        class boost::python::dict toDict(class PyDbSymbolTable {lvalue})'''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class ViewportTableRecord:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def ambientLightColor (self: AbstractViewTableRecord)-> PyDb.Color :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def backClipDistance (self: AbstractViewTableRecord)-> float :
      '''                             '''
    ...
    def backClipEnabled (self: AbstractViewTableRecord)-> bool :
      '''                             '''
    ...
    def background (self: AbstractViewTableRecord)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def brightness (self: AbstractViewTableRecord)-> float :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.ViewportTableRecord :
      '''                             '''
    ...
    def centerPoint (self: AbstractViewTableRecord)-> PyGe.Point2d :
      '''                             '''
    ...
    def circleSides (self: ViewportTableRecord)-> int :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.ViewportTableRecord :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def contrast (self: AbstractViewTableRecord)-> float :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def defaultLightingType (self: AbstractViewTableRecord)-> object :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevation (self: AbstractViewTableRecord)-> float :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def fastZoomsEnabled (self: ViewportTableRecord)-> bool :
      '''                             '''
    ...
    def frontClipAtEye (self: AbstractViewTableRecord)-> bool :
      '''                             '''
    ...
    def frontClipDistance (self: AbstractViewTableRecord)-> float :
      '''                             '''
    ...
    def frontClipEnabled (self: AbstractViewTableRecord)-> bool :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getName (self: SymbolTableRecord)-> str :
      '''                             '''
    ...
    def getUcs (self: AbstractViewTableRecord)-> tuple :
      '''                             '''
    ...
    def gridEnabled (self: ViewportTableRecord)-> bool :
      '''                             '''
    ...
    def gridIncrements (self: ViewportTableRecord)-> PyGe.Point2d :
      '''                             '''
    ...
    def gridMajor (self: ViewportTableRecord)-> int :
      '''                             '''
    ...
    def gsView (self: ViewportTableRecord)-> PyGs.GsView :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def height (self: AbstractViewTableRecord)-> float :
      '''                             '''
    ...
    def iconAtOrigin (self: ViewportTableRecord)-> bool :
      '''                             '''
    ...
    def iconEnabled (self: ViewportTableRecord)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isDefaultLightingOn (self: AbstractViewTableRecord)-> bool :
      '''                             '''
    ...
    def isDependent (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isGridAdaptive (self: ViewportTableRecord)-> bool :
      '''                             '''
    ...
    def isGridBoundToLimits (self: ViewportTableRecord)-> bool :
      '''                             '''
    ...
    def isGridFollow (self: ViewportTableRecord)-> bool :
      '''                             '''
    ...
    def isGridSubdivisionRestricted (self: ViewportTableRecord)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isRenamable (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isResolved (self: SymbolTableRecord)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUcsOrthographic (self: AbstractViewTableRecord)-> tuple :
      '''                             '''
    ...
    def isUcsSavedWithViewport (self: ViewportTableRecord)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isViewOrthographic (self: AbstractViewTableRecord)-> tuple :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isometricSnapEnabled (self: ViewportTableRecord)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def lensLength (self: AbstractViewTableRecord)-> float :
      '''                             '''
    ...
    def lowerLeftCorner (self: ViewportTableRecord)-> PyGe.Point2d :
      '''                             '''
    ...
    def name (self: SymbolTableRecord)-> str :
      '''                             '''
    ...
    def number (self: ViewportTableRecord)-> int :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def perspectiveEnabled (self: AbstractViewTableRecord)-> bool :
      '''                             '''
    ...
    def previousBackground (self, *args, **kwargs)-> PyDb.ObjectId :
      '''previousBackground( (ViewportTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId previousBackground(class PyDbViewportTableRecord {lvalue})

previousBackground( (ViewportTableRecord)arg1, (GiDrawableType)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId previousBackground(class PyDbViewportTableRecord {lvalue},enum AcGiDrawable::DrawableType)'''
    ...
    def previousBackgroundForcedSwitch (self: ViewportTableRecord)-> bool :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAmbientLightColor (self: AbstractViewTableRecord,val : PyDb.Color)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBackClipDistance (self: AbstractViewTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setBackClipEnabled (self: AbstractViewTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setBackground (self: ViewportTableRecord,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setBrightness (self: AbstractViewTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setCenterPoint (self: AbstractViewTableRecord,val : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setCircleSides (self: ViewportTableRecord,val : int)-> None :
      '''                             '''
    ...
    def setContrast (self: AbstractViewTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setDefaultLightingOn (self: AbstractViewTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setDefaultLightingType (self, *args, **kwargs)-> None :
      '''setDefaultLightingType( (AbstractViewTableRecord)arg1, (object)arg2) -> None :

    C++ signature :
        void setDefaultLightingType(class PyDbAbstractViewTableRecord {lvalue},enum AcGiViewportTraits::DefaultLightingType)'''
    ...
    def setElevation (self: AbstractViewTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setFastZoomsEnabled (self: ViewportTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setFrontClipAtEye (self: AbstractViewTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setFrontClipDistance (self: AbstractViewTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setFrontClipEnabled (self: AbstractViewTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setGridAdaptive (self: ViewportTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setGridBoundToLimits (self: ViewportTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setGridEnabled (self: ViewportTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setGridFollow (self: ViewportTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setGridIncrements (self: ViewportTableRecord,val : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setGridMajor (self: ViewportTableRecord,val : int)-> None :
      '''                             '''
    ...
    def setGridSubdivisionRestricted (self: ViewportTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setGsView (self: ViewportTableRecord,val : PyGs.GsView)-> None :
      '''                             '''
    ...
    def setHeight (self: AbstractViewTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setIconAtOrigin (self: ViewportTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setIconEnabled (self: ViewportTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setIsometricSnapEnabled (self: ViewportTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setLensLength (self: AbstractViewTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setLowerLeftCorner (self: ViewportTableRecord,val : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setName (self: SymbolTableRecord,name: str)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPerspectiveEnabled (self: AbstractViewTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setPreviousBackground (self, *args, **kwargs)-> None :
      '''setPreviousBackground( (ViewportTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setPreviousBackground(class PyDbViewportTableRecord {lvalue},class PyDbObjectId {lvalue})

setPreviousBackground( (ViewportTableRecord)arg1, (ObjectId)arg2, (GiDrawableType)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPreviousBackground(class PyDbViewportTableRecord {lvalue},class PyDbObjectId {lvalue},enum AcGiDrawable::DrawableType,bool)'''
    ...
    def setSnapAngle (self: ViewportTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setSnapBase (self: ViewportTableRecord,val : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setSnapEnabled (self: ViewportTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setSnapIncrements (self: ViewportTableRecord,val : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setSnapPair (self: ViewportTableRecord,val : int)-> None :
      '''                             '''
    ...
    def setSun (self: AbstractViewTableRecord,retId : PyDb.ObjectId,pSun : PyDb.Object,eraseOldSun : bool=True)-> None :
      '''                             '''
    ...
    def setTarget (self: AbstractViewTableRecord,val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setUcs (self, *args, **kwargs)-> None :
      '''setUcs( (AbstractViewTableRecord)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> None :

    C++ signature :
        void setUcs(class PyDbAbstractViewTableRecord {lvalue},class AcGePoint3d,class AcGeVector3d,class AcGeVector3d)

setUcs( (AbstractViewTableRecord)arg1, (OrthographicView)arg2) -> None :

    C++ signature :
        void setUcs(class PyDbAbstractViewTableRecord {lvalue},enum AcDb::OrthographicView)

setUcs( (AbstractViewTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setUcs(class PyDbAbstractViewTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setUcsFollowMode (self: ViewportTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setUcsPerViewport (self: ViewportTableRecord,val : bool)-> None :
      '''                             '''
    ...
    def setUcsToWorld (self: AbstractViewTableRecord)-> None :
      '''                             '''
    ...
    def setUpperRightCorner (self: ViewportTableRecord,val : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setViewDirection (self, *args, **kwargs)-> None :
      '''setViewDirection( (AbstractViewTableRecord)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setViewDirection(class PyDbAbstractViewTableRecord {lvalue},class AcGeVector3d)

setViewDirection( (AbstractViewTableRecord)arg1, (OrthographicView)arg2) -> None :

    C++ signature :
        void setViewDirection(class PyDbAbstractViewTableRecord {lvalue},enum AcDb::OrthographicView)'''
    ...
    def setViewTwist (self: AbstractViewTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setVisualStyle (self: AbstractViewTableRecord,val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setWidth (self: AbstractViewTableRecord,val : float)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snapAngle (self: ViewportTableRecord)-> float :
      '''                             '''
    ...
    def snapBase (self: ViewportTableRecord)-> PyGe.Point2d :
      '''                             '''
    ...
    def snapEnabled (self: ViewportTableRecord)-> bool :
      '''                             '''
    ...
    def snapIncrements (self: ViewportTableRecord)-> PyGe.Point2d :
      '''                             '''
    ...
    def snapPair (self: ViewportTableRecord)-> int :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def sunId (self: AbstractViewTableRecord)-> PyDb.ObjectId :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def target (self: AbstractViewTableRecord)-> PyGe.Point3d :
      '''                             '''
    ...
    def ucsFollowMode (self: ViewportTableRecord)-> bool :
      '''                             '''
    ...
    def ucsName (self: AbstractViewTableRecord)-> PyDb.ObjectId :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def upperRightCorner (self: ViewportTableRecord)-> PyGe.Point2d :
      '''                             '''
    ...
    def viewDirection (self: AbstractViewTableRecord)-> PyGe.Vector3d :
      '''                             '''
    ...
    def viewTwist (self: AbstractViewTableRecord)-> float :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visualStyle (self: AbstractViewTableRecord)-> PyDb.ObjectId :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def width (self: AbstractViewTableRecord)-> float :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class Visibility:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kInvisible (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVisible (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class VpFreezeOps:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kFreeze (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kReset (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kThaw (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class VpShadePlotType:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kAsDisplayed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHidden (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kRenderPreset (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kRendered (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVisualStyle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kWireframe (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

class Wipeout:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (list)arg2, (Vector3d)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class boost::python::list,class AcGeVector3d)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3, (bool)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode,bool)'''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, *args, **kwargs)-> None :
      '''addSubentPaths( (Entity)arg1, (list)arg2) -> None :

    C++ signature :
        void addSubentPaths(class PyDbEntity {lvalue},class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def blockId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def brightness (self, *args, **kwargs)-> int :
      '''brightness( (RasterImage)arg1) -> int :

    C++ signature :
        signed char brightness(class PyDbRasterImage {lvalue})'''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Wipeout :
      '''                             '''
    ...
    def castShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def clipBoundary (self, *args, **kwargs)-> list :
      '''clipBoundary( (RasterImage)arg1) -> list :

    C++ signature :
        class boost::python::list clipBoundary(class PyDbRasterImage {lvalue})'''
    ...
    def clipBoundaryType (self, *args, **kwargs)-> PyDb.ClipBoundaryType :
      '''clipBoundaryType( (RasterImage)arg1) -> ClipBoundaryType :

    C++ signature :
        enum AcDbRasterImage::ClipBoundaryType clipBoundaryType(class PyDbRasterImage {lvalue})'''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Wipeout :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def collisionType (self: PyDb.Entity)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self: PyDb.Entity)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self: PyDb.Entity)-> int :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def contrast (self, *args, **kwargs)-> int :
      '''contrast( (RasterImage)arg1) -> int :

    C++ signature :
        signed char contrast(class PyDbRasterImage {lvalue})'''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def draw (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self: PyDb.Entity)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def fade (self, *args, **kwargs)-> int :
      '''fade( (RasterImage)arg1) -> int :

    C++ signature :
        signed char fade(class PyDbRasterImage {lvalue})'''
    ...
    def frame (self: Wipeout)-> bool :
      '''                             '''
    ...
    def getCompoundObjectTransform (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self: PyDb.Entity)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self: PyDb.Entity)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self: PyDb.Entity)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGripPoints (self, *args, **kwargs)-> None :
      '''getGripPoints( (Entity)arg1, (list)arg2, (list)arg3, (list)arg4) -> None :

    C++ signature :
        void getGripPoints(class PyDbEntity {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def getOrientation (self, *args, **kwargs)-> None :
      '''getOrientation( (RasterImage)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> None :

    C++ signature :
        void getOrientation(class PyDbRasterImage {lvalue},class AcGePoint3d {lvalue},class AcGeVector3d {lvalue},class AcGeVector3d {lvalue})'''
    ...
    def getPixelToModelTransform (self, *args, **kwargs)-> PyGe.Matrix3d :
      '''getPixelToModelTransform( (RasterImage)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d getPixelToModelTransform(class PyDbRasterImage {lvalue})'''
    ...
    def getPlane (self: PyDb.Entity)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self: PyDb.Entity)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, *args, **kwargs)-> list :
      '''getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d)

getSubentPathsAtGsMarker( (Entity)arg1, (SubentType)arg2, (int)arg3, (Point3d)arg4, (Matrix3d)arg5, (int)arg6, (ObjectId)arg7) -> list :

    C++ signature :
        class boost::python::list getSubentPathsAtGsMarker(class PyDbEntity {lvalue},unsigned int,__int64,class AcGePoint3d,class AcGeMatrix3d,int,class PyDbObjectId {lvalue})'''
    ...
    def getTransformedCopy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def getVertices (self, *args, **kwargs)-> list :
      '''getVertices( (RasterImage)arg1) -> list :

    C++ signature :
        class boost::python::list getVertices(class PyDbRasterImage {lvalue})'''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def height (self, *args, **kwargs)-> float :
      '''height( (RasterImage)arg1) -> float :

    C++ signature :
        double height(class PyDbRasterImage {lvalue})'''
    ...
    def highlight (self: PyDb.Entity,path: PyDb.FullSubentPath = None,highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def imageDefId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''imageDefId( (RasterImage)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId imageDefId(class PyDbRasterImage {lvalue})'''
    ...
    def imageHeight (self, *args, **kwargs)-> float :
      '''imageHeight( (RasterImage)arg1) -> float :

    C++ signature :
        double imageHeight(class PyDbRasterImage {lvalue})'''
    ...
    def imageSize (self, *args, **kwargs)-> PyGe.Vector2d :
      '''imageSize( (RasterImage)arg1) -> Vector2d :

    C++ signature :
        class AcGeVector2d imageSize(class PyDbRasterImage {lvalue})

imageSize( (RasterImage)arg1, (bool)arg2) -> Vector2d :

    C++ signature :
        class AcGeVector2d imageSize(class PyDbRasterImage {lvalue},bool)'''
    ...
    def imageWidth (self, *args, **kwargs)-> float :
      '''imageWidth( (RasterImage)arg1) -> float :

    C++ signature :
        double imageWidth(class PyDbRasterImage {lvalue})'''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def intersectWith (self: PyDb.Entity,entity: PyDb.Entity,intType : PyDb.Intersect )-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isClipInverted (self, *args, **kwargs)-> bool :
      '''isClipInverted( (RasterImage)arg1) -> bool :

    C++ signature :
        bool isClipInverted(class PyDbRasterImage {lvalue})'''
    ...
    def isClipped (self, *args, **kwargs)-> bool :
      '''isClipped( (RasterImage)arg1) -> bool :

    C++ signature :
        bool isClipped(class PyDbRasterImage {lvalue})'''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isImageShown (self, *args, **kwargs)-> bool :
      '''isImageShown( (RasterImage)arg1) -> bool :

    C++ signature :
        bool isImageShown(class PyDbRasterImage {lvalue})'''
    ...
    def isImageTransparent (self, *args, **kwargs)-> bool :
      '''isImageTransparent( (RasterImage)arg1) -> bool :

    C++ signature :
        bool isImageTransparent(class PyDbRasterImage {lvalue})'''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isPlanar (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isSetDisplayOpt (self, *args, **kwargs)-> bool :
      '''isSetDisplayOpt( (RasterImage)arg1, (ImageDisplayOpt)arg2) -> bool :

    C++ signature :
        bool isSetDisplayOpt(class PyDbRasterImage {lvalue},enum AcDbRasterImage::ImageDisplayOpt)'''
    ...
    def isShownClipped (self, *args, **kwargs)-> bool :
      '''isShownClipped( (RasterImage)arg1) -> bool :

    C++ signature :
        bool isShownClipped(class PyDbRasterImage {lvalue})'''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def layer (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def layerId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self: PyDb.Entity)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def linetypeId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self: PyDb.Entity)-> float :
      '''                             '''
    ...
    def list (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def material (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def materialId (self: PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleName (self: PyDb.Entity)-> str :
      '''                             '''
    ...
    def position (self, *args, **kwargs)-> PyGe.Point3d :
      '''position( (RasterImage)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDbRasterImage {lvalue})'''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def reactorId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''reactorId( (RasterImage)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId reactorId(class PyDbRasterImage {lvalue})'''
    ...
    def receiveShadows (self: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self: PyDb.Entity)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.Entity,reactor: EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self, *args, **kwargs)-> float :
      '''rotation( (RasterImage)arg1) -> float :

    C++ signature :
        double rotation(class PyDbRasterImage {lvalue})'''
    ...
    def scale (self, *args, **kwargs)-> PyGe.Vector2d :
      '''scale( (RasterImage)arg1) -> Vector2d :

    C++ signature :
        class AcGeVector2d scale(class PyDbRasterImage {lvalue})'''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBrightness (self, *args, **kwargs)-> None :
      '''setBrightness( (RasterImage)arg1, (MlineJustification)arg2) -> None :

    C++ signature :
        void setBrightness(class PyDbRasterImage {lvalue},signed char)'''
    ...
    def setCastShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setClipBoundaryToWholeImage (self, *args, **kwargs)-> None :
      '''setClipBoundaryToWholeImage( (RasterImage)arg1, (Vector2d)arg2) -> None :

    C++ signature :
        void setClipBoundaryToWholeImage(class PyDbRasterImage {lvalue},class AcGeVector2d {lvalue})'''
    ...
    def setClipInverted (self, *args, **kwargs)-> None :
      '''setClipInverted( (RasterImage)arg1, (bool)arg2) -> None :

    C++ signature :
        void setClipInverted(class PyDbRasterImage {lvalue},bool)'''
    ...
    def setColor (self: PyDb.Entity,clr: AcCmColor,dosubents : bool=True,db : Database=current)-> None :
      '''                             '''
    ...
    def setColorIndex (self: PyDb.Entity,clr: int,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setContrast (self, *args, **kwargs)-> None :
      '''setContrast( (RasterImage)arg1, (MlineJustification)arg2) -> None :

    C++ signature :
        void setContrast(class PyDbRasterImage {lvalue},signed char)'''
    ...
    def setDatabaseDefaults (self: PyDb.Entity,db: Database = current)-> None :
      '''                             '''
    ...
    def setDisplayOpt (self, *args, **kwargs)-> None :
      '''setDisplayOpt( (RasterImage)arg1, (ImageDisplayOpt)arg2, (bool)arg3) -> None :

    C++ signature :
        void setDisplayOpt(class PyDbRasterImage {lvalue},enum AcDbRasterImage::ImageDisplayOpt,bool)'''
    ...
    def setFade (self, *args, **kwargs)-> None :
      '''setFade( (RasterImage)arg1, (MlineJustification)arg2) -> None :

    C++ signature :
        void setFade(class PyDbRasterImage {lvalue},signed char)'''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setFrom (self: Wipeout,points : list[PyGe.Point2d],normal : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setHeight (self, *args, **kwargs)-> None :
      '''setHeight( (RasterImage)arg1, (float)arg2) -> None :

    C++ signature :
        void setHeight(class PyDbRasterImage {lvalue},double)'''
    ...
    def setImageDefId (self, *args, **kwargs)-> None :
      '''setImageDefId( (RasterImage)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setImageDefId(class PyDbRasterImage {lvalue},class PyDbObjectId)'''
    ...
    def setImageTransparency (self, *args, **kwargs)-> None :
      '''setImageTransparency( (RasterImage)arg1, (bool)arg2) -> None :

    C++ signature :
        void setImageTransparency(class PyDbRasterImage {lvalue},bool)'''
    ...
    def setLayer (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True,allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self: PyDb.Entity,val: LineWeight,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self: PyDb.Entity,val: float,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self: PyDb.Entity,val: str|ObjectId,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOrientation (self, *args, **kwargs)-> bool :
      '''setOrientation( (RasterImage)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> bool :

    C++ signature :
        bool setOrientation(class PyDbRasterImage {lvalue},class AcGePoint3d,class AcGeVector3d,class AcGeVector3d)'''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self: PyDb.Entity,entity: PyDb.Entity,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReactorId (self, *args, **kwargs)-> None :
      '''setReactorId( (RasterImage)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setReactorId(class PyDbRasterImage {lvalue},class PyDbObjectId)'''
    ...
    def setReceiveShadows (self: PyDb.Entity,val: bool)-> None :
      '''                             '''
    ...
    def setRotation (self, *args, **kwargs)-> None :
      '''setRotation( (RasterImage)arg1, (float)arg2) -> None :

    C++ signature :
        void setRotation(class PyDbRasterImage {lvalue},double)'''
    ...
    def setShowClipped (self, *args, **kwargs)-> None :
      '''setShowClipped( (RasterImage)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShowClipped(class PyDbRasterImage {lvalue},bool)'''
    ...
    def setShowImage (self, *args, **kwargs)-> None :
      '''setShowImage( (RasterImage)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShowImage(class PyDbRasterImage {lvalue},bool)'''
    ...
    def setVisibility (self: PyDb.Entity,val: Visibility,dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setWidth (self, *args, **kwargs)-> None :
      '''setWidth( (RasterImage)arg1, (float)arg2) -> None :

    C++ signature :
        void setWidth(class PyDbRasterImage {lvalue},double)'''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self: PyDb.Entity,matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self: PyDb.Entity)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def width (self, *args, **kwargs)-> float :
      '''width( (RasterImage)arg1) -> float :

    C++ signature :
        double width(class PyDbRasterImage {lvalue})'''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class Xrecord:
    def __init__ (self: Xrecord,id: PyDb.ObjectId,mode: OpenMode=kForRead,erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def bounds (self: PyGi.Drawable,ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.DbObject :
      '''                             '''
    ...
    def close (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def comparedTo (self: PyRx.RxObject,other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self: PyRx.RxObject,other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def database (self: PyDb.DbObject)-> PyDb.Database :
      '''                             '''
    ...
    def deepClone (self: PyDb.DbObject,owner: PyDb.DbObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: PyDb.DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def downgradeToNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def drawableType (self: PyGi.Drawable)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self: PyDb.DbObject,erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getField (self: PyDb.DbObject,prop: str=TEXT)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self: PyDb.DbObject)-> PyDb.Handle :
      '''                             '''
    ...
    def handOverTo (self: PyDb.DbObject,newObject: PyDb.DbObject,keepXData: bool,keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self: PyDb.DbObject,appname: str)-> bool :
      '''                             '''
    ...
    def id (self: PyGi.Drawable)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self: PyRx.RxObject)-> int :
      '''                             '''
    ...
    def isA (self: PyRx.RxObject)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isAnnotative (self: PyDb.DbObject)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self: PyRx.RxObject,rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isNullObj (self: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isPersistent (self: PyGi.Drawable)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: PyDb.DbObject)-> bool :
      '''                             '''
    ...
    def isXlateReferences (self: Xrecord)-> bool :
      '''                             '''
    ...
    def keepAlive (self: PyRx.RxObject,flag: bool)-> None :
      '''                             '''
    ...
    def mergeStyle (self: Xrecord)-> PyDb.DuplicateRecordCloning :
      '''                             '''
    ...
    def objectId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ownerId (self: PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self: PyRx.RxObject,rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def rbChain (self: Xrecord,auxDb : PyDb.Database = None )-> list :
      '''                             '''
    ...
    def releaseExtensionDictionary (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def removeContext (self: PyDb.DbObject,obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self: PyDb.DbObject,id: str|ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self: PyDb.DbObject,id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self: PyDb.DbObject,reactor: DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self: PyGi.Drawable,nSubentId: int,nMouseFlags: int,bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def setAnnotative (self: PyDb.DbObject,state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self: PyGi.Drawable,traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setField (self: PyDb.DbObject,prop: str=TEXT,fld: PyDb.Field)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setFromRbChain (self: Xrecord,resbuf : list,auxDb : PyDb.Database = None )-> None :
      '''                             '''
    ...
    def setMergeStyle (self: Xrecord,style: PyDb.DuplicateRecordCloning)-> None :
      '''                             '''
    ...
    def setOwnerId (self: PyDb.DbObject,owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self: PyDb.DbObject,xdata: list)-> None :
      '''                             '''
    ...
    def setXlateReferences (self: Xrecord,val : bool)-> None :
      '''                             '''
    ...
    def snoop (self: PyDb.DbObject, filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self: PyDb.DbObject,otherId: PyDb.DbObject,swapXdata: bool,swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self: PyDb.DbObject,wasWritable: bool)-> None :
      '''                             '''
    ...
    def upgradeOpen (self: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def viewportDraw (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self: PyGi.Drawable,vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self: PyDb.DbObject,owner: PyRx.RxObject,mapping: PyDb.IdMapping,isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self: PyGi.Drawable,wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self: PyDb.DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: PyDb.DbObject,xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self: PyDb.DbObject)-> None :
      '''                             '''
    ...

class XrefObjectId:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def getLocalId (self, *args, **kwargs)-> None :
      '''getLocalId( (XrefObjectId)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void getLocalId(class PyDbXrefObjectId {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def getXrefId (self, *args, **kwargs)-> None :
      '''getXrefId( (XrefObjectId)arg1, (ObjectId)arg2, (Handle)arg3) -> None :

    C++ signature :
        void getXrefId(class PyDbXrefObjectId {lvalue},class PyDbObjectId {lvalue},class PyDbHandle {lvalue})'''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (XrefObjectId)arg1) -> bool :

    C++ signature :
        bool isNull(class PyDbXrefObjectId {lvalue})'''
    ...
    def isValid (self, *args, **kwargs)-> bool :
      '''isValid( (XrefObjectId)arg1) -> bool :

    C++ signature :
        bool isValid(class PyDbXrefObjectId {lvalue})'''
    ...
    def isXref (self, *args, **kwargs)-> bool :
      '''isXref( (XrefObjectId)arg1) -> bool :

    C++ signature :
        bool isXref(class PyDbXrefObjectId {lvalue})'''
    ...
    def resolveObjectId (self, *args, **kwargs)-> None :
      '''resolveObjectId( (XrefObjectId)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void resolveObjectId(class PyDbXrefObjectId {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def setLocalId (self, *args, **kwargs)-> None :
      '''setLocalId( (XrefObjectId)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setLocalId(class PyDbXrefObjectId {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def setNull (self, *args, **kwargs)-> None :
      '''setNull( (XrefObjectId)arg1) -> None :

    C++ signature :
        void setNull(class PyDbXrefObjectId {lvalue})'''
    ...
    def setXrefId (self, *args, **kwargs)-> None :
      '''setXrefId( (XrefObjectId)arg1, (ObjectId)arg2, (Handle)arg3) -> None :

    C++ signature :
        void setXrefId(class PyDbXrefObjectId {lvalue},class PyDbObjectId {lvalue},class PyDbHandle)'''
    ...

class XrefStatus:
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def conjugate (self, *args, **kwargs)-> None :
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None :
      '''the denominator of a rational number in lowest terms'''
    ...
    def imag (self, *args, **kwargs)-> None :
      '''the imaginary part of a complex number'''
    ...
    def is_integer (self, /) :
      '''Returns True. Exists for duck type compatibility with float.is_integer.'''
    ...
    def kXrfFileNotFound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kXrfNotAnXref (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kXrfResolved (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kXrfUnloaded (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kXrfUnreferenced (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kXrfUnresolved (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def numerator (self, *args, **kwargs)-> None :
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None :
      '''the real part of a complex number'''
    ...

def curDb (*args, **kwargs)-> PyDb.Database :
    '''curDb() -> Database :

    C++ signature :
        class PyDbDatabase curDb()'''
    ...
