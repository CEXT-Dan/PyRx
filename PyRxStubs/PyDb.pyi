import PyRx
import PyGe
import PyGi
import PyGs
import PyDb
import PyAp
import PyEd
import PyPl
from typing import overload

class ACIcolorMethod(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kACIbyBlock (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kACIbyLayer (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kACIclear (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kACIforeground (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kACIfrozenLayer (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kACImaximum (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kACIminimum (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kACInone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kACIstandard (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class AbstractViewTable(SymbolTable):
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode=PyDb.OpenMode.kForRead)-> None :
      '''                             '''
    ...
    def add (self, val: PyDb.AbstractViewTableRecord)-> PyDb.ObjectId :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.AbstractViewTable :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.AbstractViewTable :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getAt (self, val: str)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has (self, val: str|PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def recordIds (self)-> list :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def toDict (self)-> dict :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class AbstractViewTableRecord(SymbolTableRecord):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def ambientLightColor (self)-> PyDb.Color :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def backClipDistance (self)-> float :
      '''                             '''
    ...
    def backClipEnabled (self)-> bool :
      '''                             '''
    ...
    def background (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def brightness (self)-> float :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.AbstractViewTableRecord :
      '''                             '''
    ...
    def centerPoint (self)-> PyGe.Point2d :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.AbstractViewTableRecord :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def contrast (self)-> float :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def defaultLightingType (self)-> object :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevation (self)-> float :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def frontClipAtEye (self)-> bool :
      '''                             '''
    ...
    def frontClipDistance (self)-> float :
      '''                             '''
    ...
    def frontClipEnabled (self)-> bool :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getName (self)-> str :
      '''                             '''
    ...
    def getUcs (self)-> tuple :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def height (self)-> float :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isDefaultLightingOn (self)-> bool :
      '''                             '''
    ...
    def isDependent (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isRenamable (self)-> bool :
      '''                             '''
    ...
    def isResolved (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUcsOrthographic (self)-> tuple :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isViewOrthographic (self)-> tuple :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def lensLength (self)-> float :
      '''                             '''
    ...
    def name (self)-> str :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def perspectiveEnabled (self)-> bool :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAmbientLightColor (self, val : PyDb.Color)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBackClipDistance (self, val : float)-> None :
      '''                             '''
    ...
    def setBackClipEnabled (self, val : bool)-> None :
      '''                             '''
    ...
    def setBackground (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setBrightness (self, val : float)-> None :
      '''                             '''
    ...
    def setCenterPoint (self, val : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setContrast (self, val : float)-> None :
      '''                             '''
    ...
    def setDefaultLightingOn (self, val : bool)-> None :
      '''                             '''
    ...
    def setDefaultLightingType (self, *args, **kwargs)-> None :
      '''setDefaultLightingType( (AbstractViewTableRecord)arg1, (object)arg2) -> None :

    C++ signature :
        void setDefaultLightingType(class PyDbAbstractViewTableRecord {lvalue},enum AcGiViewportTraits::DefaultLightingType)'''
    ...
    def setElevation (self, val : float)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setFrontClipAtEye (self, val : bool)-> None :
      '''                             '''
    ...
    def setFrontClipDistance (self, val : float)-> None :
      '''                             '''
    ...
    def setFrontClipEnabled (self, val : bool)-> None :
      '''                             '''
    ...
    def setHeight (self, val : float)-> None :
      '''                             '''
    ...
    def setLensLength (self, val : float)-> None :
      '''                             '''
    ...
    def setName (self, name: str)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPerspectiveEnabled (self, val : bool)-> None :
      '''                             '''
    ...
    def setSun (self, retId : PyDb.ObjectId, pSun : PyDb.Object, eraseOldSun : bool=True)-> None :
      '''                             '''
    ...
    def setTarget (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setUcs (self, *args, **kwargs)-> None :
      '''setUcs( (AbstractViewTableRecord)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> None :

    C++ signature :
        void setUcs(class PyDbAbstractViewTableRecord {lvalue},class AcGePoint3d,class AcGeVector3d,class AcGeVector3d)

setUcs( (AbstractViewTableRecord)arg1, (OrthographicView)arg2) -> None :

    C++ signature :
        void setUcs(class PyDbAbstractViewTableRecord {lvalue},enum AcDb::OrthographicView)

setUcs( (AbstractViewTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setUcs(class PyDbAbstractViewTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setUcsToWorld (self)-> None :
      '''                             '''
    ...
    def setViewDirection (self, *args, **kwargs)-> None :
      '''setViewDirection( (AbstractViewTableRecord)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setViewDirection(class PyDbAbstractViewTableRecord {lvalue},class AcGeVector3d)

setViewDirection( (AbstractViewTableRecord)arg1, (OrthographicView)arg2) -> None :

    C++ signature :
        void setViewDirection(class PyDbAbstractViewTableRecord {lvalue},enum AcDb::OrthographicView)'''
    ...
    def setViewTwist (self, val : float)-> None :
      '''                             '''
    ...
    def setVisualStyle (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setWidth (self, val : float)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def sunId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def target (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def ucsName (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewDirection (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def viewTwist (self)-> float :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visualStyle (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def width (self)-> float :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class AcCmDialogTabs(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kACITab (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kColorBookTab (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTrueColorTab (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class AcGeoMapResolution(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kCoarse (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kFine (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kFiner (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOptimal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class AcGeoMapType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kAerial (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBingAerial (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBingHybrid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBingRoad (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEsriDarkGray (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEsriImagery (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEsriLightGray (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEsriOpenStreetMap (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEsriStreets (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHybrid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNoMap (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kRoad (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class AdsName(object):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def fromObjectId (self, *args, **kwargs)-> None :
      '''fromObjectId( (AdsName)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void fromObjectId(class AdsName {lvalue},class PyDbObjectId)'''
    ...
    def toObjectId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''toObjectId( (AdsName)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId toObjectId(class AdsName {lvalue})'''
    ...

class AlignedDimension(Dimension):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, xLine1Point: PyGe.Point3d, xLine2Point: PyGe.Point3d, dimLinePoint: PyGe.Point3d)-> None : ...
    @overload
    def __init__ (self, xLine1Point: PyGe.Point3d, xLine2Point: PyGe.Point3d, dimLinePoint: PyGe.Point3d, dimText: str)-> None : ...
    @overload
    def __init__ (self, xLine1Point: PyGe.Point3d, xLine2Point: PyGe.Point3d, dimLinePoint: PyGe.Point3d, dimText: str, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - xLine1Point: PyGe.Point3d, xLine2Point: PyGe.Point3d, dimLinePoint: PyGe.Point3d
    - xLine1Point: PyGe.Point3d, xLine2Point: PyGe.Point3d, dimLinePoint: PyGe.Point3d, dimText: str
    - xLine1Point: PyGe.Point3d, xLine2Point: PyGe.Point3d, dimLinePoint: PyGe.Point3d, dimText: str, id: PyDb.ObjectId
    - id: PyDb.ObjectId
    - id: PyDb.ObjectId, mode: PyDb.OpenMode
    - id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool
    '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def altSuppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def altSuppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def altSuppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def altSuppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def alternatePrefix (self)-> str :
      '''                             '''
    ...
    def alternateSuffix (self)-> str :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.AlignedDimension :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...
    def centerMarkSize (self)-> float :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.AlignedDimension :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dimBlockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimBlockPosition (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def dimExt1Linetype (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimExt2Linetype (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimLineLinetype (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimLinePoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def dimensionStyle (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimensionText (self)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevation (self)-> float :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def fieldFromMText (self, ref : PyDb.MText)-> None :
      '''                             '''
    ...
    def fieldToMText (self, ref : PyDb.MText)-> None :
      '''                             '''
    ...

    @overload
    def formatMeasurement (self, measurement: float)-> str : ...
    @overload
    def formatMeasurement (self, measurement: float, dimensionText: str)-> str : ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''Overloads:
    - measurement: float
    - measurement: float, dimensionText: str
    '''
    ...
    def generateLayout (self)-> None :
      '''                             '''
    ...
    def getArrowFirstIsFlipped (self)-> bool :
      '''                             '''
    ...
    def getArrowSecondIsFlipped (self)-> bool :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDimstyleData (self)-> PyDb.DimStyleTableRecord :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def horizontalRotation (self)-> float :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def inspection (self)-> bool :
      '''                             '''
    ...
    def inspectionFrame (self)-> int :
      '''                             '''
    ...
    def inspectionLabel (self)-> str :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self)-> bool :
      '''                             '''
    ...
    def isConstraintObject (self)-> tuple :
      '''                             '''
    ...
    def isDynamicDimension (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def jogSymbolOn (self)-> bool :
      '''                             '''
    ...
    def jogSymbolPosition (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def measurement (self)-> float :
      '''                             '''
    ...
    def normal (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def oblique (self)-> float :
      '''                             '''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def prefix (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recomputeDimBlock (self, force : bool=False)-> None :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def removeTextField (self)-> None :
      '''                             '''
    ...
    def resetTextDefinedSize (self)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAltSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setAlternatePrefix (self, val : str)-> None :
      '''                             '''
    ...
    def setAlternateSuffix (self, val : str)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setArrowFirstIsFlipped (self, val : bool)-> None :
      '''                             '''
    ...
    def setArrowSecondIsFlipped (self, val : bool)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setConstraintDynamic (self, val : bool)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setDimBlockId (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimBlockPosition (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setDimExt1Linetype (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimExt2Linetype (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimLineLinetype (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimLinePoint (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setDimensionStyle (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimensionText (self, val : str)-> None :
      '''                             '''
    ...

    @overload
    def setDimstyleData (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def setDimstyleData (self, rec: PyDb.DimStyleTableRecord)-> None : ...
    def setDimstyleData (self, *args, **kwargs)-> None :
      '''Overloads:
    - id: PyDb.ObjectId
    - rec: PyDb.DimStyleTableRecord
    '''
    ...
    def setDynamicDimension (self, val : bool)-> None :
      '''                             '''
    ...
    def setElevation (self, val : float)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setHorizontalRefTextRotation (self, val : bool)-> None :
      '''                             '''
    ...
    def setHorizontalRotation (self, val : float)-> None :
      '''                             '''
    ...
    def setInspection (self, val : bool)-> None :
      '''                             '''
    ...
    def setInspectionFrame (self, val : int)-> None :
      '''                             '''
    ...
    def setInspectionLabel (self, val : str)-> None :
      '''                             '''
    ...
    def setJogSymbolOn (self, val : bool)-> None :
      '''                             '''
    ...
    def setJogSymbolPosition (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self, val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOblique (self, val : float)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, val : str)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setShouldParticipateInOPM (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuffix (self, val : str)-> None :
      '''                             '''
    ...
    def setSuppressAngularTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setTextAttachment (self, val : PyDb.MTextAttachmentPoint)-> None :
      '''                             '''
    ...
    def setTextDefinedSize (self, width : float, height : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingFactor (self, val : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingStyle (self, val : PyDb.LineSpacingStyle)-> None :
      '''                             '''
    ...
    def setTextPosition (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setTextRotation (self, val : float)-> None :
      '''                             '''
    ...
    def setToleranceSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setUsingDefaultTextPosition (self, val : bool)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def setXLine1Point (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setXLine2Point (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def shouldParticipateInOPM (self)-> bool :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def suffix (self)-> str :
      '''                             '''
    ...
    def suppressAngularLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressAngularTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def suppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAttachment (self)-> PyDb.MTextAttachmentPoint :
      '''                             '''
    ...
    def textDefinedSize (self)-> tuple :
      '''                             '''
    ...
    def textLineSpacingFactor (self)-> float :
      '''                             '''
    ...
    def textLineSpacingStyle (self)-> PyDb.LineSpacingStyle :
      '''                             '''
    ...
    def textPosition (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def textRotation (self)-> float :
      '''                             '''
    ...
    def toleranceSuppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def toleranceSuppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def useDefaultTextPosition (self)-> None :
      '''                             '''
    ...
    def useSetTextPosition (self)-> None :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xLine1Point (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def xLine2Point (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class AnnoType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kBlockRef (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kFcf (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMText (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNoAnno (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class AnnotationScale(ObjectContext):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...

    @staticmethod
    def cast (otherObject: PyDb.ObjectContext)-> PyDb.AnnotationScale :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def collectionName (self)-> str :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, otherObject: PyRx.RxObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def getDrawingUnits (self)-> float :
      '''                             '''
    ...
    def getIsTemporaryScale (self)-> bool :
      '''                             '''
    ...
    def getName (self)-> str :
      '''                             '''
    ...
    def getPaperUnits (self)-> float :
      '''                             '''
    ...
    def getScale (self)-> float :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def matchScaleId (self, val : int)-> bool :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def setDrawingUnits (self, val : float)-> None :
      '''                             '''
    ...
    def setName (self, name : str)-> None :
      '''                             '''
    ...
    def setPaperUnits (self, val : float)-> None :
      '''                             '''
    ...
    def uniqueIdentifier (self)-> int :
      '''                             '''
    ...

class AnnotativeStates(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kFalse (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNotApplicable (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTrue (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class Arc(Curve):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, center: PyGe.Point3d, radius: float, startAngle: float, endAngle: float)-> None : ...
    @overload
    def __init__ (self, center: PyGe.Point3d,normal: PyGe.Vector2d, radius: float, startAngle: float, endAngle: float)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - center: PyGe.Point3d, radius: float, startAngle: float, endAngle: float
    - center: PyGe.Point3d,normal: PyGe.Vector2d, radius: float, startAngle: float, endAngle: float
    - id: PyDb.ObjectId
    - id: PyDb.ObjectId, mode: PyDb.OpenMode
    - id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool
    '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Arc :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...
    def center (self)-> PyGe.Point3d :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Arc :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...

    @staticmethod
    def createFromAcGeCurve (curve: PyGe.Curve3d,normal: PyGe.Vector3d = PyGe.Vector3d.kZAxis,tol: PyGe.Tol = 'default')-> PyDb.Curve :
      '''                             '''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def endAngle (self)-> float :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> None :
      '''extend( (Curve)arg1, (float)arg2) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getAcGeCurve (self, tol: PyGe.Tol = 'default')-> PyGe.CircArc3d :
      '''                             '''
    ...
    def getArea (self)-> float :
      '''                             '''
    ...
    def getClosestPointTo (self, point3d: PyGe.Point3d, direction: PyGe.Vector3d=None, extend: bool=False)-> PyGe.Point3d :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDistAtParam (self, param: float)-> float :
      '''                             '''
    ...
    def getDistAtPoint (self, point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEndParam (self)-> float :
      '''                             '''
    ...
    def getEndPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self, param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getOffsetCurves (self, dist: float)-> list :
      '''                             '''
    ...
    def getOffsetCurvesGivenPlaneNormal (self, normal: PyGe.Vector3d, dist: float)-> list :
      '''                             '''
    ...
    def getOrthoProjectedCurve (self, plane: PyGe.Plane)-> PyDb.Curve :
      '''                             '''
    ...
    def getParamAtDist (self, dist: float)-> float :
      '''                             '''
    ...
    def getParamAtPoint (self, point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getPointAtDist (self, dist: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getPointAtParam (self, param: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getProjectedCurve (self, plane: PyGe.Plane, projDir: PyGe.Vector3d)-> PyDb.Curve :
      '''                             '''
    ...
    def getSecondDeriv (self, param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getSpline (self)-> PyDb.Spline :
      '''                             '''
    ...
    def getSplitCurves (self, paramsOrPoints: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParam (self, param: float)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParams (self, params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoint (self, point: PyGe.Point3d)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoints (self, points: list)-> list :
      '''                             '''
    ...
    def getStartParam (self)-> float :
      '''                             '''
    ...
    def getStartPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isClosed (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPeriodic (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def length (self)-> float :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def normal (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def radius (self)-> float :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def reverseCurve (self)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setCenter (self, val:PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setEndAngle (self, val:float)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setFromAcGeCurve (self, curve: PyGe.Curve3d, normal: PyGe.Vector3d = PyGe.Vector3d.kZAxis, tol: PyGe.Tol = 'default')-> None :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self, val:PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setRadius (self, val:float)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setStartAngle (self, val:float)-> None :
      '''                             '''
    ...
    def setThickness (self, val:float)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def startAngle (self)-> float :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def thickness (self)-> float :
      '''                             '''
    ...
    def totalAngle (self)-> float :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class ArcDimension(Dimension):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, centerPoint: PyGe.point3d, xLine1Point: PyGe.Point3d, xLine2Point: PyGe.Point3d, arcPnt: PyGe.Point3d)-> None : ...
    @overload
    def __init__ (self, centerPoint: PyGe.point3d, xLine1Point: PyGe.Point3d, xLine2Point: PyGe.Point3d, arcPnt: PyGe.Point3d, dimText: str)-> None : ...
    @overload
    def __init__ (self, centerPoint: PyGe.point3d, xLine1Point: PyGe.Point3d, xLine2Point: PyGe.Point3d, arcPnt: PyGe.Point3d, dimText: str, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - centerPoint: PyGe.point3d, xLine1Point: PyGe.Point3d, xLine2Point: PyGe.Point3d, arcPnt: PyGe.Point3d
    - centerPoint: PyGe.point3d, xLine1Point: PyGe.Point3d, xLine2Point: PyGe.Point3d, arcPnt: PyGe.Point3d, dimText: str
    - centerPoint: PyGe.point3d, xLine1Point: PyGe.Point3d, xLine2Point: PyGe.Point3d, arcPnt: PyGe.Point3d, dimText: str, id: PyDb.ObjectId
    - id: PyDb.ObjectId
    - id: PyDb.ObjectId, mode: PyDb.OpenMode
    - id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool
    '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def altSuppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def altSuppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def altSuppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def altSuppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def alternatePrefix (self)-> str :
      '''                             '''
    ...
    def alternateSuffix (self)-> str :
      '''                             '''
    ...
    def arcEndParam (self)-> float :
      '''                             '''
    ...
    def arcPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def arcStartParam (self)-> float :
      '''                             '''
    ...
    def arcSymbolType (self)-> int :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.ArcDimension :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...
    def centerMarkSize (self)-> float :
      '''                             '''
    ...
    def centerPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.ArcDimension :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dimBlockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimBlockPosition (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def dimExt1Linetype (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimExt2Linetype (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimLineLinetype (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimensionStyle (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimensionText (self)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevation (self)-> float :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def fieldFromMText (self, ref : PyDb.MText)-> None :
      '''                             '''
    ...
    def fieldToMText (self, ref : PyDb.MText)-> None :
      '''                             '''
    ...

    @overload
    def formatMeasurement (self, measurement: float)-> str : ...
    @overload
    def formatMeasurement (self, measurement: float, dimensionText: str)-> str : ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''Overloads:
    - measurement: float
    - measurement: float, dimensionText: str
    '''
    ...
    def generateLayout (self)-> None :
      '''                             '''
    ...
    def getArrowFirstIsFlipped (self)-> bool :
      '''                             '''
    ...
    def getArrowSecondIsFlipped (self)-> bool :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDimstyleData (self)-> PyDb.DimStyleTableRecord :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasLeader (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def horizontalRotation (self)-> float :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def inspection (self)-> bool :
      '''                             '''
    ...
    def inspectionFrame (self)-> int :
      '''                             '''
    ...
    def inspectionLabel (self)-> str :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self)-> bool :
      '''                             '''
    ...
    def isConstraintObject (self)-> tuple :
      '''                             '''
    ...
    def isDynamicDimension (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPartial (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def leader1Point (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def leader2Point (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def measurement (self)-> float :
      '''                             '''
    ...
    def normal (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def prefix (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recomputeDimBlock (self, force : bool=False)-> None :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def removeTextField (self)-> None :
      '''                             '''
    ...
    def resetTextDefinedSize (self)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAltSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setAlternatePrefix (self, val : str)-> None :
      '''                             '''
    ...
    def setAlternateSuffix (self, val : str)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setArcEndParam (self, val : float)-> None :
      '''                             '''
    ...
    def setArcPoint (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setArcStartParam (self, val : float)-> None :
      '''                             '''
    ...
    def setArcSymbolType (self, val : int)-> None :
      '''                             '''
    ...
    def setArrowFirstIsFlipped (self, val : bool)-> None :
      '''                             '''
    ...
    def setArrowSecondIsFlipped (self, val : bool)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setCenterPoint (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setConstraintDynamic (self, val : bool)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setDimBlockId (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimBlockPosition (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setDimExt1Linetype (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimExt2Linetype (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimLineLinetype (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimensionStyle (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimensionText (self, val : str)-> None :
      '''                             '''
    ...

    @overload
    def setDimstyleData (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def setDimstyleData (self, rec: PyDb.DimStyleTableRecord)-> None : ...
    def setDimstyleData (self, *args, **kwargs)-> None :
      '''Overloads:
    - id: PyDb.ObjectId
    - rec: PyDb.DimStyleTableRecord
    '''
    ...
    def setDynamicDimension (self, val : bool)-> None :
      '''                             '''
    ...
    def setElevation (self, val : float)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setHasLeader (self, val : bool)-> None :
      '''                             '''
    ...
    def setHorizontalRefTextRotation (self, val : bool)-> None :
      '''                             '''
    ...
    def setHorizontalRotation (self, val : float)-> None :
      '''                             '''
    ...
    def setInspection (self, val : bool)-> None :
      '''                             '''
    ...
    def setInspectionFrame (self, val : int)-> None :
      '''                             '''
    ...
    def setInspectionLabel (self, val : str)-> None :
      '''                             '''
    ...
    def setIsPartial (self, val : bool)-> None :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLeader1Point (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setLeader2Point (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self, val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, val : str)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setShouldParticipateInOPM (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuffix (self, val : str)-> None :
      '''                             '''
    ...
    def setSuppressAngularTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setTextAttachment (self, val : PyDb.MTextAttachmentPoint)-> None :
      '''                             '''
    ...
    def setTextDefinedSize (self, width : float, height : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingFactor (self, val : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingStyle (self, val : PyDb.LineSpacingStyle)-> None :
      '''                             '''
    ...
    def setTextPosition (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setTextRotation (self, val : float)-> None :
      '''                             '''
    ...
    def setToleranceSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setUsingDefaultTextPosition (self, val : bool)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def setXLine1Point (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setXLine2Point (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def shouldParticipateInOPM (self)-> bool :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def suffix (self)-> str :
      '''                             '''
    ...
    def suppressAngularLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressAngularTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def suppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAttachment (self)-> PyDb.MTextAttachmentPoint :
      '''                             '''
    ...
    def textDefinedSize (self)-> tuple :
      '''                             '''
    ...
    def textLineSpacingFactor (self)-> float :
      '''                             '''
    ...
    def textLineSpacingStyle (self)-> PyDb.LineSpacingStyle :
      '''                             '''
    ...
    def textPosition (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def textRotation (self)-> float :
      '''                             '''
    ...
    def toleranceSuppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def toleranceSuppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def useDefaultTextPosition (self)-> None :
      '''                             '''
    ...
    def useSetTextPosition (self)-> None :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xLine1Point (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def xLine2Point (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class AssocFlags(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kFirstPointRef (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kFourthPointRef (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSecondPointRef (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kThirdPointRef (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class AttributeDefinition(Text):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, position: PyGe.Point3d, text: str, tag: str, prompt: str, styleid: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - position: PyGe.Point3d, text: str, tag: str, prompt: str, styleid: PyDb.ObjectId
    - id: PyDb.ObjectId
    - id: PyDb.ObjectId, mode: PyDb.OpenMode
    - id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool
    '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def adjustAlignment (self, val : Database)-> None :
      '''                             '''
    ...
    def alignmentPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.AttributeDefinition :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.AttributeDefinition :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def convertFieldToText (self)-> None :
      '''                             '''
    ...
    def convertIntoMTextAttributeDefinition (self, val : bool)-> None :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def correctSpelling (self)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def fieldLength (self)-> int :
      '''                             '''
    ...
    def getBoundingPoints (self)-> list :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getMTextAttributeDefinition (self)-> PyDb.MText :
      '''                             '''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def height (self)-> float :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def hitTest (self, val : PyGe.Point3d)-> bool :
      '''                             '''
    ...
    def horizontalMode (self)-> PyDb.TextHorzMode :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isConstant (self)-> bool :
      '''                             '''
    ...
    def isDefaultAlignment (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isInvisible (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isMTextAttributeDefinition (self)-> bool :
      '''                             '''
    ...
    def isMirroredInX (self)-> bool :
      '''                             '''
    ...
    def isMirroredInY (self)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isPreset (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isVerifiable (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def justification (self)-> PyDb.TextAlignment :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def lockPositionInBlock (self)-> bool :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def mirrorInX (self, val : bool)-> None :
      '''                             '''
    ...
    def mirrorInY (self, val : bool)-> None :
      '''                             '''
    ...
    def normal (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def oblique (self)-> float :
      '''                             '''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def position (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def prompt (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self)-> float :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAlignmentPoint (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setConstant (self, val : bool)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setFieldLength (self, val : int)-> None :
      '''                             '''
    ...
    def setHeight (self, val : float)-> None :
      '''                             '''
    ...
    def setHorizontalMode (self, val : PyDb.TextHorzMode)-> None :
      '''                             '''
    ...
    def setInvisible (self, val : bool)-> None :
      '''                             '''
    ...
    def setJustification (self, val : PyDb.TextAlignment)-> None :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLockPositionInBlock (self, val : bool)-> None :
      '''                             '''
    ...
    def setMTextAttributeDefinition (self, val : MText)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self, val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOblique (self, val : float)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, pos : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPreset (self, val : bool)-> None :
      '''                             '''
    ...
    def setPrompt (self, val : str)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setRotation (self, val : float)-> None :
      '''                             '''
    ...
    def setTag (self, val : str)-> None :
      '''                             '''
    ...
    def setTextString (self, val : str)-> None :
      '''                             '''
    ...
    def setTextStyle (self, val : ObjectId)-> None :
      '''                             '''
    ...
    def setThickness (self, val : float)-> None :
      '''                             '''
    ...
    def setVerifiable (self, val : bool)-> None :
      '''                             '''
    ...
    def setVerticalMode (self, val : PyDb.TextVertMode)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setWidthFactor (self, val : float)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def tag (self)-> str :
      '''                             '''
    ...
    def textString (self)-> str :
      '''                             '''
    ...
    def textStyle (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def thickness (self)-> float :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def updateMTextAttributeDefinition (self)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def verticalMode (self)-> PyDb.TextHorzMode :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def widthFactor (self)-> float :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class AttributeReference(Text):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, position: PyGe.Point3d, text: str, tag: str, styleid: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - position: PyGe.Point3d, text: str, tag: str, styleid: PyDb.ObjectId
    - id: PyDb.ObjectId
    - id: PyDb.ObjectId, mode: PyDb.OpenMode
    - id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool
    '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def adjustAlignment (self, val : Database)-> None :
      '''                             '''
    ...
    def alignmentPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.AttributeReference :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.AttributeReference :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def convertFieldToText (self)-> None :
      '''                             '''
    ...
    def convertIntoMTextAttribute (self, val : bool)-> None :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def correctSpelling (self)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def fieldLength (self)-> int :
      '''                             '''
    ...
    def getBoundingPoints (self)-> list :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getMTextAttribute (self)-> PyDb.MText :
      '''                             '''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def height (self)-> float :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def hitTest (self, val : PyGe.Point3d)-> bool :
      '''                             '''
    ...
    def horizontalMode (self)-> PyDb.TextHorzMode :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isConstant (self)-> bool :
      '''                             '''
    ...
    def isDefaultAlignment (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isInvisible (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isMTextAttribute (self)-> bool :
      '''                             '''
    ...
    def isMirroredInX (self)-> bool :
      '''                             '''
    ...
    def isMirroredInY (self)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isPreset (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isReallyLocked (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isVerifiable (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def justification (self)-> PyDb.TextAlignment :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def lockPositionInBlock (self)-> bool :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def mirrorInX (self, val : bool)-> None :
      '''                             '''
    ...
    def mirrorInY (self, val : bool)-> None :
      '''                             '''
    ...
    def normal (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def oblique (self)-> float :
      '''                             '''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def position (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self)-> float :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAlignmentPoint (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributeFromBlock (self, *args, **kwargs)-> None :
      '''setAttributeFromBlock( (AttributeReference)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void setAttributeFromBlock(class PyDbAttribute {lvalue},class AcGeMatrix3d)

setAttributeFromBlock( (AttributeReference)arg1, (AttributeDefinition)arg2, (Matrix3d)arg3) -> None :

    C++ signature :
        void setAttributeFromBlock(class PyDbAttribute {lvalue},class PyDbAttributeDefinition,class AcGeMatrix3d)'''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setFieldLength (self, val : int)-> None :
      '''                             '''
    ...
    def setHeight (self, val : float)-> None :
      '''                             '''
    ...
    def setHorizontalMode (self, val : PyDb.TextHorzMode)-> None :
      '''                             '''
    ...
    def setInvisible (self, val : bool)-> None :
      '''                             '''
    ...
    def setJustification (self, val : PyDb.TextAlignment)-> None :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLockPositionInBlock (self, val : bool)-> None :
      '''                             '''
    ...
    def setMTextAttribute (self, val : MText)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self, val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOblique (self, val : float)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, pos : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setRotation (self, val : float)-> None :
      '''                             '''
    ...
    def setTag (self, val : str)-> None :
      '''                             '''
    ...
    def setTextString (self, val : str)-> None :
      '''                             '''
    ...
    def setTextStyle (self, val : ObjectId)-> None :
      '''                             '''
    ...
    def setThickness (self, val : float)-> None :
      '''                             '''
    ...
    def setVerticalMode (self, val : PyDb.TextVertMode)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setWidthFactor (self, val : float)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def tag (self)-> str :
      '''                             '''
    ...
    def textString (self)-> str :
      '''                             '''
    ...
    def textStyle (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def thickness (self)-> float :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def updateMTextAttribute (self)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def verticalMode (self)-> PyDb.TextHorzMode :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def widthFactor (self)-> float :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class BlockBegin(Entity):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...
    def cast (self, *args, **kwargs)-> PyDb.BlockBegin :
      '''cast( (RxObject)arg1) -> BlockBegin :

    C++ signature :
        class PyDbBlockBegin cast(class PyRxObject)'''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.BlockBegin :
      '''cloneFrom( (RxObject)arg1) -> BlockBegin :

    C++ signature :
        class PyDbBlockBegin cloneFrom(class PyRxObject)'''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class BlockEnd(Entity):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...
    def cast (self, *args, **kwargs)-> PyDb.BlockEnd :
      '''cast( (RxObject)arg1) -> BlockEnd :

    C++ signature :
        class PyDbBlockEnd cast(class PyRxObject)'''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.BlockEnd :
      '''cloneFrom( (RxObject)arg1) -> BlockEnd :

    C++ signature :
        class PyDbBlockEnd cloneFrom(class PyRxObject)'''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class BlockReference(Entity):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, position: PyGe.Point3d, blockTableRec: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - position: PyGe.Point3d, blockTableRec: PyDb.ObjectId
    - id: PyDb.ObjectId
    - id: PyDb.ObjectId, mode: PyDb.OpenMode
    - id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool
    '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def appendAttribute (self, val : PyDb.Attribute)-> PyDb.ObjectId :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def attributeIds (self)-> list :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockTableRecord (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.BlockReference :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.BlockReference :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def explodeToOwnerSpace (self)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def geomExtentsBestFit (self, val : PyGe.Matrix3d=PyGe.Matrix3d.kIdentity)-> PyDb.Extents :
      '''                             '''
    ...
    def getBlockName (self)-> str :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def nonAnnotationBlockTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def nonAnnotationScaleFactors (self)-> PyGe.Scale3d :
      '''                             '''
    ...
    def normal (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def position (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self)-> float :
      '''                             '''
    ...
    def scaleFactors (self)-> PyGe.Scale3d :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBlockTableRecord (self, val : ObjectId)-> None :
      '''                             '''
    ...
    def setBlockTransform (self, val : PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self, val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setRotation (self, val : float)-> None :
      '''                             '''
    ...
    def setScaleFactors (self, val : PyGe.Scale3d)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def treatAsAcDbBlockRefForExplode (self)-> bool :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class BlockScaling(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kAny (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUniform (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class BlockTable(SymbolTable):
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode=PyDb.OpenMode.kForRead)-> None :
      '''                             '''
    ...
    def add (self, block : BlockTableRecord)-> PyDb.ObjectId :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.BlockTable :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.BlockTable :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getAt (self, val: str)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has (self, val: str|PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def recordIds (self)-> list :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def toDict (self)-> dict :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class BlockTableRecord(SymbolTableRecord):
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode=PyDb.OpenMode.kForRead)-> None :
      '''                             '''
    ...
    def addAnnoScalestoBlkRefs (self, scale : bool)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def appendAcDbEntities (self, entities : list[PyDb.Entity])-> list :
      '''                             '''
    ...
    def appendAcDbEntity (self, entity : PyDb.Entity)-> PyDb.ObjectId :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def assumeOwnershipOf (self, entities : list[PyDb.Entity])-> None :
      '''                             '''
    ...
    def blockInsertUnits (self)-> PyDb.UnitsValue :
      '''                             '''
    ...
    def blockScaling (self)-> PyDb.BlockScaling :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.BlockTableRecord :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def clearPreviewIcon (self)-> None :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.BlockTableRecord :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comments (self)-> str :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explodable (self)-> bool :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getBlockReferenceIds (self, directOnly : bool = True, bForceValidity : bool = False)-> list :
      '''                             '''
    ...
    def getErasedBlockReferenceIds (self)-> list :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getLayoutId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getName (self)-> str :
      '''                             '''
    ...
    def getPreviewIcon (self)-> object :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasAttributeDefinitions (self)-> bool :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasPreviewIcon (self)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isAnonymous (self)-> bool :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isDependent (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isFromExternalReference (self)-> bool :
      '''                             '''
    ...
    def isFromOverlayReference (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isLayout (self)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isRenamable (self)-> bool :
      '''                             '''
    ...
    def isResolved (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isUnloaded (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def name (self)-> str :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def objectIds (self, desc:PyRx.RxClass=PyDb.Entity)-> list :
      '''                             '''
    ...
    def openBlockBegin (self, val: PyDb.BlockBegin, mode: PyDb.OpenMode)-> None :
      '''                             '''
    ...
    def openBlockEnd (self, val: PyDb.BlockEnd, mode: PyDb.OpenMode)-> None :
      '''                             '''
    ...
    def origin (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def pathName (self)-> str :
      '''                             '''
    ...
    def postProcessAnnotativeBTR (self, bqueryOnly  : bool = False, bScale : bool = True)-> int :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBlockInsertUnits (self, val : PyDb.UnitsValue)-> None :
      '''                             '''
    ...
    def setBlockScaling (self, val : PyDb.BlockScaling)-> None :
      '''                             '''
    ...
    def setComments (self, val : str)-> None :
      '''                             '''
    ...
    def setExplodable (self, val : bool)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setIsFromOverlayReference (self, val : bool)-> None :
      '''                             '''
    ...
    def setIsUnloaded (self, val : bool)-> None :
      '''                             '''
    ...
    def setLayoutId (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setName (self, name: str)-> None :
      '''                             '''
    ...
    def setOrigin (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPathName (self, val : str)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...
    def xrefDatabase (self, val : bool)-> PyDb.Database :
      '''                             '''
    ...
    def xrefStatus (self)-> PyDb.XrefStatus :
      '''                             '''
    ...

class Body(Entity):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...
    def cast (self, *args, **kwargs)-> PyDb.Body :
      '''cast( (RxObject)arg1) -> Body :

    C++ signature :
        class PyDbBody cast(class PyRxObject)'''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.Body :
      '''cloneFrom( (RxObject)arg1) -> Body :

    C++ signature :
        class PyDbBody cloneFrom(class PyRxObject)'''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class BoolOperType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kBoolIntersect (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBoolSubtract (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBoolUnite (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class Cell(object):
    def __init__ (self, row : int=-1, column : int=-1)-> None :
      '''                             '''
    ...
    def column (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def row (self, *args, **kwargs)-> None :
      '''None'''
    ...

class CellAlignment(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kBottomCenter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBottomLeft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBottomRight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMiddleCenter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMiddleLeft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMiddleRight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTopCenter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTopLeft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTopRight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class CellContentLayout(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kCellContentLayoutStackedHorizontal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellContentLayoutStackedVertical (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellStateNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class CellContentType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kCellContentTypeBlock (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellContentTypeField (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellContentTypeUnknown (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellContentTypeValue (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class CellEdgeMask(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kBottomMask (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLeftMask (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kRightMask (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTopMask (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class CellMargin(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kCellMarginBottom (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellMarginHorzSpacing (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellMarginLeft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellMarginRight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellMarginTop (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellMarginVertSpacing (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class CellProperty(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kCellPropAlignment (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropAll (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropAutoScale (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropBackgroundColor (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropBitProperties (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropContent (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropContentColor (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropContentLayout (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropDataFormat (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropDataType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropDataTypeAndFormat (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropFlowDirBtoT (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropInvalid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropMarginBottom (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropMarginHorzSpacing (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropMarginLeft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropMarginRight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropMarginTop (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropMarginVertSpacing (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropMergeAll (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropRotation (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropScale (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropTextHeight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellPropTextStyle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class CellRange(object):
    def __init__ (self, topRow : int=-1, leftColumn : int=-1, bottomRow : int=-1, rightColumn : int=-1)-> None :
      '''                             '''
    ...
    def bottomRow (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def leftColumn (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def rightColumn (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def topRow (self, *args, **kwargs)-> None :
      '''None'''
    ...

class CellState(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kAllCellStates (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellStateContentLocked (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellStateContentModifiedAfterUpdate (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellStateContentReadOnly (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellStateFormatLocked (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellStateFormatModifiedAfterUpdate (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellStateFormatReadOnly (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellStateLinked (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCellStateNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class CellType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kBlockCell (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMultipleContentCell (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextCell (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnknownCell (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class CenterMarkType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kLine (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMark (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class Circle(Curve):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, center: PyGe.Point3d,normal: PyGe.Vector2d,radius : float)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - center: PyGe.Point3d,normal: PyGe.Vector2d,radius : float
    - id: PyDb.ObjectId
    - id: PyDb.ObjectId, mode: PyDb.OpenMode
    - id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool
    '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Circle :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...
    def center (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def circumference (self)-> float :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Circle :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...

    @staticmethod
    def createFromAcGeCurve (curve: PyGe.Curve3d,normal: PyGe.Vector3d = PyGe.Vector3d.kZAxis,tol: PyGe.Tol = 'default')-> PyDb.Curve :
      '''                             '''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def diameter (self)-> float :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> None :
      '''extend( (Curve)arg1, (float)arg2) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getAcGeCurve (self, tol: PyGe.Tol = 'default')-> PyGe.CircArc3d :
      '''                             '''
    ...
    def getArea (self)-> float :
      '''                             '''
    ...
    def getClosestPointTo (self, point3d: PyGe.Point3d, direction: PyGe.Vector3d=None, extend: bool=False)-> PyGe.Point3d :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDistAtParam (self, param: float)-> float :
      '''                             '''
    ...
    def getDistAtPoint (self, point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEndParam (self)-> float :
      '''                             '''
    ...
    def getEndPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self, param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getOffsetCurves (self, dist: float)-> list :
      '''                             '''
    ...
    def getOffsetCurvesGivenPlaneNormal (self, normal: PyGe.Vector3d, dist: float)-> list :
      '''                             '''
    ...
    def getOrthoProjectedCurve (self, plane: PyGe.Plane)-> PyDb.Curve :
      '''                             '''
    ...
    def getParamAtDist (self, dist: float)-> float :
      '''                             '''
    ...
    def getParamAtPoint (self, point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getPointAtDist (self, dist: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getPointAtParam (self, param: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getProjectedCurve (self, plane: PyGe.Plane, projDir: PyGe.Vector3d)-> PyDb.Curve :
      '''                             '''
    ...
    def getSecondDeriv (self, param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getSpline (self)-> PyDb.Spline :
      '''                             '''
    ...
    def getSplitCurves (self, paramsOrPoints: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParam (self, param: float)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParams (self, params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoint (self, point: PyGe.Point3d)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoints (self, points: list)-> list :
      '''                             '''
    ...
    def getStartParam (self)-> float :
      '''                             '''
    ...
    def getStartPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isClosed (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPeriodic (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def normal (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def radius (self)-> float :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def reverseCurve (self)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setCenter (self, val:PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setCircumference (self, val:float)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setDiameter (self, val:float)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setFromAcGeCurve (self, curve: PyGe.Curve3d, normal: PyGe.Vector3d = PyGe.Vector3d.kZAxis, tol: PyGe.Tol = 'default')-> None :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self, val:PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setRadius (self, val:float)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setThickness (self, val:float)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def thickness (self)-> float :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class ClipBoundaryType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kInvalid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPoly (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kRect (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class CollisionType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kCollisionTypeNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCollisionTypeSolid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class Color(object):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def blue (self)-> int :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def green (self)-> int :
      '''                             '''
    ...
    def isByACI (self)-> bool :
      '''                             '''
    ...
    def isByBlock (self)-> bool :
      '''                             '''
    ...
    def isByColor (self)-> bool :
      '''                             '''
    ...
    def isByLayer (self)-> bool :
      '''                             '''
    ...
    def isByPen (self)-> bool :
      '''                             '''
    ...
    def isForeground (self)-> bool :
      '''                             '''
    ...
    def isNone (self)-> bool :
      '''                             '''
    ...
    def penIndex (self)-> int :
      '''                             '''
    ...
    def red (self)-> int :
      '''                             '''
    ...
    def setColorIndex (self, val : int)-> PyDb.ErrorStatus :
      '''                             '''
    ...
    def setPenIndex (self, val : int)-> PyDb.ErrorStatus :
      '''                             '''
    ...
    def setRGB (self, red : int, green : int, blue : int)-> PyDb.ErrorStatus :
      '''                             '''
    ...

class ColorMethod(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kByACI (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kByBlock (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kByColor (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kByLayer (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kByPen (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kForeground (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLayerFrozen (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLayerOff (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class Core(object):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...

    @staticmethod
    def activeDatabaseArray ()-> list :
      '''                             '''
    ...

    @staticmethod
    def angToF (value:str,unit:int)-> float :
      '''                             '''
    ...

    @staticmethod
    def angToS (value:float,unit:int,prec:int)-> str :
      '''                             '''
    ...

    @staticmethod
    def assignGelibCurveToAcDbCurve (geCurve:PyGe.Curve3d,dbCurve:PyDb.Curve,norm: PyGe.Vector3d=PyGe.Vector3d.kZAxis,tol:PyGe.Tol='tol')-> None :
      '''                             '''
    ...

    @staticmethod
    def attachPointCloudExEntity (path: str,pos: PyGe.Point3d,scale: float,rotation: float,db: PyDb.Database)-> PyDb.ObjectId :
      '''                             '''
    ...

    @staticmethod
    def attachXref (db: PyDb.Database,fname: str,blkname: str)-> PyDb.ObjectId :
      '''                             '''
    ...

    @staticmethod
    def bindXrefs (db: PyDb.Database,ids: list[PyDb.ObjectId],bInsertBind: bool,bAllowUnresolved: bool=False,bequite: bool=True)-> None :
      '''                             '''
    ...

    @staticmethod
    def canonicalToSystemRange (units: int,val: str)-> str :
      '''                             '''
    ...

    @staticmethod
    def clearSetupForLayouts (ctxhandle: int)-> None :
      '''                             '''
    ...

    @staticmethod
    def convertAcDbCurveToGelibCurve (geCurve:PyGe.Curve2d,tol:PyGe.Tol='tol')-> PyGe.Curve3d :
      '''                             '''
    ...

    @staticmethod
    def convertGelibCurveToAcDbCurve (geCurve:PyGe.Curve3d,norm:PyGe.Vector3d=PyGe.Vector3d.kZAxis,tol:PyGe.Tol='tol')-> PyDb.Curve :
      '''                             '''
    ...

    @staticmethod
    def createViewByViewport (db: PyDb.Database,vpid: PyDb.ObjectId,name: str,cat: str,labelblock: PyDb.ObjectId)-> PyDb.ObjectId :
      '''                             '''
    ...

    @staticmethod
    def detachXref (db: PyDb.Database,xrefid: PyDb.ObjectId)-> None :
      '''                             '''
    ...

    @staticmethod
    def dictAdd (dictname: PyDb.ObjectId,symname: str,newid: PyDb.ObjectId)-> bool :
      '''                             '''
    ...

    @staticmethod
    def dictNext (dictname: PyDb.ObjectId,rewind: int)-> list :
      '''                             '''
    ...

    @staticmethod
    def dictRemove (id: PyDb.ObjectId,name: str)-> bool :
      '''                             '''
    ...

    @staticmethod
    def dictRename (id: PyDb.ObjectId,name: str,newname: str)-> bool :
      '''                             '''
    ...

    @staticmethod
    def dictSearch (id: PyDb.ObjectId,name: str,next: int)-> list :
      '''                             '''
    ...

    @staticmethod
    def disToF (val: str,unit: int)-> float :
      '''                             '''
    ...

    @staticmethod
    def displayPreviewFromDwg (name: str,handle: int)-> bool :
      '''                             '''
    ...

    @staticmethod
    def doSetupForLayouts (db: PyDb.Database)-> int :
      '''                             '''
    ...

    @staticmethod
    def dwkFileExists (name: str)-> bool :
      '''                             '''
    ...

    @staticmethod
    def dxfOutAs2000 (db: PyDb.Database,name: str,precision: int)-> None :
      '''                             '''
    ...

    @staticmethod
    def dxfOutAs2004 (db: PyDb.Database,name: str,precision: int)-> None :
      '''                             '''
    ...

    @staticmethod
    def dxfOutAsR12 (db: PyDb.Database,name: str,precision: int)-> None :
      '''                             '''
    ...

    @staticmethod
    def ecs2Wcs (p: PyGe.Point3d|PyGe.Vector3d,normal: PyGe.Vector3d,qout: PyGe.Point3d|PyGe.Vector3d)-> bool :
      '''                             '''
    ...

    @staticmethod
    def entDel (id : PyDb.ObjectId)-> bool :
      '''                             '''
    ...

    @staticmethod
    def entGet (id : PyDb.ObjectId)-> list :
      '''                             '''
    ...

    @staticmethod
    def entGetX (id : PyDb.ObjectId,xdata: list)-> list :
      '''                             '''
    ...

    @staticmethod
    def entLast ()-> PyDb.ObjectId :
      '''                             '''
    ...

    @staticmethod
    def entMake (resultBuffer : list)-> bool :
      '''                             '''
    ...

    @staticmethod
    def entMakeX (resultBuffer : list)-> PyDb.ObjectId :
      '''                             '''
    ...

    @staticmethod
    def entMod (resultBuffer : list)-> bool :
      '''                             '''
    ...

    @staticmethod
    def entNext (id : PyDb.ObjectId)-> PyDb.ObjectId :
      '''                             '''
    ...

    @staticmethod
    def entUpd (id : PyDb.ObjectId)-> bool :
      '''                             '''
    ...

    @staticmethod
    def fail (msg: str)-> None :
      '''                             '''
    ...

    @staticmethod
    def findField (val: str,idxfrom: int)-> tuple :
      '''                             '''
    ...

    @staticmethod
    def forceTextAdjust (ids: list[PyDb.ObjectId])-> None :
      '''                             '''
    ...

    @staticmethod
    def getCurUserViewportId (db: PyDb.Database)-> PyDb.ObjectId :
      '''                             '''
    ...

    @staticmethod
    def getCurVportId (db: PyDb.Database)-> PyDb.ObjectId :
      '''                             '''
    ...

    @staticmethod
    def getCurVportTableRecordId (db: PyDb.Database)-> PyDb.ObjectId :
      '''                             '''
    ...

    @staticmethod
    def getDimAssocId (id: PyDb.ObjectId)-> PyDb.ObjectId :
      '''                             '''
    ...

    @staticmethod
    def getDimAssocIds (id: PyDb.ObjectId)-> list :
      '''                             '''
    ...

    @staticmethod
    def getDimStyleId (db: PyDb.Database,name: str,lockname: str)-> PyDb.ObjectId :
      '''                             '''
    ...

    @staticmethod
    def getDynDimStyleId (db: PyDb.Database)-> PyDb.ObjectId :
      '''                             '''
    ...

    @staticmethod
    def getGeoDataObjId (db: PyDb.Database)-> PyDb.ObjectId :
      '''                             '''
    ...

    @staticmethod
    def getMappedFontName (name: str)-> str :
      '''                             '''
    ...

    @staticmethod
    def getProxyInfo (id: PyDb.DbObject)-> tuple :
      '''                             '''
    ...

    @staticmethod
    def getReservedString (reservedType: PyDb.reservedStringEnumType,bGetLocalized: bool)-> str :
      '''                             '''
    ...

    @staticmethod
    def getSummaryInfo (db: PyDb.Database)-> PyDb.DatabaseSummaryInfo :
      '''                             '''
    ...

    @staticmethod
    def getUnitsConversion (ufrom: PyDb.UnitsValue,to: PyDb.UnitsValue)-> float :
      '''                             '''
    ...
    def getViewportVisualStyle (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getViewportVisualStyle() -> ObjectId :

    C++ signature :
        class PyDbObjectId getViewportVisualStyle()'''
    ...

    @staticmethod
    def handEnt (handle: str)-> PyDb.ObjectId :
      '''                             '''
    ...

    @staticmethod
    def hasGeoData (db: PyDb.Database)-> bool :
      '''                             '''
    ...

    @staticmethod
    def inters (from1: PyGe.Point3d,to1: PyGe.Point3d,from2: PyGe.Point3d,to2: PyGe.Point3d,teston: int)-> PyGe.Point3d :
      '''                             '''
    ...

    @staticmethod
    def isEnabledTightExtents ()-> bool :
      '''                             '''
    ...

    @staticmethod
    def isReservedString (val: str,reservedType: PyDb.reservedStringEnumType)-> bool :
      '''                             '''
    ...

    @staticmethod
    def loadLineTypeFile (ltname: str,fname: str,db: PyDb.Database)-> None :
      '''                             '''
    ...

    @staticmethod
    def loadMlineStyleFile (ltname: str,fname: str)-> None :
      '''                             '''
    ...

    @staticmethod
    def namedObjDict ()-> PyDb.ObjectId :
      '''                             '''
    ...

    @staticmethod
    def openDbEntities (ids: list[PyDb.ObjectId],mode: PyDb.OpenMode.kForRead,erased: bool=False)-> list :
      '''                             '''
    ...

    @staticmethod
    def openDbEntity (id: PyDb.ObjectId,mode: PyDb.OpenMode.kForRead,erased: bool=False)-> PyDb.Entity :
      '''                             '''
    ...

    @staticmethod
    def openDbObject (id: PyDb.ObjectId,mode: PyDb.OpenMode.kForRead,erased: bool=False)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def openDbObjects (ids: list[PyDb.ObjectId],mode: PyDb.OpenMode.kForRead,erased: bool=False)-> list :
      '''                             '''
    ...
    def postDimAssoc (self, *args, **kwargs)-> PyDb.ObjectId :
      '''postDimAssoc( (ObjectId)arg1, (DimAssoc)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId postDimAssoc(class PyDbObjectId,class PyDbDimAssoc {lvalue})

postDimAssoc( (ObjectId)arg1, (DimAssoc)arg2, (bool)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId postDimAssoc(class PyDbObjectId,class PyDbDimAssoc {lvalue},bool)'''
    ...

    @staticmethod
    def putSummaryInfo (info: PyDb.DatabaseSummaryInfo,db: PyDb.Database)-> None :
      '''                             '''
    ...
    def queueAnnotationEntitiesForRegen (self, *args, **kwargs)-> None :
      '''queueAnnotationEntitiesForRegen( (Database)arg1) -> None :

    C++ signature :
        void queueAnnotationEntitiesForRegen(class PyDbDatabase {lvalue})'''
    ...

    @staticmethod
    def queueForRegen (ids: list[PyDb.ObjectId])-> int :
      '''                             '''
    ...

    @staticmethod
    def regApp (val: str)-> bool :
      '''                             '''
    ...
    def reloadXrefs (self, *args, **kwargs)-> None :
      '''reloadXrefs( (Core)arg1, (Database)arg2, (list)arg3) -> None :

    C++ signature :
        void reloadXrefs(class DbCore {lvalue},class PyDbDatabase {lvalue},class boost::python::list)

reloadXrefs( (Core)arg1, (Database)arg2, (list)arg3, (bool)arg4) -> None :

    C++ signature :
        void reloadXrefs(class DbCore {lvalue},class PyDbDatabase {lvalue},class boost::python::list,bool)'''
    ...

    @staticmethod
    def resbufTest (resultBuffer: list)-> list :
      '''                             '''
    ...

    @staticmethod
    def rtos (val: float,unit: int,prec: int)-> str :
      '''                             '''
    ...

    @staticmethod
    def setEnableTightExtents (val: bool)-> None :
      '''                             '''
    ...

    @staticmethod
    def snValid (val: str,pipetest: int)-> bool :
      '''                             '''
    ...

    @staticmethod
    def symUtil ()-> PyDb.SymUtilServices :
      '''                             '''
    ...

    @staticmethod
    def tblNext (name: str,rewind: int)-> list :
      '''                             '''
    ...

    @staticmethod
    def tblObjName (tblname: str,sym: str)-> PyDb.ObjectId :
      '''                             '''
    ...

    @staticmethod
    def tblSearch (tblname: str,sym: str,setnext: int)-> list :
      '''                             '''
    ...

    @overload
    @staticmethod
    def textFind (db: PyDb.Database, findString: str)-> list : ...
    @overload
    @staticmethod
    def textFind (db: PyDb.Database, findString: str,replaceString: str,searchOptions: int,ids: list[PyDb.ObjectId])-> list : ...
    @staticmethod
    def textFind (self, *args, **kwargs)-> list :
      '''Overloads:
    - db: PyDb.Database, findString: str
    - db: PyDb.Database, findString: str,replaceString: str,searchOptions: int,ids: list[PyDb.ObjectId]
    '''
    ...

    @staticmethod
    def transactionManager ()-> PyAp.TransactionManager :
      '''                             '''
    ...

    @staticmethod
    def ucs2Wcs (p: PyGe.Point3d|PyGe.Vector3d,qout: PyGe.Point3d|PyGe.Vector3d)-> bool :
      '''                             '''
    ...

    @staticmethod
    def ucsMatrix (db: PyDb.Database)-> PyGe.Matrix3d :
      '''                             '''
    ...

    @staticmethod
    def unloadXrefs (db: PyDb.Database,ids: list[PyDb.ObjectId],bequiet: bool=True)-> None :
      '''                             '''
    ...

    @staticmethod
    def updateDimension (id: PyDb.ObjectId)-> None :
      '''                             '''
    ...

    @staticmethod
    def validateCustomSummaryInfoKey (val: str,info: PyDb.DatabaseSummaryInfo)-> bool :
      '''                             '''
    ...

    @staticmethod
    def wcs2Ecs (p: PyGe.Point3d|PyGe.Vector3d,normal: PyGe.Vector3d,qout: PyGe.Point3d|PyGe.Vector3d)-> bool :
      '''                             '''
    ...

    @staticmethod
    def wcs2Ucs (p: PyGe.Point3d|PyGe.Vector3d,qout: PyGe.Point3d|PyGe.Vector3d)-> bool :
      '''                             '''
    ...

class Curve(Entity):
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode.kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Curve :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Curve :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...

    @staticmethod
    def createFromAcGeCurve (curve: PyGe.Curve3d,normal: PyGe.Vector3d = PyGe.Vector3d.kZAxis,tol: PyGe.Tol = 'default')-> PyDb.Curve :
      '''                             '''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> None :
      '''extend( (Curve)arg1, (float)arg2) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getAcGeCurve (self, tol: PyGe.Tol = 'default')-> PyGe.Curve3d :
      '''                             '''
    ...
    def getArea (self)-> float :
      '''                             '''
    ...
    def getClosestPointTo (self, point3d: PyGe.Point3d, direction: PyGe.Vector3d=None, extend: bool=False)-> PyGe.Point3d :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDistAtParam (self, param: float)-> float :
      '''                             '''
    ...
    def getDistAtPoint (self, point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEndParam (self)-> float :
      '''                             '''
    ...
    def getEndPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self, param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getOffsetCurves (self, dist: float)-> list :
      '''                             '''
    ...
    def getOffsetCurvesGivenPlaneNormal (self, normal: PyGe.Vector3d, dist: float)-> list :
      '''                             '''
    ...
    def getOrthoProjectedCurve (self, plane: PyGe.Plane)-> PyDb.Curve :
      '''                             '''
    ...
    def getParamAtDist (self, dist: float)-> float :
      '''                             '''
    ...
    def getParamAtPoint (self, point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getPointAtDist (self, dist: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getPointAtParam (self, param: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getProjectedCurve (self, plane: PyGe.Plane, projDir: PyGe.Vector3d)-> PyDb.Curve :
      '''                             '''
    ...
    def getSecondDeriv (self, param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getSpline (self)-> PyDb.Spline :
      '''                             '''
    ...
    def getSplitCurves (self, paramsOrPoints: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParam (self, param: float)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParams (self, params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoint (self, point: PyGe.Point3d)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoints (self, points: list)-> list :
      '''                             '''
    ...
    def getStartParam (self)-> float :
      '''                             '''
    ...
    def getStartPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isClosed (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPeriodic (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def reverseCurve (self)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setFromAcGeCurve (self, curve: PyGe.Curve3d, normal: PyGe.Vector3d = PyGe.Vector3d.kZAxis, tol: PyGe.Tol = 'default')-> None :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class Database(PyRx.RxObject):
    def UCSTableId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def __init__ (self, buildDefaultDrawing : bool=True, noDocument: bool=False)-> None :
      '''                             '''
    ...
    def abortDeepClone (self, idmap: PyDb.IdMapping)-> None :
      '''                             '''
    ...
    def addObject (self, object : PyDb.DbObject)-> PyDb.ObjectId :
      '''                             '''
    ...
    def addReactor (self, reactor : PyDb.DatabaseReactor)-> None :
      '''                             '''
    ...
    def addToBlock (self, btrid : PyDb.ObjectId, entity : PyDb.Entity | list[PyDb.Entity])-> PyDb.ObjectId :
      '''                             '''
    ...
    def addToCurrentspace (self, entity : PyDb.Entity | list[PyDb.Entity])-> PyDb.ObjectId :
      '''                             '''
    ...
    def addToModelspace (self, entity : PyDb.Entity | list[PyDb.Entity])-> PyDb.ObjectId :
      '''                             '''
    ...
    def angbase (self)-> float :
      '''                             '''
    ...
    def angdir (self)-> bool :
      '''                             '''
    ...
    def annoAllVisible (self)-> bool :
      '''                             '''
    ...
    def annotativeDwg (self)-> bool :
      '''                             '''
    ...
    def approxNumObjects (self)-> int :
      '''                             '''
    ...
    def attmode (self)-> int :
      '''                             '''
    ...
    def aunits (self)-> int :
      '''                             '''
    ...
    def auprec (self)-> int :
      '''                             '''
    ...
    def blipmode (self)-> bool :
      '''                             '''
    ...
    def blockTableId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def byBlockLinetype (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def byBlockMaterial (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def byLayerLinetype (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def byLayerMaterial (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def cDynDisplayMode (self)-> int :
      '''                             '''
    ...
    def cameraDisplay (self)-> bool :
      '''                             '''
    ...
    def cameraHeight (self)-> float :
      '''                             '''
    ...
    def celtscale (self)-> float :
      '''                             '''
    ...
    def celtype (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def celweight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def chamfera (self)-> float :
      '''                             '''
    ...
    def chamferb (self)-> float :
      '''                             '''
    ...
    def chamferc (self)-> float :
      '''                             '''
    ...
    def chamferd (self)-> float :
      '''                             '''
    ...
    def classDxfName (self, pClass : PyRx.RxClass)-> str :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def clayer (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def closeInput (self, close : bool)-> None :
      '''                             '''
    ...
    def cmaterial (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def cmljust (self)-> int :
      '''                             '''
    ...
    def cmlscale (self)-> float :
      '''                             '''
    ...
    def cmlstyleID (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def colorDictionaryId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def continuousLinetype (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def coords (self)-> int :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def countEmptyObjects (self, flag : int)-> int :
      '''                             '''
    ...
    def countHardReferences (self, ids : list[PyDb.ObjectId])-> int :
      '''                             '''
    ...
    def currentSpaceId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def deepCloneObjects (self, ids:list[PyDb.ObjectId], owner:PyDb.ObjectId, idmap: PyDb.IdMapping, deferXlation:bool=False)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def detailViewStyle (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def detailViewStyleDictionaryId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimAssoc (self)-> int :
      '''                             '''
    ...
    def dimStyleTableId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimapost (self)-> str :
      '''                             '''
    ...
    def dimaso (self)-> bool :
      '''                             '''
    ...
    def dimblk (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimblk1 (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimblk2 (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimfit (self)-> int :
      '''                             '''
    ...
    def dimpost (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimsho (self)-> bool :
      '''                             '''
    ...
    def dimstyle (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimunit (self)-> int :
      '''                             '''
    ...
    def disablePartialOpen (self)-> None :
      '''                             '''
    ...
    def disableUndoRecording (self, disable : bool)-> None :
      '''                             '''
    ...
    def dispSilh (self)-> bool :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def dragVisStyle (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dragmode (self)-> int :
      '''                             '''
    ...
    def drawOrderCtl (self)-> int :
      '''                             '''
    ...
    def dwfframe (self)-> int :
      '''                             '''
    ...
    def dwgFileWasSavedByAutodeskSoftware (self)-> bool :
      '''                             '''
    ...
    def dxfIn (self, filename : str)-> None :
      '''                             '''
    ...
    def dxfOut (self, filename : str, precision : int=16, dwgVer:PyDb.DwgVersion=PyDb.DwgVersion.kDHL_CURRENT,saveThumbnailImage: bool=False)-> None :
      '''                             '''
    ...
    def elevation (self)-> float :
      '''                             '''
    ...
    def eraseEmptyObjects (self, flag : int)-> int :
      '''                             '''
    ...
    def extmax (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def extmin (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def facetres (self)-> float :
      '''                             '''
    ...
    def filletrad (self)-> float :
      '''                             '''
    ...
    def fillmode (self)-> bool :
      '''                             '''
    ...
    def forceWblockDatabaseCopy (self)-> None :
      '''                             '''
    ...
    def geoCoordinateSystemId (self)-> str :
      '''                             '''
    ...
    def geoMarkerVisibility (self)-> bool :
      '''                             '''
    ...
    def get3dDwfPrec (self)-> float :
      '''                             '''
    ...
    def getCePlotStyleNameId (self)-> PyDb.PlotStyleNameType :
      '''                             '''
    ...
    def getDimstyleParentId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFilename (self)-> str :
      '''                             '''
    ...

    @staticmethod
    def getNearestLineWeight (weight : int)-> PyDb.LineWeight :
      '''                             '''
    ...
    def getObjectId (self, createIfNotFound : bool, objHandle : Handle, xRefId : int=0)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getViewportArray (self)-> list :
      '''                             '''
    ...
    def getVisualStyleList (self)-> list :
      '''                             '''
    ...
    def globalMaterial (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def groupDictionaryId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def haloGap (self)-> int :
      '''                             '''
    ...
    def handseed (self)-> PyDb.Handle :
      '''                             '''
    ...
    def hasClass (self, pClass : PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def hideText (self)-> int :
      '''                             '''
    ...
    def hpInherit (self)-> bool :
      '''                             '''
    ...
    def hpOrigin (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def insert (self, blockId: PyDb.ObjectId, pBlockName: str, db:PyDb.Database, preserveSourceDatabase: bool)-> None : ...
    @overload
    def insert (self, blockId: PyDb.ObjectId, pBlockName: str, pDestinationBlockName: str, db:PyDb.Database, preserveSourceDatabase: bool)-> None : ...
    @overload
    def insert (self, xform: PyGe.Matrix3d, db: PyDb.Database, preserveSourceDatabase: bool)-> None : ...
    def insert (self, *args, **kwargs)-> None :
      '''Overloads:
    - blockId: PyDb.ObjectId, pBlockName: str, db:PyDb.Database, preserveSourceDatabase: bool
    - blockId: PyDb.ObjectId, pBlockName: str, pDestinationBlockName: str, db:PyDb.Database, preserveSourceDatabase: bool
    - xform: PyGe.Matrix3d, db: PyDb.Database, preserveSourceDatabase: bool
    '''
    ...
    def insunits (self)-> PyDb.UnitsValue :
      '''                             '''
    ...
    def interfereVpVisStyle (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def intersectColor (self)-> int :
      '''                             '''
    ...
    def intersectDisplay (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAppRegistered (self, pszAppName : str)-> bool :
      '''                             '''
    ...
    def isBeingDestroyed (self)-> bool :
      '''                             '''
    ...
    def isEMR (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def isObjectNonPersistent (id : ObjectId)-> bool :
      '''                             '''
    ...
    def isPartiallyOpened (self)-> bool :
      '''                             '''
    ...
    def isPucsOrthographic (self, orthoView : OrthographicView)-> bool :
      '''                             '''
    ...
    def isUcsOrthographic (self, orthoView : OrthographicView)-> bool :
      '''                             '''
    ...

    @staticmethod
    def isValidLineWeight (weight : int)-> bool :
      '''                             '''
    ...
    def isolines (self)-> int :
      '''                             '''
    ...
    def joinStyle (self)-> PyDb.JoinStyle :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def lastSavedAsMaintenanceVersion (self)-> int :
      '''                             '''
    ...
    def lastSavedAsVersion (self)-> int :
      '''                             '''
    ...
    def latitude (self)-> float :
      '''                             '''
    ...
    def layerEval (self)-> int :
      '''                             '''
    ...
    def layerNotify (self)-> int :
      '''                             '''
    ...
    def layerTableId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def layerZero (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def layoutDictionaryId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lensLength (self)-> float :
      '''                             '''
    ...
    def lightGlyphDisplay (self)-> int :
      '''                             '''
    ...
    def lightingUnits (self)-> int :
      '''                             '''
    ...
    def lightsInBlocks (self)-> bool :
      '''                             '''
    ...
    def limcheck (self)-> bool :
      '''                             '''
    ...
    def limmax (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def limmin (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def lineWeightDisplay (self)-> bool :
      '''                             '''
    ...
    def linetypeTableId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def loadLineTypeFile (self, ltn : str, filename : str)-> None :
      '''                             '''
    ...
    def loftAng1 (self)-> float :
      '''                             '''
    ...
    def loftAng2 (self)-> float :
      '''                             '''
    ...
    def loftMag1 (self)-> float :
      '''                             '''
    ...
    def loftMag2 (self)-> float :
      '''                             '''
    ...
    def loftNormals (self)-> int :
      '''                             '''
    ...
    def loftParam (self)-> int :
      '''                             '''
    ...
    def longitude (self)-> float :
      '''                             '''
    ...
    def ltscale (self)-> float :
      '''                             '''
    ...
    def lunits (self)-> int :
      '''                             '''
    ...
    def luprec (self)-> int :
      '''                             '''
    ...
    def mLStyleDictionaryId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def maintenanceReleaseVersion (self)-> int :
      '''                             '''
    ...

    @staticmethod
    def markObjectNonPersistent (id : ObjectId,value : bool)-> None :
      '''                             '''
    ...
    def materialDictionaryId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def maxactvp (self)-> int :
      '''                             '''
    ...
    def measurement (self)-> PyDb.MeasurementValue :
      '''                             '''
    ...
    def mirrtext (self)-> bool :
      '''                             '''
    ...
    def mleaderStyleDictionaryId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def mleaderscale (self)-> float :
      '''                             '''
    ...
    def mleaderstyle (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def modelSpaceId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def msOleScale (self)-> float :
      '''                             '''
    ...
    def msltscale (self)-> bool :
      '''                             '''
    ...
    def namedObjectsDictionaryId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def needsRecovery (self)-> bool :
      '''                             '''
    ...
    def northDirection (self)-> float :
      '''                             '''
    ...
    def numberOfSaves (self)-> int :
      '''                             '''
    ...
    def objectContextManager (self)-> PyDb.ObjectContextManager :
      '''                             '''
    ...
    def objectIds (self, desc:PyRx.RxClass=PyDb.DbObject)-> list :
      '''                             '''
    ...
    def obscuredColor (self)-> int :
      '''                             '''
    ...
    def obscuredLineType (self)-> int :
      '''                             '''
    ...
    def oleStartUp (self)-> bool :
      '''                             '''
    ...
    def originalFileMaintenanceVersion (self)-> int :
      '''                             '''
    ...
    def originalFileName (self)-> str :
      '''                             '''
    ...
    def originalFileSavedByMaintenanceVersion (self)-> int :
      '''                             '''
    ...
    def originalFileSavedByVersion (self)-> int :
      '''                             '''
    ...
    def originalFileVersion (self)-> int :
      '''                             '''
    ...
    def orthomode (self)-> bool :
      '''                             '''
    ...
    def paperSpaceVportId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def pdfframe (self)-> int :
      '''                             '''
    ...
    def pdmode (self)-> int :
      '''                             '''
    ...
    def pdsize (self)-> float :
      '''                             '''
    ...
    def pextmax (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def pextmin (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def pickstyle (self)-> int :
      '''                             '''
    ...
    def pinsbase (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def plimcheck (self)-> bool :
      '''                             '''
    ...
    def plimmax (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def plimmin (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def plineEllipse (self)-> bool :
      '''                             '''
    ...
    def plinegen (self)-> bool :
      '''                             '''
    ...
    def plinewid (self)-> float :
      '''                             '''
    ...
    def plotSettingsDictionaryId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def plotStyleMode (self)-> bool :
      '''                             '''
    ...
    def plotStyleNameDictionaryId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def previewType (self)-> int :
      '''                             '''
    ...
    def psltscale (self)-> bool :
      '''                             '''
    ...
    def psolHeight (self)-> float :
      '''                             '''
    ...
    def psolWidth (self)-> float :
      '''                             '''
    ...
    def pucsBase (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def pucsname (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def pucsorg (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def pucsxdir (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def pucsydir (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def purge (self, ids: list[PyDb.ObjectId])-> list :
      '''                             '''
    ...
    def qtextmode (self)-> bool :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def readDwgFile (self, fileName: str, mode: DatabaseOpenMode=DatabaseOpenMode.kForReadAndReadShare, bAllowCPConversion:bool=False, password:str='empty')-> None :
      '''                             '''
    ...
    def reclaimMemoryFromErasedObjects (self, ids : list[PyDb.ObjectId])-> None :
      '''                             '''
    ...
    def regAppTableId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def regenmode (self)-> bool :
      '''                             '''
    ...
    def registerApp (self, appName : str)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor : PyDb.DatabaseReactor)-> None :
      '''                             '''
    ...
    def resetTimes (self)-> None :
      '''                             '''
    ...
    def restoreForwardingXrefSymbols (self)-> None :
      '''                             '''
    ...
    def restoreOriginalXrefSymbols (self)-> None :
      '''                             '''
    ...
    def retainOriginalThumbnailBitmap (self)-> bool :
      '''                             '''
    ...
    def saveAs (self, filename: str, bBakAndRename: bool = False, dwgVer: PyDb.DwgVersion = PyDb.DwgVersion.kDHL_CURRENT)-> None :
      '''                             '''
    ...
    def saveproxygraphics (self)-> int :
      '''                             '''
    ...
    def scaleListDictionaryId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def sectionViewStyle (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def sectionViewStyleDictionaryId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def set3dDwfPrec (self, dwfPrec : float)-> None :
      '''                             '''
    ...
    def setAngbase (self, angle : float)-> None :
      '''                             '''
    ...
    def setAngdir (self, dir : bool)-> None :
      '''                             '''
    ...
    def setAnnoAllVisible (self, allvis : bool)-> None :
      '''                             '''
    ...
    def setAttdia (self, val : bool)-> None :
      '''                             '''
    ...
    def setAttmode (self, val : int)-> None :
      '''                             '''
    ...
    def setAttreq (self, val : bool)-> None :
      '''                             '''
    ...
    def setAunits (self, val : int)-> None :
      '''                             '''
    ...
    def setAuprec (self, val : int)-> None :
      '''                             '''
    ...
    def setBlipmode (self, val : bool)-> None :
      '''                             '''
    ...
    def setCDynDisplayMode (self, val : int)-> None :
      '''                             '''
    ...
    def setCameraDisplay (self, val : bool)-> None :
      '''                             '''
    ...
    def setCameraHeight (self, val : float)-> None :
      '''                             '''
    ...
    def setCannoscale (self, val : AnnotationScale)-> None :
      '''                             '''
    ...
    def setCePlotStyleName (self, val : PyDb.PlotStyleNameType, id : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setCecolor (self, val : Color)-> None :
      '''                             '''
    ...
    def setCeltscale (self, val : float)-> None :
      '''                             '''
    ...
    def setCeltype (self, val : ObjectId)-> None :
      '''                             '''
    ...
    def setCelweight (self, val : LineWeight)-> None :
      '''                             '''
    ...
    def setCetransparency (self, val : Transparency)-> None :
      '''                             '''
    ...
    def setChamfera (self, val : float)-> None :
      '''                             '''
    ...
    def setChamferb (self, val : float)-> None :
      '''                             '''
    ...
    def setChamferc (self, val : float)-> None :
      '''                             '''
    ...
    def setChamferd (self, val : float)-> None :
      '''                             '''
    ...
    def setClayer (self, val : ObjectId)-> None :
      '''                             '''
    ...
    def setCmaterial (self, val : ObjectId)-> None :
      '''                             '''
    ...
    def setCmljust (self, val : int)-> None :
      '''                             '''
    ...
    def setCmlscale (self, val : float)-> None :
      '''                             '''
    ...
    def setCmlstyleID (self, val : ObjectId)-> None :
      '''                             '''
    ...
    def setCoords (self, val : int)-> None :
      '''                             '''
    ...
    def setCshadow (self, val : int)-> None :
      '''                             '''
    ...
    def setDelUsedObj (self, val : int)-> None :
      '''                             '''
    ...
    def setDgnframe (self, val : int)-> None :
      '''                             '''
    ...
    def setDimAssoc (self, val : int)-> None :
      '''                             '''
    ...
    def setDimaso (self, val : bool)-> None :
      '''                             '''
    ...
    def setDimfit (self, val : int)-> None :
      '''                             '''
    ...
    def setDimsho (self, val : bool)-> None :
      '''                             '''
    ...
    def setDimstyle (self, val : ObjectId)-> None :
      '''                             '''
    ...
    def setDimstyleData (self, val : PyDb.DimStyleTableRecord | PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimunit (self, val : int)-> None :
      '''                             '''
    ...
    def setDispSilh (self, val : bool)-> None :
      '''                             '''
    ...
    def setDragVisStyle (self, val : ObjectId)-> None :
      '''                             '''
    ...
    def setDragmode (self, val : int)-> None :
      '''                             '''
    ...
    def setDrawOrderCtl (self, val : int)-> None :
      '''                             '''
    ...
    def setDwfframe (self, val : int)-> None :
      '''                             '''
    ...
    def setElevation (self, val : float)-> None :
      '''                             '''
    ...
    def setEndCaps (self, val : EndCaps)-> None :
      '''                             '''
    ...
    def setExtmax (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setExtmin (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setFacetres (self, val : float)-> None :
      '''                             '''
    ...
    def setFilletrad (self, val : float)-> None :
      '''                             '''
    ...
    def setFillmode (self, val : bool)-> None :
      '''                             '''
    ...
    def setFingerprintGuid (self, guid : str)-> None :
      '''                             '''
    ...
    def setFullSaveRequired (self)-> None :
      '''                             '''
    ...
    def setGeoMarkerVisibility (self, val : bool)-> None :
      '''                             '''
    ...
    def setHaloGap (self, val : int)-> None :
      '''                             '''
    ...
    def setHandseed (self, val : Handle)-> None :
      '''                             '''
    ...
    def setHideText (self, val : int)-> None :
      '''                             '''
    ...
    def setHpInherit (self, val : bool)-> None :
      '''                             '''
    ...
    def setHpOrigin (self, val : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setHyperlinkBase (self, val : str)-> None :
      '''                             '''
    ...
    def setIndexctl (self, val : int)-> None :
      '''                             '''
    ...
    def setInsbase (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setInsunits (self, val : UnitsValue)-> None :
      '''                             '''
    ...
    def setInterfereColor (self, val : Color)-> None :
      '''                             '''
    ...
    def setInterfereObjVisStyle (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setInterfereVpVisStyle (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setIntersectColor (self, val : int)-> None :
      '''                             '''
    ...
    def setIntersectDisplay (self, val : int)-> None :
      '''                             '''
    ...
    def setIsolines (self, val : int)-> None :
      '''                             '''
    ...
    def setJoinStyle (self, val : JoinStyle)-> None :
      '''                             '''
    ...
    def setLatitude (self, val : float)-> None :
      '''                             '''
    ...
    def setLayerEval (self, val : int)-> None :
      '''                             '''
    ...
    def setLayerNotify (self, val : int)-> None :
      '''                             '''
    ...
    def setLensLength (self, val : float)-> None :
      '''                             '''
    ...
    def setLightGlyphDisplay (self, val : int)-> None :
      '''                             '''
    ...
    def setLightingUnits (self, val : int)-> None :
      '''                             '''
    ...
    def setLightsInBlocks (self, val : bool)-> None :
      '''                             '''
    ...
    def setLimcheck (self, val : bool)-> None :
      '''                             '''
    ...
    def setLimmax (self, val : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setLimmin (self, val : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setLineWeightDisplay (self, val : bool)-> None :
      '''                             '''
    ...
    def setLoftAng1 (self, val : float)-> None :
      '''                             '''
    ...
    def setLoftAng2 (self, val : float)-> None :
      '''                             '''
    ...
    def setLoftMag1 (self, val : float)-> None :
      '''                             '''
    ...
    def setLoftMag2 (self, val : float)-> None :
      '''                             '''
    ...
    def setLoftNormals (self, val : int)-> None :
      '''                             '''
    ...
    def setLoftParam (self, flags : int)-> None :
      '''                             '''
    ...
    def setLongitude (self, val : float)-> None :
      '''                             '''
    ...
    def setLtscale (self, val : float)-> None :
      '''                             '''
    ...
    def setLunits (self, val : int)-> None :
      '''                             '''
    ...
    def setLuprec (self, val : int)-> None :
      '''                             '''
    ...
    def setMLeaderscale (self, val : float)-> None :
      '''                             '''
    ...
    def setMLeaderstyle (self, val : ObjectId)-> None :
      '''                             '''
    ...
    def setMaxactvp (self, val : int)-> None :
      '''                             '''
    ...
    def setMeasurement (self, val : MeasurementValue)-> None :
      '''                             '''
    ...
    def setMirrtext (self, val : bool)-> None :
      '''                             '''
    ...
    def setMsOleScale (self, val : float)-> None :
      '''                             '''
    ...
    def setMsltscale (self, val : bool)-> None :
      '''                             '''
    ...
    def setNorthDirection (self, val : float)-> None :
      '''                             '''
    ...
    def setObscuredColor (self, val : int)-> None :
      '''                             '''
    ...
    def setObscuredLineType (self, val : int)-> None :
      '''                             '''
    ...
    def setOleStartUp (self, val : bool)-> None :
      '''                             '''
    ...
    def setOrthomode (self, val : bool)-> None :
      '''                             '''
    ...
    def setPdfframe (self, val : int)-> None :
      '''                             '''
    ...
    def setPdmode (self, val : int)-> None :
      '''                             '''
    ...
    def setPdsize (self, val : float)-> None :
      '''                             '''
    ...
    def setPelevation (self, val : float)-> None :
      '''                             '''
    ...
    def setPextmax (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPextmin (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPickstyle (self, val : int)-> None :
      '''                             '''
    ...
    def setPinsbase (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPlimcheck (self, val : bool)-> None :
      '''                             '''
    ...
    def setPlimmax (self, val : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setPlimmin (self, val : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setPlineEllipse (self, val : bool)-> None :
      '''                             '''
    ...
    def setPlinegen (self, val : bool)-> None :
      '''                             '''
    ...
    def setPlinewid (self, val : float)-> None :
      '''                             '''
    ...
    def setPreviewType (self, val : int)-> None :
      '''                             '''
    ...
    def setProjectName (self, val : str)-> None :
      '''                             '''
    ...
    def setPsltscale (self, val : bool)-> None :
      '''                             '''
    ...
    def setPsolHeight (self, val : float)-> None :
      '''                             '''
    ...
    def setPsolWidth (self, val : float)-> None :
      '''                             '''
    ...
    def setPucs (self, ucsOrigin : PyGe.Point3d, ucsXDir : PyGe.Vector3d, ucsYDir : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setPucsBase (self, ucsid : ObjectId)-> None :
      '''                             '''
    ...
    def setPucsname (self, ucsrec : ObjectId)-> None :
      '''                             '''
    ...
    def setQtextmode (self, val : bool)-> None :
      '''                             '''
    ...
    def setRealWorldScale (self, val : float)-> None :
      '''                             '''
    ...
    def setRegenmode (self, val : bool)-> None :
      '''                             '''
    ...
    def setRetainOriginalThumbnailBitmap (self, val : bool)-> None :
      '''                             '''
    ...
    def setSaveproxygraphics (self, val : int)-> None :
      '''                             '''
    ...
    def setSectionViewStyle (self, val : ObjectId)-> None :
      '''                             '''
    ...
    def setShadedge (self, val : int)-> None :
      '''                             '''
    ...
    def setShadedif (self, val : int)-> None :
      '''                             '''
    ...
    def setShadowPlaneLocation (self, val : float)-> None :
      '''                             '''
    ...
    def setShowHist (self, val : int)-> None :
      '''                             '''
    ...
    def setSketchinc (self, val : float)-> None :
      '''                             '''
    ...
    def setSkpoly (self, val : bool)-> None :
      '''                             '''
    ...
    def setSolidHist (self, val : int)-> None :
      '''                             '''
    ...
    def setSortEnts (self, val : int)-> None :
      '''                             '''
    ...
    def setSplframe (self, val : bool)-> None :
      '''                             '''
    ...
    def setSplinesegs (self, val : int)-> None :
      '''                             '''
    ...
    def setSplinetype (self, val : int)-> None :
      '''                             '''
    ...
    def setStepSize (self, val : float)-> None :
      '''                             '''
    ...
    def setStepsPerSec (self, val : float)-> None :
      '''                             '''
    ...
    def setStyleSheet (self, val : str)-> None :
      '''                             '''
    ...
    def setSurftab1 (self, val : int)-> None :
      '''                             '''
    ...
    def setSurftab2 (self, val : int)-> None :
      '''                             '''
    ...
    def setSurftype (self, val : int)-> None :
      '''                             '''
    ...
    def setSurfu (self, val : int)-> None :
      '''                             '''
    ...
    def setSurfv (self, val : int)-> None :
      '''                             '''
    ...
    def setTStackAlign (self, val : int)-> None :
      '''                             '''
    ...
    def setTStackSize (self, val : int)-> None :
      '''                             '''
    ...
    def setTablestyle (self, val : ObjectId)-> None :
      '''                             '''
    ...
    def setTextsize (self, val : float)-> None :
      '''                             '''
    ...
    def setTextstyle (self, val : ObjectId)-> None :
      '''                             '''
    ...
    def setThickness (self, val : float)-> None :
      '''                             '''
    ...
    def setTilemode (self, val : bool)-> None :
      '''                             '''
    ...
    def setTimeZone (self, val : TimeZone)-> None :
      '''                             '''
    ...
    def setTimeZoneAsUtcOffset (self, val : float)-> None :
      '''                             '''
    ...
    def setTracewid (self, val : float)-> None :
      '''                             '''
    ...
    def setTreedepth (self, val : int)-> None :
      '''                             '''
    ...
    def setUcs (self, ucsOrigin : PyGe.Point3d, ucsXDir : PyGe.Vector3d, ucsYDir : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setUcsBase (self, ucsid : ObjectId)-> None :
      '''                             '''
    ...
    def setUcsname (self, ucsrecId : ObjectId)-> None :
      '''                             '''
    ...
    def setUnitmode (self, val : int)-> None :
      '''                             '''
    ...
    def setUpdateThumbnail (self, val : int)-> None :
      '''                             '''
    ...
    def setUseri1 (self, val : int)-> None :
      '''                             '''
    ...
    def setUseri2 (self, val : int)-> None :
      '''                             '''
    ...
    def setUseri3 (self, val : int)-> None :
      '''                             '''
    ...
    def setUseri4 (self, val : int)-> None :
      '''                             '''
    ...
    def setUseri5 (self, val : int)-> None :
      '''                             '''
    ...
    def setUserr1 (self, val : float)-> None :
      '''                             '''
    ...
    def setUserr2 (self, val : float)-> None :
      '''                             '''
    ...
    def setUserr3 (self, val : float)-> None :
      '''                             '''
    ...
    def setUserr4 (self, val : float)-> None :
      '''                             '''
    ...
    def setUserr5 (self, val : float)-> None :
      '''                             '''
    ...
    def setUsrtimer (self, val : bool)-> None :
      '''                             '''
    ...
    def setVersionGuid (self, val : str)-> None :
      '''                             '''
    ...
    def setViewportScaleDefault (self, val : float)-> None :
      '''                             '''
    ...
    def setVisretain (self, val : bool)-> None :
      '''                             '''
    ...
    def setWorldPucsBaseOrigin (self, ucsOrigin : PyGe.Point3d, orthoView : OrthographicView)-> None :
      '''                             '''
    ...
    def setWorldUcsBaseOrigin (self, ucsOrigin : PyGe.Point3d, orthoView : OrthographicView)-> None :
      '''                             '''
    ...
    def setWorldview (self, val : bool)-> None :
      '''                             '''
    ...
    def setXclipFrame (self, val : int)-> None :
      '''                             '''
    ...
    def setXrefEditEnabled (self, val : bool)-> None :
      '''                             '''
    ...
    def shadedge (self)-> int :
      '''                             '''
    ...
    def shadedif (self)-> int :
      '''                             '''
    ...
    def shadowPlaneLocation (self)-> float :
      '''                             '''
    ...
    def showHist (self)-> int :
      '''                             '''
    ...
    def sketchinc (self)-> float :
      '''                             '''
    ...
    def skpoly (self)-> bool :
      '''                             '''
    ...
    def solidHist (self)-> int :
      '''                             '''
    ...
    def sortEnts (self)-> int :
      '''                             '''
    ...
    def splframe (self)-> bool :
      '''                             '''
    ...
    def splinesegs (self)-> int :
      '''                             '''
    ...
    def splinetype (self)-> int :
      '''                             '''
    ...
    def stepSize (self)-> float :
      '''                             '''
    ...
    def stepsPerSec (self)-> float :
      '''                             '''
    ...
    def surftab1 (self)-> int :
      '''                             '''
    ...
    def surftab2 (self)-> int :
      '''                             '''
    ...
    def surftype (self)-> int :
      '''                             '''
    ...
    def surfu (self)-> int :
      '''                             '''
    ...
    def surfv (self)-> int :
      '''                             '''
    ...
    def tableStyleDictionaryId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def tablestyle (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def tdcreate (self)-> PyDb.Date :
      '''                             '''
    ...
    def tdindwg (self)-> PyDb.Date :
      '''                             '''
    ...
    def tducreate (self)-> PyDb.Date :
      '''                             '''
    ...
    def tdupdate (self)-> PyDb.Date :
      '''                             '''
    ...
    def tdusrtimer (self)-> PyDb.Date :
      '''                             '''
    ...
    def tduupdate (self)-> PyDb.Date :
      '''                             '''
    ...
    def textStyleTableId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def textsize (self)-> float :
      '''                             '''
    ...
    def textstyle (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def thickness (self)-> float :
      '''                             '''
    ...
    def tileModeLightSynch (self)-> int :
      '''                             '''
    ...
    def tilemode (self)-> bool :
      '''                             '''
    ...
    def timeZone (self)-> PyDb.TimeZone :
      '''                             '''
    ...
    def tracewid (self)-> float :
      '''                             '''
    ...
    def transactionManager (self)-> PyAp.TransactionManager :
      '''                             '''
    ...
    def treedepth (self)-> int :
      '''                             '''
    ...
    def tryGetObjectId (self, createIfNotFound : bool, objHandle : Handle, xRefId : int=0)-> PyDb.ObjectId :
      '''                             '''
    ...
    def tstackalign (self)-> int :
      '''                             '''
    ...
    def tstacksize (self)-> int :
      '''                             '''
    ...
    def ucsBase (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ucsname (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ucsorg (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def ucsxdir (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def ucsydir (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def undoRecording (self)-> bool :
      '''                             '''
    ...
    def unitmode (self)-> int :
      '''                             '''
    ...
    def updateDataLink (self, nDir : UpdateDirection, opt : UpdateOption)-> None :
      '''                             '''
    ...
    def updateExt (self, val : bool)-> None :
      '''                             '''
    ...
    def updateThumbnail (self)-> int :
      '''                             '''
    ...
    def useri1 (self)-> int :
      '''                             '''
    ...
    def useri2 (self)-> int :
      '''                             '''
    ...
    def useri3 (self)-> int :
      '''                             '''
    ...
    def useri4 (self)-> int :
      '''                             '''
    ...
    def useri5 (self)-> int :
      '''                             '''
    ...
    def userr1 (self)-> float :
      '''                             '''
    ...
    def userr2 (self)-> float :
      '''                             '''
    ...
    def userr3 (self)-> float :
      '''                             '''
    ...
    def userr4 (self)-> float :
      '''                             '''
    ...
    def userr5 (self)-> float :
      '''                             '''
    ...
    def usrtimer (self)-> bool :
      '''                             '''
    ...
    def viewTableId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def viewportScaleDefault (self)-> float :
      '''                             '''
    ...
    def viewportTableId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def visretain (self)-> bool :
      '''                             '''
    ...
    def visualStyleDictionaryId (self)-> PyDb.ObjectId :
      '''                             '''
    ...

    @overload
    def wblock (self, blockId : PyDb.ObjectId)-> None : ...
    @overload
    def wblock (self, blockIds : list[PyDb.ObjectId], basePoint : PyGe.Point3d)-> None : ...
    @overload
    def wblock (self, outputDb : PyDb.Database, ids : list[PyDb.ObjectId], basePoint : PyGe.Point3d , drc : PyDb.DuplicateRecordCloning)-> None : ...
    def wblock (self, *args, **kwargs)-> None :
      '''Overloads:
    - blockId : PyDb.ObjectId
    - blockIds : list[PyDb.ObjectId], basePoint : PyGe.Point3d
    - outputDb : PyDb.Database, ids : list[PyDb.ObjectId], basePoint : PyGe.Point3d , drc : PyDb.DuplicateRecordCloning
    '''
    ...
    def wblockCloneObjects (self, ids:list[PyDb.ObjectId], owner:PyDb.ObjectId, idmap: PyDb.IdMapping, drc: PyDb.DuplicateRecordCloning, deferXlation:bool=False)-> None :
      '''                             '''
    ...
    def worldPucsBaseOrigin (self, view : OrthographicView)-> PyGe.Point3d :
      '''                             '''
    ...
    def worldUcsBaseOrigin (self, view : OrthographicView)-> PyGe.Point3d :
      '''                             '''
    ...
    def worldview (self)-> bool :
      '''                             '''
    ...
    def xclipFrame (self)-> int :
      '''                             '''
    ...
    def xrefBlockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def xrefEditEnabled (self)-> bool :
      '''                             '''
    ...

class DatabaseOpenMode(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kForReadAndAllShare (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kForReadAndReadShare (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kForReadAndWriteNoShare (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTryForReadShare (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class DatabaseReactor(PyRx.RxObject):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def goodbye (self, db: PyDb.Database)-> None :
      '''                             '''
    ...
    def headerSysVarChanged (self, db: PyDb.Database, name: str, success: bool)-> None :
      '''                             '''
    ...
    def headerSysVarWillChange (self, db: PyDb.Database, name: str)-> None :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def objectAppended (self, db: PyDb.Database, obj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def objectErased (self, db: PyDb.Database, obj: PyDb.DbObject, erased: bool)-> None :
      '''                             '''
    ...
    def objectModified (self, db: PyDb.Database, obj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def objectOpenedForModify (self, db: PyDb.Database, obj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def objectReAppended (self, db: PyDb.Database, obj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def objectUnAppended (self, db: PyDb.Database, obj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def proxyResurrectionCompleted (self, db: PyDb.Database, name: str, ids: list[PyDb.ObjectId])-> None :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...

class DatabaseSummaryInfo(PyRx.RxObject):
    def __init__ (self, *args, **kwargs)-> None :
      '''Raises an exception
This class cannot be instantiated from Python'''
    ...
    def addCustomSummaryInfo (self, key: str, val: str)-> None :
      '''                             '''
    ...
    def asDict (self)-> dict :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...

    @overload
    def deleteCustomSummaryInfo (self, index: int)-> None : ...
    @overload
    def deleteCustomSummaryInfo (self, key: str)-> None : ...
    def deleteCustomSummaryInfo (self, *args, **kwargs)-> None :
      '''Overloads:
    - index: int
    - key: str
    '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def getAuthor (self)-> str :
      '''                             '''
    ...
    def getComments (self)-> str :
      '''                             '''
    ...

    @overload
    def getCustomSummaryInfo (self, index: int)-> tuple : ...
    @overload
    def getCustomSummaryInfo (self, key: str)-> tuple : ...
    def getCustomSummaryInfo (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - index: int
    - key: str
    '''
    ...
    def getHyperlinkBase (self)-> str :
      '''                             '''
    ...
    def getKeywords (self)-> str :
      '''                             '''
    ...
    def getLastSavedBy (self)-> str :
      '''                             '''
    ...
    def getRevisionNumber (self)-> str :
      '''                             '''
    ...
    def getSubject (self)-> str :
      '''                             '''
    ...
    def getTitle (self)-> str :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def numCustomInfo (self)-> int :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def setAuthor (self, val: str)-> None :
      '''                             '''
    ...
    def setComments (self, val: str)-> None :
      '''                             '''
    ...
    def setCustomSummaryFromDict (self, keyValues: dict)-> None :
      '''                             '''
    ...

    @overload
    def setCustomSummaryInfo (self, customInfoKey: str, value: str)-> None : ...
    @overload
    def setCustomSummaryInfo (self, index: int, key: str, value: str)-> None : ...
    def setCustomSummaryInfo (self, *args, **kwargs)-> None :
      '''Overloads:
    - customInfoKey: str, value: str
    - index: int, key: str, value: str
    '''
    ...
    def setHyperlinkBase (self, val: str)-> None :
      '''                             '''
    ...
    def setKeywords (self, keywordlist: str)-> None :
      '''                             '''
    ...
    def setLastSavedBy (self, val: str)-> None :
      '''                             '''
    ...
    def setRevisionNumber (self, val: str)-> None :
      '''                             '''
    ...
    def setSubject (self, val: str)-> None :
      '''                             '''
    ...
    def setTitle (self, val: str)-> None :
      '''                             '''
    ...

class Date(object):
    def __init__ (self)-> None :
      '''                             '''
    ...

    @staticmethod
    def className ()-> object :
      '''                             '''
    ...
    def day (self)-> int :
      '''                             '''
    ...
    def getDate (self)-> tuple :
      '''                             '''
    ...
    def getLocalDisplayString (self)-> str :
      '''                             '''
    ...
    def getLocalTime (self)-> None :
      '''                             '''
    ...
    def getTime (self)-> tuple :
      '''                             '''
    ...
    def getUniversalTime (self)-> None :
      '''                             '''
    ...
    def hour (self)-> int :
      '''                             '''
    ...
    def julianDay (self)-> int :
      '''                             '''
    ...
    def julianFraction (self)-> float :
      '''                             '''
    ...
    def localToUniversal (self)-> None :
      '''                             '''
    ...
    def microsecond (self)-> int :
      '''                             '''
    ...
    def millisecond (self)-> int :
      '''                             '''
    ...
    def minute (self)-> int :
      '''                             '''
    ...
    def month (self)-> int :
      '''                             '''
    ...
    def msecsPastMidnight (self)-> int :
      '''                             '''
    ...
    def second (self)-> int :
      '''                             '''
    ...
    def setDate (self, month : int, day : int, year : int)-> None :
      '''                             '''
    ...
    def setDay (self, day : int)-> None :
      '''                             '''
    ...
    def setHour (self, hour : int)-> None :
      '''                             '''
    ...
    def setJulianDate (self, julianDay : int, msec : int)-> None :
      '''                             '''
    ...
    def setJulianDay (self, day : int)-> None :
      '''                             '''
    ...
    def setJulianFraction (self, val : float)-> None :
      '''                             '''
    ...
    def setMillisecond (self, msec : int)-> None :
      '''                             '''
    ...
    def setMinute (self, min : int)-> None :
      '''                             '''
    ...
    def setMonth (self, month : int)-> None :
      '''                             '''
    ...
    def setMsecsPastMidnight (self, msec : int)-> None :
      '''                             '''
    ...
    def setSecond (self, sec : int)-> None :
      '''                             '''
    ...
    def setTime (self, hour : int, min : int, sec : int, msec : int)-> None :
      '''                             '''
    ...
    def setToZero (self)-> None :
      '''                             '''
    ...
    def setYear (self, year : int)-> None :
      '''                             '''
    ...
    def timestamp (self)-> float :
      '''                             '''
    ...
    def universalToLocal (self)-> None :
      '''                             '''
    ...
    def year (self)-> int :
      '''                             '''
    ...

class DbObject(PyGi.Drawable):
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode.kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.DbObject :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class DbObjectOverrule(PyRx.Overrule):
    def __init__ (self)-> None :
      '''                             '''
    ...

    @staticmethod
    def addOverrule (rxClass: PyRx.RxClass,overrule: PyRx.Overrule)-> None :
      '''                             '''
    ...

    @staticmethod
    def addOverruleLast (rxClass: PyRx.RxClass,overrule: PyRx.Overrule,addLast: bool)-> None :
      '''                             '''
    ...
    def baseCancel (self, object: PyDb.DbObject)-> PyDb.ErrorStatus :
      '''                             '''
    ...
    def baseClose (self, object: PyDb.DbObject)-> PyDb.ErrorStatus :
      '''                             '''
    ...
    def baseDeepClone (self, subject: PyDb.DbObject, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary : bool)-> PyDb.DbObject :
      '''                             '''
    ...
    def baseErase (self, object: PyDb.DbObject, erased : bool)-> PyDb.ErrorStatus :
      '''                             '''
    ...
    def baseOpen (self, object: PyDb.DbObject, mode: OpenMode)-> PyDb.ErrorStatus :
      '''                             '''
    ...
    def baseWblockClone (self, subject: PyDb.DbObject, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary : bool)-> PyDb.DbObject :
      '''                             '''
    ...
    def cancel (self, object: PyDb.DbObject)-> PyDb.ErrorStatus :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def close (self, object: PyDb.DbObject)-> PyDb.ErrorStatus :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def deepClone (self, subject: PyDb.DbObject, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary : bool)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def erase (self, object: PyDb.DbObject, erased : bool)-> PyDb.ErrorStatus :
      '''                             '''
    ...

    @staticmethod
    def hasOverrule (subject: PyRx.RxObject,rxClass: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isApplicable (self, object: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isOverruling (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def open (self, object: PyDb.DbObject, mode: OpenMode)-> PyDb.ErrorStatus :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...

    @staticmethod
    def removeOverrule (rxClass: PyRx.RxClass,overrule: PyRx.Overrule)-> None :
      '''                             '''
    ...
    def setIsOverruling (self, flag: bool)-> None :
      '''                             '''
    ...
    def wblockClone (self, subject: PyDb.DbObject, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary : bool)-> PyDb.DbObject :
      '''                             '''
    ...

class DbObjectReactor(PyRx.RxObject):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def cancelled (self, obj: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copied (self, obj: PyDb.DbObject, newObj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def erased (self, obj: PyDb.DbObject, flag: bool)-> None :
      '''                             '''
    ...
    def goodbye (self, obj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def modified (self, obj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def modifiedXData (self, obj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def modifyUndone (self, obj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def objectClosed (self, obj: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def openedForModify (self, obj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def reappended (self, obj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def subObjModified (self, obj: PyDb.DbObject, subObj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def unappended (self, obj: PyDb.DbObject)-> None :
      '''                             '''
    ...

class DeepCloneType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kDcBlock (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDcCopy (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDcExplode (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDcInsert (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDcInsertCopy (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDcObjects (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDcSymTableMerge (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDcWblkObjects (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDcWblock (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDcXrefBind (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDcXrefInsert (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class DiametricDimension(Dimension):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, chordPoint: PyGe.point3d, farChordPoint: PyGe.Point3d, leaderLength: float)-> None : ...
    @overload
    def __init__ (self, chordPoint: PyGe.point3d, farChordPoint: PyGe.Point3d, leaderLength: float, dimText: str)-> None : ...
    @overload
    def __init__ (self, chordPoint: PyGe.point3d, farChordPoint: PyGe.Point3d, leaderLength: float, dimText: str, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - chordPoint: PyGe.point3d, farChordPoint: PyGe.Point3d, leaderLength: float
    - chordPoint: PyGe.point3d, farChordPoint: PyGe.Point3d, leaderLength: float, dimText: str
    - chordPoint: PyGe.point3d, farChordPoint: PyGe.Point3d, leaderLength: float, dimText: str, id: PyDb.ObjectId
    - id: PyDb.ObjectId
    - id: PyDb.ObjectId, mode: PyDb.OpenMode
    - id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool
    '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def altSuppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def altSuppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def altSuppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def altSuppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def alternatePrefix (self)-> str :
      '''                             '''
    ...
    def alternateSuffix (self)-> str :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.DiametricDimension :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...
    def centerMarkSize (self)-> float :
      '''                             '''
    ...
    def chordPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.DiametricDimension :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dimBlockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimBlockPosition (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def dimExt1Linetype (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimExt2Linetype (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimLineLinetype (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimensionStyle (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimensionText (self)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevation (self)-> float :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extArcEndAngle (self)-> float :
      '''                             '''
    ...
    def extArcStartAngle (self)-> float :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def farChordPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def fieldFromMText (self, ref : PyDb.MText)-> None :
      '''                             '''
    ...
    def fieldToMText (self, ref : PyDb.MText)-> None :
      '''                             '''
    ...

    @overload
    def formatMeasurement (self, measurement: float)-> str : ...
    @overload
    def formatMeasurement (self, measurement: float, dimensionText: str)-> str : ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''Overloads:
    - measurement: float
    - measurement: float, dimensionText: str
    '''
    ...
    def generateLayout (self)-> None :
      '''                             '''
    ...
    def getArrowFirstIsFlipped (self)-> bool :
      '''                             '''
    ...
    def getArrowSecondIsFlipped (self)-> bool :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDimstyleData (self)-> PyDb.DimStyleTableRecord :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def horizontalRotation (self)-> float :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def inspection (self)-> bool :
      '''                             '''
    ...
    def inspectionFrame (self)-> int :
      '''                             '''
    ...
    def inspectionLabel (self)-> str :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self)-> bool :
      '''                             '''
    ...
    def isConstraintObject (self)-> tuple :
      '''                             '''
    ...
    def isDynamicDimension (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def leaderLength (self)-> float :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def measurement (self)-> float :
      '''                             '''
    ...
    def normal (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def prefix (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recomputeDimBlock (self, force : bool=False)-> None :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def removeTextField (self)-> None :
      '''                             '''
    ...
    def resetTextDefinedSize (self)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAltSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setAlternatePrefix (self, val : str)-> None :
      '''                             '''
    ...
    def setAlternateSuffix (self, val : str)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setArrowFirstIsFlipped (self, val : bool)-> None :
      '''                             '''
    ...
    def setArrowSecondIsFlipped (self, val : bool)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setChordPoint (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setConstraintDynamic (self, val : bool)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setDimBlockId (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimBlockPosition (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setDimExt1Linetype (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimExt2Linetype (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimLineLinetype (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimensionStyle (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimensionText (self, val : str)-> None :
      '''                             '''
    ...

    @overload
    def setDimstyleData (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def setDimstyleData (self, rec: PyDb.DimStyleTableRecord)-> None : ...
    def setDimstyleData (self, *args, **kwargs)-> None :
      '''Overloads:
    - id: PyDb.ObjectId
    - rec: PyDb.DimStyleTableRecord
    '''
    ...
    def setDynamicDimension (self, val : bool)-> None :
      '''                             '''
    ...
    def setElevation (self, val : float)-> None :
      '''                             '''
    ...
    def setExtArcEndAngle (self, val : float)-> None :
      '''                             '''
    ...
    def setExtArcStartAngle (self, val : float)-> None :
      '''                             '''
    ...
    def setFarChordPoint (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setHorizontalRefTextRotation (self, val : bool)-> None :
      '''                             '''
    ...
    def setHorizontalRotation (self, val : float)-> None :
      '''                             '''
    ...
    def setInspection (self, val : bool)-> None :
      '''                             '''
    ...
    def setInspectionFrame (self, val : int)-> None :
      '''                             '''
    ...
    def setInspectionLabel (self, val : str)-> None :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLeaderLength (self, val : float)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self, val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, val : str)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setShouldParticipateInOPM (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuffix (self, val : str)-> None :
      '''                             '''
    ...
    def setSuppressAngularTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setTextAttachment (self, val : PyDb.MTextAttachmentPoint)-> None :
      '''                             '''
    ...
    def setTextDefinedSize (self, width : float, height : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingFactor (self, val : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingStyle (self, val : PyDb.LineSpacingStyle)-> None :
      '''                             '''
    ...
    def setTextPosition (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setTextRotation (self, val : float)-> None :
      '''                             '''
    ...
    def setToleranceSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setUsingDefaultTextPosition (self, val : bool)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def shouldParticipateInOPM (self)-> bool :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def suffix (self)-> str :
      '''                             '''
    ...
    def suppressAngularLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressAngularTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def suppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAttachment (self)-> PyDb.MTextAttachmentPoint :
      '''                             '''
    ...
    def textDefinedSize (self)-> tuple :
      '''                             '''
    ...
    def textLineSpacingFactor (self)-> float :
      '''                             '''
    ...
    def textLineSpacingStyle (self)-> PyDb.LineSpacingStyle :
      '''                             '''
    ...
    def textPosition (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def textRotation (self)-> float :
      '''                             '''
    ...
    def toleranceSuppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def toleranceSuppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def useDefaultTextPosition (self)-> None :
      '''                             '''
    ...
    def useSetTextPosition (self)-> None :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class DictUtil(object):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def dictionaryGetAt (self, *args, **kwargs)-> PyDb.ObjectId :
      '''dictionaryGetAt( (str)arg1, (ObjectId)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId dictionaryGetAt(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def dictionaryNameAt (self, *args, **kwargs)-> str :
      '''dictionaryNameAt( (ObjectId)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dictionaryNameAt(class PyDbObjectId)

dictionaryNameAt( (ObjectId)arg1, (ObjectId)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dictionaryNameAt(class PyDbObjectId,class PyDbObjectId)'''
    ...
    def getColorName (self, *args, **kwargs)-> str :
      '''getColorName( (ObjectId)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getColorName(class PyDbObjectId)'''
    ...
    def getGroupId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getGroupId( (str)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getGroupId(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def getGroupName (self, *args, **kwargs)-> str :
      '''getGroupName( (ObjectId)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getGroupName(class PyDbObjectId)'''
    ...
    def getLayoutId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getLayoutId( (str)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getLayoutId(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def getLayoutName (self, *args, **kwargs)-> str :
      '''getLayoutName( (ObjectId)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getLayoutName(class PyDbObjectId)'''
    ...
    def getMLStyleId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getMLStyleId( (str)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getMLStyleId(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def getMLStyleName (self, *args, **kwargs)-> str :
      '''getMLStyleName( (ObjectId)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getMLStyleName(class PyDbObjectId)'''
    ...
    def getMaterialId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getMaterialId( (str)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getMaterialId(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def getMaterialName (self, *args, **kwargs)-> str :
      '''getMaterialName( (ObjectId)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getMaterialName(class PyDbObjectId)'''
    ...
    def getPlotSettingsId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getPlotSettingsId( (str)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotSettingsId(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def getPlotSettingsName (self, *args, **kwargs)-> str :
      '''getPlotSettingsName( (ObjectId)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getPlotSettingsName(class PyDbObjectId)'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getPlotStyleNameId( (str)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def getPlotStyleNameName (self, *args, **kwargs)-> str :
      '''getPlotStyleNameName( (ObjectId)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getPlotStyleNameName(class PyDbObjectId)'''
    ...
    def getTableStyleId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getTableStyleId( (str)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getTableStyleId(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def getTableStyleName (self, *args, **kwargs)-> str :
      '''getTableStyleName( (ObjectId)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getTableStyleName(class PyDbObjectId)'''
    ...
    def getVisualStyleId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getVisualStyleId( (str)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getVisualStyleId(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def getVisualStyleName (self, *args, **kwargs)-> str :
      '''getVisualStyleName( (ObjectId)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getVisualStyleName(class PyDbObjectId)'''
    ...
    def hasColor (self, *args, **kwargs)-> bool :
      '''hasColor( (str)arg1, (Database)arg2) -> bool :

    C++ signature :
        bool hasColor(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def hasGroup (self, *args, **kwargs)-> bool :
      '''hasGroup( (str)arg1, (Database)arg2) -> bool :

    C++ signature :
        bool hasGroup(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def hasLayout (self, *args, **kwargs)-> bool :
      '''hasLayout( (str)arg1, (Database)arg2) -> bool :

    C++ signature :
        bool hasLayout(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def hasMLStyle (self, *args, **kwargs)-> bool :
      '''hasMLStyle( (str)arg1, (Database)arg2) -> bool :

    C++ signature :
        bool hasMLStyle(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def hasMaterial (self, *args, **kwargs)-> bool :
      '''hasMaterial( (str)arg1, (Database)arg2) -> bool :

    C++ signature :
        bool hasMaterial(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def hasPlotSettings (self, *args, **kwargs)-> bool :
      '''hasPlotSettings( (str)arg1, (Database)arg2) -> bool :

    C++ signature :
        bool hasPlotSettings(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def hasPlotStyleName (self, *args, **kwargs)-> bool :
      '''hasPlotStyleName( (str)arg1, (Database)arg2) -> bool :

    C++ signature :
        bool hasPlotStyleName(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def hasTableStyle (self, *args, **kwargs)-> bool :
      '''hasTableStyle( (str)arg1, (Database)arg2) -> bool :

    C++ signature :
        bool hasTableStyle(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def hasVisualStyle (self, *args, **kwargs)-> bool :
      '''hasVisualStyle( (str)arg1, (Database)arg2) -> bool :

    C++ signature :
        bool hasVisualStyle(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...

class Dictionary(DbObject):
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode.kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def asDict (self)-> dict :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Dictionary :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Dictionary :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getAt (self, val : str)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has (self, val : str|PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def nameAt (self, val : PyDb.ObjectId)-> str :
      '''                             '''
    ...
    def numEntries (self)-> int :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...

    @overload
    def remove (self, key: str)-> None : ...
    @overload
    def remove (self, key: PyDb.ObjectId)-> None : ...
    @overload
    def remove (self, key: str, returnId: PyDb.ObjectId)-> None : ...
    def remove (self, *args, **kwargs)-> None :
      '''Overloads:
    - key: str
    - key: PyDb.ObjectId
    - key: str, returnId: PyDb.ObjectId
    '''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAt (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setName (self, old : str, new : str)-> bool :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class DimAssoc(DbObject):
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode.kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def addToDimensionReactor (self, add : bool=True)-> None :
      '''                             '''
    ...
    def addToPointRefReactor (self)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...

    @overload
    def assocFlag (self, /)-> int : ...
    @overload
    def assocFlag (self, ptType: int)-> int : ...
    def assocFlag (self, *args, **kwargs)-> int :
      '''Overloads:
    - None: Any
    - ptType: int
    '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.DimAssoc :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.DimAssoc :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dimObjId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getDimAssocGeomIds (self)-> list :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasOopsWatcher (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAllGeomErased (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransSpatial (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def osnapPointRef (self, _type : int)-> PyDb.OsnapPointRef :
      '''                             '''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def pointRef (self, _type : int)-> PyDb.PointRef :
      '''                             '''
    ...
    def post (self, id : PyDb.ObjectId, isAcive : bool=True)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeAssociativity (self, force : bool=True)-> None :
      '''                             '''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeOopsWatcher (self)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePointRef (self, _type : int)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def restoreAssocFromOopsWatcher (self)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def rotatedDimType (self)-> PyDb.RotatedDimType :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...

    @overload
    def setAssocFlag (self, flag: int)-> None : ...
    @overload
    def setAssocFlag (self, flag: int, val: bool)-> None : ...
    def setAssocFlag (self, *args, **kwargs)-> None :
      '''Overloads:
    - flag: int
    - flag: int, val: bool
    '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setDimObjId (self, id : PyDb.ObjectId)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPointRef (self, _type : int, ptRef : PyDb.PointRef)-> None :
      '''                             '''
    ...
    def setRotatedDimType (self, dimType : PyDb.RotatedDimType)-> None :
      '''                             '''
    ...
    def setTransSpatial (self, val : bool)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def startCmdWatcher (self)-> None :
      '''                             '''
    ...
    def startOopsWatcher (self, val : bool=True)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def swapReferences (self, val : PyDb.IdMapping)-> None :
      '''                             '''
    ...
    def updateAssociativity (self, ids : list[PyDb.ObjectId])-> None :
      '''                             '''
    ...
    def updateDimension (self, update : bool=True, skipReactors : bool=False)-> None :
      '''                             '''
    ...
    def updateDueToMirror (self, val : bool)-> None :
      '''                             '''
    ...
    def updateFillet (self, ids : list[PyDb.ObjectId])-> None :
      '''                             '''
    ...
    def updateSubentPath (self, val : PyDb.IdMapping)-> None :
      '''                             '''
    ...
    def updateXrefSubentPath (self)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class DimAssocPointType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kAngLineEnd (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAngLineStart (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCenterPoint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kChordPoint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDefiningPoint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kFarChordPoint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kJogPoint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLeaderPoint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOriginPoint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOverrideCenterPoint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVertexPoint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kXline1End (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kXline1Point (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kXline1Start (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kXline2End (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kXline2Point (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kXline2Start (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class DimInspect(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kShapeAngular (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kShapeLabel (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kShapeNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kShapeRate (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kShapeRemove (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kShapeRound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class DimStyleTable(SymbolTable):
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode=PyDb.OpenMode.kForRead)-> None :
      '''                             '''
    ...
    def add (self, val: PyDb.DimStyleTableRecord)-> PyDb.ObjectId :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.DimStyleTable :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.DimStyleTable :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getAt (self, val: str)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has (self, val: str|PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def recordIds (self)-> list :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def toDict (self)-> dict :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class DimStyleTableRecord(SymbolTableRecord):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def arrowId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''arrowId( (DimStyleTableRecord)arg1, (object)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId arrowId(class PyDbDimStyleTableRecord {lvalue},enum AcDb::DimArrowFlags)'''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.DimStyleTableRecord :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.DimStyleTableRecord :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dimadec (self)-> int :
      '''                             '''
    ...
    def dimalt (self)-> bool :
      '''                             '''
    ...
    def dimaltd (self)-> int :
      '''                             '''
    ...
    def dimaltf (self)-> float :
      '''                             '''
    ...
    def dimaltmzf (self)-> float :
      '''                             '''
    ...
    def dimaltmzs (self)-> str :
      '''                             '''
    ...
    def dimaltrnd (self)-> float :
      '''                             '''
    ...
    def dimalttd (self)-> int :
      '''                             '''
    ...
    def dimalttz (self)-> int :
      '''                             '''
    ...
    def dimaltu (self)-> int :
      '''                             '''
    ...
    def dimaltz (self)-> int :
      '''                             '''
    ...
    def dimapost (self)-> str :
      '''                             '''
    ...
    def dimarcsym (self)-> int :
      '''                             '''
    ...
    def dimasz (self)-> float :
      '''                             '''
    ...
    def dimatfit (self)-> int :
      '''                             '''
    ...
    def dimaunit (self)-> int :
      '''                             '''
    ...
    def dimazin (self)-> int :
      '''                             '''
    ...
    def dimblk (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimblk1 (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimblk2 (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimcen (self)-> float :
      '''                             '''
    ...
    def dimclrd (self)-> PyDb.Color :
      '''                             '''
    ...
    def dimclre (self)-> PyDb.Color :
      '''                             '''
    ...
    def dimclrt (self)-> PyDb.Color :
      '''                             '''
    ...
    def dimdec (self)-> int :
      '''                             '''
    ...
    def dimdle (self)-> float :
      '''                             '''
    ...
    def dimdli (self)-> float :
      '''                             '''
    ...
    def dimdsep (self)-> str :
      '''                             '''
    ...
    def dimexe (self)-> float :
      '''                             '''
    ...
    def dimexo (self)-> float :
      '''                             '''
    ...
    def dimfrac (self)-> int :
      '''                             '''
    ...
    def dimfxlen (self)-> float :
      '''                             '''
    ...
    def dimfxlenOn (self)-> bool :
      '''                             '''
    ...
    def dimgap (self)-> float :
      '''                             '''
    ...
    def dimjogang (self)-> float :
      '''                             '''
    ...
    def dimjust (self)-> int :
      '''                             '''
    ...
    def dimldrblk (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimlfac (self)-> float :
      '''                             '''
    ...
    def dimlim (self)-> bool :
      '''                             '''
    ...
    def dimltex1 (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimltex2 (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimltype (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimlunit (self)-> int :
      '''                             '''
    ...
    def dimlwd (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def dimlwe (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def dimmzf (self)-> float :
      '''                             '''
    ...
    def dimmzs (self)-> str :
      '''                             '''
    ...
    def dimpost (self)-> str :
      '''                             '''
    ...
    def dimrnd (self)-> float :
      '''                             '''
    ...
    def dimsah (self)-> bool :
      '''                             '''
    ...
    def dimscale (self)-> float :
      '''                             '''
    ...
    def dimsd1 (self)-> bool :
      '''                             '''
    ...
    def dimsd2 (self)-> bool :
      '''                             '''
    ...
    def dimse1 (self)-> bool :
      '''                             '''
    ...
    def dimse2 (self)-> bool :
      '''                             '''
    ...
    def dimsoxd (self)-> bool :
      '''                             '''
    ...
    def dimtad (self)-> int :
      '''                             '''
    ...
    def dimtdec (self)-> int :
      '''                             '''
    ...
    def dimtfac (self)-> float :
      '''                             '''
    ...
    def dimtfill (self)-> int :
      '''                             '''
    ...
    def dimtfillclr (self)-> PyDb.Color :
      '''                             '''
    ...
    def dimtih (self)-> bool :
      '''                             '''
    ...
    def dimtix (self)-> bool :
      '''                             '''
    ...
    def dimtm (self)-> float :
      '''                             '''
    ...
    def dimtmove (self)-> int :
      '''                             '''
    ...
    def dimtofl (self)-> bool :
      '''                             '''
    ...
    def dimtoh (self)-> bool :
      '''                             '''
    ...
    def dimtol (self)-> bool :
      '''                             '''
    ...
    def dimtolj (self)-> int :
      '''                             '''
    ...
    def dimtp (self)-> float :
      '''                             '''
    ...
    def dimtsz (self)-> float :
      '''                             '''
    ...
    def dimtvp (self)-> float :
      '''                             '''
    ...
    def dimtxsty (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimtxt (self)-> float :
      '''                             '''
    ...
    def dimtxtdirection (self)-> bool :
      '''                             '''
    ...
    def dimtzin (self)-> int :
      '''                             '''
    ...
    def dimupt (self)-> bool :
      '''                             '''
    ...
    def dimzin (self)-> int :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getName (self)-> str :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isDependent (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedForRecompute (self, *args, **kwargs)-> bool :
      '''isModifiedForRecompute( (DimStyleTableRecord)arg1) -> bool :

    C++ signature :
        bool isModifiedForRecompute(class PyDbDimStyleTableRecord {lvalue})'''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isRenamable (self)-> bool :
      '''                             '''
    ...
    def isResolved (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def name (self)-> str :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setDimadec (self, val : int)-> None :
      '''                             '''
    ...
    def setDimalt (self, val : bool)-> None :
      '''                             '''
    ...
    def setDimaltd (self, val : int)-> None :
      '''                             '''
    ...
    def setDimaltf (self, val : float)-> None :
      '''                             '''
    ...
    def setDimaltmzf (self, val : float)-> None :
      '''                             '''
    ...
    def setDimaltmzs (self, val : str)-> None :
      '''                             '''
    ...
    def setDimaltrnd (self, val : float)-> None :
      '''                             '''
    ...
    def setDimalttd (self, val : int)-> None :
      '''                             '''
    ...
    def setDimalttz (self, val : int)-> None :
      '''                             '''
    ...
    def setDimaltu (self, val : int)-> None :
      '''                             '''
    ...
    def setDimaltz (self, val : int)-> None :
      '''                             '''
    ...
    def setDimapost (self, val : str)-> None :
      '''                             '''
    ...
    def setDimarcsym (self, val : int)-> None :
      '''                             '''
    ...
    def setDimasz (self, val : float)-> None :
      '''                             '''
    ...
    def setDimatfit (self, val : int)-> None :
      '''                             '''
    ...
    def setDimaunit (self, val : int)-> None :
      '''                             '''
    ...
    def setDimazin (self, val : int)-> None :
      '''                             '''
    ...
    def setDimblk (self, val : str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimblk1 (self, val : str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimblk2 (self, val : str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimcen (self, val : float)-> None :
      '''                             '''
    ...
    def setDimclrd (self, val : PyDb.AcCmColor)-> None :
      '''                             '''
    ...
    def setDimclre (self, val : PyDb.AcCmColor)-> None :
      '''                             '''
    ...
    def setDimclrt (self, val : PyDb.AcCmColor)-> None :
      '''                             '''
    ...
    def setDimdec (self, val : int)-> None :
      '''                             '''
    ...
    def setDimdle (self, val : float)-> None :
      '''                             '''
    ...
    def setDimdli (self, val : float)-> None :
      '''                             '''
    ...
    def setDimdsep (self, val : int)-> None :
      '''                             '''
    ...
    def setDimexe (self, val : float)-> None :
      '''                             '''
    ...
    def setDimexo (self, val : float)-> None :
      '''                             '''
    ...
    def setDimfrac (self, val : int)-> None :
      '''                             '''
    ...
    def setDimfxlen (self, val : float)-> None :
      '''                             '''
    ...
    def setDimfxlenOn (self, val : bool)-> None :
      '''                             '''
    ...
    def setDimgap (self, val : float)-> None :
      '''                             '''
    ...
    def setDimjogang (self, val : float)-> None :
      '''                             '''
    ...
    def setDimjust (self, val : int)-> None :
      '''                             '''
    ...
    def setDimldrblk (self, val : str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimlfac (self, val : float)-> None :
      '''                             '''
    ...
    def setDimlim (self, val : bool)-> None :
      '''                             '''
    ...
    def setDimltex1 (self, val: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimltex2 (self, val: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimltype (self, val: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimlunit (self, val : int)-> None :
      '''                             '''
    ...
    def setDimlwd (self, val: PyDb.LineWeight)-> None :
      '''                             '''
    ...
    def setDimlwe (self, val: PyDb.LineWeight)-> None :
      '''                             '''
    ...
    def setDimmzf (self, val : float)-> None :
      '''                             '''
    ...
    def setDimmzs (self, val : str)-> None :
      '''                             '''
    ...
    def setDimpost (self, val : str)-> None :
      '''                             '''
    ...
    def setDimrnd (self, val : float)-> None :
      '''                             '''
    ...
    def setDimsah (self, val : bool)-> None :
      '''                             '''
    ...
    def setDimscale (self, val : float)-> None :
      '''                             '''
    ...
    def setDimsd1 (self, val : bool)-> None :
      '''                             '''
    ...
    def setDimsd2 (self, val : bool)-> None :
      '''                             '''
    ...
    def setDimse1 (self, val : bool)-> None :
      '''                             '''
    ...
    def setDimse2 (self, val : bool)-> None :
      '''                             '''
    ...
    def setDimsoxd (self, val : bool)-> None :
      '''                             '''
    ...
    def setDimtad (self, val : int)-> None :
      '''                             '''
    ...
    def setDimtdec (self, val : int)-> None :
      '''                             '''
    ...
    def setDimtfac (self, val : float)-> None :
      '''                             '''
    ...
    def setDimtfill (self, val : int)-> None :
      '''                             '''
    ...
    def setDimtfillclr (self, val : PyDb.AcCmColor)-> None :
      '''                             '''
    ...
    def setDimtih (self, val : bool)-> None :
      '''                             '''
    ...
    def setDimtix (self, val : bool)-> None :
      '''                             '''
    ...
    def setDimtm (self, val : float)-> None :
      '''                             '''
    ...
    def setDimtmove (self, val : int)-> None :
      '''                             '''
    ...
    def setDimtofl (self, val : bool)-> None :
      '''                             '''
    ...
    def setDimtoh (self, val : bool)-> None :
      '''                             '''
    ...
    def setDimtol (self, val : bool)-> None :
      '''                             '''
    ...
    def setDimtolj (self, val : int)-> None :
      '''                             '''
    ...
    def setDimtp (self, val : float)-> None :
      '''                             '''
    ...
    def setDimtsz (self, val : float)-> None :
      '''                             '''
    ...
    def setDimtvp (self, val : float)-> None :
      '''                             '''
    ...
    def setDimtxsty (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimtxt (self, *args, **kwargs)-> None :
      '''setDimtxt( (DimStyleTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setDimtxt(class PyDbDimStyleTableRecord {lvalue},double)'''
    ...
    def setDimtxtdirection (self, val : bool)-> None :
      '''                             '''
    ...
    def setDimtzin (self, val : int)-> None :
      '''                             '''
    ...
    def setDimupt (self, val : bool)-> None :
      '''                             '''
    ...
    def setDimzin (self, val : int)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setName (self, name: str)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class Dimension(Entity):
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode=PyDb.OpenMode.kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def altSuppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def altSuppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def altSuppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def altSuppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def alternatePrefix (self)-> str :
      '''                             '''
    ...
    def alternateSuffix (self)-> str :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Dimension :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...
    def centerMarkSize (self)-> float :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Dimension :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dimBlockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimBlockPosition (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def dimExt1Linetype (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimExt2Linetype (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimLineLinetype (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimensionStyle (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimensionText (self)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevation (self)-> float :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def fieldFromMText (self, ref : PyDb.MText)-> None :
      '''                             '''
    ...
    def fieldToMText (self, ref : PyDb.MText)-> None :
      '''                             '''
    ...

    @overload
    def formatMeasurement (self, measurement: float)-> str : ...
    @overload
    def formatMeasurement (self, measurement: float, dimensionText: str)-> str : ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''Overloads:
    - measurement: float
    - measurement: float, dimensionText: str
    '''
    ...
    def generateLayout (self)-> None :
      '''                             '''
    ...
    def getArrowFirstIsFlipped (self)-> bool :
      '''                             '''
    ...
    def getArrowSecondIsFlipped (self)-> bool :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDimstyleData (self)-> PyDb.DimStyleTableRecord :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def horizontalRotation (self)-> float :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def inspection (self)-> bool :
      '''                             '''
    ...
    def inspectionFrame (self)-> int :
      '''                             '''
    ...
    def inspectionLabel (self)-> str :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self)-> bool :
      '''                             '''
    ...
    def isConstraintObject (self)-> tuple :
      '''                             '''
    ...
    def isDynamicDimension (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def measurement (self)-> float :
      '''                             '''
    ...
    def normal (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def prefix (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recomputeDimBlock (self, force : bool=False)-> None :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def removeTextField (self)-> None :
      '''                             '''
    ...
    def resetTextDefinedSize (self)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAltSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setAlternatePrefix (self, val : str)-> None :
      '''                             '''
    ...
    def setAlternateSuffix (self, val : str)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setArrowFirstIsFlipped (self, val : bool)-> None :
      '''                             '''
    ...
    def setArrowSecondIsFlipped (self, val : bool)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setConstraintDynamic (self, val : bool)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setDimBlockId (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimBlockPosition (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setDimExt1Linetype (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimExt2Linetype (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimLineLinetype (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimensionStyle (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimensionText (self, val : str)-> None :
      '''                             '''
    ...

    @overload
    def setDimstyleData (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def setDimstyleData (self, rec: PyDb.DimStyleTableRecord)-> None : ...
    def setDimstyleData (self, *args, **kwargs)-> None :
      '''Overloads:
    - id: PyDb.ObjectId
    - rec: PyDb.DimStyleTableRecord
    '''
    ...
    def setDynamicDimension (self, val : bool)-> None :
      '''                             '''
    ...
    def setElevation (self, val : float)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setHorizontalRefTextRotation (self, val : bool)-> None :
      '''                             '''
    ...
    def setHorizontalRotation (self, val : float)-> None :
      '''                             '''
    ...
    def setInspection (self, val : bool)-> None :
      '''                             '''
    ...
    def setInspectionFrame (self, val : int)-> None :
      '''                             '''
    ...
    def setInspectionLabel (self, val : str)-> None :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self, val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, val : str)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setShouldParticipateInOPM (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuffix (self, val : str)-> None :
      '''                             '''
    ...
    def setSuppressAngularTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setTextAttachment (self, val : PyDb.MTextAttachmentPoint)-> None :
      '''                             '''
    ...
    def setTextDefinedSize (self, width : float, height : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingFactor (self, val : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingStyle (self, val : PyDb.LineSpacingStyle)-> None :
      '''                             '''
    ...
    def setTextPosition (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setTextRotation (self, val : float)-> None :
      '''                             '''
    ...
    def setToleranceSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setUsingDefaultTextPosition (self, val : bool)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def shouldParticipateInOPM (self)-> bool :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def suffix (self)-> str :
      '''                             '''
    ...
    def suppressAngularLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressAngularTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def suppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAttachment (self)-> PyDb.MTextAttachmentPoint :
      '''                             '''
    ...
    def textDefinedSize (self)-> tuple :
      '''                             '''
    ...
    def textLineSpacingFactor (self)-> float :
      '''                             '''
    ...
    def textLineSpacingStyle (self)-> PyDb.LineSpacingStyle :
      '''                             '''
    ...
    def textPosition (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def textRotation (self)-> float :
      '''                             '''
    ...
    def toleranceSuppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def toleranceSuppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def useDefaultTextPosition (self)-> None :
      '''                             '''
    ...
    def useSetTextPosition (self)-> None :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class DrawLeaderOrderType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kDrawLeaderHeadFirst (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDrawLeaderTailFirst (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class DrawMLeaderOrderType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kDrawContentFirst (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDrawLeaderFirst (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class DuplicateRecordCloning(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kDrcIgnore (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDrcMangleName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDrcNotApplicable (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDrcReplace (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDrcUnmangleName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDrcXrefMangleName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class DwgDataType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kDwg3Real (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDwgBChunk (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDwgHandle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDwgHardOwnershipId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDwgHardPointerId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDwgInt16 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDwgInt32 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDwgInt64 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDwgInt8 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDwgNotRecognized (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDwgNull (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDwgReal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDwgSoftOwnershipId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDwgSoftPointerId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDwgText (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class DwgVersion(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kDHL_1001 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1002 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1003 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1004 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1005 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1006 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1007 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1008 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1009 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1010 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1011 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1012 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1013 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1014 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1015 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1021 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1024 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1027 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1032 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1500 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1800 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_1800a (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_2100a (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_2400a (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_2700a (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_3200a (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_AC1_2 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_AC1_40 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_AC1_50 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_AC2_10 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_AC2_20 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_AC2_21 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_AC2_22 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_CURRENT (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_MC0_0 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_Max (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_Newest (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDHL_Unknown (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class DxfCode(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kDxfAlpha (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfAngle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfArbHandle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfAttributePrompt (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfAttributeTag (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfBinaryChunk (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfBlockName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfBool (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfCLShapeName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfCLShapeText (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfCircleSides (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfColor (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfColorName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfColorRGB (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfComment (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfControlString (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfDashLength (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfDefaultLightingOn (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfDefaultLightingType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfDescription (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfDimAPostStr (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfDimBlk (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfDimBlk1 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfDimBlk2 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfDimPostStr (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfDimStyleName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfDimVarHandle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfDragVisualStyleId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfEdgeStyleId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfElevation (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfEmbeddedObjectStart (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfEnd (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfFaceStyleId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfFirstEntId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfGradientAngle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfGradientColCount (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfGradientColVal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfGradientName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfGradientObjType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfGradientPatType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfGradientShift (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfGradientTintType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfGradientTintVal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfHandle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfHardOwnershipId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfHardPointerId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfHasSubentities (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfHeaderId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfInt16 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfInt32 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfInt64 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfInt8 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfInvalid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfLayerLinetype (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfLayerName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfLayoutName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfLineWeight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfLinetypeAlign (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfLinetypeElement (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfLinetypeName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfLinetypePDC (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfLinetypeProse (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfLinetypeScale (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfLiveSectionId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfLiveSectionName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfMaterialId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfMlineOffset (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfMstyleName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfNormalX (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfNormalY (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfNormalZ (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfObjVisualStyleId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfOperator (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfPReactors (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfPixelScale (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfPlotStyleNameId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfPlotStyleNameType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfReal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfRegAppFlags (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfRegAppName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfRenderMode (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfShadePlotId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfShadowFlags (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfShapeName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfShapeScale (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfShapeXOffset (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfShapeYOffset (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfSoftOwnershipId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfSoftPointerId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfStart (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfSubclass (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfSunId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfSymTableRecComments (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfSymTableRecName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfSymbolTableName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfText (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfTextBigFontFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfTextFontFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfTextStyleName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfThickness (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfTxtSize (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfTxtStyleFlags (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfTxtStylePSize (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfTxtStyleXScale (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfUCSOrg (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfUCSOriX (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfUCSOriY (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfVertexIdentifier (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewBackClip (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewBackgroundId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewBrightness (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewContrast (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewFrontClip (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewHeight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewLensLength (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewMode (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewWidth (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewportActive (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewportAspect (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewportGrid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewportGridDisplay (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewportGridMajor (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewportHeight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewportIcon (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewportNumber (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewportSnap (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewportSnapAngle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewportSnapPair (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewportSnapStyle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewportTwist (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewportVisibility (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfViewportZoom (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfVisibility (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfVisualStyleId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfVpVisualStyleId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXCoord (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXDataStart (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXDictionary (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXInt16 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXReal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXRefPath (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXTextString (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXXInt16 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXXXInt16 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdAsciiString (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdBinaryChunk (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdControlString (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdDist (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdHandle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdInteger16 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdInteger32 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdLayerName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdMax (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdReal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdScale (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdWorldXCoord (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdWorldXDir (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdWorldXDisp (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdWorldYCoord (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdWorldYDir (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdWorldYDisp (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdWorldZCoord (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdWorldZDir (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdWorldZDisp (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdXCoord (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdYCoord (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfXdZCoord (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfYCoord (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDxfZCoord (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class DynBlockReference(object):
    def __init__ (self, val : ObjectId)-> None :
      '''                             '''
    ...
    def anonymousBlockTableRecord (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def convertToStaticBlock (self, val : str=None)-> None :
      '''                             '''
    ...
    def dynamicBlockTableRecord (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getBlockProperties (self)-> list :
      '''                             '''
    ...

    @staticmethod
    def getIsDynamicBlock (otherObject: ObjectId)-> bool :
      '''                             '''
    ...
    def isDynamicBlock (self)-> bool :
      '''                             '''
    ...
    def resetBlock (self)-> None :
      '''                             '''
    ...

class DynBlockReferenceProperty(object):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def blockId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''blockId( (DynBlockReferenceProperty)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def description (self, *args, **kwargs)-> str :
      '''description( (DynBlockReferenceProperty)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > description(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...
    def getAllowedValues (self, *args, **kwargs)-> list :
      '''getAllowedValues( (DynBlockReferenceProperty)arg1) -> list :

    C++ signature :
        class boost::python::list getAllowedValues(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...
    def propertyName (self, *args, **kwargs)-> str :
      '''propertyName( (DynBlockReferenceProperty)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > propertyName(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...
    def propertyType (self, *args, **kwargs)-> PyDb.DwgDataType :
      '''propertyType( (DynBlockReferenceProperty)arg1) -> DwgDataType :

    C++ signature :
        enum AcDb::DwgDataType propertyType(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...
    def readOnly (self, *args, **kwargs)-> bool :
      '''readOnly( (DynBlockReferenceProperty)arg1) -> bool :

    C++ signature :
        bool readOnly(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...
    def setValue (self, *args, **kwargs)-> None :
      '''setValue( (DynBlockReferenceProperty)arg1, (EvalVariant)arg2) -> None :

    C++ signature :
        void setValue(class PyDbDynBlockReferenceProperty {lvalue},class PyDbEvalVariant)'''
    ...
    def show (self, *args, **kwargs)-> bool :
      '''show( (DynBlockReferenceProperty)arg1) -> bool :

    C++ signature :
        bool show(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...
    def unitsType (self, *args, **kwargs)-> PyDb.DynUnitsType :
      '''unitsType( (DynBlockReferenceProperty)arg1) -> DynUnitsType :

    C++ signature :
        enum AcDbDynBlockReferenceProperty::UnitsType unitsType(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...
    def value (self, *args, **kwargs)-> PyDb.EvalVariant :
      '''value( (DynBlockReferenceProperty)arg1) -> EvalVariant :

    C++ signature :
        class PyDbEvalVariant value(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...
    def visibleInCurrentVisibilityState (self, *args, **kwargs)-> bool :
      '''visibleInCurrentVisibilityState( (DynBlockReferenceProperty)arg1) -> bool :

    C++ signature :
        bool visibleInCurrentVisibilityState(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...

class DynUnitsType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kAngular (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kArea (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDistance (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNoUnits (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class Ellipse(Curve):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, center: PyGe.Point3d, unitNormal: PyGe.Vector3d, majorAxis: PyGe.Vector3d, radiusRatio: float)-> None : ...
    @overload
    def __init__ (self, center: PyGe.Point3d, unitNormal: PyGe.Vector3d, majorAxis: PyGe.Vector3d, radiusRatio: float, startAngle: float, endAngle: float)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - center: PyGe.Point3d, unitNormal: PyGe.Vector3d, majorAxis: PyGe.Vector3d, radiusRatio: float
    - center: PyGe.Point3d, unitNormal: PyGe.Vector3d, majorAxis: PyGe.Vector3d, radiusRatio: float, startAngle: float, endAngle: float
    - id: PyDb.ObjectId
    - id: PyDb.ObjectId, mode: PyDb.OpenMode
    - id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool
    '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def angleAtParam (self, val : float)-> float :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Ellipse :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...
    def center (self)-> PyGe.Point3d :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Ellipse :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...

    @staticmethod
    def createFromAcGeCurve (curve: PyGe.Curve3d,normal: PyGe.Vector3d = PyGe.Vector3d.kZAxis,tol: PyGe.Tol = 'default')-> PyDb.Curve :
      '''                             '''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def endAngle (self)-> float :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> None :
      '''extend( (Curve)arg1, (float)arg2) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def get (self)-> tuple :
      '''                             '''
    ...
    def getAcGeCurve (self, tol: PyGe.Tol = 'default')-> PyGe.Curve3d :
      '''                             '''
    ...
    def getArea (self)-> float :
      '''                             '''
    ...
    def getClosestPointTo (self, point3d: PyGe.Point3d, direction: PyGe.Vector3d=None, extend: bool=False)-> PyGe.Point3d :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDistAtParam (self, param: float)-> float :
      '''                             '''
    ...
    def getDistAtPoint (self, point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEndParam (self)-> float :
      '''                             '''
    ...
    def getEndPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self, param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getOffsetCurves (self, dist: float)-> list :
      '''                             '''
    ...
    def getOffsetCurvesGivenPlaneNormal (self, normal: PyGe.Vector3d, dist: float)-> list :
      '''                             '''
    ...
    def getOrthoProjectedCurve (self, plane: PyGe.Plane)-> PyDb.Curve :
      '''                             '''
    ...
    def getParamAtDist (self, dist: float)-> float :
      '''                             '''
    ...
    def getParamAtPoint (self, point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getPointAtDist (self, dist: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getPointAtParam (self, param: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getProjectedCurve (self, plane: PyGe.Plane, projDir: PyGe.Vector3d)-> PyDb.Curve :
      '''                             '''
    ...
    def getSecondDeriv (self, param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getSpline (self)-> PyDb.Spline :
      '''                             '''
    ...
    def getSplitCurves (self, paramsOrPoints: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParam (self, param: float)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParams (self, params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoint (self, point: PyGe.Point3d)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoints (self, points: list)-> list :
      '''                             '''
    ...
    def getStartParam (self)-> float :
      '''                             '''
    ...
    def getStartPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isClosed (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNull (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPeriodic (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def majorAxis (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def majorRadius (self)-> float :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def minorAxis (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def minorRadius (self)-> float :
      '''                             '''
    ...
    def normal (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def paramAtAngle (self, val : float)-> float :
      '''                             '''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def radiusRatio (self)-> float :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def reverseCurve (self)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def set (self, *args, **kwargs)-> None :
      '''set( (Ellipse)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4, (float)arg5) -> None :

    C++ signature :
        void set(class PyDbEllipse {lvalue},class AcGePoint3d,class AcGeVector3d,class AcGeVector3d,double)

set( (Ellipse)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4, (float)arg5, (float)arg6, (float)arg7) -> None :

    C++ signature :
        void set(class PyDbEllipse {lvalue},class AcGePoint3d,class AcGeVector3d,class AcGeVector3d,double,double,double)'''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setCenter (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setEndAngle (self, val : float)-> None :
      '''                             '''
    ...
    def setEndParam (self, val : float)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setFromAcGeCurve (self, curve: PyGe.Curve3d, normal: PyGe.Vector3d = PyGe.Vector3d.kZAxis, tol: PyGe.Tol = 'default')-> None :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMajorRadius (self, val : float)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMinorRadius (self, val : float)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setRadiusRatio (self, val : float)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setStartAngle (self, val : float)-> None :
      '''                             '''
    ...
    def setStartParam (self, val : float)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def startAngle (self)-> float :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class EndCaps(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kEndCapAngle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEndCapNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEndCapRound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEndCapSquare (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class Entity(DbObject):
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode=PyDb.OpenMode.kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Entity :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Entity :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class EntityColor(object):
    def ByBlock (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def ByLayer (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def ByNone (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def Foreground (self)-> PyDb.EntityColor :
      '''                             '''
    ...

    @staticmethod
    def NoneClr ()-> PyDb.EntityColor :
      '''                             '''
    ...
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (int)arg2, (int)arg3, (int)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,unsigned char,unsigned char,unsigned char)'''
    ...
    def black (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def blue (self)-> int :
      '''                             '''
    ...
    def canResolveRGB (self)-> bool :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def colorMethod (self)-> PyDb.ColorMethod :
      '''                             '''
    ...
    def getCOLORREF (self)-> int :
      '''                             '''
    ...
    def getRGB (self)-> int :
      '''                             '''
    ...
    def getRGBM (self)-> int :
      '''                             '''
    ...
    def green (self)-> int :
      '''                             '''
    ...
    def isByACI (self)-> bool :
      '''                             '''
    ...
    def isByBlock (self)-> bool :
      '''                             '''
    ...
    def isByColor (self)-> bool :
      '''                             '''
    ...
    def isByLayer (self)-> bool :
      '''                             '''
    ...
    def isByPen (self)-> bool :
      '''                             '''
    ...
    def isForeground (self)-> bool :
      '''                             '''
    ...
    def isLayerFrozen (self)-> bool :
      '''                             '''
    ...
    def isLayerFrozenOrOff (self)-> bool :
      '''                             '''
    ...
    def isLayerOff (self)-> bool :
      '''                             '''
    ...
    def isNone (self)-> bool :
      '''                             '''
    ...
    def layerIndex (self)-> int :
      '''                             '''
    ...
    def makeTrueColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def penIndex (self)-> int :
      '''                             '''
    ...
    def red (self)-> int :
      '''                             '''
    ...
    def setByBlock (self)-> None :
      '''                             '''
    ...
    def setByLayer (self)-> None :
      '''                             '''
    ...
    def setCOLORREF (self, val : int)-> PyDb.ErrorStatus :
      '''                             '''
    ...
    def setColorIndex (self, val : int)-> PyDb.ErrorStatus :
      '''                             '''
    ...
    def setForeground (self)-> None :
      '''                             '''
    ...
    def setLayerIndex (self, val : int)-> PyDb.ErrorStatus :
      '''                             '''
    ...
    def setLayerOff (self)-> None :
      '''                             '''
    ...
    def setNone (self)-> None :
      '''                             '''
    ...
    def setPenIndex (self, val : int)-> PyDb.ErrorStatus :
      '''                             '''
    ...
    def setRGB (self, *args, **kwargs)-> PyDb.ErrorStatus :
      '''setRGB( (EntityColor)arg1, (SubentType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRGB(class AcCmEntityColor {lvalue},unsigned int)

setRGB( (EntityColor)arg1, (int)arg2, (int)arg3, (int)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRGB(class AcCmEntityColor {lvalue},unsigned char,unsigned char,unsigned char)'''
    ...
    def setRGBM (self, val : int)-> PyDb.ErrorStatus :
      '''                             '''
    ...
    def white (self)-> PyDb.EntityColor :
      '''                             '''
    ...

class EntityReactor(PyRx.RxObject):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def cancelled (self, obj: PyDb.DbObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copied (self, obj: PyDb.DbObject, newObj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def dragCloneToBeDeleted (self, obj: PyDb.Entity, clone: PyDb.Entity)-> None :
      '''                             '''
    ...
    def erased (self, obj: PyDb.DbObject, flag: bool)-> None :
      '''                             '''
    ...
    def goodbye (self, obj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def modified (self, obj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def modifiedGraphics (self, obj: PyDb.Entity)-> None :
      '''                             '''
    ...
    def modifiedXData (self, obj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def modifyUndone (self, obj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def objectClosed (self, obj: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def openedForModify (self, obj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def reappended (self, obj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def subObjModified (self, obj: PyDb.DbObject, subObj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def unappended (self, obj: PyDb.DbObject)-> None :
      '''                             '''
    ...

class ErrorStatus(object):
    def Ok (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def eAbortPreview (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eAllInSameRigidSet (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eAlreadyActive (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eAlreadyHasRepresentation (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eAlreadyInDb (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eAlreadyInGroup (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eAlreadyInactive (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eAlreadyInferred (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eAmbiguousInput (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eAmbiguousOutput (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eAnonymousEntry (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eAtMaxReaders (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBackgroundPlotInProgress (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBadColor (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBadColorIndex (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBadDwgHeader (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBadDxfFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBadDxfSequence (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBadLayerName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBadLineWeightValue (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBadLinetypeName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBadLinetypeScale (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBadMaterialName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBadPaperspaceView (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBadPlotStyleName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBadPlotStyleNameHandle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBadPlotStyleType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBadUCS (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBadVisibilityValue (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBadlyNestedAppData (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBinaryDataSizeExceeded (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBlockDefInEntitySection (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBrokenHandle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eBufferTooSmall (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCannotBeErasedByCaller (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCannotBeResurrected (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCannotChangeActiveViewport (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCannotChangeColumnType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCannotExplodeEntity (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCannotNestBlockDefs (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCannotPlotToFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCannotRestoreFromAcisFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCannotScaleNonUniformly (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCantOpenFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eChangedAgainstAssociativity (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCloseFailObjectDamaged (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCloseModifyAborted (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eClosePartialFailure (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCloseWasNotifying (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCommandWasInProgress (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eContainerNotEmpty (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eConvertImageFormatFailed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCopyDoesNotExist (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCopyFailed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCopyInvalidName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCopyIsModelSpace (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCopyNameExists (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCreateFailed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCreateInvalidName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCustomSizeNotPossible (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eCyclicDependency (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDataLinkAdapterNotFound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDataLinkBadConnectionString (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDataLinkConnectionFailed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDataLinkExcelNotFound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDataLinkInvalidAdapterId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDataLinkNotFound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDataLinkNotUpdatedYet (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDataLinkOtherError (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDataLinkSourceIsWriteProtected (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDataLinkSourceNotFound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDataLinkSourceUpdateNotAllowed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDataTooLarge (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDatabaseObjectsOpen (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDegenerateGeometry (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDelDoesNotExist (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDelIsModelSpace (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDelLastLayout (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDelUnableToFind (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDelUnableToSetCurrent (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDelayMore (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDeleteEntity (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDeletedEntry (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDependentOnObjectErased (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDeviceNotFound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDocumentSwitchDisabled (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDuplicateBlockDefinition (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDuplicateBlockName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDuplicateDxfField (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDuplicateIndex (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDuplicateKey (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDuplicateLayerName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDuplicateRecordName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDwgCRCDoesNotMatch (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDwgNeedsAFullSave (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDwgNotRecoverable (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDwgObjectImproperlyRead (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDwgRecoveredOK (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDwgSentinelDoesNotMatch (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDwgShareDemandLoad (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDwgShareReadAccess (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDwgShareWriteAccess (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDwkLockFileFound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDxbPartiallyRead (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDxbReadAborted (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDxfPartiallyRead (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eDxfReadAborted (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eEmbeddedIntersections (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eEmptyOperand (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eEndOfFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eEndOfObject (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eEndPreview (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eEntityInInactiveLayout (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eEntityRestricedInDOF (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eExcessiveItemCount (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eExplodeBeforeTransform (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFSMError (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFailedCurveCheck (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFailedToBlend (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFailedToEvaluate (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFailedToEvaluateDependents (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFailedToSetEdgeChamfers (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFailedToSetEdgeRounds (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFailedToSetVertexRounds (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFileAccessErr (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFileExists (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFileInternalErr (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFileLockedByACAD (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFileMissingSections (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFileNotFound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFileNotInCloud (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFileSharingViolation (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFileSystemErr (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFileTooManyOpen (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFilerError (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eFixedAllErrors (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eGeneralModelingFailure (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eGetAdIntImgServicesFailed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eGetImageBytesFailed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eGetImageDIBFailed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eGetPreviewImageFailed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eGraphContainsProxies (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eGraphCyclesFound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eGraphEdgeAlreadyExists (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eGraphEdgeNotFound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eGraphNodeAlreadyExists (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eGraphNodeNotFound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eGraphicsNotGenerated (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eGuidNoAddress (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eHadMultipleReaders (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eHandleExists (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eHandleInUse (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eHatchTooDense (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eIgnoredLinetypeRedef (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eIllegalEntityType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eIllegalReplacement (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInProcessOfCommitting (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eIncompatiblePlotSettings (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eIncompleteBlockDefinition (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eIncompleteComplexObject (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInconsistentConstraint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetBadPath (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetBase (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetCreateInternetSessionFailed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetDirectoryFull (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetDiskFull (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetFileAccessDenied (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetFileGenericError (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetFileNotFound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetFileOpenFailed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetGenericException (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHardwareError (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpAccessDenied (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpBadGateway (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpBadMethod (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpBadRequest (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpConflict (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpGatewayTimeout (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpLengthRequired (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpNoAcceptableResponse (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpNotSupported (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpObjectNotFound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpOpenRequestFailed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpPaymentRequired (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpPreconditionFailure (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpProxyAuthorizationRequired (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpRequestForbidden (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpRequestTooLarge (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpResourceGone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpServerError (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpServiceUnavailable (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpTimedOut (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpUnsupportedMedia (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpUriTooLong (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetHttpVersionNotSupported (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetInCache (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetInternetError (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetInternetSessionConnectFailed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetInternetSessionOpenFailed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetInvalidAccessType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetInvalidFileHandle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetNoAcadInet (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetNoWinInet (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetNotAnURL (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetNotImplemented (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetOk (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetOldWinInet (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetProtocolNotSupported (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetSharingViolation (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetTooManyOpenFiles (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetUnknownError (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetUserCancelledTransfer (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInetValidURL (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInsertAfter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidAdsName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidAxis (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidBlockName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidContext (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidDimStyle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidDwgVersion (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidDxf2dPoint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidDxf3dPoint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidDxfCode (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidDxfSectionName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidEngineState (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidExpression (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidExtents (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidFaceVertexIndex (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidFileExtension (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidFix (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidIdMap (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidIndex (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidInput (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidKey (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidLayer (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidMeshVertexIndex (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidNormal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidObjectId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidOffset (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidOpenState  (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidOwnerObject (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidParameterName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidPlotArea (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidPlotInfo (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidPreviewImage (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidProfileName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidREFIID (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidResBuf (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidStyle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidSymTableFlag (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidSymbolTableName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidTextStyle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidView (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidWindowArea (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eInvalidXrefObjectId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eIsAnEntity (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eIsReading (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eIsWriteProtected (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eIsWriting (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eIsXRefObject (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eItemCountChanged (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eIteratorDone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eKeyNotFound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eLISPActive (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eLayerGroupCodeMissing (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eLayoutNotCurrent (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eLeftErrorsUnfixed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eLoadFailed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eLockChangeInProgress (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eLockConflict (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eLockViolation (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eLongTransReferenceError (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMakeMeProxy (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMakeMeProxyAndResurrect (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMaxLayouts (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMaxNodes (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMissingBlockName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMissingDxfField (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMissingDxfSection (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMissingSymbolTable (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMissingSymbolTableRec (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eModifyingAssociativeEntity (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eModifyingDimensionWithExpression (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMustBe0to2 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMustBe0to3 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMustBe0to4 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMustBe0to5 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMustBe0to8 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMustBe1to15 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMustBe1to6 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMustBe1to8 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMustBeInteger (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMustBeNonNegative (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMustBeNonZero (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMustBePositive (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMustBePositiveInteger (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMustFirstAddBlockToDb (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMustOpenThruOwner (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eMustPlotToFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNLSFileNotAvailable (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNearSizeLimit (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNegativeValueNotAllowed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoAcDbHostApplication (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoActiveTransactions (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoBlockBegin (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoClassId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoConnectedBlendSet (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoCurrentConfig (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoDatabase (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoDocument (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoEntitiesFromPersistentIds (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoErrorHandler (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoFileName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoInputFiler (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoInputPath (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoInternalSpace (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoIntersections (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoLabelBlock (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoLayout (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoMatchingMedia (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoNodeActive (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoOverride (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoPlotStyleTranslationTable (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoPreviewContext (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoRepresentation (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoStoredOverrides (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoStoredReconcileStatus (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoThumbnailBitmap (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoUnderlayHost (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoViewAssociation (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNoWorkSet (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNonCoplanarGeometry (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNonPlanarEntity (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNonePlotDevice (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotAllowedForThisProxy (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotAnEntity (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotApplicable (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotAssociative (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotClonedPrimaryProxy (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotConnected (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotCurrentDatabase (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotDxfHeaderGroupCode (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotFromThisDocument (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotG1Continuous (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotHandled (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotImplementedYet (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotInBlock (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotInDatabase (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotInGroup (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotInPaperspace (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotInitializedYet (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotMultiPageCapable (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotNewlyCreated (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotOnBoundary (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotOpenForRead (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotOpenForWrite (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotShownInPropertyPalette (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotSupportedInDwgApi (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotThatKindOfClass (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNotTopTransaction (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNullBlockName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNullEntityPointer (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNullExtents (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNullHandle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNullIterator (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNullNodeId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNullObjectId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNullObjectPointer (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNullPtr (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eNumberOfCopiesNotSupported (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eObjectIsReferenced (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eObjectToBeDeleted (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eObsoleteFileFormat (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eOk (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eOnLockedLayer (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eOpenFileCancelled (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eOtherObjectsBusy (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eOutOfDisk (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eOutOfMemory (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eOutOfPagerMemory (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eOutOfRange (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eOverDefinedConstraint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eOwnerNotInDatabase (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eOwnerNotOpenForRead (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eOwnerNotOpenForWrite (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eOwnerNotSet (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eOwnerToBeTransformed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePCCoordSysAssignFail (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePCCoordSysReprojectFail (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePCDiskSpaceTooSmall (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePCFileDataSelectorInvalid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePCFileNotClosed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePCFileNotCreated (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePCFileNotErased (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePCFileNotFound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePCFileNotOpened (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePCFileNotWritten (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePCFileWrongFormat (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePCInProgress (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePCLargeData (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePCLastImporterUnfinished (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePCNoEngineInfo (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePCThreadTerminated (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePCUnknown (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePCUnknownFileType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePageCancelled (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePagerError (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePagerWriteError (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePermanentlyErased (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePlotAlreadyStarted (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePlotCancelled (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePlotStyleInColorDependentMode (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePointNotOnEntity (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePolyWidthLost (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ePreviewFailed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eProfileDoesNotExist (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eProfileIsInUse (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eProperClassSeparatorExpected (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eReadImageBufferFailed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eRecordNotInTable (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eReferencedInEquation (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eRegappIdNotFound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eRegistryAccessError (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eRegistryCreateError (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eRenameDoesNotExist (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eRenameInvalidLayoutName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eRenameInvalidName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eRenameIsModelSpace (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eRenameLayoutAlreadyExists (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eRepeatEntity (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eRepeatedDwgRead (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eRowsMustMatchColumns (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eSecErrorCipherNotSupported (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eSecErrorComputingSignature (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eSecErrorDecryptingData (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eSecErrorEncryptingData (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eSecErrorGeneratingTimestamp (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eSecErrorReadingFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eSecErrorWritingFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eSecErrorWritingSignature (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eSecInitializationFailure (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eSecInvalidDigitalID (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eSelfIntersecting (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eSelfReference (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eSetFailed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eSilentOpenFileCancelled (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eSingularPoint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eSomeInputDataLeftUnread (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eStringNotAllowedInExpression (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eStringTooLong (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eSubSelectionSetEmpty (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eSubentitiesStillOpen (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eTargetDocNotQuiescent (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eTooFewLineTypeElements (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eTooFewVertices (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eTooManyActiveCommands (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eTooManyLineTypeElements (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eTooManyVertices (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eTransactionOpenWhileCommandEnded (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUnableToGetLabelBlock (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUnableToGetViewAssociation (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUnableToRemoveAssociation  (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUnableToRemoveOverrides (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUnableToRetrieveOverrides (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUnableToSetLabelBlock (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUnableToSetViewAssociation (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUnableToStoreOverrides (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUnableToStoreReconcileStatus (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUnableToSyncModelView (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUnableToTrimLastPiece (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUnableToTrimSurface (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUndefineShapeName (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUndefinedDxfGroupCode (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUndefinedLineType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUndoNoGroupBegin (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUndoOperationNotAvailable (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUnknownDxfFileFormat (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUnknownHandle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUnrecoverableErrors (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUnsupportedFileFormat (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUserBreak (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eUserUnloaded (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eVSAPIOnlyValues (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eVSAlreadyExists (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eVSFalse (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eVSIsAcadDefault (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eVSIsInUse (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eVSNotFound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eVSOneOffCreated (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eVSTrue (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eVertexAfterFace (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eVetoed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eWasErased (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eWasNotErased (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eWasNotForwarding (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eWasNotOpenForWrite (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eWasNotifying (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eWasOpenForNotify (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eWasOpenForRead (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eWasOpenForUndo (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eWasOpenForWrite (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eWriteImageBufferFailed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eWrongCellType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eWrongDatabase (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eWrongObjectType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eWrongSubentityType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eXRefDependent (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eXdataSizeExceeded (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eXrefReloadImpossibleAtThisTime (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def eXrefReloaded (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class EvalVariant(PyRx.RxObject):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, intval: int)-> None : ...
    @overload
    def __init__ (self, floatval: float)-> None : ...
    @overload
    def __init__ (self, strval: str)-> None : ...
    @overload
    def __init__ (self, idval: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, pnt2dval: PyGe.Point2d)-> None : ...
    @overload
    def __init__ (self, pnt3dval: PyGe.Point3d)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - intval: int
    - floatval: float
    - strval: str
    - idval: PyDb.ObjectId
    - pnt2dval: PyGe.Point2d
    - pnt3dval: PyGe.Point3d
    '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def clear (self)-> None :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, otherObject: PyRx.RxObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def getDouble (self)-> float :
      '''                             '''
    ...
    def getInt16 (self)-> int :
      '''                             '''
    ...
    def getInt32 (self)-> int :
      '''                             '''
    ...
    def getObjectId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getPoint2d (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def getPoint3d (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def getString (self)-> str :
      '''                             '''
    ...
    def getType (self)-> PyDb.DwgDataType :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def setDouble (self, code: PyDb.DxfCode, val: float)-> None :
      '''                             '''
    ...
    def setInt16 (self, code: PyDb.DxfCode, val: int)-> None :
      '''                             '''
    ...
    def setInt32 (self, code: PyDb.DxfCode, val: int)-> None :
      '''                             '''
    ...
    def setObjectId (self, code: PyDb.DxfCode, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPoint2d (self, code: PyDb.DxfCode, pt: PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setPoint3d (self, code: PyDb.DxfCode, pt: PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setString (self, code: PyDb.DxfCode, val: str)-> None :
      '''                             '''
    ...

class Extents(object):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, min: PyGe.Point3d, max: PyGe.Point3d)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - min: PyGe.Point3d, max: PyGe.Point3d
    '''
    ...
    def addExt (self, extents: PyDb.Extents)-> None :
      '''                             '''
    ...
    def addPoint (self, pt: PyGe.Point3d)-> None :
      '''                             '''
    ...
    def addPoints (self, pts: list[PyGe.Point3d])-> None :
      '''                             '''
    ...
    def coords (self)-> tuple :
      '''                             '''
    ...
    def expandBy (self, vec: PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def intersectsWith (self, other: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def maxPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def midPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def minPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def set (self, min: PyGe.Point3d, max: PyGe.Point3d)-> PyDb.ErrorStatus :
      '''                             '''
    ...
    def transformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...

class Extents2d(object):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, min: PyGe.Point2d, max: PyGe.Point2d)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - min: PyGe.Point2d, max: PyGe.Point2d
    '''
    ...
    def addExt (self, ex: PyDb.Extents2d)-> None :
      '''                             '''
    ...
    def addPoint (self, pt: PyGe.Point2d)-> None :
      '''                             '''
    ...
    def addPoints (self, pts: list[PyGe.Point2d])-> None :
      '''                             '''
    ...
    def coords (self)-> tuple :
      '''                             '''
    ...
    def expandBy (self, vec: PyGe.Vector2d)-> None :
      '''                             '''
    ...
    def intersectsWith (self, ex: PyDb.Extents2d)-> bool :
      '''                             '''
    ...
    def maxPoint (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def midPoint (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def minPoint (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def set (self, min: PyGe.Point2d, max: PyGe.Point2d)-> PyDb.ErrorStatus :
      '''                             '''
    ...
    def transformBy (self, xform: PyGe.Matrix2d)-> None :
      '''                             '''
    ...

class ExtrudedSurface(Surface):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...
    def cast (self, *args, **kwargs)-> PyDb.ExtrudedSurface :
      '''cast( (RxObject)arg1) -> ExtrudedSurface :

    C++ signature :
        class PyDbExtrudedSurface cast(class PyRxObject)'''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.ExtrudedSurface :
      '''cloneFrom( (RxObject)arg1) -> ExtrudedSurface :

    C++ signature :
        class PyDbExtrudedSurface cloneFrom(class PyRxObject)'''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def createExtrudedSurface (self, *args, **kwargs)-> PyDb.ExtrudedSurface :
      '''createExtrudedSurface( (Profile3d)arg1, (Vector3d)arg2, (SweepOptions)arg3) -> ExtrudedSurface :

    C++ signature :
        class PyDbExtrudedSurface createExtrudedSurface(class PyDb3dProfile {lvalue},class AcGeVector3d,class PyDbSweepOptions {lvalue})'''
    ...
    def createFrom (self, *args, **kwargs)-> PyDb.Surface :
      '''createFrom( (Entity)arg1) -> Surface :

    C++ signature :
        class PyDbSurface createFrom(class PyDbEntity)'''
    ...
    def creationActionBodyId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''creationActionBodyId( (Surface)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId creationActionBodyId(class PyDbSurface {lvalue})'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extendEdges (self, *args, **kwargs)-> None :
      '''extendEdges( (Surface)arg1, (list)arg2, (float)arg3, (SurfaceEdgeExtensionType)arg4, (bool)arg5) -> None :

    C++ signature :
        void extendEdges(class PyDbSurface {lvalue},class boost::python::list {lvalue},double,enum AcDbSurface::EdgeExtensionType,bool)'''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getArea (self, *args, **kwargs)-> float :
      '''getArea( (Surface)arg1) -> float :

    C++ signature :
        double getArea(class PyDbSurface {lvalue})'''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPerimeter (self, *args, **kwargs)-> float :
      '''getPerimeter( (Surface)arg1) -> float :

    C++ signature :
        double getPerimeter(class PyDbSurface {lvalue})'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def getWireframeType (self, *args, **kwargs)-> PyDb.SurfaceWireframeType :
      '''getWireframeType( (Surface)arg1) -> SurfaceWireframeType :

    C++ signature :
        enum AcDbSurface::WireframeType getWireframeType(class PyDbSurface {lvalue})'''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def modificationActionBodyIds (self, *args, **kwargs)-> list :
      '''modificationActionBodyIds( (Surface)arg1) -> list :

    C++ signature :
        class boost::python::list modificationActionBodyIds(class PyDbSurface {lvalue})'''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def projectOnToSurface (self, *args, **kwargs)-> list :
      '''projectOnToSurface( (Surface)arg1, (Entity)arg2, (Vector3d)arg3) -> list :

    C++ signature :
        class boost::python::list projectOnToSurface(class PyDbSurface {lvalue},class PyDbEntity,class AcGeVector3d)'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def rayTest (self, *args, **kwargs)-> tuple :
      '''rayTest( (Surface)arg1, (Point3d)arg2, (Vector3d)arg3, (float)arg4) -> tuple :

    C++ signature :
        class boost::python::tuple rayTest(class PyDbSurface {lvalue},class AcGePoint3d,class AcGeVector3d,double)'''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setUIsolineDensity (self, *args, **kwargs)-> None :
      '''setUIsolineDensity( (Surface)arg1, (int)arg2) -> None :

    C++ signature :
        void setUIsolineDensity(class PyDbSurface {lvalue},unsigned short)'''
    ...
    def setVIsolineDensity (self, *args, **kwargs)-> None :
      '''setVIsolineDensity( (Surface)arg1, (int)arg2) -> None :

    C++ signature :
        void setVIsolineDensity(class PyDbSurface {lvalue},unsigned short)'''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setWireframeType (self, *args, **kwargs)-> None :
      '''setWireframeType( (Surface)arg1, (SurfaceWireframeType)arg2) -> None :

    C++ signature :
        void setWireframeType(class PyDbSurface {lvalue},enum AcDbSurface::WireframeType)'''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def uIsolineDensity (self, *args, **kwargs)-> int :
      '''uIsolineDensity( (Surface)arg1) -> int :

    C++ signature :
        unsigned short uIsolineDensity(class PyDbSurface {lvalue})'''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def vIsolineDensity (self, *args, **kwargs)-> int :
      '''vIsolineDensity( (Surface)arg1) -> int :

    C++ signature :
        unsigned short vIsolineDensity(class PyDbSurface {lvalue})'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class Face(Entity):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, pt0 : PyGe.Point3d, pt1 : PyGe.Point3d, pt2 : PyGe.Point3d)-> None : ...
    @overload
    def __init__ (self, pt0 : PyGe.Point3d, pt1 : PyGe.Point3d, pt2 : PyGe.Point3d,pt3 : PyGe.Point3d)-> None : ...
    @overload
    def __init__ (self, pt0 : PyGe.Point3d, pt1 : PyGe.Point3d, pt2 : PyGe.Point3d, e0vis: bool, e1vis: bool, e2vis: bool, e3vis: bool, e4vis: bool)-> None : ...
    @overload
    def __init__ (self, pt0 : PyGe.Point3d, pt1 : PyGe.Point3d, pt2 : PyGe.Point3d,pt3 : PyGe.Point3d, e0vis: bool, e1vis: bool, e2vis: bool, e3vis: bool, e4vis: bool)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - pt0 : PyGe.Point3d, pt1 : PyGe.Point3d, pt2 : PyGe.Point3d
    - pt0 : PyGe.Point3d, pt1 : PyGe.Point3d, pt2 : PyGe.Point3d,pt3 : PyGe.Point3d
    - pt0 : PyGe.Point3d, pt1 : PyGe.Point3d, pt2 : PyGe.Point3d, e0vis: bool, e1vis: bool, e2vis: bool, e3vis: bool, e4vis: bool
    - pt0 : PyGe.Point3d, pt1 : PyGe.Point3d, pt2 : PyGe.Point3d,pt3 : PyGe.Point3d, e0vis: bool, e1vis: bool, e2vis: bool, e3vis: bool, e4vis: bool
    - id: PyDb.ObjectId
    - id: PyDb.ObjectId, mode: PyDb.OpenMode
    - id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool
    '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Face :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Face :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def getVertexAt (self, vIndex:int)-> PyGe.Point3d :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEdgeVisibleAt (self, vIndex:int)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def makeEdgeInvisibleAt (self, vIndex:int)-> None :
      '''                             '''
    ...
    def makeEdgeVisibleAt (self, vIndex:int)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setVertexAt (self, vIndex:int, pnt:PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class FaceRecord(Vertex):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, vtx0: int, vtx1: int, vtx2: int, vtx3: int)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - vtx0: int, vtx1: int, vtx2: int, vtx3: int
    - id: PyDb.ObjectId
    - id: PyDb.ObjectId, mode: PyDb.OpenMode
    - id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool
    '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.FaceRecord :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.FaceRecord :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def getVertexAt (self, val : int)-> int :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEdgeVisibleAt (self, val : int)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def makeEdgeInvisibleAt (self, val : int)-> None :
      '''                             '''
    ...
    def makeEdgeVisibleAt (self, val : int)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setVertexAt (self, val : int, idx : int)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class Fcf(Entity):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, val: str, pnt: PyGe.Point3d, normal: PyGe.Vector3d, direction: PyGe.Vector3d)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - val: str, pnt: PyGe.Point3d, normal: PyGe.Vector3d, direction: PyGe.Vector3d
    - id: PyDb.ObjectId
    - id: PyDb.ObjectId, mode: PyDb.OpenMode
    - id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool
    '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Fcf :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Fcf :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dimclrd (self)-> PyDb.Color :
      '''                             '''
    ...
    def dimclrt (self)-> PyDb.Color :
      '''                             '''
    ...
    def dimensionStyle (self)-> PyDb.HardPointerId :
      '''                             '''
    ...
    def dimgap (self)-> float :
      '''                             '''
    ...
    def dimscale (self)-> float :
      '''                             '''
    ...
    def dimtxsty (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimtxt (self)-> float :
      '''                             '''
    ...
    def direction (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getBoundingPline (self)-> list :
      '''                             '''
    ...
    def getBoundingPoints (self)-> list :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDimstyleData (self)-> PyDb.DimStyleTableRecord :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def location (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def normal (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setDimVars (self)-> None :
      '''                             '''
    ...
    def setDimclrd (self, val:Color)-> None :
      '''                             '''
    ...
    def setDimclrt (self, val:Color)-> None :
      '''                             '''
    ...
    def setDimensionStyle (self, val:PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimgap (self, val:float)-> None :
      '''                             '''
    ...
    def setDimscale (self, val:float)-> None :
      '''                             '''
    ...
    def setDimstyleData (self, val:PyDb.DimStyleTableRecord)-> None :
      '''                             '''
    ...
    def setDimtxsty (self, *args, **kwargs)-> None :
      '''setDimtxsty( (Fcf)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setDimtxsty(class PyDbFcf {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def setDimtxt (self, val:float)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLocation (self, val:PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOrientation (self, normal:PyGe.Vector3d, direction:PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setText (self, val:str)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def text (self)-> str :
      '''                             '''
    ...
    def textAll (self)-> str :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class Field(DbObject):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, pszFieldCode: str)-> None : ...
    @overload
    def __init__ (self, pszFieldCode: str, bTextField: bool)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - pszFieldCode: str
    - pszFieldCode: str, bTextField: bool
    - id: PyDb.ObjectId
    - id: PyDb.ObjectId, mode: PyDb.OpenMode
    - id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool
    '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Field :
      '''                             '''
    ...
    def childCount (self)-> int :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Field :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def convertToTextField (self)-> None :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...

    @overload
    def evaluate (self, /)-> None : ...
    @overload
    def evaluate (self, nFlag: PyDb.FieldEvalContext)-> None : ...
    @overload
    def evaluate (self, nFlag: PyDb.FieldEvalContext, db: PyDb.Database)-> None : ...
    def evaluate (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - nFlag: PyDb.FieldEvalContext
    - nFlag: PyDb.FieldEvalContext, db: PyDb.Database
    '''
    ...
    def evaluationOption (self)-> PyDb.FieldEvalOption :
      '''                             '''
    ...
    def evaluationStatus (self)-> PyDb.FieldEvalStatus :
      '''                             '''
    ...
    def evaluatorId (self)-> str :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...

    @overload
    def getFieldCode (self, nContext: PyDb.FieldCodeFlag)-> str : ...
    @overload
    def getFieldCode (self, nContext: PyDb.FieldCodeFlag, children: PyDb.Field, mode: PyDb.OpenMode)-> str : ...
    def getFieldCode (self, *args, **kwargs)-> str :
      '''Overloads:
    - nContext: PyDb.FieldCodeFlag
    - nContext: PyDb.FieldCodeFlag, children: PyDb.Field, mode: PyDb.OpenMode
    '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFormat (self)-> str :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getValue (self)-> str :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTextField (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def postInDatabase (self, db: PyDb.Database)-> None :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setEvaluationOption (self, val : PyDb.FieldEvalOption)-> None :
      '''                             '''
    ...
    def setEvaluatorId (self, pszEvaluatorId : str)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setFormat (self, pszFormat : str)-> None :
      '''                             '''
    ...
    def setInObject (self, db: PyDb.DbObject, pszPropName: str)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def state (self)-> PyDb.FieldState :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class FieldCodeFlag(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kAddMarkers (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kChildObjectReference (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDetachChildren (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEscapeBackslash (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEvaluatedChildren (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEvaluatedText (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kFieldCode (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kForExpression (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kObjectReference (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPreserveFields (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPreserveOptions (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kStripOptions (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextField (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class FieldEvalContext(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kDemand (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEtransmit (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOpen (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPlot (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPlotPreview (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPreview (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kRegen (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSave (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class FieldEvalOption(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kAutomatic (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDisable (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOnDemand (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOnEtransmit (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOnOpen (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOnPlot (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOnRegen (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOnSave (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class FieldEvalStatus(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kEvaluatorNotFound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kInvalidCode (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kInvalidContext (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNotYetEvaluated (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOtherError (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSuccess (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSyntaxError (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class FieldState(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kCompiled (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEvaluated (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHasCache (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHasFormattedString (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kInitialized (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kModified (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class FilerType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kBagFiler (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCopyFiler (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDeepCloneFiler (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kFileFiler (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kIdFiler (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kIdXlateFiler (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPageFiler (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPurgeFiler (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUndoFiler (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kWblockCloneFiler (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class FindFileHint(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kARXApplication (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCloudOrProjectFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCompiledShapeFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDataLinkFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDefault (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEmbeddedImageFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kFontFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kFontMapFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMaterialMapFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPatternFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPhotometricWebFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTrueTypeFontFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnderlayFile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kXRefDrawing (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class FullSubentPath(object):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (SubentType)arg2, (int)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,unsigned int,__int64)

__init__( (object)arg1, (ObjectId)arg2, (SubentType)arg3, (int)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,unsigned int,__int64)

__init__( (object)arg1, (ObjectId)arg2, (SubentId)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,class PyDbSubentId)

__init__( (object)arg1, (list)arg2, (SubentId)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class boost::python::list,class PyDbSubentId)'''
    ...
    def kNull (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def objectIds (self)-> list :
      '''                             '''
    ...
    def setObjectIds (self, *args, **kwargs)-> None :
      '''setObjectIds( (FullSubentPath)arg1, (list)arg2) -> None :

    C++ signature :
        void setObjectIds(class PyDbFullSubentPath {lvalue},class boost::python::list)'''
    ...
    def setSubentId (self)-> None :
      '''                             '''
    ...

class GeoCoordinateSystem(object):
    def __init__ (self, *args, **kwargs)-> None :
      '''Raises an exception
This class cannot be instantiated from Python'''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def create (val : str)-> PyDb.GeoCoordinateSystem :
      '''                             '''
    ...
    def getCartesianExtents (self)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getDatum (self)-> tuple :
      '''                             '''
    ...
    def getDescription (self)-> str :
      '''                             '''
    ...
    def getEllipsoid (self)-> tuple :
      '''                             '''
    ...
    def getEpsgCode (self)-> int :
      '''                             '''
    ...
    def getGeoUnit (self)-> PyDb.GeoCoordinateSystemUnit :
      '''                             '''
    ...
    def getGeodeticExtents (self)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getId (self)-> str :
      '''                             '''
    ...
    def getOffset (self)-> PyGe.Vector2d :
      '''                             '''
    ...
    def getProjectionCode (self)-> PyDb.GeoCoordinateSystemProjectionCode :
      '''                             '''
    ...
    def getType (self)-> PyDb.GeoCoordinateSystemType :
      '''                             '''
    ...
    def getUnit (self)-> PyDb.UnitsValue :
      '''                             '''
    ...
    def getUnitScale (self)-> float :
      '''                             '''
    ...
    def getWktRepresentation (self)-> str :
      '''                             '''
    ...
    def getXmlRepresentation (self)-> str :
      '''                             '''
    ...

class GeoCoordinateSystemProjectionCode(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kProjectionCodeAlber (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeAzede (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeAzmea (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeAzmed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeBipolar (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeBonne (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeCassini (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeEckert4 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeEckert6 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeEdcnc (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeEdcyl (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeEdcylE (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeGaussK (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeGnomonic (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeGoode (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeHom1uv (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeHom1xy (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeHom2uv (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeHom2xy (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeKrovak (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeKrvk95 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeLL (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeLm1sp (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeLm2sp (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeLmblg (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeLmbrtaf (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeLmtan (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeMiller (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeMndotl (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeMndott (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeModpc (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeMollweid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeMrcat (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeMrcatK (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeMstero (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeNeacyl (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeNerth (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeNrthsrt (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeNzealand (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeOblqM (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeObqcyl (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeOrtho (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeOstn02 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeOstn97 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeOstro (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodePlateCarree (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodePlycn (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodePstro (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodePstrosl (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodePvMercator (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeRobinson (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeRskew (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeRskewc (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeRskewo (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeSinus (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeSotrm (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeSstro (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeSwiss (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeSys34 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeSys34_01 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeSys34_99 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeTeacyl (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeTm (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeTrmeraf (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeTrmrkrg (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeTrmrs (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeUnknown (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeUtm (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeVdgrntn (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeWccsl (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeWccst (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kProjectionCodeWinkl (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class GeoCoordinateSystemType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kTypeArbitrary (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTypeGeographic (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTypeProjected (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTypeUnknown (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class GeoCoordinateSystemUnit(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kUnitBenoitChain (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitBenoitLink (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitBrealey (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitCaGrid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitCapeFoot (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitCentimeter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitCentisec (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitClarkeChain (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitClarkeFoot (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitClarkeLink (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitDecameter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitDecimeter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitDecisec (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitDegree (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitDekameter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitFoot (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitFurlong (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitGermanMeter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitGoldCoastFoot (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitGrad (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitGrade (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitGunterChain (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitGunterLink (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitHectometer (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitIFoot (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitIInch (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitIMile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitIYard (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitInch (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitIndianFoot (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitIndianFt37 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitIndianFt62 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitIndianFt75 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitIndianYard (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitIndianYd37 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitInternationalChain (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitInternationalLink (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitKilometer (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitKnot (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitLat66 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitLat83 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitMapInfo (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitMeter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitMicroInch (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitMil (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitMile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitMillimeter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitMillisec (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitMinute (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitNautM (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitPerch (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitPole (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitRadian (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitRod (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitRood (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitSearsChain (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitSearsFoot (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitSearsLink (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitSearsYard (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitSecond (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitUnknown (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitYard (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class GeoData(DbObject):
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode.kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addMeshFace (self, idx : int, p0 : int, p1 : int, p2 : int)-> None :
      '''                             '''
    ...
    def addMeshPointMap (self, idx : int, src : PyGe.Point2d, dest : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockTableRecordId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.GeoData :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.GeoData :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def coordinateProjectionRadius (self)-> float :
      '''                             '''
    ...
    def coordinateSystem (self)-> str :
      '''                             '''
    ...
    def coordinateType (self)-> PyDb.GeoTypeOfCoordinates :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def designPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def doSeaLevelCorrection (self)-> bool :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def eraseFromDb (self)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def geoRSSTag (self)-> str :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getMeshFace (self, idx : int)-> tuple :
      '''                             '''
    ...
    def getMeshPointMap (self, idx : int)-> tuple :
      '''                             '''
    ...
    def getMeshPointMaps (self)-> tuple :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def horizontalUnitScale (self)-> float :
      '''                             '''
    ...
    def horizontalUnits (self)-> PyDb.UnitsValue :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def northDirection (self)-> float :
      '''                             '''
    ...
    def northDirectionVector (self)-> PyGe.Vector2d :
      '''                             '''
    ...
    def numMeshFaces (self)-> int :
      '''                             '''
    ...
    def numMeshPoints (self)-> int :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def observationCoverage (self)-> str :
      '''                             '''
    ...
    def observationFrom (self)-> str :
      '''                             '''
    ...
    def observationTo (self)-> str :
      '''                             '''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def postToDb (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def referencePoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def resetMeshPointMaps (self)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def scaleEstimationMethod (self)-> PyDb.GeoScaleEstimationMethod :
      '''                             '''
    ...
    def scaleFactor (self)-> float :
      '''                             '''
    ...
    def seaLevelElevation (self)-> float :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBlockTableRecordId (self, id : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setCoordinateProjectionRadius (self, val : float)-> None :
      '''                             '''
    ...
    def setCoordinateSystem (self, val : str)-> None :
      '''                             '''
    ...
    def setCoordinateType (self, val : PyDb.GeoTypeOfCoordinates)-> None :
      '''                             '''
    ...
    def setDesignPoint (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setDoSeaLevelCorrection (self, val : bool)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setGeoRSSTag (self, val : str)-> None :
      '''                             '''
    ...
    def setHorizontalUnitScale (self, val : float)-> None :
      '''                             '''
    ...
    def setHorizontalUnits (self, val : PyDb.UnitsValue)-> None :
      '''                             '''
    ...
    def setMeshPointMaps (self, src : list[PyGe.Point2d], dest : list[PyGe.Point2d])-> None :
      '''                             '''
    ...
    def setNorthDirectionVector (self, vec : PyGe.Vector2d)-> None :
      '''                             '''
    ...
    def setObservationCoverage (self, val : str)-> None :
      '''                             '''
    ...
    def setObservationFrom (self, val : str)-> None :
      '''                             '''
    ...
    def setObservationTo (self, val : str)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setReferencePoint (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setScaleEstimationMethod (self, val : PyDb.GeoScaleEstimationMethod)-> None :
      '''                             '''
    ...
    def setScaleFactor (self, val : float)-> None :
      '''                             '''
    ...
    def setSeaLevelElevation (self, val : float)-> None :
      '''                             '''
    ...
    def setUpDirection (self, vec : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setVerticalUnitScale (self, val : float)-> None :
      '''                             '''
    ...
    def setVerticalUnits (self, val : PyDb.UnitsValue)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformFromLonLatAlt (self, pt : PyGe.Point3d | float)-> PyGe.Point3d :
      '''                             '''
    ...
    def transformToLonLatAlt (self, pt : PyGe.Point3d | float)-> PyGe.Point3d :
      '''                             '''
    ...
    def upDirection (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def updateTransformationMatrix (self)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def verticalUnitScale (self)-> float :
      '''                             '''
    ...
    def verticalUnits (self)-> PyDb.UnitsValue :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class GeoMap(RasterImage):
    def LOD (self)-> int :
      '''                             '''
    ...

    @overload
    def __init__ (self, mapType: PyDb.AcGeoMapType, res: PyDb.AcGeoMapResolution, levelOfDetail: int)-> None : ...
    @overload
    def __init__ (self, viewportId: PyDb.ObjectId, isViewportSpecific: bool)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - mapType: PyDb.AcGeoMapType, res: PyDb.AcGeoMapResolution, levelOfDetail: int
    - viewportId: PyDb.ObjectId, isViewportSpecific: bool
    - id: PyDb.ObjectId
    - id: PyDb.ObjectId, mode: PyDb.OpenMode
    - id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool
    '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bottomLeftPt (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def brightness (self)-> int :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.GeoMap :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def clipBoundary (self)-> list :
      '''                             '''
    ...
    def clipBoundaryType (self)-> PyDb.ClipBoundaryType :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.GeoMap :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def contrast (self)-> int :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def fade (self)-> int :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getOrientation (self)-> tuple :
      '''                             '''
    ...
    def getPixelToModelTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def getVertices (self)-> list :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def height (self)-> float :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def imageBottomLeftPt (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def imageDefId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def imageHeight (self)-> float :
      '''                             '''
    ...
    def imageSize (self, val: bool=True)-> PyGe.Vector2d :
      '''                             '''
    ...
    def imageWidth (self)-> float :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isClipInverted (self)-> bool :
      '''                             '''
    ...
    def isClipped (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isImageShown (self)-> bool :
      '''                             '''
    ...
    def isImageTransparent (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isOutOfDate (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isSetDisplayOpt (self, val: PyDb.ImageDisplayOpt)-> bool :
      '''                             '''
    ...
    def isShownClipped (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def mapType (self)-> PyDb.AcGeoMapType :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def position (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def reactorId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def resolution (self)-> PyDb.AcGeoMapResolution :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self)-> float :
      '''                             '''
    ...
    def scale (self)-> PyGe.Vector2d :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBrightness (self, val: int)-> None :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setClipBoundaryToWholeImage (self, vec: PyGe.Vector2d)-> None :
      '''                             '''
    ...
    def setClipInverted (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setContrast (self, val: int)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setDisplayOpt (self, opt: PyDb.ImageDisplayOpt, val: bool)-> None :
      '''                             '''
    ...
    def setFade (self, val: int)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setHeight (self, val: float)-> None :
      '''                             '''
    ...
    def setImageDefId (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setImageTransparency (self, *args, **kwargs)-> None :
      '''setImageTransparency( (RasterImage)arg1, (bool)arg2) -> None :

    C++ signature :
        void setImageTransparency(class PyDbRasterImage {lvalue},bool)'''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMapType (self, val : PyDb.AcGeoMapType)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOrientation (self, pt: PyGe.Point3d, u: PyGe.Vector3d, v: PyGe.Vector3d)-> bool :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReactorId (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setResolution (self, val : PyDb.AcGeoMapResolution)-> None :
      '''                             '''
    ...
    def setRotation (self, val: float)-> None :
      '''                             '''
    ...
    def setShowClipped (self, val: bool)-> None :
      '''                             '''
    ...
    def setShowImage (self, val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setWidth (self, val: float)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def updateMapImage (self, reset : bool = False)-> bool :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def width (self)-> float :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class GeoPositionMarker(Entity):
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode.kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.GeoPositionMarker :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.GeoPositionMarker :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def enableFrameText (self)-> bool :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def geoPosition (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def landingGap (self)-> float :
      '''                             '''
    ...
    def latLonAlt (self)-> tuple :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def mtext (self)-> PyDb.MText :
      '''                             '''
    ...
    def mtextVisible (self)-> bool :
      '''                             '''
    ...
    def normal (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def notes (self)-> str :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def position (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def radius (self)-> float :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setEnableFrameText (self, val : bool)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setGeoPosition (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setLandingGap (self, val : float)-> None :
      '''                             '''
    ...
    def setLatLonAlt (self, lat : float, lon : float, alt : float)-> None :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMText (self, val : PyDb.MText.M)-> None :
      '''                             '''
    ...
    def setMTextVisible (self, val : bool)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNotes (self, val : str)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setRadius (self, val : float)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setText (self, val : str)-> None :
      '''                             '''
    ...
    def setTextAlignmentType (self, val : PyDb.GeoTextAlignmentType)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def text (self)-> str :
      '''                             '''
    ...
    def textAlignmentType (self)-> PyDb.GeoTextAlignmentType :
      '''                             '''
    ...
    def textStyle (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class GeoScaleEstimationMethod(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kScaleEstMethodPrismoidal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kScaleEstMethodReferencePoint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kScaleEstMethodUnity (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kScaleEstMethodUserDefined (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class GeoTextAlignmentType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kCenterAlignment (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLeftAlignment (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kRightAlignment (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class GeoTypeOfCoordinates(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kCoordTypGeographic (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCoordTypGrid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCoordTypLocal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCoordTypUnknown (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class GridLineStyle(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kGridLineStyleDouble (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kGridLineStyleSingle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class GridLineType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kAllGridLineTypes (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHorzBottom (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHorzGridLineTypes (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHorzInside (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHorzTop (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kInnerGridLineTypes (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kInvalidGridLine (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOuterGridLineTypes (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVertGridLineTypes (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVertInside (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVertLeft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVertRight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class GridProperty(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kGridPropAll (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kGridPropColor (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kGridPropDoubleLineSpacing (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kGridPropInvalid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kGridPropLineStyle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kGridPropLineWeight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kGridPropLinetype (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kGridPropVisibility (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class GripData(object):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def gripPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def setGripPoint (self, pt: PyGe.Point3d)-> None :
      '''                             '''
    ...

class Group(DbObject):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, grpDesc: str)-> None : ...
    @overload
    def __init__ (self, grpDesc: str, selectable: bool)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - grpDesc: str
    - grpDesc: str, selectable: bool
    - id: PyDb.ObjectId
    - id: PyDb.ObjectId, mode: PyDb.OpenMode
    - id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool
    '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def allEntityIds (self)-> list :
      '''                             '''
    ...
    def append (self, id : PyDb.ObjectId|list[PyDb.ObjectId])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Group :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def clear (self)-> None :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Group :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def description (self)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getIndex (self, id: PyDb.ObjectId)-> int :
      '''                             '''
    ...
    def getName (self)-> str :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has (self, entity: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def insertAt (self, index : int, id: PyDb.ObjectId|list[PyDb.ObjectId])-> None :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isAnonymous (self)-> bool :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotAccessible (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isSelectable (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def numEntities (self)-> int :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def objectIds (self)-> list :
      '''                             '''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def prepend (self, id : PyDb.ObjectId|list[PyDb.ObjectId])-> None :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def remove (self, id : PyDb.ObjectId|list[PyDb.ObjectId])-> None :
      '''                             '''
    ...
    def removeAt (self, index : int, id: PyDb.ObjectId|list[PyDb.ObjectId])-> None :
      '''                             '''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def replace (self, oldid: PyDb.ObjectId, newid: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def reverse (self)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAnonymous (self)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor)-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int)-> None :
      '''                             '''
    ...
    def setDescription (self, grpDesc : str)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setHighlight (self, val: bool)-> None :
      '''                             '''
    ...
    def setLayer (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setLinetype (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float)-> None :
      '''                             '''
    ...
    def setMaterial (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setName (self, val : str)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setSelectable (self, val : bool)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transfer (self, fromIndex: int, valtoIndex: int, numItems: int)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class Handle(object):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (int)arg2, (int)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,int,int)

__init__( (object)arg1, (str)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (int)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,unsigned __int64)'''
    ...
    def decrement (self, *args, **kwargs)-> None :
      '''decrement( (Handle)arg1) -> None :

    C++ signature :
        void decrement(class PyDbHandle {lvalue})'''
    ...
    def high (self, *args, **kwargs)-> int :
      '''high( (Handle)arg1) -> int :

    C++ signature :
        unsigned int high(class PyDbHandle {lvalue})'''
    ...
    def increment (self, *args, **kwargs)-> None :
      '''increment( (Handle)arg1) -> None :

    C++ signature :
        void increment(class PyDbHandle {lvalue})'''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (Handle)arg1) -> bool :

    C++ signature :
        bool isNull(class PyDbHandle {lvalue})'''
    ...
    def isOne (self, *args, **kwargs)-> bool :
      '''isOne( (Handle)arg1) -> bool :

    C++ signature :
        bool isOne(class PyDbHandle {lvalue})'''
    ...
    def low (self, *args, **kwargs)-> int :
      '''low( (Handle)arg1) -> int :

    C++ signature :
        unsigned int low(class PyDbHandle {lvalue})'''
    ...
    def setHigh (self, *args, **kwargs)-> None :
      '''setHigh( (Handle)arg1, (SubentType)arg2) -> None :

    C++ signature :
        void setHigh(class PyDbHandle {lvalue},unsigned int)'''
    ...
    def setLow (self, *args, **kwargs)-> None :
      '''setLow( (Handle)arg1, (SubentType)arg2) -> None :

    C++ signature :
        void setLow(class PyDbHandle {lvalue},unsigned int)'''
    ...
    def setNull (self, *args, **kwargs)-> None :
      '''setNull( (Handle)arg1) -> None :

    C++ signature :
        void setNull(class PyDbHandle {lvalue})'''
    ...
    def setValue (self, *args, **kwargs)-> None :
      '''setValue( (Handle)arg1, (int)arg2) -> None :

    C++ signature :
        void setValue(class PyDbHandle {lvalue},unsigned __int64)'''
    ...
    def toString (self, *args, **kwargs)-> str :
      '''toString( (Handle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > toString(class PyDbHandle {lvalue})'''
    ...
    def value (self, *args, **kwargs)-> int :
      '''value( (Handle)arg1) -> int :

    C++ signature :
        unsigned __int64 value(class PyDbHandle {lvalue})'''
    ...

class HardOwnershipId(ObjectId):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)'''
    ...
    def asOldId (self)-> int :
      '''                             '''
    ...
    def convertToRedirectedId (self)-> bool :
      '''                             '''
    ...
    def database (self)-> PyDb.Database :
      '''                             '''
    ...

    @staticmethod
    def fromOldId (oldid : int)-> PyDb.ObjectId :
      '''                             '''
    ...
    def handle (self)-> PyDb.Handle :
      '''                             '''
    ...
    def isDerivedFrom (self, desc : PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isEffectivelyErased (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isNull (self)-> bool :
      '''                             '''
    ...
    def isResident (self)-> bool :
      '''                             '''
    ...
    def isValid (self)-> bool :
      '''                             '''
    ...
    def isWellBehaved (self)-> bool :
      '''                             '''
    ...
    def nonForwardedHandle (self)-> PyDb.Handle :
      '''                             '''
    ...
    def objectClass (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def objectLeftOnDisk (self)-> bool :
      '''                             '''
    ...
    def originalDatabase (self)-> PyDb.Database :
      '''                             '''
    ...
    def setFromOldId (self, oldid : int)-> None :
      '''                             '''
    ...

class HardPointerId(ObjectId):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)'''
    ...
    def asOldId (self)-> int :
      '''                             '''
    ...
    def convertToRedirectedId (self)-> bool :
      '''                             '''
    ...
    def database (self)-> PyDb.Database :
      '''                             '''
    ...

    @staticmethod
    def fromOldId (oldid : int)-> PyDb.ObjectId :
      '''                             '''
    ...
    def handle (self)-> PyDb.Handle :
      '''                             '''
    ...
    def isDerivedFrom (self, desc : PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isEffectivelyErased (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isNull (self)-> bool :
      '''                             '''
    ...
    def isResident (self)-> bool :
      '''                             '''
    ...
    def isValid (self)-> bool :
      '''                             '''
    ...
    def isWellBehaved (self)-> bool :
      '''                             '''
    ...
    def nonForwardedHandle (self)-> PyDb.Handle :
      '''                             '''
    ...
    def objectClass (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def objectLeftOnDisk (self)-> bool :
      '''                             '''
    ...
    def originalDatabase (self)-> PyDb.Database :
      '''                             '''
    ...
    def setFromOldId (self, oldid : int)-> None :
      '''                             '''
    ...

class Hatch(Entity):
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode.kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def appendLoop (self, loopType : int, ids : list[PyDb.ObjectId])-> None :
      '''                             '''
    ...
    def appendLoopBulges (self, loopType : int, vertices : list, bulges : list)-> None :
      '''                             '''
    ...
    def appendLoopEdges (self, loopType : int, edges : list, edgeTypes : list)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def associative (self)-> bool :
      '''                             '''
    ...
    def backgroundColor (self)-> PyDb.Color :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Hatch :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Hatch :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevation (self)-> float :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def evaluateGradientColorAt (self, *args, **kwargs)-> PyDb.Color :
      '''evaluateGradientColorAt( (Hatch)arg1, (float)arg2) -> Color :

    C++ signature :
        class AcCmColor evaluateGradientColorAt(class PyDbHatch {lvalue},float)'''
    ...
    def evaluateHatch (self, val : bool=False)-> None :
      '''                             '''
    ...
    def evaluateHatchAllScales (self, val : bool=False)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getArea (self)-> float :
      '''                             '''
    ...
    def getAssocObjIds (self)-> list :
      '''                             '''
    ...
    def getAssocObjIdsAt (self, val: int)-> list :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGradientColors (self)-> tuple :
      '''                             '''
    ...
    def getGradientOneColorMode (self)-> bool :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getHatchLineDataAt (self, val : int)-> tuple :
      '''                             '''
    ...
    def getHatchLinesData (self)-> tuple :
      '''                             '''
    ...
    def getLoopBulgesAt (self, val : int)-> tuple :
      '''                             '''
    ...
    def getLoopEdgesAt (self, val : int)-> tuple :
      '''                             '''
    ...
    def getPatternDefinitionAt (self, val : int)-> tuple :
      '''                             '''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getRegionArea (self)-> PyDb.Region :
      '''                             '''
    ...
    def getShadeTintValue (self)-> float :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def gradientAngle (self)-> float :
      '''                             '''
    ...
    def gradientName (self)-> str :
      '''                             '''
    ...
    def gradientShift (self)-> float :
      '''                             '''
    ...
    def gradientType (self)-> PyDb.HatchGradientPatternType :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def hatchObjectType (self)-> PyDb.HatchObjectType :
      '''                             '''
    ...
    def hatchStyle (self)-> PyDb.HatchStyle :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def insertLoopAt (self, idx : int, loopType : int, ids : list[PyDb.ObjectId])-> None :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isGradient (self)-> bool :
      '''                             '''
    ...
    def isHatch (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isSolidFill (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineGenerationEnabled (self)-> bool :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def normal (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def numHatchLines (self)-> int :
      '''                             '''
    ...
    def numLoops (self)-> int :
      '''                             '''
    ...
    def numPatternDefinitions (self)-> int :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def originPoint (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def patternAngle (self)-> float :
      '''                             '''
    ...
    def patternDouble (self)-> bool :
      '''                             '''
    ...
    def patternName (self)-> str :
      '''                             '''
    ...
    def patternScale (self)-> float :
      '''                             '''
    ...
    def patternSpace (self)-> float :
      '''                             '''
    ...
    def patternType (self)-> PyDb.HatchPatternType :
      '''                             '''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeAssocObjIds (self)-> None :
      '''                             '''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeHatchLines (self)-> None :
      '''                             '''
    ...
    def removeLoopAt (self, idx : int)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAssociative (self, val : bool)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBackgroundColor (self, val : PyDb.AcCmColor)-> None :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setElevation (self, val : float)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setGradient (self, val: PyDb.HatchGradientPatternType, name: str)-> None :
      '''                             '''
    ...
    def setGradientAngle (self, val : float)-> None :
      '''                             '''
    ...
    def setGradientColors (self, colors : list, values : list)-> None :
      '''                             '''
    ...
    def setGradientOneColorMode (self, val : bool)-> None :
      '''                             '''
    ...
    def setGradientShift (self, val : float)-> None :
      '''                             '''
    ...
    def setHatchObjectType (self, val: PyDb.HatchObjectType)-> None :
      '''                             '''
    ...
    def setHatchStyle (self, val: PyDb.HatchStyle)-> None :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineGenerationEnabled (self, val : bool)-> bool :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self, val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOriginPoint (self, val : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPattern (self, val: PyDb.HatchPatternType, name: str)-> None :
      '''                             '''
    ...
    def setPatternAngle (self, val : float)-> None :
      '''                             '''
    ...
    def setPatternDouble (self, val : bool)-> None :
      '''                             '''
    ...
    def setPatternScale (self, val : float)-> None :
      '''                             '''
    ...
    def setPatternSpace (self, val : float)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setShadeTintValue (self, val : float)-> None :
      '''                             '''
    ...
    def setShadeTintValueAndColor2 (self, val: float)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class HatchEdgeType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kCirArc (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEllArc (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLine (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSpline (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class HatchGradientPatternType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kPreDefinedGradient (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUserDefinedGradient (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class HatchLoopType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kDefault (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDerived (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDoesNotSupportScale (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDuplicate (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kExternal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kForceAnnoAllVisible (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kIsAnnotative (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kIsAnnotativeBlock (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNotClosed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOrientToPaper (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOutermost (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPolyline (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSelfIntersecting (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextIsland (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextbox (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class HatchObjectType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kGradientObject (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHatchObject (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class HatchPatternType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kCustomDefined (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPreDefined (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUserDefined (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class HatchStyle(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kIgnore (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNormal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOuter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class Helix(Spline):
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode=PyDb.OpenMode.kForRead)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def axisPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def axisVector (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def baseRadius (self)-> float :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Helix :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Helix :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def constrain (self)-> PyDb.HelixConstrainType :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...

    @staticmethod
    def createFromAcGeCurve (curve: PyGe.Curve3d,normal: PyGe.Vector3d = PyGe.Vector3d.kZAxis,tol: PyGe.Tol = 'default')-> PyDb.Curve :
      '''                             '''
    ...
    def createHelix (self)-> None :
      '''                             '''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def degree (self)-> int :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevateDegree (self, val : int)-> None :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> None :
      '''extend( (Curve)arg1, (float)arg2) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def fitTolerance (self)-> float :
      '''                             '''
    ...
    def getAcGeCurve (self, tol: PyGe.Tol = 'default')-> PyGe.Curve3d :
      '''                             '''
    ...
    def getArea (self)-> float :
      '''                             '''
    ...
    def getClosestPointTo (self, point3d: PyGe.Point3d, direction: PyGe.Vector3d=None, extend: bool=False)-> PyGe.Point3d :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getControlPointAt (self, idx:int)-> PyGe.Point3d :
      '''                             '''
    ...
    def getDistAtParam (self, param: float)-> float :
      '''                             '''
    ...
    def getDistAtPoint (self, point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEndParam (self)-> float :
      '''                             '''
    ...
    def getEndPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self, param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getFitData (self)-> tuple :
      '''                             '''
    ...
    def getFitDataKnot (self)-> tuple :
      '''                             '''
    ...
    def getFitPointAt (self, idx:int)-> PyGe.Point3d :
      '''                             '''
    ...
    def getFitTangents (self)-> tuple :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getNurbsData (self)-> tuple :
      '''                             '''
    ...
    def getOffsetCurves (self, dist: float)-> list :
      '''                             '''
    ...
    def getOffsetCurvesGivenPlaneNormal (self, *args, **kwargs)-> list :
      '''getOffsetCurvesGivenPlaneNormal( (Spline)arg1, (Vector3d)arg2, (float)arg3) -> list :

    C++ signature :
        class boost::python::list getOffsetCurvesGivenPlaneNormal(class PyDbSpline {lvalue},class AcGeVector3d,double)'''
    ...
    def getOrthoProjectedCurve (self, plane: PyGe.Plane)-> PyDb.Curve :
      '''                             '''
    ...
    def getParamAtDist (self, dist: float)-> float :
      '''                             '''
    ...
    def getParamAtPoint (self, point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getPointAtDist (self, dist: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getPointAtParam (self, param: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getProjectedCurve (self, plane: PyGe.Plane, projDir: PyGe.Vector3d)-> PyDb.Curve :
      '''                             '''
    ...
    def getSecondDeriv (self, param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getSpline (self)-> PyDb.Spline :
      '''                             '''
    ...
    def getSplitCurves (self, paramsOrPoints: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParam (self, param: float)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParams (self, params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoint (self, point: PyGe.Point3d)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoints (self, points: list)-> list :
      '''                             '''
    ...
    def getStartParam (self)-> float :
      '''                             '''
    ...
    def getStartPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasFitData (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def height (self)-> float :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def insertControlPointAt (self, knotParam: int, ctrlPt: PyGe.Point3d)-> None : ...
    @overload
    def insertControlPointAt (self, knotParam: int, ctrlPt: PyGe.Point3d,weight: float)-> None : ...
    def insertControlPointAt (self, *args, **kwargs)-> None :
      '''Overloads:
    - knotParam: int, ctrlPt: PyGe.Point3d
    - knotParam: int, ctrlPt: PyGe.Point3d,weight: float
    '''
    ...
    def insertFitPointAt (self, idx:int, pnt:PyGe.Point3d)-> None :
      '''                             '''
    ...
    def insertKnot (self, val : float)-> None :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isClosed (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNull (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPeriodic (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isRational (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def numControlPoints (self)-> int :
      '''                             '''
    ...
    def numFitPoints (self)-> int :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def purgeFitData (self)-> None :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def rebuild (self, degree: int, numPnts: int)-> None :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeControlPointAt (self, val : int)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeFitPointAt (self, idx:int)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def reverseCurve (self)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setAxisPoint (self, axisPoint : PyGe.Point3d, bMoveStartPoint : bool = True)-> None :
      '''                             '''
    ...
    def setAxisVector (self, val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setBaseRadius (self, val : float)-> None :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setConstrain (self, val : PyDb.HelixConstrainType)-> None :
      '''                             '''
    ...
    def setControlPointAt (self, idx:int, pnt:PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setFitData (self, *args, **kwargs)-> None :
      '''setFitData( (Spline)arg1, (list)arg2, (int)arg3, (float)arg4, (Vector3d)arg5, (Vector3d)arg6) -> None :

    C++ signature :
        void setFitData(class PyDbSpline {lvalue},class boost::python::list,int,double,class AcGeVector3d,class AcGeVector3d)'''
    ...

    @overload
    def setFitDataKnot (self, idfitPoints: list[PyGe.Point3d], periodic: bool, knotParam: PyGe.KnotParameterization)-> None : ...
    @overload
    def setFitDataKnot (self, idfitPoints: list[PyGe.Point3d], periodic: bool, knotParam: PyGe.KnotParameterization, degree: int, fitTolerance: float)-> None : ...
    @overload
    def setFitDataKnot (self, idfitPoints: list[PyGe.Point3d], startTangent: PyGe.Vector3d, endTangent: PyGe.Vector3d, knotParam: PyGe.KnotParameterization)-> None : ...
    @overload
    def setFitDataKnot (self, idfitPoints: list[PyGe.Point3d], startTangent: PyGe.Vector3d, endTangent: PyGe.Vector3d, knotParam: PyGe.KnotParameterization, order: int, fitTolerance: float)-> None : ...
    def setFitDataKnot (self, *args, **kwargs)-> None :
      '''Overloads:
    - idfitPoints: list[PyGe.Point3d], periodic: bool, knotParam: PyGe.KnotParameterization
    - idfitPoints: list[PyGe.Point3d], periodic: bool, knotParam: PyGe.KnotParameterization, degree: int, fitTolerance: float
    - idfitPoints: list[PyGe.Point3d], startTangent: PyGe.Vector3d, endTangent: PyGe.Vector3d, knotParam: PyGe.KnotParameterization
    - idfitPoints: list[PyGe.Point3d], startTangent: PyGe.Vector3d, endTangent: PyGe.Vector3d, knotParam: PyGe.KnotParameterization, order: int, fitTolerance: float
    '''
    ...
    def setFitPointAt (self, idx:int, pnt:PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setFitTangents (self, start : PyGe.Vector3d, end : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setFitTol (self, val : float)-> None :
      '''                             '''
    ...
    def setFromAcGeCurve (self, curve: PyGe.Curve3d, normal: PyGe.Vector3d = PyGe.Vector3d.kZAxis, tol: PyGe.Tol = 'default')-> None :
      '''                             '''
    ...
    def setHeight (self, val : float)-> None :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...

    @overload
    def setNurbsData (self, degree: int, rational: bool, closed: bool, periodic: bool, controlPoints: list[PyGe.Point3d], knots: list[float], weights: list[float])-> None : ...
    @overload
    def setNurbsData (self, degree: int, rational: bool, closed: bool, periodic: bool, controlPoints: list[PyGe.Point3d], knots: list[float], weights: list[float], controlPtTol: float, knotTol: float)-> None : ...
    def setNurbsData (self, *args, **kwargs)-> None :
      '''Overloads:
    - degree: int, rational: bool, closed: bool, periodic: bool, controlPoints: list[PyGe.Point3d], knots: list[float], weights: list[float]
    - degree: int, rational: bool, closed: bool, periodic: bool, controlPoints: list[PyGe.Point3d], knots: list[float], weights: list[float], controlPtTol: float, knotTol: float
    '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setStartPoint (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setTopRadius (self, val : float)-> None :
      '''                             '''
    ...
    def setTurnHeight (self, val : float)-> None :
      '''                             '''
    ...
    def setTurns (self, val : float)-> None :
      '''                             '''
    ...
    def setTwist (self, val : bool)-> None :
      '''                             '''
    ...
    def setType (self, val: PyDb.SplineType)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def startPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def toPolyline (self)-> PyDb.Polyline :
      '''                             '''
    ...
    def topRadius (self)-> float :
      '''                             '''
    ...
    def totalLength (self)-> float :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def turnHeight (self)-> float :
      '''                             '''
    ...
    def turnSlope (self)-> float :
      '''                             '''
    ...
    def turns (self)-> float :
      '''                             '''
    ...
    def twist (self)-> bool :
      '''                             '''
    ...
    def type (self)-> PyDb.SplineType :
      '''                             '''
    ...
    def updateFitData (self)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def weightAt (self, val : int)-> float :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class HelixConstrainType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kHeight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTurnHeight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTurns (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class HostApplicationServices(object):
    def LayoutManager (self)-> PyAp.LayoutManager :
      '''                             '''
    ...
    def __init__ (self)-> None :
      '''                             '''
    ...
    def companyName (self)-> str :
      '''                             '''
    ...

    @overload
    def findFile (self, fileName: str)-> str : ...
    @overload
    def findFile (self, fileName: str, db: PyDb.Database)-> str : ...
    @overload
    def findFile (self, fileName: str, db: PyDb.Database, hint: PyDb.FindFileHint)-> str : ...
    def findFile (self, *args, **kwargs)-> str :
      '''Overloads:
    - fileName: str
    - fileName: str, db: PyDb.Database
    - fileName: str, db: PyDb.Database, hint: PyDb.FindFileHint
    '''
    ...
    def getMachineRegistryProductRootKey (self)-> str :
      '''                             '''
    ...
    def getUserRegistryProductRootKey (self)-> str :
      '''                             '''
    ...
    def product (self)-> str :
      '''                             '''
    ...
    def program (self)-> str :
      '''                             '''
    ...
    def releaseMajorMinorString (self)-> str :
      '''                             '''
    ...
    def releaseMarketVersion (self)-> str :
      '''                             '''
    ...
    def setWorkingDatabase (self, val : PyDb.Database)-> None :
      '''                             '''
    ...
    def versionString (self)-> str :
      '''                             '''
    ...
    def workingDatabase (self)-> PyDb.Database :
      '''                             '''
    ...

class IdMapping(object):
    def __init__ (self)-> None :
      '''                             '''
    ...
    def assign (self, pair: PyDb.IdPair)-> None :
      '''                             '''
    ...
    def change (self, pair: PyDb.IdPair)-> bool :
      '''                             '''
    ...
    def compute (self, pair: PyDb.IdPair)-> bool :
      '''                             '''
    ...
    def deepCloneContext (self)-> PyDb.DeepCloneType :
      '''                             '''
    ...
    def destDb (self)-> PyDb.Database :
      '''                             '''
    ...
    def duplicateRecordCloning (self)-> PyDb.DuplicateRecordCloning :
      '''                             '''
    ...
    def idPairs (self)-> list :
      '''                             '''
    ...
    def origDb (self)-> PyDb.Database :
      '''                             '''
    ...
    def remove (self, key: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def setDestDb (self, dest: PyDb.Database)-> None :
      '''                             '''
    ...

class IdPair(object):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,class PyDbObjectId,bool)

__init__( (object)arg1, (ObjectId)arg2, (ObjectId)arg3, (bool)arg4, (bool)arg5, (bool)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,class PyDbObjectId,bool,bool,bool)'''
    ...
    def isCloned (self)-> bool :
      '''                             '''
    ...
    def isOwnerXlated (self)-> bool :
      '''                             '''
    ...
    def isPrimary (self)-> bool :
      '''                             '''
    ...
    def key (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def setIsCloned (self, val : bool)-> None :
      '''                             '''
    ...
    def setIsOwnerXlated (self, val : bool)-> None :
      '''                             '''
    ...
    def setIsPrimary (self, val : bool)-> None :
      '''                             '''
    ...
    def setKey (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setValue (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def value (self)-> PyDb.ObjectId :
      '''                             '''
    ...

class Image(Entity):
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode.kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Image :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Image :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class ImageDisplayOpt(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kClip (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kShow (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kShowUnAligned (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTransparent (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class ImageUnits(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kAngstroms (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAstronomical (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCentimeter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDecimeters (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDekameters (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kFoot (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kGigameters (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHectometers (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kInch (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kKilometer (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLightYears (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMeter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMicroinches (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMicrons (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMillimeter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMils (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNanometers (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kParsecs (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kYard (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class Intersect(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kExtendArg (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kExtendBoth (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kExtendThis (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOnBothOperands (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class JoinEntityPE(PyRx.RxObject):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (RxObject)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyRxObject)'''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def joinEntities (self, primaryEntity : PyDb.Entity, secondaryEntities : list[PyDb.Entity], tol : PyGe.Tol=None)-> list :
      '''                             '''
    ...
    def joinEntity (self, primaryEntity : PyDb.Entity, secondaryEntity : PyDb.Entity, tol : PyGe.Tol=None)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...

class JoinStyle(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kJnStylAngle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kJnStylFlat (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kJnStylNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kJnStylRound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class LayerFilter(DbObject):
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode.kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def add (self, val : str)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyAp.LayerFilter :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyAp.LayerFilter :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getAt (self, val : int)-> str :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def indexClass (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isValid (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layerCount (self)-> int :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def remove (self, val : str)-> None :
      '''                             '''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class LayerTable(SymbolTable):
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode=PyDb.OpenMode.kForRead)-> None :
      '''                             '''
    ...
    def add (self, val: PyDb.LayerTableRecord)-> PyDb.ObjectId :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.LayerTable :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.LayerTable :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getAt (self, val: str)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has (self, val: str|PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def recordIds (self)-> list :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def toDict (self)-> dict :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class LayerTableRecord(SymbolTableRecord):
    def VPDFLT (self)-> bool :
      '''                             '''
    ...
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode.kForRead)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.LayerTableRecord :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.LayerTableRecord :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def color (self, *args, **kwargs)-> PyDb.Color :
      '''color( (LayerTableRecord)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbLayerTableRecord {lvalue})

color( (LayerTableRecord)arg1, (ObjectId)arg2) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def description (self)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getName (self)-> str :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasAnyOverrides (self, *args, **kwargs)-> bool :
      '''hasAnyOverrides( (LayerTableRecord)arg1) -> bool :

    C++ signature :
        bool hasAnyOverrides(class PyDbLayerTableRecord {lvalue})'''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasOverrides (self, *args, **kwargs)-> bool :
      '''hasOverrides( (LayerTableRecord)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasOverrides(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isDependent (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isFrozen (self)-> bool :
      '''                             '''
    ...
    def isHidden (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def isHiddenS (val : PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def isInUse (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isLocked (self)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isOff (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlottable (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isReconciled (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def isReconciledS (val : PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def isRenamable (self)-> bool :
      '''                             '''
    ...
    def isResolved (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def lineWeight (self, *args, **kwargs)-> PyDb.LineWeight :
      '''lineWeight( (LayerTableRecord)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbLayerTableRecord {lvalue})

lineWeight( (LayerTableRecord)arg1, (ObjectId)arg2) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def linetypeObjectId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''linetypeObjectId( (LayerTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeObjectId(class PyDbLayerTableRecord {lvalue})'''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def name (self)-> str :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (LayerTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbLayerTableRecord {lvalue})

plotStyleName( (LayerTableRecord)arg1, (ObjectId)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def plotStyleNameId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''plotStyleNameId( (LayerTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId plotStyleNameId(class PyDbLayerTableRecord {lvalue})

plotStyleNameId( (LayerTableRecord)arg1, (ObjectId)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId plotStyleNameId(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeAllOverrides (self, *args, **kwargs)-> None :
      '''removeAllOverrides( (LayerTableRecord)arg1) -> None :

    C++ signature :
        void removeAllOverrides(class PyDbLayerTableRecord {lvalue})'''
    ...
    def removeColorOverride (self, *args, **kwargs)-> None :
      '''removeColorOverride( (LayerTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void removeColorOverride(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeLineWeightOverride (self, *args, **kwargs)-> None :
      '''removeLineWeightOverride( (LayerTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void removeLineWeightOverride(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def removeLinetypeOverride (self, *args, **kwargs)-> None :
      '''removeLinetypeOverride( (LayerTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void removeLinetypeOverride(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePlotStyleOverride (self, *args, **kwargs)-> None :
      '''removePlotStyleOverride( (LayerTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void removePlotStyleOverride(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def removeTransparencyOverride (self, *args, **kwargs)-> None :
      '''removeTransparencyOverride( (LayerTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void removeTransparencyOverride(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def removeViewportOverrides (self, *args, **kwargs)-> None :
      '''removeViewportOverrides( (LayerTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void removeViewportOverrides(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setColor (self, *args, **kwargs)-> None :
      '''setColor( (LayerTableRecord)arg1, (Color)arg2) -> None :

    C++ signature :
        void setColor(class PyDbLayerTableRecord {lvalue},class AcCmColor)

setColor( (LayerTableRecord)arg1, (Color)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void setColor(class PyDbLayerTableRecord {lvalue},class AcCmColor,class PyDbObjectId)'''
    ...
    def setDescription (self, *args, **kwargs)-> None :
      '''setDescription( (LayerTableRecord)arg1, (str)arg2) -> None :

    C++ signature :
        void setDescription(class PyDbLayerTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setIsFrozen (self, *args, **kwargs)-> None :
      '''setIsFrozen( (LayerTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsFrozen(class PyDbLayerTableRecord {lvalue},bool)'''
    ...
    def setIsHidden (self, *args, **kwargs)-> None :
      '''setIsHidden( (LayerTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsHidden(class PyDbLayerTableRecord {lvalue},bool)'''
    ...
    def setIsLocked (self, *args, **kwargs)-> None :
      '''setIsLocked( (LayerTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsLocked(class PyDbLayerTableRecord {lvalue},bool)'''
    ...
    def setIsOff (self, *args, **kwargs)-> None :
      '''setIsOff( (LayerTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsOff(class PyDbLayerTableRecord {lvalue},bool)'''
    ...
    def setIsPlottable (self, *args, **kwargs)-> None :
      '''setIsPlottable( (LayerTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsPlottable(class PyDbLayerTableRecord {lvalue},bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> None :
      '''setLineWeight( (LayerTableRecord)arg1, (LineWeight)arg2) -> None :

    C++ signature :
        void setLineWeight(class PyDbLayerTableRecord {lvalue},enum AcDb::LineWeight)

setLineWeight( (LayerTableRecord)arg1, (LineWeight)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void setLineWeight(class PyDbLayerTableRecord {lvalue},enum AcDb::LineWeight,class PyDbObjectId)'''
    ...
    def setLinetypeObjectId (self, *args, **kwargs)-> None :
      '''setLinetypeObjectId( (LayerTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setLinetypeObjectId(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setMaterialId (self, *args, **kwargs)-> None :
      '''setMaterialId( (LayerTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setMaterialId(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setName (self, name: str)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (LayerTableRecord)arg1, (str)arg2) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbLayerTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setPlotStyleName( (LayerTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)

setPlotStyleName( (LayerTableRecord)arg1, (str)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbLayerTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)

setPlotStyleName( (LayerTableRecord)arg1, (ObjectId)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbLayerTableRecord {lvalue},class PyDbObjectId,class PyDbObjectId)'''
    ...
    def setTransparency (self, *args, **kwargs)-> None :
      '''setTransparency( (LayerTableRecord)arg1, (Transparency)arg2) -> None :

    C++ signature :
        void setTransparency(class PyDbLayerTableRecord {lvalue},class AcCmTransparency)

setTransparency( (LayerTableRecord)arg1, (Transparency)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void setTransparency(class PyDbLayerTableRecord {lvalue},class AcCmTransparency,class PyDbObjectId)'''
    ...
    def setVPDFLT (self, *args, **kwargs)-> None :
      '''setVPDFLT( (LayerTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVPDFLT(class PyDbLayerTableRecord {lvalue},bool)'''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transparency (self, *args, **kwargs)-> PyDb.Transparency :
      '''transparency( (LayerTableRecord)arg1) -> Transparency :

    C++ signature :
        class AcCmTransparency transparency(class PyDbLayerTableRecord {lvalue})

transparency( (LayerTableRecord)arg1, (ObjectId)arg2) -> Transparency :

    C++ signature :
        class AcCmTransparency transparency(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class Layout(PlotSettings):
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode.kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def addToLayoutDict (self, db: PyDb.Database, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addToPlotSettingsDict (self, db: PyDb.Database)-> None :
      '''                             '''
    ...
    def annoAllVisible (self)-> bool :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Layout :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Layout :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawViewportsFirst (self)-> bool :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getBlockTableRecordId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getCanonicalMediaName (self)-> str :
      '''                             '''
    ...
    def getCurrentStyleSheet (self)-> str :
      '''                             '''
    ...
    def getCustomPrintScale (self)-> tuple :
      '''                             '''
    ...
    def getExtents (self)-> tuple :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getLayoutName (self)-> str :
      '''                             '''
    ...
    def getLimits (self)-> tuple :
      '''                             '''
    ...
    def getPlotCfgName (self)-> str :
      '''                             '''
    ...
    def getPlotOrigin (self)-> tuple :
      '''                             '''
    ...
    def getPlotPaperMargins (self)-> tuple :
      '''                             '''
    ...
    def getPlotPaperSize (self)-> tuple :
      '''                             '''
    ...
    def getPlotSettingsName (self)-> str :
      '''                             '''
    ...
    def getPlotViewName (self)-> str :
      '''                             '''
    ...
    def getPlotWindowArea (self)-> tuple :
      '''                             '''
    ...
    def getStdScale (self)-> float :
      '''                             '''
    ...
    def getTabOrder (self)-> int :
      '''                             '''
    ...
    def getTabSelected (self)-> bool :
      '''                             '''
    ...
    def getViewportArray (self)-> list :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def initialize (self, id: PyDb.ObjectId='default')-> None :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def modelType (self)-> bool :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotAsRaster (self)-> bool :
      '''                             '''
    ...
    def plotCentered (self)-> bool :
      '''                             '''
    ...
    def plotHidden (self)-> bool :
      '''                             '''
    ...
    def plotPaperUnits (self)-> PyDb.PlotPaperUnits :
      '''                             '''
    ...
    def plotPlotStyles (self)-> bool :
      '''                             '''
    ...
    def plotRotation (self)-> PyDb.PlotRotation :
      '''                             '''
    ...
    def plotTransparency (self)-> bool :
      '''                             '''
    ...
    def plotType (self)-> PyDb.PlotType :
      '''                             '''
    ...
    def plotViewportBorders (self)-> bool :
      '''                             '''
    ...
    def plotWireframe (self)-> bool :
      '''                             '''
    ...
    def printLineweights (self)-> bool :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def scaleLineweights (self)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnoAllVisible (self, val: bool)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBlockTableRecordId (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDrawViewportsFirst (self, val: bool)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setLayoutName (self, val: str)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotHidden (self, val: bool)-> None :
      '''                             '''
    ...
    def setPlotPlotStyles (self, val: bool)-> None :
      '''                             '''
    ...
    def setPlotSettingsName (self, val: str)-> None :
      '''                             '''
    ...
    def setPlotTransparency (self, val: bool)-> None :
      '''                             '''
    ...
    def setPlotViewportBorders (self, val: bool)-> None :
      '''                             '''
    ...
    def setPrintLineweights (self, val: bool)-> None :
      '''                             '''
    ...
    def setScaleLineweights (self, val: bool)-> None :
      '''                             '''
    ...

    @overload
    def setShadePlot (self, givenPoint)-> None : ...
    @overload
    def setShadePlot (self, val: PyDb.ShadePlotType, id: PyDb.ObjectId)-> None : ...
    def setShadePlot (self, *args, **kwargs)-> None :
      '''Overloads:
    - givenPoint
    - val: PyDb.ShadePlotType, id: PyDb.ObjectId
    '''
    ...
    def setShadePlotCustomDPI (self, val: int)-> None :
      '''                             '''
    ...
    def setShadePlotResLevel (self, val: PyDb.ShadePlotResLevel)-> None :
      '''                             '''
    ...
    def setShowPlotStyles (self, val: bool)-> None :
      '''                             '''
    ...
    def setTabOrder (self, val: int)-> None :
      '''                             '''
    ...
    def setTabSelected (self, val: bool)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def shadePlot (self)-> PyDb.ShadePlotType :
      '''                             '''
    ...
    def shadePlotCustomDPI (self)-> int :
      '''                             '''
    ...
    def shadePlotId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def shadePlotResLevel (self)-> PyDb.ShadePlotResLevel :
      '''                             '''
    ...
    def showPlotStyles (self)-> bool :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def stdScaleType (self)-> PyDb.StdScaleType :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def useStandardScale (self)-> bool :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class LayoutManager(PyRx.RxObject):
    def __init__ (self)-> None :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def clearSetupForLayouts (self, *args, **kwargs)-> None :
      '''clearSetupForLayouts( (int)arg1) -> None :

    C++ signature :
        void clearSetupForLayouts(unsigned __int64)'''
    ...
    def cloneLayout (self, *args, **kwargs)-> None :
      '''cloneLayout( (LayoutManager)arg1, (Layout)arg2, (str)arg3) -> None :

    C++ signature :
        void cloneLayout(class PyDbLayoutManager {lvalue},class PyDbLayout {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

cloneLayout( (LayoutManager)arg1, (Layout)arg2, (str)arg3, (int)arg4, (Database)arg5) -> None :

    C++ signature :
        void cloneLayout(class PyDbLayoutManager {lvalue},class PyDbLayout {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,int,class PyDbDatabase {lvalue})'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def copyLayout (self, *args, **kwargs)-> None :
      '''copyLayout( (LayoutManager)arg1, (str)arg2, (str)arg3) -> None :

    C++ signature :
        void copyLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

copyLayout( (LayoutManager)arg1, (str)arg2, (str)arg3, (Database)arg4) -> None :

    C++ signature :
        void copyLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def countLayouts (self, *args, **kwargs)-> int :
      '''countLayouts( (LayoutManager)arg1) -> int :

    C++ signature :
        int countLayouts(class PyDbLayoutManager {lvalue})

countLayouts( (LayoutManager)arg1, (Database)arg2) -> int :

    C++ signature :
        int countLayouts(class PyDbLayoutManager {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def createLayout (self, *args, **kwargs)-> None :
      '''createLayout( (LayoutManager)arg1, (str)arg2, (ObjectId)arg3, (ObjectId)arg4) -> None :

    C++ signature :
        void createLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId {lvalue},class PyDbObjectId {lvalue})

createLayout( (LayoutManager)arg1, (str)arg2, (ObjectId)arg3, (ObjectId)arg4, (Database)arg5) -> None :

    C++ signature :
        void createLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId {lvalue},class PyDbObjectId {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def deleteLayout (self, *args, **kwargs)-> None :
      '''deleteLayout( (LayoutManager)arg1, (str)arg2) -> None :

    C++ signature :
        void deleteLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

deleteLayout( (LayoutManager)arg1, (str)arg2, (Database)arg3) -> None :

    C++ signature :
        void deleteLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase {lvalue})'''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def findLayoutNamed (self, *args, **kwargs)-> PyDb.ObjectId :
      '''findLayoutNamed( (LayoutManager)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId findLayoutNamed(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

findLayoutNamed( (LayoutManager)arg1, (str)arg2, (Database)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId findLayoutNamed(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def getActiveLayoutBTRId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getActiveLayoutBTRId( (LayoutManager)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getActiveLayoutBTRId(class PyDbLayoutManager {lvalue})

getActiveLayoutBTRId( (LayoutManager)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getActiveLayoutBTRId(class PyDbLayoutManager {lvalue},class PyDbDatabase)'''
    ...
    def getActiveLayoutName (self, *args, **kwargs)-> str :
      '''getActiveLayoutName( (LayoutManager)arg1, (bool)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getActiveLayoutName(class PyDbLayoutManager {lvalue},bool)

getActiveLayoutName( (LayoutManager)arg1, (bool)arg2, (Database)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getActiveLayoutName(class PyDbLayoutManager {lvalue},bool,class PyDbDatabase {lvalue})'''
    ...
    def getNonRectVPIdFromClipId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getNonRectVPIdFromClipId( (LayoutManager)arg1, (ObjectId)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getNonRectVPIdFromClipId(class PyDbLayoutManager {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isVpnumClipped (self, *args, **kwargs)-> bool :
      '''isVpnumClipped( (LayoutManager)arg1, (int)arg2) -> bool :

    C++ signature :
        bool isVpnumClipped(class PyDbLayoutManager {lvalue},int)

isVpnumClipped( (LayoutManager)arg1, (int)arg2, (Database)arg3) -> bool :

    C++ signature :
        bool isVpnumClipped(class PyDbLayoutManager {lvalue},int,class PyDbDatabase)'''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layoutExists (self, *args, **kwargs)-> bool :
      '''layoutExists( (LayoutManager)arg1, (str)arg2) -> bool :

    C++ signature :
        bool layoutExists(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

layoutExists( (LayoutManager)arg1, (str)arg2, (Database)arg3) -> bool :

    C++ signature :
        bool layoutExists(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def renameLayout (self, *args, **kwargs)-> None :
      '''renameLayout( (LayoutManager)arg1, (str)arg2, (str)arg3) -> None :

    C++ signature :
        void renameLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

renameLayout( (LayoutManager)arg1, (str)arg2, (str)arg3, (Database)arg4) -> None :

    C++ signature :
        void renameLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase {lvalue})'''
    ...
    def setCurrentLayout (self, *args, **kwargs)-> None :
      '''setCurrentLayout( (LayoutManager)arg1, (str)arg2) -> None :

    C++ signature :
        void setCurrentLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setCurrentLayout( (LayoutManager)arg1, (str)arg2, (Database)arg3) -> None :

    C++ signature :
        void setCurrentLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase {lvalue})'''
    ...
    def setCurrentLayoutId (self, *args, **kwargs)-> None :
      '''setCurrentLayoutId( (LayoutManager)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setCurrentLayoutId(class PyDbLayoutManager {lvalue},class PyDbObjectId)'''
    ...
    def setupForLayouts (self, *args, **kwargs)-> int :
      '''setupForLayouts( (Database)arg1) -> int :

    C++ signature :
        unsigned __int64 setupForLayouts(class PyDbDatabase {lvalue})'''
    ...

class Leader(Curve):
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode.kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def annoHeight (self)-> float :
      '''                             '''
    ...
    def annoType (self)-> PyDb.AnnoType :
      '''                             '''
    ...
    def annoWidth (self)-> float :
      '''                             '''
    ...
    def annotationObjId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def annotationOffset (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def appendVertex (self, pt: PyGe.Point3d)-> bool :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def attachAnnotation (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Leader :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Leader :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copied (self, obja: PyDb.DbObject, objb: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...

    @staticmethod
    def createFromAcGeCurve (curve: PyGe.Curve3d,normal: PyGe.Vector3d = PyGe.Vector3d.kZAxis,tol: PyGe.Tol = 'default')-> PyDb.Curve :
      '''                             '''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def detachAnnotation (self)-> None :
      '''                             '''
    ...
    def dimasz (self)-> float :
      '''                             '''
    ...
    def dimclrd (self)-> PyDb.Color :
      '''                             '''
    ...
    def dimensionStyle (self)-> PyDb.HardPointerId :
      '''                             '''
    ...
    def dimgap (self)-> float :
      '''                             '''
    ...
    def dimlwd (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def dimsah (self)-> bool :
      '''                             '''
    ...
    def dimscale (self)-> float :
      '''                             '''
    ...
    def dimtad (self)-> int :
      '''                             '''
    ...
    def dimtxsty (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimtxt (self)-> float :
      '''                             '''
    ...
    def disableArrowHead (self)-> None :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def erased (self, obj: PyDb.DbObject, val: bool=True)-> None :
      '''                             '''
    ...
    def evaluateLeader (self)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> None :
      '''extend( (Curve)arg1, (float)arg2) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def firstVertex (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def getAcGeCurve (self, tol: PyGe.Tol = 'default')-> PyGe.Curve3d :
      '''                             '''
    ...
    def getArea (self)-> float :
      '''                             '''
    ...
    def getClosestPointTo (self, point3d: PyGe.Point3d, direction: PyGe.Vector3d=None, extend: bool=False)-> PyGe.Point3d :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDistAtParam (self, param: float)-> float :
      '''                             '''
    ...
    def getDistAtPoint (self, point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEndParam (self)-> float :
      '''                             '''
    ...
    def getEndPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self, param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getOffsetCurves (self, dist: float)-> list :
      '''                             '''
    ...
    def getOffsetCurvesGivenPlaneNormal (self, normal: PyGe.Vector3d, dist: float)-> list :
      '''                             '''
    ...
    def getOrthoProjectedCurve (self, plane: PyGe.Plane)-> PyDb.Curve :
      '''                             '''
    ...
    def getParamAtDist (self, dist: float)-> float :
      '''                             '''
    ...
    def getParamAtPoint (self, point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getPointAtDist (self, dist: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getPointAtParam (self, param: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getProjectedCurve (self, plane: PyGe.Plane, projDir: PyGe.Vector3d)-> PyDb.Curve :
      '''                             '''
    ...
    def getSecondDeriv (self, param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getSpline (self)-> PyDb.Spline :
      '''                             '''
    ...
    def getSplitCurves (self, paramsOrPoints: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParam (self, param: float)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParams (self, params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoint (self, point: PyGe.Point3d)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoints (self, points: list)-> list :
      '''                             '''
    ...
    def getStartParam (self)-> float :
      '''                             '''
    ...
    def getStartPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def goodbye (self, obj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasArrowHead (self)-> bool :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasHookLine (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isClosed (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPeriodic (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isSplined (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def lastVertex (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def modified (self, obj: PyDb.DbObject)-> None :
      '''                             '''
    ...
    def normal (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def numVertices (self)-> int :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeLastVertex (self)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def reverseCurve (self)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotationObjId (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setAnnotationOffset (self, vec: PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, idx: int, dosubents: bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setDimasz (self, val: float)-> None :
      '''                             '''
    ...
    def setDimclrd (self, clr: PyDb.AcCmColor)-> None :
      '''                             '''
    ...
    def setDimensionStyle (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimgap (self, val: float)-> None :
      '''                             '''
    ...
    def setDimldrblk (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimlwd (self, val: PyDb.LineWeight)-> None :
      '''                             '''
    ...
    def setDimsah (self, val: bool)-> None :
      '''                             '''
    ...
    def setDimscale (self, val: float)-> None :
      '''                             '''
    ...
    def setDimstyleData (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimtad (self, val: int)-> None :
      '''                             '''
    ...
    def setDimtxsty (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimtxt (self, val: float)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setFromAcGeCurve (self, curve: PyGe.Curve3d, normal: PyGe.Vector3d = PyGe.Vector3d.kZAxis, tol: PyGe.Tol = 'default')-> None :
      '''                             '''
    ...
    def setHasArrowHead (self, val: bool)-> None :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlane (self, val: PyGe.Plane)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setSplined (self, val: bool)-> None :
      '''                             '''
    ...
    def setToSplineLeader (self)-> None :
      '''                             '''
    ...
    def setToStraightLeader (self)-> None :
      '''                             '''
    ...
    def setVertexAt (self, val: int, pt: PyGe.Point3d)-> bool :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def vertexAt (self, val: int)-> PyGe.Point3d :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class Line(Curve):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, start: PyGe.Point3d,end: PyGe.Point3d)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - start: PyGe.Point3d,end: PyGe.Point3d
    - id: PyDb.ObjectId
    - id: PyDb.ObjectId, mode: PyDb.OpenMode
    - id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool
    '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Line :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Line :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...

    @staticmethod
    def createFromAcGeCurve (curve: PyGe.Curve3d,normal: PyGe.Vector3d = PyGe.Vector3d.kZAxis,tol: PyGe.Tol = 'default')-> PyDb.Curve :
      '''                             '''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def endPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> None :
      '''extend( (Curve)arg1, (float)arg2) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getAcGeCurve (self, tol: PyGe.Tol = 'default')-> PyGe.LineSeg3d :
      '''                             '''
    ...
    def getArea (self)-> float :
      '''                             '''
    ...
    def getClosestPointTo (self, point3d: PyGe.Point3d, direction: PyGe.Vector3d=None, extend: bool=False)-> PyGe.Point3d :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDistAtParam (self, param: float)-> float :
      '''                             '''
    ...
    def getDistAtPoint (self, point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEndParam (self)-> float :
      '''                             '''
    ...
    def getEndPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self, param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getOffsetCurves (self, dist: float)-> list :
      '''                             '''
    ...
    def getOffsetCurvesGivenPlaneNormal (self, val:PyGe.Vector3d, offset:float)-> list :
      '''                             '''
    ...
    def getOrthoProjectedCurve (self, plane: PyGe.Plane)-> PyDb.Curve :
      '''                             '''
    ...
    def getParamAtDist (self, dist: float)-> float :
      '''                             '''
    ...
    def getParamAtPoint (self, point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getPointAtDist (self, dist: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getPointAtParam (self, param: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getProjectedCurve (self, plane: PyGe.Plane, projDir: PyGe.Vector3d)-> PyDb.Curve :
      '''                             '''
    ...
    def getSecondDeriv (self, param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getSpline (self)-> PyDb.Spline :
      '''                             '''
    ...
    def getSplitCurves (self, paramsOrPoints: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParam (self, param: float)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParams (self, params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoint (self, point: PyGe.Point3d)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoints (self, points: list)-> list :
      '''                             '''
    ...
    def getStartParam (self)-> float :
      '''                             '''
    ...
    def getStartPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isClosed (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPeriodic (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def midPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def normal (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def reverseCurve (self)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setEndPoint (self, val:PyGe.Point3d)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setFromAcGeCurve (self, curve: PyGe.Curve3d, normal: PyGe.Vector3d = PyGe.Vector3d.kZAxis, tol: PyGe.Tol = 'default')-> None :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self, val:PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setStartPoint (self, val:PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setThickness (self, val:float)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def startPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def thickness (self)-> float :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class LineAngularDimension2(Dimension):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, xL1Start: PyGe.Point3d, xL1End: PyGe.Point3d, xL2Start: PyGe.Point3d, xL2End: PyGe.Point3d, arcPnt: PyGe.Point3d)-> None : ...
    @overload
    def __init__ (self, xL1Start: PyGe.Point3d, xL1End: PyGe.Point3d, xL2Start: PyGe.Point3d, xL2End: PyGe.Point3d, arcPnt: PyGe.Point3d, dimText: str)-> None : ...
    @overload
    def __init__ (self, xL1Start: PyGe.Point3d, xL1End: PyGe.Point3d, xL2Start: PyGe.Point3d, xL2End: PyGe.Point3d, arcPnt: PyGe.Point3d, dimText: str, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - xL1Start: PyGe.Point3d, xL1End: PyGe.Point3d, xL2Start: PyGe.Point3d, xL2End: PyGe.Point3d, arcPnt: PyGe.Point3d
    - xL1Start: PyGe.Point3d, xL1End: PyGe.Point3d, xL2Start: PyGe.Point3d, xL2End: PyGe.Point3d, arcPnt: PyGe.Point3d, dimText: str
    - xL1Start: PyGe.Point3d, xL1End: PyGe.Point3d, xL2Start: PyGe.Point3d, xL2End: PyGe.Point3d, arcPnt: PyGe.Point3d, dimText: str, id: PyDb.ObjectId
    - id: PyDb.ObjectId
    - id: PyDb.ObjectId, mode: PyDb.OpenMode
    - id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool
    '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def altSuppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def altSuppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def altSuppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def altSuppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def alternatePrefix (self)-> str :
      '''                             '''
    ...
    def alternateSuffix (self)-> str :
      '''                             '''
    ...
    def arcPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.LineAngularDimension2 :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...
    def centerMarkSize (self)-> float :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.LineAngularDimension2 :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dimBlockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimBlockPosition (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def dimExt1Linetype (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimExt2Linetype (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimLineLinetype (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimensionStyle (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimensionText (self)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevation (self)-> float :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extArcOn (self)-> bool :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def fieldFromMText (self, ref : PyDb.MText)-> None :
      '''                             '''
    ...
    def fieldToMText (self, ref : PyDb.MText)-> None :
      '''                             '''
    ...

    @overload
    def formatMeasurement (self, measurement: float)-> str : ...
    @overload
    def formatMeasurement (self, measurement: float, dimensionText: str)-> str : ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''Overloads:
    - measurement: float
    - measurement: float, dimensionText: str
    '''
    ...
    def generateLayout (self)-> None :
      '''                             '''
    ...
    def getArrowFirstIsFlipped (self)-> bool :
      '''                             '''
    ...
    def getArrowSecondIsFlipped (self)-> bool :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDimstyleData (self)-> PyDb.DimStyleTableRecord :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def horizontalRotation (self)-> float :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def inspection (self)-> bool :
      '''                             '''
    ...
    def inspectionFrame (self)-> int :
      '''                             '''
    ...
    def inspectionLabel (self)-> str :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self)-> bool :
      '''                             '''
    ...
    def isConstraintObject (self)-> tuple :
      '''                             '''
    ...
    def isDynamicDimension (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def measurement (self)-> float :
      '''                             '''
    ...
    def normal (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def prefix (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recomputeDimBlock (self, force : bool=False)-> None :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def removeTextField (self)-> None :
      '''                             '''
    ...
    def resetTextDefinedSize (self)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAltSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setAlternatePrefix (self, val : str)-> None :
      '''                             '''
    ...
    def setAlternateSuffix (self, val : str)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setArcPoint (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setArrowFirstIsFlipped (self, val : bool)-> None :
      '''                             '''
    ...
    def setArrowSecondIsFlipped (self, val : bool)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setConstraintDynamic (self, val : bool)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setDimBlockId (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimBlockPosition (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setDimExt1Linetype (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimExt2Linetype (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimLineLinetype (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimensionStyle (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimensionText (self, val : str)-> None :
      '''                             '''
    ...

    @overload
    def setDimstyleData (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def setDimstyleData (self, rec: PyDb.DimStyleTableRecord)-> None : ...
    def setDimstyleData (self, *args, **kwargs)-> None :
      '''Overloads:
    - id: PyDb.ObjectId
    - rec: PyDb.DimStyleTableRecord
    '''
    ...
    def setDynamicDimension (self, val : bool)-> None :
      '''                             '''
    ...
    def setElevation (self, val : float)-> None :
      '''                             '''
    ...
    def setExtArcOn (self, val : bool)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setHorizontalRefTextRotation (self, val : bool)-> None :
      '''                             '''
    ...
    def setHorizontalRotation (self, val : float)-> None :
      '''                             '''
    ...
    def setInspection (self, val : bool)-> None :
      '''                             '''
    ...
    def setInspectionFrame (self, val : int)-> None :
      '''                             '''
    ...
    def setInspectionLabel (self, val : str)-> None :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self, val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, val : str)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setShouldParticipateInOPM (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuffix (self, val : str)-> None :
      '''                             '''
    ...
    def setSuppressAngularTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setTextAttachment (self, val : PyDb.MTextAttachmentPoint)-> None :
      '''                             '''
    ...
    def setTextDefinedSize (self, width : float, height : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingFactor (self, val : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingStyle (self, val : PyDb.LineSpacingStyle)-> None :
      '''                             '''
    ...
    def setTextPosition (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setTextRotation (self, val : float)-> None :
      '''                             '''
    ...
    def setToleranceSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setUsingDefaultTextPosition (self, val : bool)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def setXLine1End (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setXLine1Start (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setXLine2End (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setXLine2Start (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def shouldParticipateInOPM (self)-> bool :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def suffix (self)-> str :
      '''                             '''
    ...
    def suppressAngularLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressAngularTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def suppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAttachment (self)-> PyDb.MTextAttachmentPoint :
      '''                             '''
    ...
    def textDefinedSize (self)-> tuple :
      '''                             '''
    ...
    def textLineSpacingFactor (self)-> float :
      '''                             '''
    ...
    def textLineSpacingStyle (self)-> PyDb.LineSpacingStyle :
      '''                             '''
    ...
    def textPosition (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def textRotation (self)-> float :
      '''                             '''
    ...
    def toleranceSuppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def toleranceSuppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def useDefaultTextPosition (self)-> None :
      '''                             '''
    ...
    def useSetTextPosition (self)-> None :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xLine1End (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def xLine1Start (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def xLine2End (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def xLine2Start (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class LineSpacingStyle(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kAtLeast (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kExactly (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class LineWeight(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kLnWt000 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt005 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt009 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt013 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt015 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt018 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt020 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt025 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt030 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt035 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt040 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt050 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt053 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt060 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt070 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt080 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt090 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt100 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt106 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt120 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt140 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt158 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt200 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWt211 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWtByBlock (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWtByLayer (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLnWtByLwDefault (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class LinetypeTable(SymbolTable):
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode=PyDb.OpenMode.kForRead)-> None :
      '''                             '''
    ...
    def add (self, val: PyDb.LinetypeTableRecord)-> PyDb.ObjectId :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.LinetypeTable :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.LinetypeTable :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getAt (self, val: str)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has (self, val: str|PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def recordIds (self)-> list :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def toDict (self)-> dict :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class LinetypeTableRecord(SymbolTableRecord):
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode.kForRead)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.LinetypeTableRecord :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.LinetypeTableRecord :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comments (self)-> str :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def dashLengthAt (self, *args, **kwargs)-> float :
      '''dashLengthAt( (LinetypeTableRecord)arg1, (int)arg2) -> float :

    C++ signature :
        double dashLengthAt(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getName (self)-> str :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isDependent (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isRenamable (self)-> bool :
      '''                             '''
    ...
    def isResolved (self)-> bool :
      '''                             '''
    ...
    def isScaledToFit (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def name (self)-> str :
      '''                             '''
    ...
    def numDashes (self)-> int :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def patternLength (self)-> float :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setComments (self, *args, **kwargs)-> None :
      '''setComments( (LinetypeTableRecord)arg1, (str)arg2) -> None :

    C++ signature :
        void setComments(class PyDbLinetypeTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDashLengthAt (self, *args, **kwargs)-> None :
      '''setDashLengthAt( (LinetypeTableRecord)arg1, (int)arg2, (float)arg3) -> None :

    C++ signature :
        void setDashLengthAt(class PyDbLinetypeTableRecord {lvalue},int,double)'''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setIsScaledToFit (self, *args, **kwargs)-> None :
      '''setIsScaledToFit( (LinetypeTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsScaledToFit(class PyDbLinetypeTableRecord {lvalue},bool)'''
    ...
    def setName (self, name: str)-> None :
      '''                             '''
    ...
    def setNumDashes (self, *args, **kwargs)-> None :
      '''setNumDashes( (LinetypeTableRecord)arg1, (int)arg2) -> None :

    C++ signature :
        void setNumDashes(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPatternLength (self, *args, **kwargs)-> None :
      '''setPatternLength( (LinetypeTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setPatternLength(class PyDbLinetypeTableRecord {lvalue},double)'''
    ...
    def setShapeIsUcsOrientedAt (self, *args, **kwargs)-> None :
      '''setShapeIsUcsOrientedAt( (LinetypeTableRecord)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setShapeIsUcsOrientedAt(class PyDbLinetypeTableRecord {lvalue},int,bool)'''
    ...
    def setShapeIsUprightAt (self, *args, **kwargs)-> None :
      '''setShapeIsUprightAt( (LinetypeTableRecord)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setShapeIsUprightAt(class PyDbLinetypeTableRecord {lvalue},int,bool)'''
    ...
    def setShapeNumberAt (self, *args, **kwargs)-> None :
      '''setShapeNumberAt( (LinetypeTableRecord)arg1, (int)arg2, (int)arg3) -> None :

    C++ signature :
        void setShapeNumberAt(class PyDbLinetypeTableRecord {lvalue},int,int)'''
    ...
    def setShapeOffsetAt (self, *args, **kwargs)-> None :
      '''setShapeOffsetAt( (LinetypeTableRecord)arg1, (int)arg2, (Vector2d)arg3) -> None :

    C++ signature :
        void setShapeOffsetAt(class PyDbLinetypeTableRecord {lvalue},int,class AcGeVector2d)'''
    ...
    def setShapeRotationAt (self, *args, **kwargs)-> None :
      '''setShapeRotationAt( (LinetypeTableRecord)arg1, (int)arg2, (float)arg3) -> None :

    C++ signature :
        void setShapeRotationAt(class PyDbLinetypeTableRecord {lvalue},int,double)'''
    ...
    def setShapeScaleAt (self, *args, **kwargs)-> None :
      '''setShapeScaleAt( (LinetypeTableRecord)arg1, (int)arg2, (float)arg3) -> None :

    C++ signature :
        void setShapeScaleAt(class PyDbLinetypeTableRecord {lvalue},int,double)'''
    ...
    def setShapeStyleAt (self, *args, **kwargs)-> None :
      '''setShapeStyleAt( (LinetypeTableRecord)arg1, (int)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void setShapeStyleAt(class PyDbLinetypeTableRecord {lvalue},int,class PyDbObjectId {lvalue})'''
    ...
    def setTextAt (self, *args, **kwargs)-> None :
      '''setTextAt( (LinetypeTableRecord)arg1, (int)arg2, (str)arg3) -> None :

    C++ signature :
        void setTextAt(class PyDbLinetypeTableRecord {lvalue},int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def shapeIsUcsOrientedAt (self, *args, **kwargs)-> bool :
      '''shapeIsUcsOrientedAt( (LinetypeTableRecord)arg1, (int)arg2) -> bool :

    C++ signature :
        bool shapeIsUcsOrientedAt(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def shapeIsUprightAt (self, *args, **kwargs)-> bool :
      '''shapeIsUprightAt( (LinetypeTableRecord)arg1, (int)arg2) -> bool :

    C++ signature :
        bool shapeIsUprightAt(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def shapeNumberAt (self, *args, **kwargs)-> int :
      '''shapeNumberAt( (LinetypeTableRecord)arg1, (int)arg2) -> int :

    C++ signature :
        int shapeNumberAt(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def shapeOffsetAt (self, *args, **kwargs)-> PyGe.Vector2d :
      '''shapeOffsetAt( (LinetypeTableRecord)arg1, (int)arg2) -> Vector2d :

    C++ signature :
        class AcGeVector2d shapeOffsetAt(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def shapeRotationAt (self, *args, **kwargs)-> float :
      '''shapeRotationAt( (LinetypeTableRecord)arg1, (int)arg2) -> float :

    C++ signature :
        double shapeRotationAt(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def shapeScaleAt (self, *args, **kwargs)-> float :
      '''shapeScaleAt( (LinetypeTableRecord)arg1, (int)arg2) -> float :

    C++ signature :
        double shapeScaleAt(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def shapeStyleAt (self, *args, **kwargs)-> PyDb.ObjectId :
      '''shapeStyleAt( (LinetypeTableRecord)arg1, (int)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId shapeStyleAt(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAt (self, *args, **kwargs)-> str :
      '''textAt( (LinetypeTableRecord)arg1, (int)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > textAt(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class LoftedSurface(Surface):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...
    def cast (self, *args, **kwargs)-> PyDb.LoftedSurface :
      '''cast( (RxObject)arg1) -> LoftedSurface :

    C++ signature :
        class PyDbLoftedSurface cast(class PyRxObject)'''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.LoftedSurface :
      '''cloneFrom( (RxObject)arg1) -> LoftedSurface :

    C++ signature :
        class PyDbLoftedSurface cloneFrom(class PyRxObject)'''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def createExtrudedSurface (self, *args, **kwargs)-> PyDb.ExtrudedSurface :
      '''createExtrudedSurface( (Profile3d)arg1, (Vector3d)arg2, (SweepOptions)arg3) -> ExtrudedSurface :

    C++ signature :
        class PyDbExtrudedSurface createExtrudedSurface(class PyDb3dProfile {lvalue},class AcGeVector3d,class PyDbSweepOptions {lvalue})'''
    ...
    def createFrom (self, *args, **kwargs)-> PyDb.Surface :
      '''createFrom( (Entity)arg1) -> Surface :

    C++ signature :
        class PyDbSurface createFrom(class PyDbEntity)'''
    ...
    def creationActionBodyId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''creationActionBodyId( (Surface)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId creationActionBodyId(class PyDbSurface {lvalue})'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extendEdges (self, *args, **kwargs)-> None :
      '''extendEdges( (Surface)arg1, (list)arg2, (float)arg3, (SurfaceEdgeExtensionType)arg4, (bool)arg5) -> None :

    C++ signature :
        void extendEdges(class PyDbSurface {lvalue},class boost::python::list {lvalue},double,enum AcDbSurface::EdgeExtensionType,bool)'''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getArea (self, *args, **kwargs)-> float :
      '''getArea( (Surface)arg1) -> float :

    C++ signature :
        double getArea(class PyDbSurface {lvalue})'''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPerimeter (self, *args, **kwargs)-> float :
      '''getPerimeter( (Surface)arg1) -> float :

    C++ signature :
        double getPerimeter(class PyDbSurface {lvalue})'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def getWireframeType (self, *args, **kwargs)-> PyDb.SurfaceWireframeType :
      '''getWireframeType( (Surface)arg1) -> SurfaceWireframeType :

    C++ signature :
        enum AcDbSurface::WireframeType getWireframeType(class PyDbSurface {lvalue})'''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def modificationActionBodyIds (self, *args, **kwargs)-> list :
      '''modificationActionBodyIds( (Surface)arg1) -> list :

    C++ signature :
        class boost::python::list modificationActionBodyIds(class PyDbSurface {lvalue})'''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def projectOnToSurface (self, *args, **kwargs)-> list :
      '''projectOnToSurface( (Surface)arg1, (Entity)arg2, (Vector3d)arg3) -> list :

    C++ signature :
        class boost::python::list projectOnToSurface(class PyDbSurface {lvalue},class PyDbEntity,class AcGeVector3d)'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def rayTest (self, *args, **kwargs)-> tuple :
      '''rayTest( (Surface)arg1, (Point3d)arg2, (Vector3d)arg3, (float)arg4) -> tuple :

    C++ signature :
        class boost::python::tuple rayTest(class PyDbSurface {lvalue},class AcGePoint3d,class AcGeVector3d,double)'''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setUIsolineDensity (self, *args, **kwargs)-> None :
      '''setUIsolineDensity( (Surface)arg1, (int)arg2) -> None :

    C++ signature :
        void setUIsolineDensity(class PyDbSurface {lvalue},unsigned short)'''
    ...
    def setVIsolineDensity (self, *args, **kwargs)-> None :
      '''setVIsolineDensity( (Surface)arg1, (int)arg2) -> None :

    C++ signature :
        void setVIsolineDensity(class PyDbSurface {lvalue},unsigned short)'''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setWireframeType (self, *args, **kwargs)-> None :
      '''setWireframeType( (Surface)arg1, (SurfaceWireframeType)arg2) -> None :

    C++ signature :
        void setWireframeType(class PyDbSurface {lvalue},enum AcDbSurface::WireframeType)'''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def uIsolineDensity (self, *args, **kwargs)-> int :
      '''uIsolineDensity( (Surface)arg1) -> int :

    C++ signature :
        unsigned short uIsolineDensity(class PyDbSurface {lvalue})'''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def vIsolineDensity (self, *args, **kwargs)-> int :
      '''vIsolineDensity( (Surface)arg1) -> int :

    C++ signature :
        unsigned short vIsolineDensity(class PyDbSurface {lvalue})'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class MInsertBlock(BlockReference):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, position: PyGe.Point3d, blockTableRec: PyDb.ObjectId, columns: int, rows: int, colSpacing: float, rowSpacing: float)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - position: PyGe.Point3d, blockTableRec: PyDb.ObjectId, columns: int, rows: int, colSpacing: float, rowSpacing: float
    - id: PyDb.ObjectId
    - id: PyDb.ObjectId, mode: PyDb.OpenMode
    - id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool
    '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def appendAttribute (self, val : PyDb.Attribute)-> PyDb.ObjectId :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def attributeIds (self)-> list :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockTableRecord (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.MInsertBlock :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.MInsertBlock :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def columnSpacing (self)-> float :
      '''                             '''
    ...
    def columns (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def explodeToOwnerSpace (self)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def geomExtentsBestFit (self, val : PyGe.Matrix3d=PyGe.Matrix3d.kIdentity)-> PyDb.Extents :
      '''                             '''
    ...
    def getBlockName (self)-> str :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def nonAnnotationBlockTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def nonAnnotationScaleFactors (self)-> PyGe.Scale3d :
      '''                             '''
    ...
    def normal (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def position (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self)-> float :
      '''                             '''
    ...
    def rowSpacing (self)-> float :
      '''                             '''
    ...
    def rows (self)-> int :
      '''                             '''
    ...
    def scaleFactors (self)-> PyGe.Scale3d :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBlockTableRecord (self, val : ObjectId)-> None :
      '''                             '''
    ...
    def setBlockTransform (self, val : PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setColumnSpacing (self, val : float)-> None :
      '''                             '''
    ...
    def setColumns (self, val : int)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self, val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setRotation (self, val : float)-> None :
      '''                             '''
    ...
    def setRowSpacing (self, val : float)-> None :
      '''                             '''
    ...
    def setRows (self, val : int)-> None :
      '''                             '''
    ...
    def setScaleFactors (self, val : PyGe.Scale3d)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def treatAsAcDbBlockRefForExplode (self)-> bool :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class MLeader(Entity):
    def MLeaderStyle (self, *args, **kwargs)-> PyDb.ObjectId :
      '''MLeaderStyle( (MLeader)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId MLeaderStyle(class PyDbMLeader {lvalue})'''
    ...
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addFirstVertex (self, *args, **kwargs)-> None :
      '''addFirstVertex( (MLeader)arg1, (int)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void addFirstVertex(class PyDbMLeader {lvalue},int,class AcGePoint3d)'''
    ...
    def addLastVertex (self, *args, **kwargs)-> None :
      '''addLastVertex( (MLeader)arg1, (int)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void addLastVertex(class PyDbMLeader {lvalue},int,class AcGePoint3d)'''
    ...
    def addLeader (self, *args, **kwargs)-> int :
      '''addLeader( (MLeader)arg1) -> int :

    C++ signature :
        int addLeader(class PyDbMLeader {lvalue})'''
    ...
    def addLeaderLine (self, *args, **kwargs)-> int :
      '''addLeaderLine( (MLeader)arg1, (int)arg2) -> int :

    C++ signature :
        int addLeaderLine(class PyDbMLeader {lvalue},int)

addLeaderLine( (MLeader)arg1, (Point3d)arg2) -> int :

    C++ signature :
        int addLeaderLine(class PyDbMLeader {lvalue},class AcGePoint3d)'''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def arrowSize (self, *args, **kwargs)-> float :
      '''arrowSize( (MLeader)arg1) -> float :

    C++ signature :
        double arrowSize(class PyDbMLeader {lvalue})'''
    ...
    def arrowSymbolId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''arrowSymbolId( (MLeader)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId arrowSymbolId(class PyDbMLeader {lvalue})'''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockColor (self, *args, **kwargs)-> PyDb.Color :
      '''blockColor( (MLeader)arg1) -> Color :

    C++ signature :
        class AcCmColor blockColor(class PyDbMLeader {lvalue})'''
    ...
    def blockConnectionType (self, *args, **kwargs)-> PyDb.MLeaderBlockConnectionType :
      '''blockConnectionType( (MLeader)arg1) -> MLeaderBlockConnectionType :

    C++ signature :
        enum AcDbMLeaderStyle::BlockConnectionType blockConnectionType(class PyDbMLeader {lvalue})'''
    ...
    def blockContentId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''blockContentId( (MLeader)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockContentId(class PyDbMLeader {lvalue})'''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockRotation (self, *args, **kwargs)-> float :
      '''blockRotation( (MLeader)arg1) -> float :

    C++ signature :
        double blockRotation(class PyDbMLeader {lvalue})'''
    ...
    def blockScale (self, *args, **kwargs)-> PyGe.Scale3d :
      '''blockScale( (MLeader)arg1) -> Scale3d :

    C++ signature :
        class AcGeScale3d blockScale(class PyDbMLeader {lvalue})'''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...
    def cast (self, *args, **kwargs)-> PyDb.MLeader :
      '''cast( (RxObject)arg1) -> MLeader :

    C++ signature :
        class PyDbMLeader cast(class PyRxObject)'''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.MLeader :
      '''cloneFrom( (RxObject)arg1) -> MLeader :

    C++ signature :
        class PyDbMLeader cloneFrom(class PyRxObject)'''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def connectionPoint (self, *args, **kwargs)-> PyGe.Point3d :
      '''connectionPoint( (MLeader)arg1, (Vector3d)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d connectionPoint(class PyDbMLeader {lvalue},class AcGeVector3d)

connectionPoint( (MLeader)arg1, (Vector3d)arg2, (MLeaderTextAttachmentDirection)arg3) -> Point3d :

    C++ signature :
        class AcGePoint3d connectionPoint(class PyDbMLeader {lvalue},class AcGeVector3d,enum AcDbMLeaderStyle::TextAttachmentDirection)'''
    ...
    def contentType (self, *args, **kwargs)-> PyDb.MLeaderContentType :
      '''contentType( (MLeader)arg1) -> MLeaderContentType :

    C++ signature :
        enum AcDbMLeaderStyle::ContentType contentType(class PyDbMLeader {lvalue})'''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def doglegLength (self, *args, **kwargs)-> float :
      '''doglegLength( (MLeader)arg1) -> float :

    C++ signature :
        double doglegLength(class PyDbMLeader {lvalue})'''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def enableAnnotationScale (self, *args, **kwargs)-> bool :
      '''enableAnnotationScale( (MLeader)arg1) -> bool :

    C++ signature :
        bool enableAnnotationScale(class PyDbMLeader {lvalue})'''
    ...
    def enableDogleg (self, *args, **kwargs)-> bool :
      '''enableDogleg( (MLeader)arg1) -> bool :

    C++ signature :
        bool enableDogleg(class PyDbMLeader {lvalue})'''
    ...
    def enableFrameText (self, *args, **kwargs)-> bool :
      '''enableFrameText( (MLeader)arg1) -> bool :

    C++ signature :
        bool enableFrameText(class PyDbMLeader {lvalue})'''
    ...
    def enableLanding (self, *args, **kwargs)-> bool :
      '''enableLanding( (MLeader)arg1) -> bool :

    C++ signature :
        bool enableLanding(class PyDbMLeader {lvalue})'''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extendLeaderToText (self, *args, **kwargs)-> bool :
      '''extendLeaderToText( (MLeader)arg1) -> bool :

    C++ signature :
        bool extendLeaderToText(class PyDbMLeader {lvalue})'''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getArrowSize (self, *args, **kwargs)-> float :
      '''getArrowSize( (MLeader)arg1, (int)arg2) -> float :

    C++ signature :
        double getArrowSize(class PyDbMLeader {lvalue},int)'''
    ...
    def getArrowSymbolId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getArrowSymbolId( (MLeader)arg1, (int)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getArrowSymbolId(class PyDbMLeader {lvalue},int)'''
    ...
    def getBlockAttributeValue (self, *args, **kwargs)-> PyDb.AttributeReference :
      '''getBlockAttributeValue( (MLeader)arg1, (ObjectId)arg2) -> AttributeReference :

    C++ signature :
        class PyDbAttribute getBlockAttributeValue(class PyDbMLeader {lvalue},class PyDbObjectId)

getBlockAttributeValue( (MLeader)arg1, (ObjectId)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getBlockAttributeValue(class PyDbMLeader {lvalue},class PyDbObjectId)'''
    ...
    def getBlockPosition (self, *args, **kwargs)-> PyGe.Point3d :
      '''getBlockPosition( (MLeader)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getBlockPosition(class PyDbMLeader {lvalue})'''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getContentGeomExtents (self, *args, **kwargs)-> PyDb.Extents :
      '''getContentGeomExtents( (MLeader)arg1) -> Extents :

    C++ signature :
        class AcDbExtents getContentGeomExtents(class PyDbMLeader {lvalue})'''
    ...
    def getDoglegDirection (self, *args, **kwargs)-> PyGe.Vector3d :
      '''getDoglegDirection( (MLeader)arg1, (int)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getDoglegDirection(class PyDbMLeader {lvalue},int)'''
    ...
    def getDoglegLength (self, *args, **kwargs)-> float :
      '''getDoglegLength( (MLeader)arg1, (int)arg2) -> float :

    C++ signature :
        double getDoglegLength(class PyDbMLeader {lvalue},int)'''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFirstVertex (self, *args, **kwargs)-> PyGe.Point3d :
      '''getFirstVertex( (MLeader)arg1, (int)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getFirstVertex(class PyDbMLeader {lvalue},int)'''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getLastVertex (self, *args, **kwargs)-> PyGe.Point3d :
      '''getLastVertex( (MLeader)arg1, (int)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getLastVertex(class PyDbMLeader {lvalue},int)'''
    ...
    def getLeaderIndex (self, *args, **kwargs)-> int :
      '''getLeaderIndex( (MLeader)arg1, (int)arg2) -> int :

    C++ signature :
        int getLeaderIndex(class PyDbMLeader {lvalue},int)'''
    ...
    def getLeaderIndexes (self, *args, **kwargs)-> list :
      '''getLeaderIndexes( (MLeader)arg1) -> list :

    C++ signature :
        class boost::python::list getLeaderIndexes(class PyDbMLeader {lvalue})'''
    ...
    def getLeaderLineColor (self, *args, **kwargs)-> PyDb.Color :
      '''getLeaderLineColor( (MLeader)arg1, (int)arg2) -> Color :

    C++ signature :
        class AcCmColor getLeaderLineColor(class PyDbMLeader {lvalue},int)'''
    ...
    def getLeaderLineIndexes (self, *args, **kwargs)-> list :
      '''getLeaderLineIndexes( (MLeader)arg1) -> list :

    C++ signature :
        class boost::python::list getLeaderLineIndexes(class PyDbMLeader {lvalue})

getLeaderLineIndexes( (MLeader)arg1, (int)arg2) -> list :

    C++ signature :
        class boost::python::list getLeaderLineIndexes(class PyDbMLeader {lvalue},int)'''
    ...
    def getLeaderLineType (self, *args, **kwargs)-> PyDb.MLeaderLeaderType :
      '''getLeaderLineType( (MLeader)arg1, (int)arg2) -> MLeaderLeaderType :

    C++ signature :
        enum AcDbMLeaderStyle::LeaderType getLeaderLineType(class PyDbMLeader {lvalue},int)'''
    ...
    def getLeaderLineTypeId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getLeaderLineTypeId( (MLeader)arg1, (int)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getLeaderLineTypeId(class PyDbMLeader {lvalue},int)'''
    ...
    def getLeaderLineWeight (self, *args, **kwargs)-> PyDb.LineWeight :
      '''getLeaderLineWeight( (MLeader)arg1, (int)arg2) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight getLeaderLineWeight(class PyDbMLeader {lvalue},int)'''
    ...
    def getOverridedMLeaderStyle (self, *args, **kwargs)-> None :
      '''getOverridedMLeaderStyle( (MLeader)arg1, (MLeaderStyle)arg2) -> None :

    C++ signature :
        void getOverridedMLeaderStyle(class PyDbMLeader {lvalue},class PyDbMLeaderStyle {lvalue})'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTextLocation (self, *args, **kwargs)-> PyGe.Point3d :
      '''getTextLocation( (MLeader)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getTextLocation(class PyDbMLeader {lvalue})'''
    ...
    def getToleranceLocation (self, *args, **kwargs)-> PyGe.Point3d :
      '''getToleranceLocation( (MLeader)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getToleranceLocation(class PyDbMLeader {lvalue})'''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def getVertex (self, *args, **kwargs)-> PyGe.Point3d :
      '''getVertex( (MLeader)arg1, (int)arg2, (int)arg3) -> Point3d :

    C++ signature :
        class AcGePoint3d getVertex(class PyDbMLeader {lvalue},int,int)'''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasContent (self, *args, **kwargs)-> bool :
      '''hasContent( (MLeader)arg1) -> bool :

    C++ signature :
        bool hasContent(class PyDbMLeader {lvalue})'''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isOverride (self, *args, **kwargs)-> bool :
      '''isOverride( (MLeader)arg1, (MLeaderPropertyOverrideType)arg2) -> bool :

    C++ signature :
        bool isOverride(class PyDbMLeader {lvalue},enum AcDbMLeader::PropertyOverrideType)'''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def landingGap (self, *args, **kwargs)-> float :
      '''landingGap( (MLeader)arg1) -> float :

    C++ signature :
        double landingGap(class PyDbMLeader {lvalue})'''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def leaderLineColor (self, *args, **kwargs)-> PyDb.Color :
      '''leaderLineColor( (MLeader)arg1) -> Color :

    C++ signature :
        class AcCmColor leaderLineColor(class PyDbMLeader {lvalue})'''
    ...
    def leaderLineType (self, *args, **kwargs)-> PyDb.MLeaderLeaderType :
      '''leaderLineType( (MLeader)arg1) -> MLeaderLeaderType :

    C++ signature :
        enum AcDbMLeaderStyle::LeaderType leaderLineType(class PyDbMLeader {lvalue})'''
    ...
    def leaderLineTypeId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''leaderLineTypeId( (MLeader)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId leaderLineTypeId(class PyDbMLeader {lvalue})'''
    ...
    def leaderLineWeight (self, *args, **kwargs)-> PyDb.LineWeight :
      '''leaderLineWeight( (MLeader)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight leaderLineWeight(class PyDbMLeader {lvalue})'''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def modified (self, *args, **kwargs)-> None :
      '''modified( (MLeader)arg1, (DbObject)arg2) -> None :

    C++ signature :
        void modified(class PyDbMLeader {lvalue},class PyDbObject)'''
    ...
    def moveMLeader (self, *args, **kwargs)-> None :
      '''moveMLeader( (MLeader)arg1, (Vector3d)arg2, (MLeaderMoveType)arg3) -> None :

    C++ signature :
        void moveMLeader(class PyDbMLeader {lvalue},class AcGeVector3d,enum AcDbMLeader::MoveType)

moveMLeader( (MLeader)arg1, (Vector3d)arg2, (MLeaderMoveType)arg3, (bool)arg4) -> None :

    C++ signature :
        void moveMLeader(class PyDbMLeader {lvalue},class AcGeVector3d,enum AcDbMLeader::MoveType,bool)'''
    ...
    def mtext (self, *args, **kwargs)-> PyDb.MText :
      '''mtext( (MLeader)arg1) -> MText :

    C++ signature :
        class PyDbMText mtext(class PyDbMLeader {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> PyGe.Vector3d :
      '''normal( (MLeader)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbMLeader {lvalue})'''
    ...
    def numLeaderLines (self, *args, **kwargs)-> int :
      '''numLeaderLines( (MLeader)arg1) -> int :

    C++ signature :
        int numLeaderLines(class PyDbMLeader {lvalue})'''
    ...
    def numLeaders (self, *args, **kwargs)-> int :
      '''numLeaders( (MLeader)arg1) -> int :

    C++ signature :
        int numLeaders(class PyDbMLeader {lvalue})'''
    ...
    def numVertices (self, *args, **kwargs)-> int :
      '''numVertices( (MLeader)arg1, (int)arg2) -> int :

    C++ signature :
        int numVertices(class PyDbMLeader {lvalue},int)'''
    ...
    def objectClosed (self, *args, **kwargs)-> None :
      '''objectClosed( (MLeader)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void objectClosed(class PyDbMLeader {lvalue},class PyDbObjectId)'''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plane (self, *args, **kwargs)-> PyGe.Plane :
      '''plane( (MLeader)arg1) -> Plane :

    C++ signature :
        class PyGePlane plane(class PyDbMLeader {lvalue})'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def postMLeaderToDb (self, *args, **kwargs)-> None :
      '''postMLeaderToDb( (MLeader)arg1, (Database)arg2) -> None :

    C++ signature :
        void postMLeaderToDb(class PyDbMLeader {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recomputeBreakPoints (self, *args, **kwargs)-> None :
      '''recomputeBreakPoints( (MLeader)arg1) -> None :

    C++ signature :
        void recomputeBreakPoints(class PyDbMLeader {lvalue})'''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeFirstVertex (self, *args, **kwargs)-> None :
      '''removeFirstVertex( (MLeader)arg1, (int)arg2) -> None :

    C++ signature :
        void removeFirstVertex(class PyDbMLeader {lvalue},int)'''
    ...
    def removeLastVertex (self, *args, **kwargs)-> None :
      '''removeLastVertex( (MLeader)arg1, (int)arg2) -> None :

    C++ signature :
        void removeLastVertex(class PyDbMLeader {lvalue},int)'''
    ...
    def removeLeader (self, *args, **kwargs)-> None :
      '''removeLeader( (MLeader)arg1, (int)arg2) -> None :

    C++ signature :
        void removeLeader(class PyDbMLeader {lvalue},int)'''
    ...
    def removeLeaderLine (self, *args, **kwargs)-> None :
      '''removeLeaderLine( (MLeader)arg1, (int)arg2) -> None :

    C++ signature :
        void removeLeaderLine(class PyDbMLeader {lvalue},int)'''
    ...
    def removeLeaderLineRefAssoc (self, *args, **kwargs)-> None :
      '''removeLeaderLineRefAssoc( (MLeader)arg1, (int)arg2) -> None :

    C++ signature :
        void removeLeaderLineRefAssoc(class PyDbMLeader {lvalue},int)'''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def scale (self, *args, **kwargs)-> float :
      '''scale( (MLeader)arg1) -> float :

    C++ signature :
        double scale(class PyDbMLeader {lvalue})'''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setArrowSize (self, *args, **kwargs)-> None :
      '''setArrowSize( (MLeader)arg1, (float)arg2) -> None :

    C++ signature :
        void setArrowSize(class PyDbMLeader {lvalue},double)

setArrowSize( (MLeader)arg1, (int)arg2, (float)arg3) -> None :

    C++ signature :
        void setArrowSize(class PyDbMLeader {lvalue},int,double)'''
    ...
    def setArrowSymbolId (self, *args, **kwargs)-> None :
      '''setArrowSymbolId( (MLeader)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setArrowSymbolId(class PyDbMLeader {lvalue},class PyDbObjectId)

setArrowSymbolId( (MLeader)arg1, (int)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void setArrowSymbolId(class PyDbMLeader {lvalue},int,class PyDbObjectId)'''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBlockAttributeValue (self, *args, **kwargs)-> None :
      '''setBlockAttributeValue( (MLeader)arg1, (ObjectId)arg2, (AttributeReference)arg3) -> None :

    C++ signature :
        void setBlockAttributeValue(class PyDbMLeader {lvalue},class PyDbObjectId,class PyDbAttribute)

setBlockAttributeValue( (MLeader)arg1, (ObjectId)arg2, (str)arg3) -> None :

    C++ signature :
        void setBlockAttributeValue(class PyDbMLeader {lvalue},class PyDbObjectId,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setBlockColor (self, *args, **kwargs)-> None :
      '''setBlockColor( (MLeader)arg1, (Color)arg2) -> None :

    C++ signature :
        void setBlockColor(class PyDbMLeader {lvalue},class AcCmColor)'''
    ...
    def setBlockConnectionType (self, *args, **kwargs)-> None :
      '''setBlockConnectionType( (MLeader)arg1, (MLeaderBlockConnectionType)arg2) -> None :

    C++ signature :
        void setBlockConnectionType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::BlockConnectionType)'''
    ...
    def setBlockContentId (self, *args, **kwargs)-> None :
      '''setBlockContentId( (MLeader)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setBlockContentId(class PyDbMLeader {lvalue},class PyDbObjectId)'''
    ...
    def setBlockPosition (self, *args, **kwargs)-> None :
      '''setBlockPosition( (MLeader)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setBlockPosition(class PyDbMLeader {lvalue},class AcGePoint3d)'''
    ...
    def setBlockRotation (self, *args, **kwargs)-> None :
      '''setBlockRotation( (MLeader)arg1, (float)arg2) -> None :

    C++ signature :
        void setBlockRotation(class PyDbMLeader {lvalue},double)'''
    ...
    def setBlockScale (self, *args, **kwargs)-> None :
      '''setBlockScale( (MLeader)arg1, (Scale3d)arg2) -> None :

    C++ signature :
        void setBlockScale(class PyDbMLeader {lvalue},class AcGeScale3d)'''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setContentType (self, *args, **kwargs)-> None :
      '''setContentType( (MLeader)arg1, (MLeaderContentType)arg2) -> None :

    C++ signature :
        void setContentType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::ContentType)'''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setDoglegDirection (self, *args, **kwargs)-> None :
      '''setDoglegDirection( (MLeader)arg1, (int)arg2, (Vector3d)arg3) -> None :

    C++ signature :
        void setDoglegDirection(class PyDbMLeader {lvalue},int,class AcGeVector3d)'''
    ...
    def setDoglegLength (self, *args, **kwargs)-> None :
      '''setDoglegLength( (MLeader)arg1, (float)arg2) -> None :

    C++ signature :
        void setDoglegLength(class PyDbMLeader {lvalue},double)

setDoglegLength( (MLeader)arg1, (int)arg2, (float)arg3) -> None :

    C++ signature :
        void setDoglegLength(class PyDbMLeader {lvalue},int,double)'''
    ...
    def setEnableAnnotationScale (self, *args, **kwargs)-> None :
      '''setEnableAnnotationScale( (MLeader)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnableAnnotationScale(class PyDbMLeader {lvalue},bool)'''
    ...
    def setEnableDogleg (self, *args, **kwargs)-> None :
      '''setEnableDogleg( (MLeader)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnableDogleg(class PyDbMLeader {lvalue},bool)'''
    ...
    def setEnableFrameText (self, *args, **kwargs)-> None :
      '''setEnableFrameText( (MLeader)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnableFrameText(class PyDbMLeader {lvalue},bool)'''
    ...
    def setEnableLanding (self, *args, **kwargs)-> None :
      '''setEnableLanding( (MLeader)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnableLanding(class PyDbMLeader {lvalue},bool)'''
    ...
    def setExtendLeaderToText (self, *args, **kwargs)-> None :
      '''setExtendLeaderToText( (MLeader)arg1, (bool)arg2) -> None :

    C++ signature :
        void setExtendLeaderToText(class PyDbMLeader {lvalue},bool)'''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setFirstVertex (self, *args, **kwargs)-> None :
      '''setFirstVertex( (MLeader)arg1, (int)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void setFirstVertex(class PyDbMLeader {lvalue},int,class AcGePoint3d)'''
    ...
    def setLandingGap (self, *args, **kwargs)-> None :
      '''setLandingGap( (MLeader)arg1, (float)arg2) -> None :

    C++ signature :
        void setLandingGap(class PyDbMLeader {lvalue},double)'''
    ...
    def setLastVertex (self, *args, **kwargs)-> None :
      '''setLastVertex( (MLeader)arg1, (int)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void setLastVertex(class PyDbMLeader {lvalue},int,class AcGePoint3d)'''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLeaderLineColor1 (self, *args, **kwargs)-> None :
      '''setLeaderLineColor1( (MLeader)arg1, (Color)arg2) -> None :

    C++ signature :
        void setLeaderLineColor1(class PyDbMLeader {lvalue},class AcCmColor)

setLeaderLineColor1( (MLeader)arg1, (int)arg2, (Color)arg3) -> None :

    C++ signature :
        void setLeaderLineColor1(class PyDbMLeader {lvalue},int,class AcCmColor)'''
    ...
    def setLeaderLineType (self, *args, **kwargs)-> None :
      '''setLeaderLineType( (MLeader)arg1, (MLeaderLeaderType)arg2) -> None :

    C++ signature :
        void setLeaderLineType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::LeaderType)

setLeaderLineType( (MLeader)arg1, (int)arg2, (MLeaderLeaderType)arg3) -> None :

    C++ signature :
        void setLeaderLineType(class PyDbMLeader {lvalue},int,enum AcDbMLeaderStyle::LeaderType)'''
    ...
    def setLeaderLineTypeId (self, *args, **kwargs)-> None :
      '''setLeaderLineTypeId( (MLeader)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setLeaderLineTypeId(class PyDbMLeader {lvalue},class PyDbObjectId)

setLeaderLineTypeId( (MLeader)arg1, (int)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void setLeaderLineTypeId(class PyDbMLeader {lvalue},int,class PyDbObjectId)'''
    ...
    def setLeaderLineWeight1 (self, *args, **kwargs)-> None :
      '''setLeaderLineWeight1( (MLeader)arg1, (LineWeight)arg2) -> None :

    C++ signature :
        void setLeaderLineWeight1(class PyDbMLeader {lvalue},enum AcDb::LineWeight)

setLeaderLineWeight1( (MLeader)arg1, (int)arg2, (LineWeight)arg3) -> None :

    C++ signature :
        void setLeaderLineWeight1(class PyDbMLeader {lvalue},int,enum AcDb::LineWeight)'''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMLeaderStyle (self, *args, **kwargs)-> None :
      '''setMLeaderStyle( (MLeader)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setMLeaderStyle(class PyDbMLeader {lvalue},class PyDbObjectId)'''
    ...
    def setMText (self, *args, **kwargs)-> None :
      '''setMText( (MLeader)arg1, (MText)arg2) -> None :

    C++ signature :
        void setMText(class PyDbMLeader {lvalue},class PyDbMText)'''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOverride (self, *args, **kwargs)-> None :
      '''setOverride( (MLeader)arg1, (MLeaderPropertyOverrideType)arg2) -> None :

    C++ signature :
        void setOverride(class PyDbMLeader {lvalue},enum AcDbMLeader::PropertyOverrideType)

setOverride( (MLeader)arg1, (MLeaderPropertyOverrideType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setOverride(class PyDbMLeader {lvalue},enum AcDbMLeader::PropertyOverrideType,bool)'''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlane (self, *args, **kwargs)-> None :
      '''setPlane( (MLeader)arg1, (Plane)arg2) -> None :

    C++ signature :
        void setPlane(class PyDbMLeader {lvalue},class PyGePlane)'''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setScale (self, *args, **kwargs)-> None :
      '''setScale( (MLeader)arg1, (float)arg2) -> None :

    C++ signature :
        void setScale(class PyDbMLeader {lvalue},double)'''
    ...
    def setTextAlignmentType (self, *args, **kwargs)-> None :
      '''setTextAlignmentType( (MLeader)arg1, (MLeaderTextAlignmentType)arg2) -> None :

    C++ signature :
        void setTextAlignmentType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::TextAlignmentType)'''
    ...
    def setTextAngleType (self, *args, **kwargs)-> None :
      '''setTextAngleType( (MLeader)arg1, (MLeaderTextAngleType)arg2) -> None :

    C++ signature :
        void setTextAngleType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::TextAngleType)'''
    ...
    def setTextAttachmentDirection (self, *args, **kwargs)-> None :
      '''setTextAttachmentDirection( (MLeader)arg1, (MLeaderTextAttachmentDirection)arg2) -> None :

    C++ signature :
        void setTextAttachmentDirection(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::TextAttachmentDirection)'''
    ...
    def setTextAttachmentType (self, *args, **kwargs)-> None :
      '''setTextAttachmentType( (MLeader)arg1, (MLeaderTextAttachmentType)arg2) -> None :

    C++ signature :
        void setTextAttachmentType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::TextAttachmentType)

setTextAttachmentType( (MLeader)arg1, (MLeaderTextAttachmentType)arg2, (MLeaderLeaderDirectionType)arg3) -> None :

    C++ signature :
        void setTextAttachmentType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::TextAttachmentType,enum AcDbMLeaderStyle::LeaderDirectionType)'''
    ...
    def setTextColor (self, *args, **kwargs)-> None :
      '''setTextColor( (MLeader)arg1, (Color)arg2) -> None :

    C++ signature :
        void setTextColor(class PyDbMLeader {lvalue},class AcCmColor)'''
    ...
    def setTextHeight (self, *args, **kwargs)-> None :
      '''setTextHeight( (MLeader)arg1, (float)arg2) -> None :

    C++ signature :
        void setTextHeight(class PyDbMLeader {lvalue},double)'''
    ...
    def setTextLocation (self, *args, **kwargs)-> None :
      '''setTextLocation( (MLeader)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setTextLocation(class PyDbMLeader {lvalue},class AcGePoint3d)'''
    ...
    def setTextStyleId (self, *args, **kwargs)-> None :
      '''setTextStyleId( (MLeader)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setTextStyleId(class PyDbMLeader {lvalue},class PyDbObjectId)'''
    ...
    def setToleranceLocation (self, *args, **kwargs)-> None :
      '''setToleranceLocation( (MLeader)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setToleranceLocation(class PyDbMLeader {lvalue},class AcGePoint3d)'''
    ...
    def setVertex (self, *args, **kwargs)-> None :
      '''setVertex( (MLeader)arg1, (int)arg2, (int)arg3, (Point3d)arg4) -> None :

    C++ signature :
        void setVertex(class PyDbMLeader {lvalue},int,int,class AcGePoint3d)'''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAlignmentType (self, *args, **kwargs)-> PyDb.MLeaderTextAlignmentType :
      '''textAlignmentType( (MLeader)arg1) -> MLeaderTextAlignmentType :

    C++ signature :
        enum AcDbMLeaderStyle::TextAlignmentType textAlignmentType(class PyDbMLeader {lvalue})'''
    ...
    def textAngleType (self, *args, **kwargs)-> PyDb.MLeaderTextAngleType :
      '''textAngleType( (MLeader)arg1) -> MLeaderTextAngleType :

    C++ signature :
        enum AcDbMLeaderStyle::TextAngleType textAngleType(class PyDbMLeader {lvalue})'''
    ...
    def textAttachmentDirection (self, *args, **kwargs)-> PyDb.MLeaderTextAttachmentDirection :
      '''textAttachmentDirection( (MLeader)arg1) -> MLeaderTextAttachmentDirection :

    C++ signature :
        enum AcDbMLeaderStyle::TextAttachmentDirection textAttachmentDirection(class PyDbMLeader {lvalue})'''
    ...
    def textAttachmentType (self, *args, **kwargs)-> PyDb.MLeaderTextAttachmentType :
      '''textAttachmentType( (MLeader)arg1) -> MLeaderTextAttachmentType :

    C++ signature :
        enum AcDbMLeaderStyle::TextAttachmentType textAttachmentType(class PyDbMLeader {lvalue})

textAttachmentType( (MLeader)arg1, (MLeaderLeaderDirectionType)arg2) -> MLeaderTextAttachmentType :

    C++ signature :
        enum AcDbMLeaderStyle::TextAttachmentType textAttachmentType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::LeaderDirectionType)'''
    ...
    def textColor (self, *args, **kwargs)-> PyDb.Color :
      '''textColor( (MLeader)arg1) -> Color :

    C++ signature :
        class AcCmColor textColor(class PyDbMLeader {lvalue})'''
    ...
    def textHeight (self, *args, **kwargs)-> float :
      '''textHeight( (MLeader)arg1) -> float :

    C++ signature :
        double textHeight(class PyDbMLeader {lvalue})'''
    ...
    def textStyleId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''textStyleId( (MLeader)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyleId(class PyDbMLeader {lvalue})'''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def updateLeaderLinePosition (self, *args, **kwargs)-> None :
      '''updateLeaderLinePosition( (MLeader)arg1) -> None :

    C++ signature :
        void updateLeaderLinePosition(class PyDbMLeader {lvalue})'''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class MLeaderBlockConnectionType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kConnectBase (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kConnectExtents (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class MLeaderContentType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kBlockContent (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMTextContent (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNoneContent (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kToleranceContent (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class MLeaderGsMarkType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kArrowMark (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBlockAttribute (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBlockMark (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDoglegMark (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLeaderLineMark (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMTextMark (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMTextUnderLineMark (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kToleranceMark (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class MLeaderLeaderDirectionType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kBottomLeader (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLeftLeader (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kRightLeader (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTopLeader (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnknownLeader (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class MLeaderLeaderType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kInVisibleLeader (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSplineLeader (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kStraightLeader (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class MLeaderMoveType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kMoveAllExceptArrowHeaderPoints (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMoveAllPoints (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMoveContentAndDoglegPoints (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class MLeaderPropertyOverrideType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kArrowSize (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kArrowSymbolId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBlockColor (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBlockConnectionType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBlockId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBlockRotation (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBlockScale (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kContentType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDefaultMText (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDoglegLength (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEnableDogleg (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEnableFrameText (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEnableLanding (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kExtendLeaderToText (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLandingGap (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLeaderLineColor (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLeaderLineType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLeaderLineTypeId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLeaderLineWeight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kScale (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSize (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextAlignmentType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextAngleType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextAttachmentDirection (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextBottomAttachmentType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextColor (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextHeight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextLeftAttachmentType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextRightAttachmentType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextStyleId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextSwitchAlignmentType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextTopAttachmentType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class MLeaderSegmentAngleType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def k15 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k30 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k45 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k60 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k90 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAny (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHorz (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class MLeaderStyle(DbObject):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def alignSpace (self, *args, **kwargs)-> float :
      '''alignSpace( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double alignSpace(class PyDbMLeaderStyle {lvalue})'''
    ...
    def annotative (self, *args, **kwargs)-> bool :
      '''annotative( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool annotative(class PyDbMLeaderStyle {lvalue})'''
    ...
    def arrowSize (self, *args, **kwargs)-> float :
      '''arrowSize( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double arrowSize(class PyDbMLeaderStyle {lvalue})'''
    ...
    def arrowSymbolId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''arrowSymbolId( (MLeaderStyle)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId arrowSymbolId(class PyDbMLeaderStyle {lvalue})'''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bitFlags (self, *args, **kwargs)-> int :
      '''bitFlags( (MLeaderStyle)arg1) -> int :

    C++ signature :
        unsigned int bitFlags(class PyDbMLeaderStyle {lvalue})'''
    ...
    def blockColor (self, *args, **kwargs)-> PyDb.Color :
      '''blockColor( (MLeaderStyle)arg1) -> Color :

    C++ signature :
        class AcCmColor blockColor(class PyDbMLeaderStyle {lvalue})'''
    ...
    def blockConnectionType (self, *args, **kwargs)-> PyDb.MLeaderBlockConnectionType :
      '''blockConnectionType( (MLeaderStyle)arg1) -> MLeaderBlockConnectionType :

    C++ signature :
        enum AcDbMLeaderStyle::BlockConnectionType blockConnectionType(class PyDbMLeaderStyle {lvalue})'''
    ...
    def blockId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''blockId( (MLeaderStyle)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbMLeaderStyle {lvalue})'''
    ...
    def blockRotation (self, *args, **kwargs)-> float :
      '''blockRotation( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double blockRotation(class PyDbMLeaderStyle {lvalue})'''
    ...
    def blockScale (self, *args, **kwargs)-> PyGe.Scale3d :
      '''blockScale( (MLeaderStyle)arg1) -> Scale3d :

    C++ signature :
        class AcGeScale3d blockScale(class PyDbMLeaderStyle {lvalue})'''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def breakSize (self, *args, **kwargs)-> float :
      '''breakSize( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double breakSize(class PyDbMLeaderStyle {lvalue})'''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.DbObject :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.DbObject :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def contentType (self, *args, **kwargs)-> PyDb.MLeaderContentType :
      '''contentType( (MLeaderStyle)arg1) -> MLeaderContentType :

    C++ signature :
        enum AcDbMLeaderStyle::ContentType contentType(class PyDbMLeaderStyle {lvalue})'''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def defaultMText (self, *args, **kwargs)-> PyDb.MText :
      '''defaultMText( (MLeaderStyle)arg1) -> MText :

    C++ signature :
        class PyDbMText defaultMText(class PyDbMLeaderStyle {lvalue})'''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def description (self, *args, **kwargs)-> str :
      '''description( (MLeaderStyle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > description(class PyDbMLeaderStyle {lvalue})'''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def doglegLength (self, *args, **kwargs)-> float :
      '''doglegLength( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double doglegLength(class PyDbMLeaderStyle {lvalue})'''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawLeaderOrderType (self, *args, **kwargs)-> PyDb.DrawLeaderOrderType :
      '''drawLeaderOrderType( (MLeaderStyle)arg1) -> DrawLeaderOrderType :

    C++ signature :
        enum AcDbMLeaderStyle::DrawLeaderOrderType drawLeaderOrderType(class PyDbMLeaderStyle {lvalue})

drawLeaderOrderType( (MLeaderStyle)arg1) -> DrawLeaderOrderType :

    C++ signature :
        enum AcDbMLeaderStyle::DrawLeaderOrderType drawLeaderOrderType(class PyDbMLeaderStyle {lvalue})'''
    ...
    def drawMLeaderOrderType (self, *args, **kwargs)-> PyDb.DrawMLeaderOrderType :
      '''drawMLeaderOrderType( (MLeaderStyle)arg1) -> DrawMLeaderOrderType :

    C++ signature :
        enum AcDbMLeaderStyle::DrawMLeaderOrderType drawMLeaderOrderType(class PyDbMLeaderStyle {lvalue})'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def enableBlockRotation (self, *args, **kwargs)-> bool :
      '''enableBlockRotation( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool enableBlockRotation(class PyDbMLeaderStyle {lvalue})'''
    ...
    def enableBlockScale (self, *args, **kwargs)-> bool :
      '''enableBlockScale( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool enableBlockScale(class PyDbMLeaderStyle {lvalue})'''
    ...
    def enableDogleg (self, *args, **kwargs)-> bool :
      '''enableDogleg( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool enableDogleg(class PyDbMLeaderStyle {lvalue})'''
    ...
    def enableFrameText (self, *args, **kwargs)-> bool :
      '''enableFrameText( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool enableFrameText(class PyDbMLeaderStyle {lvalue})'''
    ...
    def enableLanding (self, *args, **kwargs)-> bool :
      '''enableLanding( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool enableLanding(class PyDbMLeaderStyle {lvalue})'''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extendLeaderToText (self, *args, **kwargs)-> bool :
      '''extendLeaderToText( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool extendLeaderToText(class PyDbMLeaderStyle {lvalue})'''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def firstSegmentAngleConstraint (self, *args, **kwargs)-> PyDb.MLeaderSegmentAngleType :
      '''firstSegmentAngleConstraint( (MLeaderStyle)arg1) -> MLeaderSegmentAngleType :

    C++ signature :
        enum AcDbMLeaderStyle::SegmentAngleType firstSegmentAngleConstraint(class PyDbMLeaderStyle {lvalue})'''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getName (self, *args, **kwargs)-> str :
      '''getName( (MLeaderStyle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getName(class PyDbMLeaderStyle {lvalue})'''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isRenamable (self, *args, **kwargs)-> bool :
      '''isRenamable( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool isRenamable(class PyDbMLeaderStyle {lvalue})'''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def landingGap (self, *args, **kwargs)-> float :
      '''landingGap( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double landingGap(class PyDbMLeaderStyle {lvalue})'''
    ...
    def leaderLineColor (self, *args, **kwargs)-> PyDb.Color :
      '''leaderLineColor( (MLeaderStyle)arg1) -> Color :

    C++ signature :
        class AcCmColor leaderLineColor(class PyDbMLeaderStyle {lvalue})'''
    ...
    def leaderLineType (self, *args, **kwargs)-> PyDb.MLeaderLeaderType :
      '''leaderLineType( (MLeaderStyle)arg1) -> MLeaderLeaderType :

    C++ signature :
        enum AcDbMLeaderStyle::LeaderType leaderLineType(class PyDbMLeaderStyle {lvalue})'''
    ...
    def leaderLineTypeId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''leaderLineTypeId( (MLeaderStyle)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId leaderLineTypeId(class PyDbMLeaderStyle {lvalue})'''
    ...
    def leaderLineWeight (self, *args, **kwargs)-> PyDb.LineWeight :
      '''leaderLineWeight( (MLeaderStyle)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight leaderLineWeight(class PyDbMLeaderStyle {lvalue})'''
    ...
    def maxLeaderSegmentsPoints (self, *args, **kwargs)-> int :
      '''maxLeaderSegmentsPoints( (MLeaderStyle)arg1) -> int :

    C++ signature :
        int maxLeaderSegmentsPoints(class PyDbMLeaderStyle {lvalue})'''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def overwritePropChanged (self, *args, **kwargs)-> bool :
      '''overwritePropChanged( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool overwritePropChanged(class PyDbMLeaderStyle {lvalue})'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def postMLeaderStyleToDb (self, *args, **kwargs)-> PyDb.ObjectId :
      '''postMLeaderStyleToDb( (MLeaderStyle)arg1, (Database)arg2, (str)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId postMLeaderStyleToDb(class PyDbMLeaderStyle {lvalue},class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def scale (self, *args, **kwargs)-> float :
      '''scale( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double scale(class PyDbMLeaderStyle {lvalue})'''
    ...
    def secondSegmentAngleConstraint (self, *args, **kwargs)-> PyDb.MLeaderSegmentAngleType :
      '''secondSegmentAngleConstraint( (MLeaderStyle)arg1) -> MLeaderSegmentAngleType :

    C++ signature :
        enum AcDbMLeaderStyle::SegmentAngleType secondSegmentAngleConstraint(class PyDbMLeaderStyle {lvalue})'''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAlignSpace (self, *args, **kwargs)-> None :
      '''setAlignSpace( (MLeaderStyle)arg1, (float)arg2) -> None :

    C++ signature :
        void setAlignSpace(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setAnnotative (self, *args, **kwargs)-> None :
      '''setAnnotative( (MLeaderStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAnnotative(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setArrowSize (self, *args, **kwargs)-> None :
      '''setArrowSize( (MLeaderStyle)arg1, (float)arg2) -> None :

    C++ signature :
        void setArrowSize(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setArrowSymbolId (self, *args, **kwargs)-> None :
      '''setArrowSymbolId( (MLeaderStyle)arg1, (str)arg2) -> None :

    C++ signature :
        void setArrowSymbolId(class PyDbMLeaderStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setArrowSymbolId( (MLeaderStyle)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setArrowSymbolId(class PyDbMLeaderStyle {lvalue},class PyDbObjectId)'''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBitFlags (self, *args, **kwargs)-> None :
      '''setBitFlags( (MLeaderStyle)arg1, (SubentType)arg2) -> None :

    C++ signature :
        void setBitFlags(class PyDbMLeaderStyle {lvalue},unsigned int)'''
    ...
    def setBlockColor (self, *args, **kwargs)-> None :
      '''setBlockColor( (MLeaderStyle)arg1, (Color)arg2) -> None :

    C++ signature :
        void setBlockColor(class PyDbMLeaderStyle {lvalue},class AcCmColor)'''
    ...
    def setBlockConnectionType (self, *args, **kwargs)-> None :
      '''setBlockConnectionType( (MLeaderStyle)arg1, (MLeaderBlockConnectionType)arg2) -> None :

    C++ signature :
        void setBlockConnectionType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::BlockConnectionType)'''
    ...
    def setBlockId (self, *args, **kwargs)-> None :
      '''setBlockId( (MLeaderStyle)arg1, (str)arg2) -> None :

    C++ signature :
        void setBlockId(class PyDbMLeaderStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setBlockId( (MLeaderStyle)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setBlockId(class PyDbMLeaderStyle {lvalue},class PyDbObjectId)'''
    ...
    def setBlockRotation (self, *args, **kwargs)-> None :
      '''setBlockRotation( (MLeaderStyle)arg1, (float)arg2) -> None :

    C++ signature :
        void setBlockRotation(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setBlockScale (self, *args, **kwargs)-> None :
      '''setBlockScale( (MLeaderStyle)arg1, (Scale3d)arg2) -> None :

    C++ signature :
        void setBlockScale(class PyDbMLeaderStyle {lvalue},class AcGeScale3d)'''
    ...
    def setBreakSize (self, *args, **kwargs)-> None :
      '''setBreakSize( (MLeaderStyle)arg1, (float)arg2) -> None :

    C++ signature :
        void setBreakSize(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setContentType (self, *args, **kwargs)-> None :
      '''setContentType( (MLeaderStyle)arg1, (MLeaderContentType)arg2) -> None :

    C++ signature :
        void setContentType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::ContentType)'''
    ...
    def setDefaultMText (self, *args, **kwargs)-> None :
      '''setDefaultMText( (MLeaderStyle)arg1, (MText)arg2) -> None :

    C++ signature :
        void setDefaultMText(class PyDbMLeaderStyle {lvalue},class PyDbMText)'''
    ...
    def setDescription (self, *args, **kwargs)-> None :
      '''setDescription( (MLeaderStyle)arg1, (str)arg2) -> None :

    C++ signature :
        void setDescription(class PyDbMLeaderStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDoglegLength (self, *args, **kwargs)-> None :
      '''setDoglegLength( (MLeaderStyle)arg1, (float)arg2) -> None :

    C++ signature :
        void setDoglegLength(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setDrawLeaderOrderType (self, *args, **kwargs)-> None :
      '''setDrawLeaderOrderType( (MLeaderStyle)arg1, (DrawLeaderOrderType)arg2) -> None :

    C++ signature :
        void setDrawLeaderOrderType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::DrawLeaderOrderType)

setDrawLeaderOrderType( (MLeaderStyle)arg1, (DrawLeaderOrderType)arg2) -> None :

    C++ signature :
        void setDrawLeaderOrderType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::DrawLeaderOrderType)'''
    ...
    def setDrawMLeaderOrderType (self, *args, **kwargs)-> None :
      '''setDrawMLeaderOrderType( (MLeaderStyle)arg1, (DrawMLeaderOrderType)arg2) -> None :

    C++ signature :
        void setDrawMLeaderOrderType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::DrawMLeaderOrderType)'''
    ...
    def setEnableBlockRotation (self, *args, **kwargs)-> None :
      '''setEnableBlockRotation( (MLeaderStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnableBlockRotation(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setEnableBlockScale (self, *args, **kwargs)-> None :
      '''setEnableBlockScale( (MLeaderStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnableBlockScale(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setEnableDogleg (self, *args, **kwargs)-> None :
      '''setEnableDogleg( (MLeaderStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnableDogleg(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setEnableFrameText (self, *args, **kwargs)-> None :
      '''setEnableFrameText( (MLeaderStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnableFrameText(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setEnableLanding (self, *args, **kwargs)-> None :
      '''setEnableLanding( (MLeaderStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnableLanding(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setExtendLeaderToText (self, *args, **kwargs)-> None :
      '''setExtendLeaderToText( (MLeaderStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setExtendLeaderToText(class PyDbMLeaderStyle {lvalue},bool)'''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setFirstSegmentAngleConstraint (self, *args, **kwargs)-> None :
      '''setFirstSegmentAngleConstraint( (MLeaderStyle)arg1, (MLeaderSegmentAngleType)arg2) -> None :

    C++ signature :
        void setFirstSegmentAngleConstraint(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::SegmentAngleType)'''
    ...
    def setLandingGap (self, *args, **kwargs)-> None :
      '''setLandingGap( (MLeaderStyle)arg1, (float)arg2) -> None :

    C++ signature :
        void setLandingGap(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setLeaderLineColor (self, *args, **kwargs)-> None :
      '''setLeaderLineColor( (MLeaderStyle)arg1, (Color)arg2) -> None :

    C++ signature :
        void setLeaderLineColor(class PyDbMLeaderStyle {lvalue},class AcCmColor)'''
    ...
    def setLeaderLineType (self, *args, **kwargs)-> None :
      '''setLeaderLineType( (MLeaderStyle)arg1, (MLeaderLeaderType)arg2) -> None :

    C++ signature :
        void setLeaderLineType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::LeaderType)'''
    ...
    def setLeaderLineTypeId (self, *args, **kwargs)-> None :
      '''setLeaderLineTypeId( (MLeaderStyle)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setLeaderLineTypeId(class PyDbMLeaderStyle {lvalue},class PyDbObjectId)'''
    ...
    def setLeaderLineWeight (self, *args, **kwargs)-> None :
      '''setLeaderLineWeight( (MLeaderStyle)arg1, (LineWeight)arg2) -> None :

    C++ signature :
        void setLeaderLineWeight(class PyDbMLeaderStyle {lvalue},enum AcDb::LineWeight)'''
    ...
    def setMaxLeaderSegmentsPoints (self, *args, **kwargs)-> None :
      '''setMaxLeaderSegmentsPoints( (MLeaderStyle)arg1, (int)arg2) -> None :

    C++ signature :
        void setMaxLeaderSegmentsPoints(class PyDbMLeaderStyle {lvalue},int)'''
    ...
    def setName (self, *args, **kwargs)-> None :
      '''setName( (MLeaderStyle)arg1, (str)arg2) -> None :

    C++ signature :
        void setName(class PyDbMLeaderStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setScale (self, *args, **kwargs)-> None :
      '''setScale( (MLeaderStyle)arg1, (float)arg2) -> None :

    C++ signature :
        void setScale(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setSecondSegmentAngleConstraint (self, *args, **kwargs)-> None :
      '''setSecondSegmentAngleConstraint( (MLeaderStyle)arg1, (MLeaderSegmentAngleType)arg2) -> None :

    C++ signature :
        void setSecondSegmentAngleConstraint(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::SegmentAngleType)'''
    ...
    def setTextAlignAlwaysLeft (self, *args, **kwargs)-> None :
      '''setTextAlignAlwaysLeft( (MLeaderStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setTextAlignAlwaysLeft(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setTextAlignmentType (self, *args, **kwargs)-> None :
      '''setTextAlignmentType( (MLeaderStyle)arg1, (MLeaderTextAlignmentType)arg2) -> None :

    C++ signature :
        void setTextAlignmentType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::TextAlignmentType)'''
    ...
    def setTextAngleType (self, *args, **kwargs)-> None :
      '''setTextAngleType( (MLeaderStyle)arg1, (MLeaderTextAngleType)arg2) -> None :

    C++ signature :
        void setTextAngleType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::TextAngleType)'''
    ...
    def setTextAttachmentDirection (self, *args, **kwargs)-> None :
      '''setTextAttachmentDirection( (MLeaderStyle)arg1, (MLeaderTextAttachmentDirection)arg2) -> None :

    C++ signature :
        void setTextAttachmentDirection(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::TextAttachmentDirection)'''
    ...
    def setTextAttachmentType (self, *args, **kwargs)-> None :
      '''setTextAttachmentType( (MLeaderStyle)arg1, (MLeaderTextAttachmentType)arg2 [, (MLeaderLeaderDirectionType)arg3]) -> None :

    C++ signature :
        void setTextAttachmentType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::TextAttachmentType [,enum AcDbMLeaderStyle::LeaderDirectionType])'''
    ...
    def setTextColor (self, *args, **kwargs)-> None :
      '''setTextColor( (MLeaderStyle)arg1, (Color)arg2) -> None :

    C++ signature :
        void setTextColor(class PyDbMLeaderStyle {lvalue},class AcCmColor)'''
    ...
    def setTextHeight (self, *args, **kwargs)-> None :
      '''setTextHeight( (MLeaderStyle)arg1, (float)arg2) -> None :

    C++ signature :
        void setTextHeight(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setTextStyleId (self, *args, **kwargs)-> None :
      '''setTextStyleId( (MLeaderStyle)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setTextStyleId(class PyDbMLeaderStyle {lvalue},class PyDbObjectId)'''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAlignAlwaysLeft (self, *args, **kwargs)-> bool :
      '''textAlignAlwaysLeft( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool textAlignAlwaysLeft(class PyDbMLeaderStyle {lvalue})'''
    ...
    def textAlignmentType (self, *args, **kwargs)-> PyDb.MLeaderTextAlignmentType :
      '''textAlignmentType( (MLeaderStyle)arg1) -> MLeaderTextAlignmentType :

    C++ signature :
        enum AcDbMLeaderStyle::TextAlignmentType textAlignmentType(class PyDbMLeaderStyle {lvalue})'''
    ...
    def textAngleType (self, *args, **kwargs)-> PyDb.MLeaderTextAngleType :
      '''textAngleType( (MLeaderStyle)arg1) -> MLeaderTextAngleType :

    C++ signature :
        enum AcDbMLeaderStyle::TextAngleType textAngleType(class PyDbMLeaderStyle {lvalue})'''
    ...
    def textAttachmentDirection (self, *args, **kwargs)-> PyDb.MLeaderTextAttachmentDirection :
      '''textAttachmentDirection( (MLeaderStyle)arg1) -> MLeaderTextAttachmentDirection :

    C++ signature :
        enum AcDbMLeaderStyle::TextAttachmentDirection textAttachmentDirection(class PyDbMLeaderStyle {lvalue})'''
    ...
    def textAttachmentType (self, *args, **kwargs)-> PyDb.MLeaderTextAttachmentType :
      '''textAttachmentType( (MLeaderStyle)arg1 [, (MLeaderLeaderDirectionType)arg2]) -> MLeaderTextAttachmentType :

    C++ signature :
        enum AcDbMLeaderStyle::TextAttachmentType textAttachmentType(class PyDbMLeaderStyle {lvalue} [,enum AcDbMLeaderStyle::LeaderDirectionType])'''
    ...
    def textColor (self, *args, **kwargs)-> PyDb.Color :
      '''textColor( (MLeaderStyle)arg1) -> Color :

    C++ signature :
        class AcCmColor textColor(class PyDbMLeaderStyle {lvalue})'''
    ...
    def textHeight (self, *args, **kwargs)-> float :
      '''textHeight( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double textHeight(class PyDbMLeaderStyle {lvalue})'''
    ...
    def textStyleId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''textStyleId( (MLeaderStyle)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyleId(class PyDbMLeaderStyle {lvalue})'''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class MLeaderTextAlignmentType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kCenterAlignment (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLeftAlignment (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kRightAlignment (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class MLeaderTextAngleType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kAlwaysRightReadingAngle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHorizontalAngle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kInsertAngle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class MLeaderTextAttachmentDirection(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kAttachmentHorizontal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAttachmentVertical (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class MLeaderTextAttachmentType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kAttachmentAllLine (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAttachmentBottomLine (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAttachmentBottomOfBottom (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAttachmentBottomOfTop (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAttachmentBottomOfTopLine (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAttachmentCenter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAttachmentLinedCenter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAttachmentMiddle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAttachmentMiddleOfBottom (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAttachmentMiddleOfTop (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAttachmentTopOfTop (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class MPolygon(Entity):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def appendLoopFromBoundary (self, *args, **kwargs)-> None :
      '''appendLoopFromBoundary( (MPolygon)arg1, (Circle)arg2, (bool)arg3, (float)arg4) -> None :

    C++ signature :
        void appendLoopFromBoundary(class PyDbMPolygon {lvalue},class PyDbCircle,bool,double)

appendLoopFromBoundary( (MPolygon)arg1, (Polyline)arg2, (bool)arg3, (float)arg4) -> None :

    C++ signature :
        void appendLoopFromBoundary(class PyDbMPolygon {lvalue},class PyDbPolyline,bool,double)

appendLoopFromBoundary( (MPolygon)arg1, (Polyline2d)arg2, (bool)arg3, (float)arg4) -> None :

    C++ signature :
        void appendLoopFromBoundary(class PyDbMPolygon {lvalue},class PyDb2dPolyline,bool,double)'''
    ...
    def appendMPolygonLoop (self, *args, **kwargs)-> None :
      '''appendMPolygonLoop( (MPolygon)arg1, (list)arg2, (list)arg3, (bool)arg4, (float)arg5) -> None :

    C++ signature :
        void appendMPolygonLoop(class PyDbMPolygon {lvalue},class boost::python::list,class boost::python::list,bool,double)'''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def balanceDisplay (self)-> None :
      '''                             '''
    ...
    def balanceTree (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.MPolygon :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.MPolygon :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def createLoopsFromBoundaries (self, *args, **kwargs)-> list :
      '''createLoopsFromBoundaries( (MPolygon)arg1, (object)arg2, (bool)arg3, (float)arg4) -> list :

    C++ signature :
        class boost::python::list createLoopsFromBoundaries(class PyDbMPolygon {lvalue},class AcArray<class AcDbObjectId,class AcArrayMemCopyReallocator<class AcDbObjectId> >,bool,double)'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevation (self)-> float :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def evaluateHatch1 (self, *args, **kwargs)-> None :
      '''evaluateHatch1( (MPolygon)arg1) -> None :

    C++ signature :
        void evaluateHatch1(class PyDbMPolygon {lvalue})'''
    ...
    def evaluateHatch2 (self, val : bool=False)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getArea (self)-> float :
      '''                             '''
    ...
    def getChildLoops (self, val : int)-> list :
      '''                             '''
    ...
    def getClosestLoopTo (self, val : PyGe.Point3d)-> int :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getLoopAtGsMarker (self, val : int)-> int :
      '''                             '''
    ...
    def getLoopDirection (self, val : int)-> PyDb.MPolygonloopDir :
      '''                             '''
    ...
    def getMPolygonLoopAt (self, val : int)-> tuple :
      '''                             '''
    ...
    def getOffsetVector (self)-> PyGe.Vector2d :
      '''                             '''
    ...
    def getParentLoop (self, val : int)-> int :
      '''                             '''
    ...
    def getPatternDefinitionAt (self, val : int)-> tuple :
      '''                             '''
    ...
    def getPerimeter (self)-> float :
      '''                             '''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def hatch (self)-> PyDb.Hatch :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def includesTouchingLoops (self, val : float)-> bool :
      '''                             '''
    ...
    def insertMPolygonLoopAt (self, *args, **kwargs)-> None :
      '''insertMPolygonLoopAt( (MPolygon)arg1, (int)arg2, (list)arg3, (list)arg4, (bool)arg5, (float)arg6) -> None :

    C++ signature :
        void insertMPolygonLoopAt(class PyDbMPolygon {lvalue},int,class boost::python::list,class boost::python::list,bool,double)'''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isBalanced (self)-> bool :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isPointInsideMPolygon (self, val : PyGe.Point3d, tol : float)-> list :
      '''                             '''
    ...
    def isPointOnLoopBoundary (self, val : PyGe.Point3d, loop : int, tol : float)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def loopCrossesItself (self, *args, **kwargs)-> bool :
      '''loopCrossesItself( (MPolygon)arg1, (list)arg2, (list)arg3, (float)arg4) -> bool :

    C++ signature :
        bool loopCrossesItself(class PyDbMPolygon {lvalue},class boost::python::list,class boost::python::list,double)'''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def normal (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def numMPolygonLoops (self)-> int :
      '''                             '''
    ...
    def numPatternDefinitions (self)-> int :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def patternAngle (self)-> float :
      '''                             '''
    ...
    def patternColor (self)-> PyDb.Color :
      '''                             '''
    ...
    def patternDouble (self)-> bool :
      '''                             '''
    ...
    def patternName (self)-> str :
      '''                             '''
    ...
    def patternScale (self)-> float :
      '''                             '''
    ...
    def patternSpace (self)-> float :
      '''                             '''
    ...
    def patternType (self)-> PyDb.HatchPatternType :
      '''                             '''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeMPolygonLoopAt (self, val : int)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def selfCrosses (self, *args, **kwargs)-> bool :
      '''selfCrosses( (MPolygon)arg1, (list)arg2, (list)arg3, (float)arg4) -> bool :

    C++ signature :
        bool selfCrosses(class PyDbMPolygon {lvalue},class boost::python::list,class boost::python::list,double)'''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setElevation (self, val : float)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setGradient (self, *args, **kwargs)-> None :
      '''setGradient( (MPolygon)arg1, (HatchGradientPatternType)arg2, (str)arg3) -> None :

    C++ signature :
        void setGradient(class PyDbMPolygon {lvalue},enum AcDbHatch::GradientPatternType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setGradientAngle (self, val : float)-> None :
      '''                             '''
    ...
    def setGradientColors (self, *args, **kwargs)-> None :
      '''setGradientColors( (MPolygon)arg1, (list)arg2, (list)arg3) -> None :

    C++ signature :
        void setGradientColors(class PyDbMPolygon {lvalue},class boost::python::list,class boost::python::list)'''
    ...
    def setGradientOneColorMode (self, val : bool)-> None :
      '''                             '''
    ...
    def setGradientShift (self, val : float)-> None :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLoopDirection (self, *args, **kwargs)-> None :
      '''setLoopDirection( (MPolygon)arg1, (int)arg2, (MPolygonloopDir)arg3) -> None :

    C++ signature :
        void setLoopDirection(class PyDbMPolygon {lvalue},int,enum AcDbMPolygon::loopDir)'''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self, val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPattern (self, val : PyDb.HatchPatternType, name : str)-> None :
      '''                             '''
    ...
    def setPatternAngle (self, val : float)-> None :
      '''                             '''
    ...
    def setPatternColor (self, *args, **kwargs)-> None :
      '''setPatternColor( (MPolygon)arg1, (Color)arg2) -> None :

    C++ signature :
        void setPatternColor(class PyDbMPolygon {lvalue},class AcCmColor)'''
    ...
    def setPatternDouble (self, val : float)-> None :
      '''                             '''
    ...
    def setPatternScale (self, val : float)-> None :
      '''                             '''
    ...
    def setPatternSpace (self, val : float)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class MPolygonloopDir(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kAnnotation (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kExterior (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kInterior (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class MText(Entity):
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode.kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def actualHeight (self)-> float :
      '''                             '''
    ...
    def actualWidth (self)-> float :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def ascent (self)-> float :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def attachment (self)-> PyDb.MTextAttachmentPoint :
      '''                             '''
    ...
    def backgroundFillOn (self)-> bool :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.MText :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.MText :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def contents (self)-> str :
      '''                             '''
    ...
    def contentsRTF (self)-> str :
      '''                             '''
    ...
    def convertFieldToText (self)-> None :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def correctSpelling (self)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def descent (self)-> float :
      '''                             '''
    ...
    def direction (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def flowDirection (self)-> PyDb.MTextFlowDirection :
      '''                             '''
    ...
    def getBackgroundFillColor (self)-> PyDb.Color :
      '''                             '''
    ...
    def getBackgroundScaleFactor (self)-> float :
      '''                             '''
    ...
    def getBackgroundTransparency (self)-> PyDb.Transparency :
      '''                             '''
    ...
    def getBoundingPoints (self)-> list :
      '''                             '''
    ...
    def getBoundingPointsByLine (self)-> list :
      '''                             '''
    ...
    def getColumnAutoHeight (self)-> bool :
      '''                             '''
    ...
    def getColumnCount (self)-> int :
      '''                             '''
    ...
    def getColumnFlowReversed (self)-> bool :
      '''                             '''
    ...
    def getColumnGutterWidth (self)-> float :
      '''                             '''
    ...
    def getColumnHeight (self, idx : int)-> float :
      '''                             '''
    ...
    def getColumnType (self)-> PyDb.MTextColumnType :
      '''                             '''
    ...
    def getColumnWidth (self)-> float :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFragments (self)-> list :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def height (self)-> float :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def hitTest (self, val : PyGe.Point3d)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineSpacingFactor (self)-> float :
      '''                             '''
    ...
    def lineSpacingStyle (self)-> PyDb.LineSpacingStyle :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def location (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def normal (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self)-> float :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttachment (self, val : PyDb.MTextAttachmentPoint)-> None :
      '''                             '''
    ...
    def setAttachmentMovingLocation (self, *args, **kwargs)-> None :
      '''setAttachmentMovingLocation( (MText)arg1, (MTextAttachmentPoint)arg2) -> None :

    C++ signature :
        void setAttachmentMovingLocation(class PyDbMText {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBackgroundFill (self, val : bool)-> None :
      '''                             '''
    ...
    def setBackgroundFillColor (self, val : PyDb.AcCmColor)-> None :
      '''                             '''
    ...
    def setBackgroundScaleFactor (self, val : float)-> None :
      '''                             '''
    ...
    def setBackgroundTransparency (self, val : PyDb.AcCmTransparency)-> None :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setColumnAutoHeight (self, val : bool)-> None :
      '''                             '''
    ...
    def setColumnCount (self, val : int)-> None :
      '''                             '''
    ...
    def setColumnFlowReversed (self, val : bool)-> None :
      '''                             '''
    ...
    def setColumnGutterWidth (self, val : float)-> None :
      '''                             '''
    ...
    def setColumnHeight (self, idx : int, val : float)-> None :
      '''                             '''
    ...
    def setColumnType (self, val : PyDb.MTextColumnType)-> None :
      '''                             '''
    ...
    def setColumnWidth (self, val : float)-> None :
      '''                             '''
    ...
    def setContents (self, val : str)-> int :
      '''                             '''
    ...
    def setContentsRTF (self, val : str)-> int :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setDirection (self, val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setDynamicColumns (self, width : float, gutter : float, autoHeight : bool)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setFlowDirection (self, val : PyDb.MTextFlowDirection)-> None :
      '''                             '''
    ...
    def setHeight (self, val : float)-> None :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineSpacingFactor (self, val : float)-> None :
      '''                             '''
    ...
    def setLineSpacingStyle (self, val : PyDb.LineSpacingStyle)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLocation (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self, val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setRotation (self, val : float)-> None :
      '''                             '''
    ...
    def setStaticColumns (self, width : float, gutter : float, count : int)-> None :
      '''                             '''
    ...
    def setTextHeight (self, val : float)-> None :
      '''                             '''
    ...
    def setTextStyle (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setUseBackgroundColor (self, val : bool)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setWidth (self, val : float)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def text (self)-> str :
      '''                             '''
    ...
    def textHeight (self)-> float :
      '''                             '''
    ...
    def textStyle (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def useBackgroundColorOn (self)-> bool :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def width (self)-> float :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class MTextAttachmentPoint(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kBaseAlign (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBaseCenter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBaseFit (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBaseLeft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBaseMid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBaseRight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBottomAlign (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBottomCenter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBottomFit (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBottomLeft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBottomMid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBottomRight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMiddleAlign (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMiddleCenter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMiddleFit (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMiddleLeft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMiddleMid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMiddleRight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTopAlign (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTopCenter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTopFit (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTopLeft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTopMid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTopRight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class MTextColumnType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kDynamicColumns (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNoColumns (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kStaticColumns (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class MTextFlowDirection(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kBtoT (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kByStyle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLtoR (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kRtoL (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTtoB (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class MTextFragmentType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kBigFont (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBold (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCapsHeight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kColor (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDirection (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEndFragmentTypes (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kExtents (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kFont (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kFontname (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kItalic (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLocation (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNormal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kObliqueAngle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOverPoints (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOverlined (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kStackBottom (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kStackTop (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kStrikePoints (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kStrikethrough (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextValue (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTrackingFactor (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnderPoints (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnderlined (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kWidthFactor (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class MeasurementValue(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kEnglish (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMetric (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class MergeCellStyleOption(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kMergeCellStyleConvertDuplicatesToOverrides (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMergeCellStyleCopyDuplicates (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMergeCellStyleIgnoreNewStyles (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMergeCellStyleNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMergeCellStyleOverwriteDuplicates (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class Mline(Entity):
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode.kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def appendSeg (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def axisAt (self, val : int)-> PyGe.Vector3d :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Mline :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Mline :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def closedMline (self)-> bool :
      '''                             '''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def element (self, val : PyGe.Point3d)-> int :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...

    @overload
    def getClosestPointTo (self, givenPoint: PyGe.Point3d, extend: bool)-> PyGe.Point3d : ...
    @overload
    def getClosestPointTo (self, givenPoint: PyGe.Point3d, extend: bool, excludeCaps: bool)-> PyGe.Point3d : ...
    @overload
    def getClosestPointTo (self, givenPoint: PyGe.Point3d, normal: PyGe.Vector3d, extend: bool)-> PyGe.Point3d : ...
    @overload
    def getClosestPointTo (self, givenPoint: PyGe.Point3d, normal: PyGe.Vector3d, extend: bool, excludeCaps: bool)-> PyGe.Point3d : ...
    def getClosestPointTo (self, *args, **kwargs)-> PyGe.Point3d :
      '''Overloads:
    - givenPoint: PyGe.Point3d, extend: bool
    - givenPoint: PyGe.Point3d, extend: bool, excludeCaps: bool
    - givenPoint: PyGe.Point3d, normal: PyGe.Vector3d, extend: bool
    - givenPoint: PyGe.Point3d, normal: PyGe.Vector3d, extend: bool, excludeCaps: bool
    '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def justification (self)-> int :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def miterAt (self, val : int)-> PyGe.Vector3d :
      '''                             '''
    ...
    def moveVertexAt (self, index : int, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def normal (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def numVertices (self)-> int :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeLastSeg (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def scale (self)-> float :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setClosedMline (self, val : bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setJustification (self, val : MlineJustification)-> None :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self, val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setScale (self, val : float)-> None :
      '''                             '''
    ...
    def setStyle (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setSupressEndCaps (self, val : bool)-> None :
      '''                             '''
    ...
    def setSupressStartCaps (self, val : bool)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def style (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def supressEndCaps (self)-> bool :
      '''                             '''
    ...
    def supressStartCaps (self)-> bool :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def vertexAt (self, val : int)-> PyGe.Point3d :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class MlineJustification(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kBottom (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kClosed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMerged (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOpen (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTop (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kZero (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class MlineStyle(DbObject):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addElement (self, *args, **kwargs)-> int :
      '''addElement( (MlineStyle)arg1, (float)arg2, (Color)arg3, (ObjectId)arg4) -> int :

    C++ signature :
        int addElement(class PyDbMlineStyle {lvalue},double,class AcCmColor,class PyDbObjectId {lvalue})

addElement( (MlineStyle)arg1, (float)arg2, (Color)arg3, (ObjectId)arg4, (bool)arg5) -> int :

    C++ signature :
        int addElement(class PyDbMlineStyle {lvalue},double,class AcCmColor,class PyDbObjectId {lvalue},bool)'''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...
    def cast (self, *args, **kwargs)-> PyDb.MlineStyle :
      '''cast( (RxObject)arg1) -> MlineStyle :

    C++ signature :
        class PyDbMlineStyle cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.MlineStyle :
      '''cloneFrom( (RxObject)arg1) -> MlineStyle :

    C++ signature :
        class PyDbMlineStyle cloneFrom(class PyRxObject)'''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def description (self, *args, **kwargs)-> str :
      '''description( (MlineStyle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > description(class PyDbMlineStyle {lvalue})'''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def endAngle (self, *args, **kwargs)-> float :
      '''endAngle( (MlineStyle)arg1) -> float :

    C++ signature :
        double endAngle(class PyDbMlineStyle {lvalue})'''
    ...
    def endInnerArcs (self, *args, **kwargs)-> bool :
      '''endInnerArcs( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool endInnerArcs(class PyDbMlineStyle {lvalue})'''
    ...
    def endRoundCap (self, *args, **kwargs)-> bool :
      '''endRoundCap( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool endRoundCap(class PyDbMlineStyle {lvalue})'''
    ...
    def endSquareCap (self, *args, **kwargs)-> bool :
      '''endSquareCap( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool endSquareCap(class PyDbMlineStyle {lvalue})'''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def fillColor (self, *args, **kwargs)-> PyDb.Color :
      '''fillColor( (MlineStyle)arg1) -> Color :

    C++ signature :
        class AcCmColor fillColor(class PyDbMlineStyle {lvalue})'''
    ...
    def filled (self, *args, **kwargs)-> bool :
      '''filled( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool filled(class PyDbMlineStyle {lvalue})'''
    ...
    def getElementAt (self, *args, **kwargs)-> tuple :
      '''getElementAt( (MlineStyle)arg1, (int)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple getElementAt(class PyDbMlineStyle {lvalue},int)'''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def initMlineStyle (self, *args, **kwargs)-> None :
      '''initMlineStyle( (MlineStyle)arg1) -> None :

    C++ signature :
        void initMlineStyle(class PyDbMlineStyle {lvalue})'''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def name (self, *args, **kwargs)-> str :
      '''name( (MlineStyle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > name(class PyDbMlineStyle {lvalue})'''
    ...
    def numElements (self, *args, **kwargs)-> int :
      '''numElements( (MlineStyle)arg1) -> int :

    C++ signature :
        int numElements(class PyDbMlineStyle {lvalue})'''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeElementAt (self, *args, **kwargs)-> None :
      '''removeElementAt( (MlineStyle)arg1, (int)arg2) -> None :

    C++ signature :
        void removeElementAt(class PyDbMlineStyle {lvalue},int)'''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def set (self, *args, **kwargs)-> None :
      '''set( (MlineStyle)arg1, (MlineStyle)arg2) -> None :

    C++ signature :
        void set(class PyDbMlineStyle {lvalue},class PyDbMlineStyle)

set( (MlineStyle)arg1, (MlineStyle)arg2, (bool)arg3) -> None :

    C++ signature :
        void set(class PyDbMlineStyle {lvalue},class PyDbMlineStyle,bool)'''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setDescription (self, *args, **kwargs)-> None :
      '''setDescription( (MlineStyle)arg1, (str)arg2) -> None :

    C++ signature :
        void setDescription(class PyDbMlineStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setElement (self, *args, **kwargs)-> int :
      '''setElement( (MlineStyle)arg1, (float)arg2, (Color)arg3, (ObjectId)arg4) -> int :

    C++ signature :
        int setElement(class PyDbMlineStyle {lvalue},double,class AcCmColor,class PyDbObjectId {lvalue})'''
    ...
    def setEndAngle (self, *args, **kwargs)-> None :
      '''setEndAngle( (MlineStyle)arg1, (float)arg2) -> None :

    C++ signature :
        void setEndAngle(class PyDbMlineStyle {lvalue},double)'''
    ...
    def setEndInnerArcs (self, *args, **kwargs)-> None :
      '''setEndInnerArcs( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEndInnerArcs(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setEndRoundCap (self, *args, **kwargs)-> None :
      '''setEndRoundCap( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEndRoundCap(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setEndSquareCap (self, *args, **kwargs)-> None :
      '''setEndSquareCap( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEndSquareCap(class PyDbMlineStyle {lvalue},bool)'''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setFillColor (self, *args, **kwargs)-> None :
      '''setFillColor( (MlineStyle)arg1, (Color)arg2) -> None :

    C++ signature :
        void setFillColor(class PyDbMlineStyle {lvalue},class AcCmColor)'''
    ...
    def setFilled (self, *args, **kwargs)-> None :
      '''setFilled( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setFilled(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setName (self, *args, **kwargs)-> None :
      '''setName( (MlineStyle)arg1, (str)arg2) -> None :

    C++ signature :
        void setName(class PyDbMlineStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setShowMiters (self, *args, **kwargs)-> None :
      '''setShowMiters( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShowMiters(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setStartAngle (self, *args, **kwargs)-> None :
      '''setStartAngle( (MlineStyle)arg1, (float)arg2) -> None :

    C++ signature :
        void setStartAngle(class PyDbMlineStyle {lvalue},double)'''
    ...
    def setStartInnerArcs (self, *args, **kwargs)-> None :
      '''setStartInnerArcs( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setStartInnerArcs(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setStartRoundCap (self, *args, **kwargs)-> None :
      '''setStartRoundCap( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setStartRoundCap(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setStartSquareCap (self, *args, **kwargs)-> None :
      '''setStartSquareCap( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setStartSquareCap(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def showMiters (self, *args, **kwargs)-> bool :
      '''showMiters( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool showMiters(class PyDbMlineStyle {lvalue})'''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def startAngle (self, *args, **kwargs)-> float :
      '''startAngle( (MlineStyle)arg1) -> float :

    C++ signature :
        double startAngle(class PyDbMlineStyle {lvalue})'''
    ...
    def startInnerArcs (self, *args, **kwargs)-> bool :
      '''startInnerArcs( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool startInnerArcs(class PyDbMlineStyle {lvalue})'''
    ...
    def startRoundCap (self, *args, **kwargs)-> bool :
      '''startRoundCap( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool startRoundCap(class PyDbMlineStyle {lvalue})'''
    ...
    def startSquareCap (self, *args, **kwargs)-> bool :
      '''startSquareCap( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool startSquareCap(class PyDbMlineStyle {lvalue})'''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class NurbSurface(Surface):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...
    def cast (self, *args, **kwargs)-> PyDb.NurbSurface :
      '''cast( (RxObject)arg1) -> NurbSurface :

    C++ signature :
        class PyDbNurbSurface cast(class PyRxObject)'''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.NurbSurface :
      '''cloneFrom( (RxObject)arg1) -> NurbSurface :

    C++ signature :
        class PyDbNurbSurface cloneFrom(class PyRxObject)'''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def createExtrudedSurface (self, *args, **kwargs)-> PyDb.ExtrudedSurface :
      '''createExtrudedSurface( (Profile3d)arg1, (Vector3d)arg2, (SweepOptions)arg3) -> ExtrudedSurface :

    C++ signature :
        class PyDbExtrudedSurface createExtrudedSurface(class PyDb3dProfile {lvalue},class AcGeVector3d,class PyDbSweepOptions {lvalue})'''
    ...
    def createFrom (self, *args, **kwargs)-> PyDb.Surface :
      '''createFrom( (Entity)arg1) -> Surface :

    C++ signature :
        class PyDbSurface createFrom(class PyDbEntity)'''
    ...
    def creationActionBodyId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''creationActionBodyId( (Surface)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId creationActionBodyId(class PyDbSurface {lvalue})'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extendEdges (self, *args, **kwargs)-> None :
      '''extendEdges( (Surface)arg1, (list)arg2, (float)arg3, (SurfaceEdgeExtensionType)arg4, (bool)arg5) -> None :

    C++ signature :
        void extendEdges(class PyDbSurface {lvalue},class boost::python::list {lvalue},double,enum AcDbSurface::EdgeExtensionType,bool)'''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getArea (self, *args, **kwargs)-> float :
      '''getArea( (Surface)arg1) -> float :

    C++ signature :
        double getArea(class PyDbSurface {lvalue})'''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPerimeter (self, *args, **kwargs)-> float :
      '''getPerimeter( (Surface)arg1) -> float :

    C++ signature :
        double getPerimeter(class PyDbSurface {lvalue})'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def getWireframeType (self, *args, **kwargs)-> PyDb.SurfaceWireframeType :
      '''getWireframeType( (Surface)arg1) -> SurfaceWireframeType :

    C++ signature :
        enum AcDbSurface::WireframeType getWireframeType(class PyDbSurface {lvalue})'''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def modificationActionBodyIds (self, *args, **kwargs)-> list :
      '''modificationActionBodyIds( (Surface)arg1) -> list :

    C++ signature :
        class boost::python::list modificationActionBodyIds(class PyDbSurface {lvalue})'''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def projectOnToSurface (self, *args, **kwargs)-> list :
      '''projectOnToSurface( (Surface)arg1, (Entity)arg2, (Vector3d)arg3) -> list :

    C++ signature :
        class boost::python::list projectOnToSurface(class PyDbSurface {lvalue},class PyDbEntity,class AcGeVector3d)'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def rayTest (self, *args, **kwargs)-> tuple :
      '''rayTest( (Surface)arg1, (Point3d)arg2, (Vector3d)arg3, (float)arg4) -> tuple :

    C++ signature :
        class boost::python::tuple rayTest(class PyDbSurface {lvalue},class AcGePoint3d,class AcGeVector3d,double)'''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setUIsolineDensity (self, *args, **kwargs)-> None :
      '''setUIsolineDensity( (Surface)arg1, (int)arg2) -> None :

    C++ signature :
        void setUIsolineDensity(class PyDbSurface {lvalue},unsigned short)'''
    ...
    def setVIsolineDensity (self, *args, **kwargs)-> None :
      '''setVIsolineDensity( (Surface)arg1, (int)arg2) -> None :

    C++ signature :
        void setVIsolineDensity(class PyDbSurface {lvalue},unsigned short)'''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setWireframeType (self, *args, **kwargs)-> None :
      '''setWireframeType( (Surface)arg1, (SurfaceWireframeType)arg2) -> None :

    C++ signature :
        void setWireframeType(class PyDbSurface {lvalue},enum AcDbSurface::WireframeType)'''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def uIsolineDensity (self, *args, **kwargs)-> int :
      '''uIsolineDensity( (Surface)arg1) -> int :

    C++ signature :
        unsigned short uIsolineDensity(class PyDbSurface {lvalue})'''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def vIsolineDensity (self, *args, **kwargs)-> int :
      '''vIsolineDensity( (Surface)arg1) -> int :

    C++ signature :
        unsigned short vIsolineDensity(class PyDbSurface {lvalue})'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class ObjectContext(PyRx.RxObject):
    def __init__ (self, *args, **kwargs)-> None :
      '''Raises an exception
This class cannot be instantiated from Python'''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def collectionName (self)-> str :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def getName (self)-> str :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def setName (self, name : str)-> None :
      '''                             '''
    ...
    def uniqueIdentifier (self)-> int :
      '''                             '''
    ...

class ObjectContextCollection(PyRx.RxObject):
    def __init__ (self, *args, **kwargs)-> None :
      '''Raises an exception
This class cannot be instantiated from Python'''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def currentContext (self, obj : PyDb.Object)-> PyDb.ObjectContext :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def getContext (self, name : str)-> PyDb.ObjectContext :
      '''                             '''
    ...
    def hasContext (self, name : str)-> bool :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def lockContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def locked (self)-> bool :
      '''                             '''
    ...
    def name (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def removeContext (self, name : str)-> None :
      '''                             '''
    ...
    def setCurrentContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def toList (self, desc:PyRx.RxClass=PyDb.ObjectContext)-> list :
      '''                             '''
    ...
    def unlockContext (self)-> None :
      '''                             '''
    ...

class ObjectContextManager(PyRx.RxObject):
    def __init__ (self, *args, **kwargs)-> None :
      '''Raises an exception
This class cannot be instantiated from Python'''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def contextCollection (self, name : str)-> PyDb.ObjectContextCollection :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def registerContextCollection (self, name : str, collection : PyDb.ObjectContextCollection)-> None :
      '''                             '''
    ...
    def unregisterContextCollection (self, name : str)-> None :
      '''                             '''
    ...

class ObjectId(object):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def asOldId (self)-> int :
      '''                             '''
    ...
    def convertToRedirectedId (self)-> bool :
      '''                             '''
    ...
    def database (self)-> PyDb.Database :
      '''                             '''
    ...

    @staticmethod
    def fromOldId (oldid : int)-> PyDb.ObjectId :
      '''                             '''
    ...
    def handle (self)-> PyDb.Handle :
      '''                             '''
    ...
    def isDerivedFrom (self, desc : PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isEffectivelyErased (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isNull (self)-> bool :
      '''                             '''
    ...
    def isResident (self)-> bool :
      '''                             '''
    ...
    def isValid (self)-> bool :
      '''                             '''
    ...
    def isWellBehaved (self)-> bool :
      '''                             '''
    ...
    def nonForwardedHandle (self)-> PyDb.Handle :
      '''                             '''
    ...
    def objectClass (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def objectLeftOnDisk (self)-> bool :
      '''                             '''
    ...
    def originalDatabase (self)-> PyDb.Database :
      '''                             '''
    ...
    def setFromOldId (self, oldid : int)-> None :
      '''                             '''
    ...

class OpenMode(object):
    def ForNotify (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ForRead (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def ForWrite (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kForNotify (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kForRead (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kForWrite (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class OrdinateDimension(Dimension):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, useXAxis: bool, definingPoint: PyGe.Point3d, leaderEndPoint: PyGe.Point3d)-> None : ...
    @overload
    def __init__ (self, useXAxis: bool, definingPoint: PyGe.Point3d, leaderEndPoint: PyGe.Point3d, dimText: str)-> None : ...
    @overload
    def __init__ (self, useXAxis: bool, definingPoint: PyGe.Point3d, leaderEndPoint: PyGe.Point3d, dimText: str, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - useXAxis: bool, definingPoint: PyGe.Point3d, leaderEndPoint: PyGe.Point3d
    - useXAxis: bool, definingPoint: PyGe.Point3d, leaderEndPoint: PyGe.Point3d, dimText: str
    - useXAxis: bool, definingPoint: PyGe.Point3d, leaderEndPoint: PyGe.Point3d, dimText: str, id: PyDb.ObjectId
    - id: PyDb.ObjectId
    - id: PyDb.ObjectId, mode: PyDb.OpenMode
    - id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool
    '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def altSuppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def altSuppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def altSuppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def altSuppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def alternatePrefix (self)-> str :
      '''                             '''
    ...
    def alternateSuffix (self)-> str :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.OrdinateDimension :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...
    def centerMarkSize (self)-> float :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.OrdinateDimension :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def definingPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dimBlockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimBlockPosition (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def dimExt1Linetype (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimExt2Linetype (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimLineLinetype (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimensionStyle (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimensionText (self)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevation (self)-> float :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def fieldFromMText (self, ref : PyDb.MText)-> None :
      '''                             '''
    ...
    def fieldToMText (self, ref : PyDb.MText)-> None :
      '''                             '''
    ...

    @overload
    def formatMeasurement (self, measurement: float)-> str : ...
    @overload
    def formatMeasurement (self, measurement: float, dimensionText: str)-> str : ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''Overloads:
    - measurement: float
    - measurement: float, dimensionText: str
    '''
    ...
    def generateLayout (self)-> None :
      '''                             '''
    ...
    def getArrowFirstIsFlipped (self)-> bool :
      '''                             '''
    ...
    def getArrowSecondIsFlipped (self)-> bool :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDimstyleData (self)-> PyDb.DimStyleTableRecord :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def horizontalRotation (self)-> float :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def inspection (self)-> bool :
      '''                             '''
    ...
    def inspectionFrame (self)-> int :
      '''                             '''
    ...
    def inspectionLabel (self)-> str :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self)-> bool :
      '''                             '''
    ...
    def isConstraintObject (self)-> tuple :
      '''                             '''
    ...
    def isDynamicDimension (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self)-> bool :
      '''                             '''
    ...
    def isUsingXAxis (self)-> bool :
      '''                             '''
    ...
    def isUsingYAxis (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def leaderEndPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def measurement (self)-> float :
      '''                             '''
    ...
    def normal (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def origin (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def prefix (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recomputeDimBlock (self, force : bool=False)-> None :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def removeTextField (self)-> None :
      '''                             '''
    ...
    def resetTextDefinedSize (self)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAltSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setAlternatePrefix (self, val : str)-> None :
      '''                             '''
    ...
    def setAlternateSuffix (self, val : str)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setArrowFirstIsFlipped (self, val : bool)-> None :
      '''                             '''
    ...
    def setArrowSecondIsFlipped (self, val : bool)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setConstraintDynamic (self, val : bool)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setDefiningPoint (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setDimBlockId (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimBlockPosition (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setDimExt1Linetype (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimExt2Linetype (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimLineLinetype (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimensionStyle (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimensionText (self, val : str)-> None :
      '''                             '''
    ...

    @overload
    def setDimstyleData (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def setDimstyleData (self, rec: PyDb.DimStyleTableRecord)-> None : ...
    def setDimstyleData (self, *args, **kwargs)-> None :
      '''Overloads:
    - id: PyDb.ObjectId
    - rec: PyDb.DimStyleTableRecord
    '''
    ...
    def setDynamicDimension (self, val : bool)-> None :
      '''                             '''
    ...
    def setElevation (self, val : float)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setHorizontalRefTextRotation (self, val : bool)-> None :
      '''                             '''
    ...
    def setHorizontalRotation (self, val : float)-> None :
      '''                             '''
    ...
    def setInspection (self, val : bool)-> None :
      '''                             '''
    ...
    def setInspectionFrame (self, val : int)-> None :
      '''                             '''
    ...
    def setInspectionLabel (self, val : str)-> None :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLeaderEndPoint (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self, val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOrigin (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, val : str)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setShouldParticipateInOPM (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuffix (self, val : str)-> None :
      '''                             '''
    ...
    def setSuppressAngularTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setTextAttachment (self, val : PyDb.MTextAttachmentPoint)-> None :
      '''                             '''
    ...
    def setTextDefinedSize (self, width : float, height : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingFactor (self, val : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingStyle (self, val : PyDb.LineSpacingStyle)-> None :
      '''                             '''
    ...
    def setTextPosition (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setTextRotation (self, val : float)-> None :
      '''                             '''
    ...
    def setToleranceSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setUsingDefaultTextPosition (self, val : bool)-> None :
      '''                             '''
    ...
    def setUsingXAxis (self, val : bool)-> None :
      '''                             '''
    ...
    def setUsingYAxis (self, val : bool)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def shouldParticipateInOPM (self)-> bool :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def suffix (self)-> str :
      '''                             '''
    ...
    def suppressAngularLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressAngularTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def suppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAttachment (self)-> PyDb.MTextAttachmentPoint :
      '''                             '''
    ...
    def textDefinedSize (self)-> tuple :
      '''                             '''
    ...
    def textLineSpacingFactor (self)-> float :
      '''                             '''
    ...
    def textLineSpacingStyle (self)-> PyDb.LineSpacingStyle :
      '''                             '''
    ...
    def textPosition (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def textRotation (self)-> float :
      '''                             '''
    ...
    def toleranceSuppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def toleranceSuppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def useDefaultTextPosition (self)-> None :
      '''                             '''
    ...
    def useSetTextPosition (self)-> None :
      '''                             '''
    ...
    def useXAxis (self)-> None :
      '''                             '''
    ...
    def useYAxis (self)-> None :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class OrthographicView(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kBackView (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBottomView (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kFrontView (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLeftView (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNonOrthoView (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kRightView (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTopView (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class OsnapMask(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kOsMaskAllowTan (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsMaskApint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsMaskCen (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsMaskCentroid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsMaskDisablePerp (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsMaskEnd (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsMaskImmediate (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsMaskIns (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsMaskInt (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsMaskMid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsMaskNear (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsMaskNode (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsMaskNoneOverride (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsMaskPerp (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsMaskQuad (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsMaskQuick (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsMaskRelCartesian (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsMaskRelPolar (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsMaskTan (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class OsnapMode(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kOsModeCen (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsModeCentroid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsModeEnd (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsModeIns (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsModeMid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsModeNear (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsModeNode (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsModePerp (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsModeQuad (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsModeTan (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class OsnapOverrule(PyRx.Overrule):
    def __init__ (self)-> None :
      '''                             '''
    ...

    @staticmethod
    def addOverrule (rxClass: PyRx.RxClass,overrule: PyRx.Overrule)-> None :
      '''                             '''
    ...

    @staticmethod
    def addOverruleLast (rxClass: PyRx.RxClass,overrule: PyRx.Overrule,addLast: bool)-> None :
      '''                             '''
    ...
    def baseGetOsnapPoints (self, pSubject: PyDb.Entity, osMode: PyDb.OsnapMode, gsMark: int, pickPnt: PyGe.Point3d, lastPnt: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> tuple :
      '''                             '''
    ...
    def baseGetOsnapPointsX (self, pSubject: PyDb.Entity, osMode: PyDb.OsnapMode, gsMark: int, pickPnt: PyGe.Point3d, lastPnt: PyGe.Point3d, viewXform: PyGe.Matrix3d, insertionMat: PyGe.Matrix3d)-> tuple :
      '''                             '''
    ...
    def baseIsContentSnappable (self, object: PyDb.Entity)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def getOsnapPoints (self, pSubject: PyDb.Entity, osMode: PyDb.OsnapMode, gsMark: int, pickPnt: PyGe.Point3d, lastPnt: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> tuple :
      '''                             '''
    ...
    def getOsnapPointsX (self, pSubject: PyDb.Entity, osMode: PyDb.OsnapMode, gsMark: int, pickPnt: PyGe.Point3d, lastPnt: PyGe.Point3d, viewXform: PyGe.Matrix3d, insertionMat: PyGe.Matrix3d)-> tuple :
      '''                             '''
    ...

    @staticmethod
    def hasOverrule (subject: PyRx.RxObject,rxClass: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isApplicable (self, object: PyRx.RxObject)-> bool :
      '''                             '''
    ...
    def isContentSnappable (self, object: PyDb.Entity)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isOverruling (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...

    @staticmethod
    def removeOverrule (rxClass: PyRx.RxClass,overrule: PyRx.Overrule)-> None :
      '''                             '''
    ...
    def setIsOverruling (self, flag: bool)-> None :
      '''                             '''
    ...

class OsnapPointRef(PointRef):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d)'''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def osnapType (self, *args, **kwargs)-> PyDb.OsnapType :
      '''osnapType( (OsnapPointRef)arg1) -> OsnapType :

    C++ signature :
        enum AcDbPointRef::OsnapType osnapType(class PyDbOsnapPointRef {lvalue})'''
    ...
    def point (self, *args, **kwargs)-> PyGe.Point3d :
      '''point( (OsnapPointRef)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d point(class PyDbOsnapPointRef {lvalue})'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def setIdPath (self, *args, **kwargs)-> None :
      '''setIdPath( (OsnapPointRef)arg1, (ObjectId)arg2, (SubentType)arg3, (int)arg4) -> None :

    C++ signature :
        void setIdPath(class PyDbOsnapPointRef {lvalue},class PyDbObjectId {lvalue},unsigned int,__int64)'''
    ...
    def setOsnapType (self, *args, **kwargs)-> None :
      '''setOsnapType( (OsnapPointRef)arg1, (OsnapType)arg2) -> None :

    C++ signature :
        void setOsnapType(class PyDbOsnapPointRef {lvalue},enum AcDbPointRef::OsnapType)'''
    ...
    def setPoint (self, *args, **kwargs)-> None :
      '''setPoint( (OsnapPointRef)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setPoint(class PyDbOsnapPointRef {lvalue},class AcGePoint3d)'''
    ...

class OsnapType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kOsnapApint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsnapCen (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsnapEnd (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsnapIns (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsnapInt (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsnapMid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsnapNear (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsnapNode (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsnapNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsnapPerp (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsnapQuad (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsnapStart (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsnapTan (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class PdfDefinition(UnderlayDefinition):
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode.kForRead)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.PdfDefinition :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.PdfDefinition :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...

    @staticmethod
    def dictionaryKey (underlayDefinitionType: PyRx.RxClass)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getActiveFileName (self)-> str :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getItemName (self)-> str :
      '''                             '''
    ...
    def getSourceFileName (self)-> str :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isLoaded (self)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def load (self, passwd : str=None)-> None :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setItemName (self, item : str)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setSourceFileName (self, file : str)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def unload (self)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class PdfReference(UnderlayReference):
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode.kForRead)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.PdfReference :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def clipBoundary (self)-> list :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.PdfReference :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def contrast (self)-> int :
      '''                             '''
    ...

    @staticmethod
    def contrastDefault ()-> int :
      '''                             '''
    ...

    @staticmethod
    def contrastLowerLimit ()-> int :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def definitionId (self)-> PyDb.ObjectId :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def fade (self)-> int :
      '''                             '''
    ...

    @staticmethod
    def fadeDefault ()-> int :
      '''                             '''
    ...

    @staticmethod
    def fadeLowerLimit ()-> int :
      '''                             '''
    ...

    @staticmethod
    def fadeUpperLimit ()-> int :
      '''                             '''
    ...
    def generateClipBoundaryFromPline (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def getUnderlayLayer (self, val : int)-> PyDb.UnderlayLayer :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def height (self)-> float :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAdjustedForBackground (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isClipInverted (self)-> bool :
      '''                             '''
    ...
    def isClipped (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isFramePlottable (self)-> bool :
      '''                             '''
    ...
    def isFrameVisible (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isMonochrome (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isOn (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def normal (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def position (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self)-> float :
      '''                             '''
    ...
    def scaleFactors (self)-> PyGe.Scale3d :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setClipBoundary (self, pnts : list[PyGe.Point2d])-> None :
      '''                             '''
    ...
    def setClipInverted (self, val : bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setContrast (self, val : int)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setDefinitionId (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setFade (self, val : int)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setHeight (self, val : float)-> None :
      '''                             '''
    ...
    def setIsAdjustedForBackground (self, val : bool)-> None :
      '''                             '''
    ...
    def setIsClipped (self, val : bool)-> None :
      '''                             '''
    ...
    def setIsMonochrome (self, val : bool)-> None :
      '''                             '''
    ...
    def setIsOn (self, val : bool)-> None :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self, val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setRotation (self, val : float)-> None :
      '''                             '''
    ...
    def setScaleFactors (self, val : PyGe.Scale3d)-> None :
      '''                             '''
    ...
    def setTransform (self, val : PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def setUnderlayLayer (self, val : int, layer : PyDb.UnderlayLayer)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setWidth (self, val : float)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def underlayLayerCount (self)-> int :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def width (self)-> float :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class Planarity(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kLinear (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNonPlanar (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPlanar (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class PlaneSurface(Surface):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...
    def cast (self, *args, **kwargs)-> PyDb.PlaneSurface :
      '''cast( (RxObject)arg1) -> PlaneSurface :

    C++ signature :
        class PyDbPlaneSurface cast(class PyRxObject)'''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.PlaneSurface :
      '''cloneFrom( (RxObject)arg1) -> PlaneSurface :

    C++ signature :
        class PyDbPlaneSurface cloneFrom(class PyRxObject)'''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def createExtrudedSurface (self, *args, **kwargs)-> PyDb.ExtrudedSurface :
      '''createExtrudedSurface( (Profile3d)arg1, (Vector3d)arg2, (SweepOptions)arg3) -> ExtrudedSurface :

    C++ signature :
        class PyDbExtrudedSurface createExtrudedSurface(class PyDb3dProfile {lvalue},class AcGeVector3d,class PyDbSweepOptions {lvalue})'''
    ...
    def createFrom (self, *args, **kwargs)-> PyDb.Surface :
      '''createFrom( (Entity)arg1) -> Surface :

    C++ signature :
        class PyDbSurface createFrom(class PyDbEntity)'''
    ...
    def creationActionBodyId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''creationActionBodyId( (Surface)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId creationActionBodyId(class PyDbSurface {lvalue})'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extendEdges (self, *args, **kwargs)-> None :
      '''extendEdges( (Surface)arg1, (list)arg2, (float)arg3, (SurfaceEdgeExtensionType)arg4, (bool)arg5) -> None :

    C++ signature :
        void extendEdges(class PyDbSurface {lvalue},class boost::python::list {lvalue},double,enum AcDbSurface::EdgeExtensionType,bool)'''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getArea (self, *args, **kwargs)-> float :
      '''getArea( (Surface)arg1) -> float :

    C++ signature :
        double getArea(class PyDbSurface {lvalue})'''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPerimeter (self, *args, **kwargs)-> float :
      '''getPerimeter( (Surface)arg1) -> float :

    C++ signature :
        double getPerimeter(class PyDbSurface {lvalue})'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def getWireframeType (self, *args, **kwargs)-> PyDb.SurfaceWireframeType :
      '''getWireframeType( (Surface)arg1) -> SurfaceWireframeType :

    C++ signature :
        enum AcDbSurface::WireframeType getWireframeType(class PyDbSurface {lvalue})'''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def modificationActionBodyIds (self, *args, **kwargs)-> list :
      '''modificationActionBodyIds( (Surface)arg1) -> list :

    C++ signature :
        class boost::python::list modificationActionBodyIds(class PyDbSurface {lvalue})'''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def projectOnToSurface (self, *args, **kwargs)-> list :
      '''projectOnToSurface( (Surface)arg1, (Entity)arg2, (Vector3d)arg3) -> list :

    C++ signature :
        class boost::python::list projectOnToSurface(class PyDbSurface {lvalue},class PyDbEntity,class AcGeVector3d)'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def rayTest (self, *args, **kwargs)-> tuple :
      '''rayTest( (Surface)arg1, (Point3d)arg2, (Vector3d)arg3, (float)arg4) -> tuple :

    C++ signature :
        class boost::python::tuple rayTest(class PyDbSurface {lvalue},class AcGePoint3d,class AcGeVector3d,double)'''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setUIsolineDensity (self, *args, **kwargs)-> None :
      '''setUIsolineDensity( (Surface)arg1, (int)arg2) -> None :

    C++ signature :
        void setUIsolineDensity(class PyDbSurface {lvalue},unsigned short)'''
    ...
    def setVIsolineDensity (self, *args, **kwargs)-> None :
      '''setVIsolineDensity( (Surface)arg1, (int)arg2) -> None :

    C++ signature :
        void setVIsolineDensity(class PyDbSurface {lvalue},unsigned short)'''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setWireframeType (self, *args, **kwargs)-> None :
      '''setWireframeType( (Surface)arg1, (SurfaceWireframeType)arg2) -> None :

    C++ signature :
        void setWireframeType(class PyDbSurface {lvalue},enum AcDbSurface::WireframeType)'''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def uIsolineDensity (self, *args, **kwargs)-> int :
      '''uIsolineDensity( (Surface)arg1) -> int :

    C++ signature :
        unsigned short uIsolineDensity(class PyDbSurface {lvalue})'''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def vIsolineDensity (self, *args, **kwargs)-> int :
      '''vIsolineDensity( (Surface)arg1) -> int :

    C++ signature :
        unsigned short vIsolineDensity(class PyDbSurface {lvalue})'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class PlotPaperUnits(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kInches (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMillimeters (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPixels (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class PlotRotation(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def k0degrees (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k180degrees (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k270degrees (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k90degrees (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class PlotSettings(DbObject):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, ModelType: bool)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - ModelType: bool
    - id: PyDb.ObjectId
    - id: PyDb.ObjectId, mode: PyDb.OpenMode
    - id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool
    '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def addToPlotSettingsDict (self, db: PyDb.Database)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.PlotSettings :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.PlotSettings :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawViewportsFirst (self)-> bool :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getCanonicalMediaName (self)-> str :
      '''                             '''
    ...
    def getCurrentStyleSheet (self)-> str :
      '''                             '''
    ...
    def getCustomPrintScale (self)-> tuple :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPlotCfgName (self)-> str :
      '''                             '''
    ...
    def getPlotOrigin (self)-> tuple :
      '''                             '''
    ...
    def getPlotPaperMargins (self)-> tuple :
      '''                             '''
    ...
    def getPlotPaperSize (self)-> tuple :
      '''                             '''
    ...
    def getPlotSettingsName (self)-> str :
      '''                             '''
    ...
    def getPlotViewName (self)-> str :
      '''                             '''
    ...
    def getPlotWindowArea (self)-> tuple :
      '''                             '''
    ...
    def getStdScale (self)-> float :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def modelType (self)-> bool :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotAsRaster (self)-> bool :
      '''                             '''
    ...
    def plotCentered (self)-> bool :
      '''                             '''
    ...
    def plotHidden (self)-> bool :
      '''                             '''
    ...
    def plotPaperUnits (self)-> PyDb.PlotPaperUnits :
      '''                             '''
    ...
    def plotPlotStyles (self)-> bool :
      '''                             '''
    ...
    def plotRotation (self)-> PyDb.PlotRotation :
      '''                             '''
    ...
    def plotTransparency (self)-> bool :
      '''                             '''
    ...
    def plotType (self)-> PyDb.PlotType :
      '''                             '''
    ...
    def plotViewportBorders (self)-> bool :
      '''                             '''
    ...
    def plotWireframe (self)-> bool :
      '''                             '''
    ...
    def printLineweights (self)-> bool :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def scaleLineweights (self)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setDrawViewportsFirst (self, val: bool)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotHidden (self, val: bool)-> None :
      '''                             '''
    ...
    def setPlotPlotStyles (self, val: bool)-> None :
      '''                             '''
    ...
    def setPlotSettingsName (self, val: str)-> None :
      '''                             '''
    ...
    def setPlotTransparency (self, val: bool)-> None :
      '''                             '''
    ...
    def setPlotViewportBorders (self, val: bool)-> None :
      '''                             '''
    ...
    def setPrintLineweights (self, val: bool)-> None :
      '''                             '''
    ...
    def setScaleLineweights (self, val: bool)-> None :
      '''                             '''
    ...

    @overload
    def setShadePlot (self, givenPoint)-> None : ...
    @overload
    def setShadePlot (self, val: PyDb.ShadePlotType, id: PyDb.ObjectId)-> None : ...
    def setShadePlot (self, *args, **kwargs)-> None :
      '''Overloads:
    - givenPoint
    - val: PyDb.ShadePlotType, id: PyDb.ObjectId
    '''
    ...
    def setShadePlotCustomDPI (self, val: int)-> None :
      '''                             '''
    ...
    def setShadePlotResLevel (self, val: PyDb.ShadePlotResLevel)-> None :
      '''                             '''
    ...
    def setShowPlotStyles (self, val: bool)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def shadePlot (self)-> PyDb.ShadePlotType :
      '''                             '''
    ...
    def shadePlotCustomDPI (self)-> int :
      '''                             '''
    ...
    def shadePlotId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def shadePlotResLevel (self)-> PyDb.ShadePlotResLevel :
      '''                             '''
    ...
    def showPlotStyles (self)-> bool :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def stdScaleType (self)-> PyDb.StdScaleType :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def useStandardScale (self)-> bool :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class PlotSettingsValidator(object):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def canonicalMediaNameList (self, *args, **kwargs)-> list :
      '''canonicalMediaNameList( (PlotSettingsValidator)arg1, (PlotSettings)arg2) -> list :

    C++ signature :
        class boost::python::list canonicalMediaNameList(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue})'''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def getLocaleMediaName (self, *args, **kwargs)-> str :
      '''getLocaleMediaName( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getLocaleMediaName(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

getLocaleMediaName( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (int)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getLocaleMediaName(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},int)'''
    ...
    def plotDeviceList (self, *args, **kwargs)-> list :
      '''plotDeviceList( (PlotSettingsValidator)arg1) -> list :

    C++ signature :
        class boost::python::list plotDeviceList(class PyDbPlotSettingsValidator {lvalue})'''
    ...
    def plotStyleSheetList (self, *args, **kwargs)-> list :
      '''plotStyleSheetList( (PlotSettingsValidator)arg1) -> list :

    C++ signature :
        class boost::python::list plotStyleSheetList(class PyDbPlotSettingsValidator {lvalue})'''
    ...
    def setCanonicalMediaName (self, *args, **kwargs)-> None :
      '''setCanonicalMediaName( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (str)arg3) -> None :

    C++ signature :
        void setCanonicalMediaName(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setClosestMediaName (self, *args, **kwargs)-> None :
      '''setClosestMediaName( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (float)arg3, (float)arg4, (PlotPaperUnits)arg5, (bool)arg6) -> None :

    C++ signature :
        void setClosestMediaName(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},double,double,enum AcDbPlotSettings::PlotPaperUnits,bool)'''
    ...
    def setCurrentStyleSheet (self, *args, **kwargs)-> None :
      '''setCurrentStyleSheet( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (str)arg3) -> None :

    C++ signature :
        void setCurrentStyleSheet(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setCustomPrintScale (self, *args, **kwargs)-> None :
      '''setCustomPrintScale( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (float)arg3, (float)arg4) -> None :

    C++ signature :
        void setCustomPrintScale(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},double,double)'''
    ...
    def setDefaultPlotConfig (self, *args, **kwargs)-> None :
      '''setDefaultPlotConfig( (PlotSettingsValidator)arg1, (PlotSettings)arg2) -> None :

    C++ signature :
        void setDefaultPlotConfig(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue})'''
    ...
    def setPlotCentered (self, *args, **kwargs)-> None :
      '''setPlotCentered( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotCentered(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setPlotCfgName (self, *args, **kwargs)-> None :
      '''setPlotCfgName( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (str)arg3) -> None :

    C++ signature :
        void setPlotCfgName(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setPlotCfgName( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (str)arg3, (str)arg4) -> None :

    C++ signature :
        void setPlotCfgName(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPlotOrigin (self, *args, **kwargs)-> None :
      '''setPlotOrigin( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (float)arg3, (float)arg4) -> None :

    C++ signature :
        void setPlotOrigin(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},double,double)'''
    ...
    def setPlotPaperUnits (self, *args, **kwargs)-> None :
      '''setPlotPaperUnits( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (PlotPaperUnits)arg3) -> None :

    C++ signature :
        void setPlotPaperUnits(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},enum AcDbPlotSettings::PlotPaperUnits)'''
    ...
    def setPlotRotation (self, *args, **kwargs)-> None :
      '''setPlotRotation( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (PlotRotation)arg3) -> None :

    C++ signature :
        void setPlotRotation(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},enum AcDbPlotSettings::PlotRotation)'''
    ...
    def setPlotType (self, *args, **kwargs)-> None :
      '''setPlotType( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (PlotType)arg3) -> None :

    C++ signature :
        void setPlotType(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},enum AcDbPlotSettings::PlotType)'''
    ...
    def setPlotViewName (self, *args, **kwargs)-> None :
      '''setPlotViewName( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (str)arg3) -> None :

    C++ signature :
        void setPlotViewName(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPlotWindowArea (self, *args, **kwargs)-> None :
      '''setPlotWindowArea( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (float)arg3, (float)arg4, (float)arg5, (float)arg6) -> None :

    C++ signature :
        void setPlotWindowArea(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},double,double,double,double)

setPlotWindowArea( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (Extents2d)arg3) -> None :

    C++ signature :
        void setPlotWindowArea(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},class AcDbExtents2d {lvalue})'''
    ...
    def setStdScale (self, *args, **kwargs)-> None :
      '''setStdScale( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (float)arg3) -> None :

    C++ signature :
        void setStdScale(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},double)'''
    ...
    def setStdScaleType (self, *args, **kwargs)-> None :
      '''setStdScaleType( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (StdScaleType)arg3) -> None :

    C++ signature :
        void setStdScaleType(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},enum AcDbPlotSettings::StdScaleType)'''
    ...
    def setUseStandardScale (self, *args, **kwargs)-> None :
      '''setUseStandardScale( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (bool)arg3) -> None :

    C++ signature :
        void setUseStandardScale(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setZoomToPaperOnUpdate (self, *args, **kwargs)-> None :
      '''setZoomToPaperOnUpdate( (PlotSettingsValidator)arg1, (PlotSettings)arg2, (bool)arg3) -> None :

    C++ signature :
        void setZoomToPaperOnUpdate(class PyDbPlotSettingsValidator {lvalue},class PyDbPlotSettings {lvalue},bool)'''
    ...

class PlotStyleNameType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kPlotStyleNameByBlock (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPlotStyleNameById (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPlotStyleNameByLayer (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPlotStyleNameIsDictDefault (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class PlotType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kDisplay (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kExtents (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLayout (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLimits (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kView (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kWindow (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class Point(Entity):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, pos : PyGe.Point3d)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - pos : PyGe.Point3d
    - id: PyDb.ObjectId
    - id: PyDb.ObjectId, mode: PyDb.OpenMode
    - id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool
    '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Point :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Point :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def ecsRotation (self)-> float :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def normal (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def position (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setEcsRotation (self, val : float)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self, val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setThickness (self, val : float)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def thickness (self)-> float :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class Point3AngularDimension(Dimension):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, centerPoint: PyGe.point3d, xL1Start: PyGe.Point3d, xL1End: PyGe.Point3d, arcPnt: PyGe.Point3d)-> None : ...
    @overload
    def __init__ (self, centerPoint: PyGe.point3d, xL1Start: PyGe.Point3d, xL1End: PyGe.Point3d, arcPnt: PyGe.Point3d, dimText: str)-> None : ...
    @overload
    def __init__ (self, centerPoint: PyGe.point3d, xL1Start: PyGe.Point3d, xL1End: PyGe.Point3d, arcPnt: PyGe.Point3d, dimText: str, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - centerPoint: PyGe.point3d, xL1Start: PyGe.Point3d, xL1End: PyGe.Point3d, arcPnt: PyGe.Point3d
    - centerPoint: PyGe.point3d, xL1Start: PyGe.Point3d, xL1End: PyGe.Point3d, arcPnt: PyGe.Point3d, dimText: str
    - centerPoint: PyGe.point3d, xL1Start: PyGe.Point3d, xL1End: PyGe.Point3d, arcPnt: PyGe.Point3d, dimText: str, id: PyDb.ObjectId
    - id: PyDb.ObjectId
    - id: PyDb.ObjectId, mode: PyDb.OpenMode
    - id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool
    '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def altSuppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def altSuppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def altSuppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def altSuppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def alternatePrefix (self)-> str :
      '''                             '''
    ...
    def alternateSuffix (self)-> str :
      '''                             '''
    ...
    def arcPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Point3AngularDimension :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...
    def centerMarkSize (self)-> float :
      '''                             '''
    ...
    def centerPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Point3AngularDimension :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dimBlockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimBlockPosition (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def dimExt1Linetype (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimExt2Linetype (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimLineLinetype (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimensionStyle (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimensionText (self)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevation (self)-> float :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extArcOn (self)-> bool :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def fieldFromMText (self, ref : PyDb.MText)-> None :
      '''                             '''
    ...
    def fieldToMText (self, ref : PyDb.MText)-> None :
      '''                             '''
    ...

    @overload
    def formatMeasurement (self, measurement: float)-> str : ...
    @overload
    def formatMeasurement (self, measurement: float, dimensionText: str)-> str : ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''Overloads:
    - measurement: float
    - measurement: float, dimensionText: str
    '''
    ...
    def generateLayout (self)-> None :
      '''                             '''
    ...
    def getArrowFirstIsFlipped (self)-> bool :
      '''                             '''
    ...
    def getArrowSecondIsFlipped (self)-> bool :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDimstyleData (self)-> PyDb.DimStyleTableRecord :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def horizontalRotation (self)-> float :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def inspection (self)-> bool :
      '''                             '''
    ...
    def inspectionFrame (self)-> int :
      '''                             '''
    ...
    def inspectionLabel (self)-> str :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self)-> bool :
      '''                             '''
    ...
    def isConstraintObject (self)-> tuple :
      '''                             '''
    ...
    def isDynamicDimension (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def measurement (self)-> float :
      '''                             '''
    ...
    def normal (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def prefix (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recomputeDimBlock (self, force : bool=False)-> None :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def removeTextField (self)-> None :
      '''                             '''
    ...
    def resetTextDefinedSize (self)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAltSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setAlternatePrefix (self, val : str)-> None :
      '''                             '''
    ...
    def setAlternateSuffix (self, val : str)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setArcPoint (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setArrowFirstIsFlipped (self, val : bool)-> None :
      '''                             '''
    ...
    def setArrowSecondIsFlipped (self, val : bool)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setCenterPoint (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setConstraintDynamic (self, val : bool)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setDimBlockId (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimBlockPosition (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setDimExt1Linetype (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimExt2Linetype (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimLineLinetype (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimensionStyle (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimensionText (self, val : str)-> None :
      '''                             '''
    ...

    @overload
    def setDimstyleData (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def setDimstyleData (self, rec: PyDb.DimStyleTableRecord)-> None : ...
    def setDimstyleData (self, *args, **kwargs)-> None :
      '''Overloads:
    - id: PyDb.ObjectId
    - rec: PyDb.DimStyleTableRecord
    '''
    ...
    def setDynamicDimension (self, val : bool)-> None :
      '''                             '''
    ...
    def setElevation (self, val : float)-> None :
      '''                             '''
    ...
    def setExtArcOn (self, val : bool)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setHorizontalRefTextRotation (self, val : bool)-> None :
      '''                             '''
    ...
    def setHorizontalRotation (self, val : float)-> None :
      '''                             '''
    ...
    def setInspection (self, val : bool)-> None :
      '''                             '''
    ...
    def setInspectionFrame (self, val : int)-> None :
      '''                             '''
    ...
    def setInspectionLabel (self, val : str)-> None :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self, val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, val : str)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setShouldParticipateInOPM (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuffix (self, val : str)-> None :
      '''                             '''
    ...
    def setSuppressAngularTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setTextAttachment (self, val : PyDb.MTextAttachmentPoint)-> None :
      '''                             '''
    ...
    def setTextDefinedSize (self, width : float, height : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingFactor (self, val : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingStyle (self, val : PyDb.LineSpacingStyle)-> None :
      '''                             '''
    ...
    def setTextPosition (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setTextRotation (self, val : float)-> None :
      '''                             '''
    ...
    def setToleranceSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setUsingDefaultTextPosition (self, val : bool)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def setXLine1Point (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setXLine2Point (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def shouldParticipateInOPM (self)-> bool :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def suffix (self)-> str :
      '''                             '''
    ...
    def suppressAngularLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressAngularTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def suppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAttachment (self)-> PyDb.MTextAttachmentPoint :
      '''                             '''
    ...
    def textDefinedSize (self)-> tuple :
      '''                             '''
    ...
    def textLineSpacingFactor (self)-> float :
      '''                             '''
    ...
    def textLineSpacingStyle (self)-> PyDb.LineSpacingStyle :
      '''                             '''
    ...
    def textPosition (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def textRotation (self)-> float :
      '''                             '''
    ...
    def toleranceSuppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def toleranceSuppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def useDefaultTextPosition (self)-> None :
      '''                             '''
    ...
    def useSetTextPosition (self)-> None :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xLine1Point (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def xLine2Point (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class PointCloudClassificationColorRamp(object):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def color (self, *args, **kwargs)-> PyDb.EntityColor :
      '''color( (PointCloudClassificationColorRamp)arg1, (int)arg2) -> EntityColor :

    C++ signature :
        class AcCmEntityColor color(class PyDbPointCloudClassificationColorRamp {lvalue},int)'''
    ...
    def name (self, *args, **kwargs)-> str :
      '''name( (PointCloudClassificationColorRamp)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > name(class PyDbPointCloudClassificationColorRamp {lvalue})'''
    ...
    def numColors (self, *args, **kwargs)-> int :
      '''numColors( (PointCloudClassificationColorRamp)arg1) -> int :

    C++ signature :
        int numColors(class PyDbPointCloudClassificationColorRamp {lvalue})'''
    ...
    def setColor (self, *args, **kwargs)-> None :
      '''setColor( (PointCloudClassificationColorRamp)arg1, (int)arg2, (EntityColor)arg3) -> None :

    C++ signature :
        void setColor(class PyDbPointCloudClassificationColorRamp {lvalue},int,class AcCmEntityColor)'''
    ...
    def setFrom (self, *args, **kwargs)-> None :
      '''setFrom( (PointCloudClassificationColorRamp)arg1, (PointCloudClassificationColorRamp)arg2) -> None :

    C++ signature :
        void setFrom(class PyDbPointCloudClassificationColorRamp {lvalue},class PyDbPointCloudClassificationColorRamp)'''
    ...
    def setName (self, *args, **kwargs)-> None :
      '''setName( (PointCloudClassificationColorRamp)arg1, (str)arg2) -> None :

    C++ signature :
        void setName(class PyDbPointCloudClassificationColorRamp {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setVisibility (self, *args, **kwargs)-> None :
      '''setVisibility( (PointCloudClassificationColorRamp)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setVisibility(class PyDbPointCloudClassificationColorRamp {lvalue},int,bool)'''
    ...
    def visibility (self, *args, **kwargs)-> bool :
      '''visibility( (PointCloudClassificationColorRamp)arg1, (int)arg2) -> bool :

    C++ signature :
        bool visibility(class PyDbPointCloudClassificationColorRamp {lvalue},int)'''
    ...

class PointCloudColorMap(DbObject):
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode.kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.PointCloudColorMap :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def classificationScheme (self, *args, **kwargs)-> tuple :
      '''classificationScheme( (PointCloudColorMap)arg1, (str)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple classificationScheme(class PyDbPointCloudColorMap {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def classificationSchemeGUIDs (self, *args, **kwargs)-> list :
      '''classificationSchemeGUIDs( (PointCloudColorMap)arg1) -> list :

    C++ signature :
        class boost::python::list classificationSchemeGUIDs(class PyDbPointCloudColorMap {lvalue})'''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.PointCloudColorMap :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def colorScheme (self, *args, **kwargs)-> tuple :
      '''colorScheme( (PointCloudColorMap)arg1, (str)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple colorScheme(class PyDbPointCloudColorMap {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def colorSchemeGUIDs (self, *args, **kwargs)-> list :
      '''colorSchemeGUIDs( (PointCloudColorMap)arg1) -> list :

    C++ signature :
        class boost::python::list colorSchemeGUIDs(class PyDbPointCloudColorMap {lvalue})'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def defaultClassificationColorScheme (self, *args, **kwargs)-> str :
      '''defaultClassificationColorScheme( (PointCloudColorMap)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > defaultClassificationColorScheme(class PyDbPointCloudColorMap {lvalue})'''
    ...
    def defaultElevationColorScheme (self, *args, **kwargs)-> str :
      '''defaultElevationColorScheme( (PointCloudColorMap)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > defaultElevationColorScheme(class PyDbPointCloudColorMap {lvalue})'''
    ...
    def defaultIntensityColorScheme (self, *args, **kwargs)-> str :
      '''defaultIntensityColorScheme( (PointCloudColorMap)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > defaultIntensityColorScheme(class PyDbPointCloudColorMap {lvalue})'''
    ...
    def deleteClassificationScheme (self, *args, **kwargs)-> bool :
      '''deleteClassificationScheme( (PointCloudColorMap)arg1, (str)arg2) -> bool :

    C++ signature :
        bool deleteClassificationScheme(class PyDbPointCloudColorMap {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def deleteColorScheme (self, *args, **kwargs)-> bool :
      '''deleteColorScheme( (PointCloudColorMap)arg1, (str)arg2) -> bool :

    C++ signature :
        bool deleteColorScheme(class PyDbPointCloudColorMap {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getClassificationColorSchemeInUse (self, *args, **kwargs)-> list :
      '''getClassificationColorSchemeInUse( (PointCloudColorMap)arg1) -> list :

    C++ signature :
        class boost::python::list getClassificationColorSchemeInUse(class PyDbPointCloudColorMap {lvalue})'''
    ...

    @staticmethod
    def getColorMap (val : PyDb.Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getColorSchemeInUse (self, *args, **kwargs)-> list :
      '''getColorSchemeInUse( (PointCloudColorMap)arg1) -> list :

    C++ signature :
        class boost::python::list getColorSchemeInUse(class PyDbPointCloudColorMap {lvalue})'''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasClassificationScheme (self, *args, **kwargs)-> bool :
      '''hasClassificationScheme( (PointCloudColorMap)arg1, (str)arg2) -> bool :

    C++ signature :
        bool hasClassificationScheme(class PyDbPointCloudColorMap {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def hasColorScheme (self, *args, **kwargs)-> bool :
      '''hasColorScheme( (PointCloudColorMap)arg1, (str)arg2) -> bool :

    C++ signature :
        bool hasColorScheme(class PyDbPointCloudColorMap {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setClassificationScheme (self, *args, **kwargs)-> bool :
      '''setClassificationScheme( (PointCloudColorMap)arg1, (str)arg2, (PointCloudClassificationColorRamp)arg3) -> bool :

    C++ signature :
        bool setClassificationScheme(class PyDbPointCloudColorMap {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbPointCloudClassificationColorRamp)'''
    ...
    def setColorScheme (self, *args, **kwargs)-> bool :
      '''setColorScheme( (PointCloudColorMap)arg1, (str)arg2, (PointCloudColorRamp)arg3) -> bool :

    C++ signature :
        bool setColorScheme(class PyDbPointCloudColorMap {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbPointCloudColorRamp)'''
    ...
    def setDefaultClassificationColorScheme (self, *args, **kwargs)-> bool :
      '''setDefaultClassificationColorScheme( (PointCloudColorMap)arg1, (str)arg2) -> bool :

    C++ signature :
        bool setDefaultClassificationColorScheme(class PyDbPointCloudColorMap {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDefaultElevationColorScheme (self, *args, **kwargs)-> bool :
      '''setDefaultElevationColorScheme( (PointCloudColorMap)arg1, (str)arg2) -> bool :

    C++ signature :
        bool setDefaultElevationColorScheme(class PyDbPointCloudColorMap {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDefaultIntensityColorScheme (self, *args, **kwargs)-> bool :
      '''setDefaultIntensityColorScheme( (PointCloudColorMap)arg1, (str)arg2) -> bool :

    C++ signature :
        bool setDefaultIntensityColorScheme(class PyDbPointCloudColorMap {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class PointCloudColorRamp(object):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def color (self, *args, **kwargs)-> PyDb.EntityColor :
      '''color( (PointCloudColorRamp)arg1, (int)arg2) -> EntityColor :

    C++ signature :
        class AcCmEntityColor color(class PyDbPointCloudColorRamp {lvalue},int)'''
    ...
    def name (self, *args, **kwargs)-> str :
      '''name( (PointCloudColorRamp)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > name(class PyDbPointCloudColorRamp {lvalue})'''
    ...
    def numColors (self, *args, **kwargs)-> int :
      '''numColors( (PointCloudColorRamp)arg1) -> int :

    C++ signature :
        int numColors(class PyDbPointCloudColorRamp {lvalue})'''
    ...
    def setColor (self, *args, **kwargs)-> None :
      '''setColor( (PointCloudColorRamp)arg1, (int)arg2, (EntityColor)arg3) -> None :

    C++ signature :
        void setColor(class PyDbPointCloudColorRamp {lvalue},int,class AcCmEntityColor)'''
    ...
    def setFrom (self, *args, **kwargs)-> None :
      '''setFrom( (PointCloudColorRamp)arg1, (PointCloudColorRamp)arg2) -> None :

    C++ signature :
        void setFrom(class PyDbPointCloudColorRamp {lvalue},class PyDbPointCloudColorRamp)'''
    ...
    def setName (self, *args, **kwargs)-> None :
      '''setName( (PointCloudColorRamp)arg1, (str)arg2) -> None :

    C++ signature :
        void setName(class PyDbPointCloudColorRamp {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setNumColors (self, *args, **kwargs)-> None :
      '''setNumColors( (PointCloudColorRamp)arg1, (int)arg2) -> None :

    C++ signature :
        void setNumColors(class PyDbPointCloudColorRamp {lvalue},int)'''
    ...
    def setVisibility (self, *args, **kwargs)-> None :
      '''setVisibility( (PointCloudColorRamp)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setVisibility(class PyDbPointCloudColorRamp {lvalue},int,bool)'''
    ...
    def visibility (self, *args, **kwargs)-> bool :
      '''visibility( (PointCloudColorRamp)arg1, (int)arg2) -> bool :

    C++ signature :
        bool visibility(class PyDbPointCloudColorRamp {lvalue},int)'''
    ...

class PointCloudCrop(object):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def clear (self, *args, **kwargs)-> None :
      '''clear( (PointCloudCrop)arg1) -> None :

    C++ signature :
        void clear(class PyDbPointCloudCrop {lvalue})'''
    ...
    def get (self, *args, **kwargs)-> list :
      '''get( (PointCloudCrop)arg1) -> list :

    C++ signature :
        class boost::python::list get(class PyDbPointCloudCrop {lvalue})'''
    ...
    def getCropPlane (self, *args, **kwargs)-> tuple :
      '''getCropPlane( (PointCloudCrop)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getCropPlane(class PyDbPointCloudCrop {lvalue})'''
    ...
    def isInside (self, *args, **kwargs)-> bool :
      '''isInside( (PointCloudCrop)arg1) -> bool :

    C++ signature :
        bool isInside(class PyDbPointCloudCrop {lvalue})'''
    ...
    def isInverted (self, *args, **kwargs)-> bool :
      '''isInverted( (PointCloudCrop)arg1) -> bool :

    C++ signature :
        bool isInverted(class PyDbPointCloudCrop {lvalue})'''
    ...
    def isValid (self, *args, **kwargs)-> bool :
      '''isValid( (PointCloudCrop)arg1) -> bool :

    C++ signature :
        bool isValid(class PyDbPointCloudCrop {lvalue})'''
    ...
    def length (self, *args, **kwargs)-> int :
      '''length( (PointCloudCrop)arg1) -> int :

    C++ signature :
        int length(class PyDbPointCloudCrop {lvalue})'''
    ...
    def set (self, *args, **kwargs)-> None :
      '''set( (PointCloudCrop)arg1, (list)arg2) -> None :

    C++ signature :
        void set(class PyDbPointCloudCrop {lvalue},class boost::python::list)'''
    ...
    def setCropPlane (self, *args, **kwargs)-> None :
      '''setCropPlane( (PointCloudCrop)arg1, (Plane)arg2) -> None :

    C++ signature :
        void setCropPlane(class PyDbPointCloudCrop {lvalue},class PyGePlane)'''
    ...
    def setCropType (self, *args, **kwargs)-> None :
      '''setCropType( (PointCloudCrop)arg1, (PointCloudCropType)arg2) -> None :

    C++ signature :
        void setCropType(class PyDbPointCloudCrop {lvalue},enum AcDbPointCloudCrop::CropType)'''
    ...
    def setInside (self, *args, **kwargs)-> None :
      '''setInside( (PointCloudCrop)arg1, (bool)arg2) -> None :

    C++ signature :
        void setInside(class PyDbPointCloudCrop {lvalue},bool)'''
    ...
    def setInvert (self, *args, **kwargs)-> None :
      '''setInvert( (PointCloudCrop)arg1, (bool)arg2) -> None :

    C++ signature :
        void setInvert(class PyDbPointCloudCrop {lvalue},bool)'''
    ...
    def type (self, *args, **kwargs)-> PyDb.PointCloudCropType :
      '''type( (PointCloudCrop)arg1) -> PointCloudCropType :

    C++ signature :
        enum AcDbPointCloudCrop::CropType type(class PyDbPointCloudCrop {lvalue})'''
    ...

class PointCloudCropType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kCircular (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kInvalid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPolygonal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kRectangular (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class PointCloudDefEx(DbObject):
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode.kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def activeFileName (self)-> str :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.PointCloudDefEx :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def classVersion ()-> int :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.PointCloudDefEx :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def coordinateSystemName (self)-> str :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...

    @staticmethod
    def createPointCloudExDictionary (val : PyDb.Database,id : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def defaultHeight (self)-> float :
      '''                             '''
    ...
    def defaultLength (self)-> float :
      '''                             '''
    ...
    def defaultWidth (self)-> float :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityCount (self)-> tuple :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def extents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def fileType (self)-> str :
      '''                             '''
    ...
    def getAllRcsFilePaths (self)-> list :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getRcsFilePath (self, guid : str)-> str :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasProperty (self, prop : PyDb.PointCloudProperty)-> PyDb.PointCloudPropertyState :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isLoaded (self)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def load (self)-> None :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...

    @staticmethod
    def pointCloudExDictionary (val : PyDb.Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setActiveFileName (self, path : str)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setSourceFileName (self, path : str)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def sourceFileName (self)-> str :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def totalPointsCount (self)-> int :
      '''                             '''
    ...
    def totalRegionsCount (self)-> int :
      '''                             '''
    ...
    def totalScansCount (self)-> int :
      '''                             '''
    ...
    def unload (self)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class PointCloudDispOptionOutOfRange(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kHidePoints (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUseMinMaxColors (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUseRGBScanColors (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class PointCloudEx(Entity):
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode.kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addCroppingBoundary (self, *args, **kwargs)-> None :
      '''addCroppingBoundary( (PointCloudEx)arg1, (PointCloudCrop)arg2) -> None :

    C++ signature :
        void addCroppingBoundary(class PyDbPointCloudEx {lvalue},class PyDbPointCloudCrop)'''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def applyGeoLocation (self, *args, **kwargs)-> None :
      '''applyGeoLocation( (PointCloudEx)arg1) -> None :

    C++ signature :
        void applyGeoLocation(class PyDbPointCloudEx {lvalue})

applyGeoLocation( (PointCloudEx)arg1, (bool)arg2, (str)arg3) -> None :

    C++ signature :
        void applyGeoLocation(class PyDbPointCloudEx {lvalue},bool,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def attachPointCloud (self, path: str, pos: PyGe.Point3d, scale: float, rotation: float, db: PyDb.Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.PointCloudEx :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def clearAttributeFilters (self)-> None :
      '''                             '''
    ...
    def clearCropping (self)-> None :
      '''                             '''
    ...
    def clearSpatialFilters (self)-> None :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.PointCloudEx :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def detectPointBelonger (self, *args, **kwargs)-> tuple :
      '''detectPointBelonger( (PointCloudEx)arg1, (Point3d)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple detectPointBelonger(class PyDbPointCloudEx {lvalue},class AcGePoint3d)'''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevationApplyToFixedRange (self)-> bool :
      '''                             '''
    ...
    def elevationOutOfRangeBehavior (self)-> PyDb.PointCloudDispOptionOutOfRange :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def geolocate (self)-> bool :
      '''                             '''
    ...
    def getActiveFileName (self)-> tuple :
      '''                             '''
    ...
    def getCandidatePlane (self, *args, **kwargs)-> tuple :
      '''getCandidatePlane( (PointCloudEx)arg1, (int)arg2, (int)arg3) -> tuple :

    C++ signature :
        class boost::python::tuple getCandidatePlane(class PyDbPointCloudEx {lvalue},int,int)'''
    ...
    def getColorSchemeForStylization (self, *args, **kwargs)-> str :
      '''getColorSchemeForStylization( (PointCloudEx)arg1, (PointCloudStylizationType)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getColorSchemeForStylization(class PyDbPointCloudEx {lvalue},enum AcDbPointCloudEx::StylizationType)'''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getCroppingCount (self)-> int :
      '''                             '''
    ...
    def getCroppingInvert (self)-> bool :
      '''                             '''
    ...
    def getCurrentColorScheme (self)-> str :
      '''                             '''
    ...
    def getCustomOsnapInfo (self, *args, **kwargs)-> list :
      '''getCustomOsnapInfo( (PointCloudEx)arg1, (PointCloudOSnapMode)arg2, (Point3d)arg3, (Point3d)arg4, (Matrix3d)arg5) -> list :

    C++ signature :
        class boost::python::list getCustomOsnapInfo(class PyDbPointCloudEx {lvalue},enum AcDbPointCloudEx::PointCloudOSnapMode,class AcGePoint3d,class AcGePoint3d,class AcGeMatrix3d)'''
    ...
    def getCylinderAt (self, *args, **kwargs)-> tuple :
      '''getCylinderAt( (PointCloudEx)arg1, (Matrix3d)arg2, (Point3d)arg3) -> tuple :

    C++ signature :
        class boost::python::tuple getCylinderAt(class PyDbPointCloudEx {lvalue},class AcGeMatrix3d,class AcGePoint3d)'''
    ...
    def getDisplayedVisiblePointCount (self)-> int :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getLoadedVisiblePointCount (self)-> int :
      '''                             '''
    ...
    def getMinDistPrecision (self)-> float :
      '''                             '''
    ...
    def getNativeCloudExtent (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlaneBoundaryAt (self, *args, **kwargs)-> tuple :
      '''getPlaneBoundaryAt( (PointCloudEx)arg1, (Matrix3d)arg2, (Point3d)arg3) -> tuple :

    C++ signature :
        class boost::python::tuple getPlaneBoundaryAt(class PyDbPointCloudEx {lvalue},class AcGeMatrix3d,class AcGePoint3d)'''
    ...
    def getPlaneOrPointAt (self, *args, **kwargs)-> tuple :
      '''getPlaneOrPointAt( (PointCloudEx)arg1, (Matrix3d)arg2, (Point3d)arg3) -> tuple :

    C++ signature :
        class boost::python::tuple getPlaneOrPointAt(class PyDbPointCloudEx {lvalue},class AcGeMatrix3d,class AcGePoint3d)'''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getPointCloudCropping (self, *args, **kwargs)-> PyDb.PointCloudCrop :
      '''getPointCloudCropping( (PointCloudEx)arg1, (int)arg2) -> PointCloudCrop :

    C++ signature :
        class PyDbPointCloudCrop getPointCloudCropping(class PyDbPointCloudEx {lvalue},int)'''
    ...
    def getPointCloudName (self)-> str :
      '''                             '''
    ...
    def getScanViewInfo (self, *args, **kwargs)-> tuple :
      '''getScanViewInfo( (PointCloudEx)arg1, (str)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple getScanViewInfo(class PyDbPointCloudEx {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def getVisiblePointCount (self)-> int :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def intensityOutOfRangeBehavior (self)-> PyDb.PointCloudDispOptionOutOfRange :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def location (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def locked (self)-> bool :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def maxElevation (self)-> float :
      '''                             '''
    ...
    def maxIntensity (self)-> int :
      '''                             '''
    ...
    def minElevation (self)-> float :
      '''                             '''
    ...
    def minIntensity (self)-> int :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def objectToWorldMatrix (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def pointCloudDefExId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def reactorId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeLastCropping (self)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def resetLimitBox (self)-> None :
      '''                             '''
    ...
    def resetScanRegionVisibility (self)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self)-> float :
      '''                             '''
    ...
    def scale (self)-> float :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setActiveFileName (self, *args, **kwargs)-> bool :
      '''setActiveFileName( (PointCloudEx)arg1, (str)arg2) -> bool :

    C++ signature :
        bool setActiveFileName(class PyDbPointCloudEx {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAllRegionHighlight (self, *args, **kwargs)-> None :
      '''setAllRegionHighlight( (PointCloudEx)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAllRegionHighlight(class PyDbPointCloudEx {lvalue},bool)

setAllRegionHighlight( (PointCloudEx)arg1, (bool)arg2, (bool)arg3) -> None :

    C++ signature :
        void setAllRegionHighlight(class PyDbPointCloudEx {lvalue},bool,bool)'''
    ...
    def setAllRegionsVisibility (self, *args, **kwargs)-> None :
      '''setAllRegionsVisibility( (PointCloudEx)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAllRegionsVisibility(class PyDbPointCloudEx {lvalue},bool)

setAllRegionsVisibility( (PointCloudEx)arg1, (bool)arg2, (bool)arg3) -> None :

    C++ signature :
        void setAllRegionsVisibility(class PyDbPointCloudEx {lvalue},bool,bool)'''
    ...
    def setAllScanHighlight (self, *args, **kwargs)-> None :
      '''setAllScanHighlight( (PointCloudEx)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAllScanHighlight(class PyDbPointCloudEx {lvalue},bool)'''
    ...
    def setAllScansVisibility (self, *args, **kwargs)-> None :
      '''setAllScansVisibility( (PointCloudEx)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAllScansVisibility(class PyDbPointCloudEx {lvalue},bool)'''
    ...
    def setAllScansVisibilityByRegion (self, *args, **kwargs)-> None :
      '''setAllScansVisibilityByRegion( (PointCloudEx)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setAllScansVisibilityByRegion(class PyDbPointCloudEx {lvalue},int,bool)'''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setColorSchemeForStylization (self, *args, **kwargs)-> None :
      '''setColorSchemeForStylization( (PointCloudEx)arg1, (str)arg2, (PointCloudStylizationType)arg3) -> None :

    C++ signature :
        void setColorSchemeForStylization(class PyDbPointCloudEx {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,enum AcDbPointCloudEx::StylizationType)'''
    ...
    def setCroppingInvert (self, *args, **kwargs)-> None :
      '''setCroppingInvert( (PointCloudEx)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCroppingInvert(class PyDbPointCloudEx {lvalue},bool)'''
    ...
    def setCurrentColorScheme (self, *args, **kwargs)-> None :
      '''setCurrentColorScheme( (PointCloudEx)arg1, (str)arg2) -> None :

    C++ signature :
        void setCurrentColorScheme(class PyDbPointCloudEx {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setElevationApplyToFixedRange (self)-> None :
      '''                             '''
    ...
    def setElevationOutOfRangeBehavior (self, *args, **kwargs)-> None :
      '''setElevationOutOfRangeBehavior( (PointCloudEx)arg1, (PointCloudDispOptionOutOfRange)arg2) -> None :

    C++ signature :
        void setElevationOutOfRangeBehavior(class PyDbPointCloudEx {lvalue},enum AcDbPointCloudEx::DispOptionOutOfRange)'''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setHighlightLimitboxBoundary (self, *args, **kwargs)-> None :
      '''setHighlightLimitboxBoundary( (PointCloudEx)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHighlightLimitboxBoundary(class PyDbPointCloudEx {lvalue},bool)'''
    ...
    def setInCreatingCroppingMode (self, *args, **kwargs)-> None :
      '''setInCreatingCroppingMode( (PointCloudEx)arg1, (bool)arg2) -> None :

    C++ signature :
        void setInCreatingCroppingMode(class PyDbPointCloudEx {lvalue},bool)'''
    ...
    def setIntensityOutOfRangeBehavior (self, *args, **kwargs)-> None :
      '''setIntensityOutOfRangeBehavior( (PointCloudEx)arg1, (PointCloudDispOptionOutOfRange)arg2) -> None :

    C++ signature :
        void setIntensityOutOfRangeBehavior(class PyDbPointCloudEx {lvalue},enum AcDbPointCloudEx::DispOptionOutOfRange)'''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLocation (self, *args, **kwargs)-> None :
      '''setLocation( (PointCloudEx)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setLocation(class PyDbPointCloudEx {lvalue},class AcGePoint3d)'''
    ...
    def setLocked (self, val : bool)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMinMaxElevation (self, *args, **kwargs)-> None :
      '''setMinMaxElevation( (PointCloudEx)arg1, (float)arg2, (float)arg3) -> None :

    C++ signature :
        void setMinMaxElevation(class PyDbPointCloudEx {lvalue},double,double)'''
    ...
    def setMinMaxIntensity (self, *args, **kwargs)-> None :
      '''setMinMaxIntensity( (PointCloudEx)arg1, (int)arg2, (int)arg3) -> None :

    C++ signature :
        void setMinMaxIntensity(class PyDbPointCloudEx {lvalue},int,int)'''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPointCloudDefExId (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPointCloudName (self, *args, **kwargs)-> None :
      '''setPointCloudName( (PointCloudEx)arg1, (str)arg2) -> None :

    C++ signature :
        void setPointCloudName(class PyDbPointCloudEx {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReactorId (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setRegionVisibility (self, *args, **kwargs)-> None :
      '''setRegionVisibility( (PointCloudEx)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setRegionVisibility(class PyDbPointCloudEx {lvalue},int,bool)'''
    ...
    def setRotation (self, *args, **kwargs)-> None :
      '''setRotation( (PointCloudEx)arg1, (float)arg2) -> None :

    C++ signature :
        void setRotation(class PyDbPointCloudEx {lvalue},double)'''
    ...
    def setScale (self, *args, **kwargs)-> None :
      '''setScale( (PointCloudEx)arg1, (float)arg2) -> None :

    C++ signature :
        void setScale(class PyDbPointCloudEx {lvalue},double)'''
    ...
    def setScanVisibility (self, *args, **kwargs)-> None :
      '''setScanVisibility( (PointCloudEx)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setScanVisibility(class PyDbPointCloudEx {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)'''
    ...
    def setShowElevationAsGradient (self, *args, **kwargs)-> None :
      '''setShowElevationAsGradient( (PointCloudEx)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShowElevationAsGradient(class PyDbPointCloudEx {lvalue},bool)'''
    ...
    def setShowIntensityAsGradient (self, *args, **kwargs)-> None :
      '''setShowIntensityAsGradient( (PointCloudEx)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShowIntensityAsGradient(class PyDbPointCloudEx {lvalue},bool)'''
    ...
    def setStylizationType (self, *args, **kwargs)-> None :
      '''setStylizationType( (PointCloudEx)arg1, (PointCloudStylizationType)arg2) -> None :

    C++ signature :
        void setStylizationType(class PyDbPointCloudEx {lvalue},enum AcDbPointCloudEx::StylizationType)'''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def showCropped (self)-> bool :
      '''                             '''
    ...
    def showElevationAsGradient (self)-> bool :
      '''                             '''
    ...
    def showIntensityAsGradient (self)-> bool :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def stylizationType (self)-> PyDb.PointCloudStylizationType :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def updateGeoLocation (self)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class PointCloudOSnapMode(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kOsModePCL (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsModePCorner (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsModePEdgeNea (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsModePEdgePer (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsModePInt (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsModePNea (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsModePNod (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOsModePPer (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class PointCloudProperty(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kClassification (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kColor (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kGeoGraphic (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kIntensity (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNormal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSegmentation (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class PointCloudPropertyState(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kAll (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSome (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class PointCloudStylizationType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kClassificationRamp (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHeightRamp (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kIntensityRamp (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNormalRamp (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSingleColor (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTrueColor (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class PointRef(PyRx.RxObject):
    def __init__ (self, *args, **kwargs)-> None :
      '''Raises an exception
This class cannot be instantiated from Python'''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...

class Poly2dType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def k2dCubicSplinePoly (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k2dFitCurvePoly (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k2dQuadSplinePoly (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k2dSimplePoly (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class Poly3dType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def k3dCubicSplinePoly (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k3dQuadSplinePoly (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k3dSimplePoly (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class PolyFaceMeshVertex(Vertex):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, pos: PyGe.Point3d)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - pos: PyGe.Point3d
    - id: PyDb.ObjectId
    - id: PyDb.ObjectId, mode: PyDb.OpenMode
    - id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool
    '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.PolyFaceMeshVertex :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.PolyFaceMeshVertex :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def position (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class PolygonMeshVertex(Vertex):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, pos: PyGe.Point3d)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - pos: PyGe.Point3d
    - id: PyDb.ObjectId
    - id: PyDb.ObjectId, mode: PyDb.OpenMode
    - id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool
    '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.PolygonMeshVertex :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.PolygonMeshVertex :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def position (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def vertexType (self)-> object :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class Polyline(Curve):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, num_verts: int)-> None : ...
    @overload
    def __init__ (self, pnts: list[PyGe.Point3d])-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - num_verts: int
    - pnts: list[PyGe.Point3d]
    - id: PyDb.ObjectId
    - id: PyDb.ObjectId, mode: PyDb.OpenMode
    - id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool
    '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def addVertexAt (self, idx:int, pt2d:PyGe.Point2d, bulge:float=0.0, startWidth:float=-1.0, endWidth:float=-1.0)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Polyline :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Polyline :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...

    @staticmethod
    def createFromAcGeCurve (curve: PyGe.Curve3d,normal: PyGe.Vector3d = PyGe.Vector3d.kZAxis,tol: PyGe.Tol = 'default')-> PyDb.Curve :
      '''                             '''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevation (self)-> float :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> None :
      '''extend( (Curve)arg1, (float)arg2) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getAcGeCurve (self, tol: PyGe.Tol = 'default')-> PyGe.CompositeCurve3d :
      '''                             '''
    ...
    def getArcSeg2dAt (self, idx:int)-> PyGe.CircArc2d :
      '''                             '''
    ...
    def getArcSeg3dAt (self, idx:int)-> PyGe.CircArc3d :
      '''                             '''
    ...
    def getArea (self)-> float :
      '''                             '''
    ...
    def getBulgeAt (self, idx:int)-> float :
      '''                             '''
    ...
    def getClosestPointTo (self, point3d: PyGe.Point3d, direction: PyGe.Vector3d=None, extend: bool=False)-> PyGe.Point3d :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getConstantWidth (self)-> float :
      '''                             '''
    ...
    def getDistAtParam (self, param: float)-> float :
      '''                             '''
    ...
    def getDistAtPoint (self, point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEndParam (self)-> float :
      '''                             '''
    ...
    def getEndPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def getEndWidthAt (self, idx:int)-> float :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self, param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getLineSeg2dAt (self, idx:int)-> PyGe.LineSeg2d :
      '''                             '''
    ...
    def getLineSeg3dAt (self, idx:int)-> PyGe.LineSeg3d :
      '''                             '''
    ...
    def getOffsetCurves (self, dist: float)-> list :
      '''                             '''
    ...
    def getOffsetCurvesGivenPlaneNormal (self, normal: PyGe.Vector3d, dist: float)-> list :
      '''                             '''
    ...
    def getOrthoProjectedCurve (self, plane: PyGe.Plane)-> PyDb.Curve :
      '''                             '''
    ...
    def getParamAtDist (self, dist: float)-> float :
      '''                             '''
    ...
    def getParamAtPoint (self, point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getPoint2dAt (self, idx:int)-> PyGe.Point2d :
      '''                             '''
    ...
    def getPoint3dAt (self, idx:int)-> PyGe.Point3d :
      '''                             '''
    ...
    def getPointAtDist (self, dist: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getPointAtParam (self, param: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getProjectedCurve (self, plane: PyGe.Plane, projDir: PyGe.Vector3d)-> PyDb.Curve :
      '''                             '''
    ...
    def getSecondDeriv (self, param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getSpline (self)-> PyDb.Spline :
      '''                             '''
    ...
    def getSplitCurves (self, paramsOrPoints: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParam (self, param: float)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParams (self, params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoint (self, point: PyGe.Point3d)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoints (self, points: list)-> list :
      '''                             '''
    ...
    def getStartParam (self)-> float :
      '''                             '''
    ...
    def getStartPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def getStartWidthAt (self, idx:int)-> float :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasBulges (self)-> bool :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasPlinegen (self)-> bool :
      '''                             '''
    ...
    def hasVertexIdentifiers (self)-> bool :
      '''                             '''
    ...
    def hasWidth (self)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isClosed (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isOnlyLines (self)-> bool :
      '''                             '''
    ...
    def isPeriodic (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def makeClosedIfStartAndEndVertexCoincide (self, distTol:float)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def maximizeMemory (self)-> None :
      '''                             '''
    ...
    def minimizeMemory (self)-> None :
      '''                             '''
    ...
    def normal (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def numVerts (self)-> int :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def onSegAt (self, idx:int, pt2d:PyGe.Point2d, param:float)-> bool :
      '''                             '''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def removeVertexAt (self, idx:int)-> None :
      '''                             '''
    ...
    def reset (self, reuse:bool, numVerts:int)-> None :
      '''                             '''
    ...
    def reverseCurve (self)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def segType (self, idx:int)-> PyDb.SegType :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBulgeAt (self, idx:int, bulge:float)-> None :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setClosed (self, val:bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setConstantWidth (self, width:float)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setElevation (self, elev:float)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setFromAcGeCurve (self, curve: PyGe.Curve3d, normal: PyGe.Vector3d = PyGe.Vector3d.kZAxis, tol: PyGe.Tol = 'default')-> None :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self, val:PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlinegen (self, val:bool)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPointAt (self, idx:int, pt2d:PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setThickness (self, val:float)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setWidthsAt (self, idx:int, startWidth:float, endWidth:float)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def thickness (self)-> float :
      '''                             '''
    ...
    def toList (self)-> list :
      '''                             '''
    ...
    def toPoint2dList (self)-> list :
      '''                             '''
    ...
    def toPoint3dList (self)-> list :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class Polyline2d(Curve):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, ptype: PyDb.Poly2dType, points: list[PyGe.Point3d], closed: bool)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - ptype: PyDb.Poly2dType, points: list[PyGe.Point3d], closed: bool
    - id: PyDb.ObjectId
    - id: PyDb.ObjectId, mode: PyDb.OpenMode
    - id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool
    '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...

    @overload
    def appendVertex (self, vertex: PyDb.Vertex2d)-> None : ...
    @overload
    def appendVertex (self, outVertexId: PyDb.ObjectId,vertex: PyDb.Vertex2d)-> None : ...
    def appendVertex (self, *args, **kwargs)-> None :
      '''Overloads:
    - vertex: PyDb.Vertex2d
    - outVertexId: PyDb.ObjectId,vertex: PyDb.Vertex2d
    '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Polyline2d :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Polyline2d :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def constantWidth (self)-> float :
      '''                             '''
    ...
    def convertToPolyType (self, *args, **kwargs)-> None :
      '''convertToPolyType( (Polyline2d)arg1, (Poly2dType)arg2) -> None :

    C++ signature :
        void convertToPolyType(class PyDb2dPolyline {lvalue},enum AcDb::Poly2dType)'''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...

    @staticmethod
    def createFromAcGeCurve (curve: PyGe.Curve3d,normal: PyGe.Vector3d = PyGe.Vector3d.kZAxis,tol: PyGe.Tol = 'default')-> PyDb.Curve :
      '''                             '''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def defaultEndWidth (self)-> float :
      '''                             '''
    ...
    def defaultStartWidth (self)-> float :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevation (self)-> float :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> None :
      '''extend( (Curve)arg1, (float)arg2) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getAcGeCurve (self, tol: PyGe.Tol = 'default')-> PyGe.Curve3d :
      '''                             '''
    ...
    def getArea (self)-> float :
      '''                             '''
    ...
    def getClosestPointTo (self, point3d: PyGe.Point3d, direction: PyGe.Vector3d=None, extend: bool=False)-> PyGe.Point3d :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDistAtParam (self, param: float)-> float :
      '''                             '''
    ...
    def getDistAtPoint (self, point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEndParam (self)-> float :
      '''                             '''
    ...
    def getEndPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self, param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getOffsetCurves (self, dist: float)-> list :
      '''                             '''
    ...
    def getOffsetCurvesGivenPlaneNormal (self, normal: PyGe.Vector3d, dist: float)-> list :
      '''                             '''
    ...
    def getOrthoProjectedCurve (self, plane: PyGe.Plane)-> PyDb.Curve :
      '''                             '''
    ...
    def getParamAtDist (self, dist: float)-> float :
      '''                             '''
    ...
    def getParamAtPoint (self, point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getPointAtDist (self, dist: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getPointAtParam (self, param: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getProjectedCurve (self, plane: PyGe.Plane, projDir: PyGe.Vector3d)-> PyDb.Curve :
      '''                             '''
    ...
    def getSecondDeriv (self, param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getSpline (self)-> PyDb.Spline :
      '''                             '''
    ...
    def getSplitCurves (self, paramsOrPoints: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParam (self, param: float)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParams (self, params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoint (self, point: PyGe.Point3d)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoints (self, points: list)-> list :
      '''                             '''
    ...
    def getStartParam (self)-> float :
      '''                             '''
    ...
    def getStartPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def insertVertexAt (self, indexVt: PyDb.Vertex2d, newVertex: PyDb.Vertex2d)-> None : ...
    @overload
    def insertVertexAt (self, outVertexId: PyDb.ObjectId, indexVtId: PyDb.ObjectId, newVertex: PyDb.Vertex2d)-> None : ...
    def insertVertexAt (self, *args, **kwargs)-> None :
      '''Overloads:
    - indexVt: PyDb.Vertex2d, newVertex: PyDb.Vertex2d
    - outVertexId: PyDb.ObjectId, indexVtId: PyDb.ObjectId, newVertex: PyDb.Vertex2d
    '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isClosed (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isLinetypeGenerationOn (self)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPeriodic (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def length (self)-> float :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def makeClosed (self)-> None :
      '''                             '''
    ...
    def makeClosedIfStartAndEndVertexCoincide (self, val : float)-> None :
      '''                             '''
    ...
    def makeOpen (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def normal (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def openSequenceEnd (self, mode: PyDb.OpenMode)-> PyDb.SequenceEnd :
      '''                             '''
    ...
    def openVertex (self, id : PyDb.ObjectId, mode: PyDb.OpenMode)-> PyDb.Vertex2d :
      '''                             '''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def polyType (self)-> PyDb.Poly2dType :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def reverseCurve (self)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setClosed (self, val : bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setConstantWidth (self, val : float)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setDefaultEndWidth (self, val : float)-> None :
      '''                             '''
    ...
    def setDefaultStartWidth (self, val : float)-> None :
      '''                             '''
    ...
    def setElevation (self, val : float)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setFromAcGeCurve (self, curve: PyGe.Curve3d, normal: PyGe.Vector3d = PyGe.Vector3d.kZAxis, tol: PyGe.Tol = 'default')-> None :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeGenerationOff (self)-> None :
      '''                             '''
    ...
    def setLinetypeGenerationOn (self)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self, normal : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPolyType (self, *args, **kwargs)-> None :
      '''setPolyType( (Polyline2d)arg1, (Poly2dType)arg2) -> None :

    C++ signature :
        void setPolyType(class PyDb2dPolyline {lvalue},enum AcDb::Poly2dType)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setThickness (self, val : float)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...

    @overload
    def splineFit (self, /)-> None : ...
    @overload
    def splineFit (self, splineType: PyDb.Poly2dType, splineSegs: int)-> None : ...
    def splineFit (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - splineType: PyDb.Poly2dType, splineSegs: int
    '''
    ...
    def straighten (self)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def thickness (self)-> float :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def vertexIds (self)-> list :
      '''                             '''
    ...
    def vertexPosition (self, vt : PyDb.Vertex2d)-> PyGe.Point3d :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class Polyline3d(Curve):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, ptype: PyDb.Poly3dType, points: list[PyGe.Point3d], closed: bool)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - ptype: PyDb.Poly3dType, points: list[PyGe.Point3d], closed: bool
    - id: PyDb.ObjectId
    - id: PyDb.ObjectId, mode: PyDb.OpenMode
    - id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool
    '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...

    @overload
    def appendVertex (self, vertex: PyDb.Vertex3d)-> None : ...
    @overload
    def appendVertex (self, outVertexId: PyDb.ObjectId,vertex: PyDb.Vertex3d)-> None : ...
    def appendVertex (self, *args, **kwargs)-> None :
      '''Overloads:
    - vertex: PyDb.Vertex3d
    - outVertexId: PyDb.ObjectId,vertex: PyDb.Vertex3d
    '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Polyline3d :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Polyline3d :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def convertToPolyType (self, val : PyDb.Poly3dType)-> None :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...

    @staticmethod
    def createFromAcGeCurve (curve: PyGe.Curve3d,normal: PyGe.Vector3d = PyGe.Vector3d.kZAxis,tol: PyGe.Tol = 'default')-> PyDb.Curve :
      '''                             '''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> None :
      '''extend( (Curve)arg1, (float)arg2) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getAcGeCurve (self, tol: PyGe.Tol = 'default')-> PyGe.Curve3d :
      '''                             '''
    ...
    def getArea (self)-> float :
      '''                             '''
    ...
    def getClosestPointTo (self, point3d: PyGe.Point3d, direction: PyGe.Vector3d=None, extend: bool=False)-> PyGe.Point3d :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDistAtParam (self, param: float)-> float :
      '''                             '''
    ...
    def getDistAtPoint (self, point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEndParam (self)-> float :
      '''                             '''
    ...
    def getEndPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self, param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getOffsetCurves (self, dist: float)-> list :
      '''                             '''
    ...
    def getOffsetCurvesGivenPlaneNormal (self, normal: PyGe.Vector3d, dist: float)-> list :
      '''                             '''
    ...
    def getOrthoProjectedCurve (self, plane: PyGe.Plane)-> PyDb.Curve :
      '''                             '''
    ...
    def getParamAtDist (self, dist: float)-> float :
      '''                             '''
    ...
    def getParamAtPoint (self, point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getPointAtDist (self, dist: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getPointAtParam (self, param: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getProjectedCurve (self, plane: PyGe.Plane, projDir: PyGe.Vector3d)-> PyDb.Curve :
      '''                             '''
    ...
    def getSecondDeriv (self, param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getSpline (self)-> PyDb.Spline :
      '''                             '''
    ...
    def getSplitCurves (self, paramsOrPoints: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParam (self, param: float)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParams (self, params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoint (self, point: PyGe.Point3d)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoints (self, points: list)-> list :
      '''                             '''
    ...
    def getStartParam (self)-> float :
      '''                             '''
    ...
    def getStartPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def insertVertexAt (self, indexVt: PyDb.Vertex3d, newVertex: PyDb.Vertex3d)-> None : ...
    @overload
    def insertVertexAt (self, outVertexId: PyDb.ObjectId, indexVtId: PyDb.ObjectId, newVertex: PyDb.Vertex3d)-> None : ...
    def insertVertexAt (self, *args, **kwargs)-> None :
      '''Overloads:
    - indexVt: PyDb.Vertex3d, newVertex: PyDb.Vertex3d
    - outVertexId: PyDb.ObjectId, indexVtId: PyDb.ObjectId, newVertex: PyDb.Vertex3d
    '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isClosed (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPeriodic (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def length (self)-> float :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def makeClosed (self)-> None :
      '''                             '''
    ...
    def makeOpen (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def openSequenceEnd (self, mode: PyDb.OpenMode)-> PyDb.SequenceEnd :
      '''                             '''
    ...
    def openVertex (self, id : PyDb.ObjectId, mode: PyDb.OpenMode)-> PyDb.Polyline3dVertex :
      '''                             '''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def polyType (self)-> PyDb.Poly3dType :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def reverseCurve (self)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setClosed (self, val : bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setFromAcGeCurve (self, curve: PyGe.Curve3d, normal: PyGe.Vector3d = PyGe.Vector3d.kZAxis, tol: PyGe.Tol = 'default')-> None :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPolyType (self, val : PyDb.Poly3dType)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...

    @overload
    def splineFit (self, /)-> None : ...
    @overload
    def splineFit (self, splineType: PyDb.Poly3dType, splineSegs: int)-> None : ...
    def splineFit (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - splineType: PyDb.Poly3dType, splineSegs: int
    '''
    ...
    def straighten (self)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def vertexIds (self)-> list :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class Polyline3dVertex(Vertex):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, pos: PyGe.Point3d)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - pos: PyGe.Point3d
    - id: PyDb.ObjectId
    - id: PyDb.ObjectId, mode: PyDb.OpenMode
    - id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool
    '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Polyline3dVertex :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Polyline3dVertex :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def position (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def vertexType (self)-> object :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class Profile3d(PyRx.RxObject):
    def __init__ (self)-> None :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isClosed (self)-> bool :
      '''                             '''
    ...
    def isEdge (self)-> bool :
      '''                             '''
    ...
    def isFace (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isSubent (self)-> bool :
      '''                             '''
    ...
    def isValid (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...

class RadialDimension(Dimension):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, center: PyGe.Point3d, chordPoint: PyGe.Point3d,length:float)-> None : ...
    @overload
    def __init__ (self, center: PyGe.Point3d, chordPoint: PyGe.Point3d,length:float, dimText: str)-> None : ...
    @overload
    def __init__ (self, center: PyGe.Point3d, chordPoint: PyGe.Point3d,length:float, dimText: str, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - center: PyGe.Point3d, chordPoint: PyGe.Point3d,length:float
    - center: PyGe.Point3d, chordPoint: PyGe.Point3d,length:float, dimText: str
    - center: PyGe.Point3d, chordPoint: PyGe.Point3d,length:float, dimText: str, id: PyDb.ObjectId
    - id: PyDb.ObjectId
    - id: PyDb.ObjectId, mode: PyDb.OpenMode
    - id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool
    '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def altSuppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def altSuppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def altSuppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def altSuppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def alternatePrefix (self)-> str :
      '''                             '''
    ...
    def alternateSuffix (self)-> str :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.RadialDimension :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...
    def center (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def centerMarkSize (self)-> float :
      '''                             '''
    ...
    def chordPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.RadialDimension :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dimBlockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimBlockPosition (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def dimExt1Linetype (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimExt2Linetype (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimLineLinetype (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimensionStyle (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimensionText (self)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevation (self)-> float :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extArcEndAngle (self)-> float :
      '''                             '''
    ...
    def extArcStartAngle (self)-> float :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def fieldFromMText (self, ref : PyDb.MText)-> None :
      '''                             '''
    ...
    def fieldToMText (self, ref : PyDb.MText)-> None :
      '''                             '''
    ...

    @overload
    def formatMeasurement (self, measurement: float)-> str : ...
    @overload
    def formatMeasurement (self, measurement: float, dimensionText: str)-> str : ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''Overloads:
    - measurement: float
    - measurement: float, dimensionText: str
    '''
    ...
    def generateLayout (self)-> None :
      '''                             '''
    ...
    def getArrowFirstIsFlipped (self)-> bool :
      '''                             '''
    ...
    def getArrowSecondIsFlipped (self)-> bool :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDimstyleData (self)-> PyDb.DimStyleTableRecord :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def horizontalRotation (self)-> float :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def inspection (self)-> bool :
      '''                             '''
    ...
    def inspectionFrame (self)-> int :
      '''                             '''
    ...
    def inspectionLabel (self)-> str :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self)-> bool :
      '''                             '''
    ...
    def isConstraintObject (self)-> tuple :
      '''                             '''
    ...
    def isDynamicDimension (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def leaderLength (self)-> float :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def measurement (self)-> float :
      '''                             '''
    ...
    def normal (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def prefix (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recomputeDimBlock (self, force : bool=False)-> None :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def removeTextField (self)-> None :
      '''                             '''
    ...
    def resetTextDefinedSize (self)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAltSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setAlternatePrefix (self, val : str)-> None :
      '''                             '''
    ...
    def setAlternateSuffix (self, val : str)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setArrowFirstIsFlipped (self, val : bool)-> None :
      '''                             '''
    ...
    def setArrowSecondIsFlipped (self, val : bool)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setCenter (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setChordPoint (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setConstraintDynamic (self, val : bool)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setDimBlockId (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimBlockPosition (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setDimExt1Linetype (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimExt2Linetype (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimLineLinetype (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimensionStyle (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimensionText (self, val : str)-> None :
      '''                             '''
    ...

    @overload
    def setDimstyleData (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def setDimstyleData (self, rec: PyDb.DimStyleTableRecord)-> None : ...
    def setDimstyleData (self, *args, **kwargs)-> None :
      '''Overloads:
    - id: PyDb.ObjectId
    - rec: PyDb.DimStyleTableRecord
    '''
    ...
    def setDynamicDimension (self, val : bool)-> None :
      '''                             '''
    ...
    def setElevation (self, val : float)-> None :
      '''                             '''
    ...
    def setExtArcEndAngle (self, val : float)-> None :
      '''                             '''
    ...
    def setExtArcStartAngle (self, val : float)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setHorizontalRefTextRotation (self, val : bool)-> None :
      '''                             '''
    ...
    def setHorizontalRotation (self, val : float)-> None :
      '''                             '''
    ...
    def setInspection (self, val : bool)-> None :
      '''                             '''
    ...
    def setInspectionFrame (self, val : int)-> None :
      '''                             '''
    ...
    def setInspectionLabel (self, val : str)-> None :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLeaderLength (self, val : float)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self, val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, val : str)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setShouldParticipateInOPM (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuffix (self, val : str)-> None :
      '''                             '''
    ...
    def setSuppressAngularTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setTextAttachment (self, val : PyDb.MTextAttachmentPoint)-> None :
      '''                             '''
    ...
    def setTextDefinedSize (self, width : float, height : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingFactor (self, val : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingStyle (self, val : PyDb.LineSpacingStyle)-> None :
      '''                             '''
    ...
    def setTextPosition (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setTextRotation (self, val : float)-> None :
      '''                             '''
    ...
    def setToleranceSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setUsingDefaultTextPosition (self, val : bool)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def shouldParticipateInOPM (self)-> bool :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def suffix (self)-> str :
      '''                             '''
    ...
    def suppressAngularLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressAngularTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def suppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAttachment (self)-> PyDb.MTextAttachmentPoint :
      '''                             '''
    ...
    def textDefinedSize (self)-> tuple :
      '''                             '''
    ...
    def textLineSpacingFactor (self)-> float :
      '''                             '''
    ...
    def textLineSpacingStyle (self)-> PyDb.LineSpacingStyle :
      '''                             '''
    ...
    def textPosition (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def textRotation (self)-> float :
      '''                             '''
    ...
    def toleranceSuppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def toleranceSuppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def useDefaultTextPosition (self)-> None :
      '''                             '''
    ...
    def useSetTextPosition (self)-> None :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class RadialDimensionLarge(Dimension):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, center: PyGe.Point3d, chordPoint: PyGe.Point3d, overrideCenter: PyGe.Point3d, jogPoint: PyGe.Point3d, jogAngle: float)-> None : ...
    @overload
    def __init__ (self, center: PyGe.Point3d, chordPoint: PyGe.Point3d, overrideCenter: PyGe.Point3d, jogPoint: PyGe.Point3d, jogAngle: float, dimText: str)-> None : ...
    @overload
    def __init__ (self, center: PyGe.Point3d, chordPoint: PyGe.Point3d, overrideCenter: PyGe.Point3d, jogPoint: PyGe.Point3d, jogAngle: float, dimText: str, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - center: PyGe.Point3d, chordPoint: PyGe.Point3d, overrideCenter: PyGe.Point3d, jogPoint: PyGe.Point3d, jogAngle: float
    - center: PyGe.Point3d, chordPoint: PyGe.Point3d, overrideCenter: PyGe.Point3d, jogPoint: PyGe.Point3d, jogAngle: float, dimText: str
    - center: PyGe.Point3d, chordPoint: PyGe.Point3d, overrideCenter: PyGe.Point3d, jogPoint: PyGe.Point3d, jogAngle: float, dimText: str, id: PyDb.ObjectId
    - id: PyDb.ObjectId
    - id: PyDb.ObjectId, mode: PyDb.OpenMode
    - id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool
    '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def altSuppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def altSuppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def altSuppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def altSuppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def alternatePrefix (self)-> str :
      '''                             '''
    ...
    def alternateSuffix (self)-> str :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.RadialDimensionLarge :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...
    def center (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def centerMarkSize (self)-> float :
      '''                             '''
    ...
    def chordPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.RadialDimensionLarge :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dimBlockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimBlockPosition (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def dimExt1Linetype (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimExt2Linetype (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimLineLinetype (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimensionStyle (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimensionText (self)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevation (self)-> float :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extArcEndAngle (self)-> float :
      '''                             '''
    ...
    def extArcStartAngle (self)-> float :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def fieldFromMText (self, ref : PyDb.MText)-> None :
      '''                             '''
    ...
    def fieldToMText (self, ref : PyDb.MText)-> None :
      '''                             '''
    ...

    @overload
    def formatMeasurement (self, measurement: float)-> str : ...
    @overload
    def formatMeasurement (self, measurement: float, dimensionText: str)-> str : ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''Overloads:
    - measurement: float
    - measurement: float, dimensionText: str
    '''
    ...
    def generateLayout (self)-> None :
      '''                             '''
    ...
    def getArrowFirstIsFlipped (self)-> bool :
      '''                             '''
    ...
    def getArrowSecondIsFlipped (self)-> bool :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDimstyleData (self)-> PyDb.DimStyleTableRecord :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def horizontalRotation (self)-> float :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def inspection (self)-> bool :
      '''                             '''
    ...
    def inspectionFrame (self)-> int :
      '''                             '''
    ...
    def inspectionLabel (self)-> str :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self)-> bool :
      '''                             '''
    ...
    def isConstraintObject (self)-> tuple :
      '''                             '''
    ...
    def isDynamicDimension (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def jogAngle (self)-> float :
      '''                             '''
    ...
    def jogPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def measurement (self)-> float :
      '''                             '''
    ...
    def normal (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def overrideCenter (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def prefix (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recomputeDimBlock (self, force : bool=False)-> None :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def removeTextField (self)-> None :
      '''                             '''
    ...
    def resetTextDefinedSize (self)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAltSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setAlternatePrefix (self, val : str)-> None :
      '''                             '''
    ...
    def setAlternateSuffix (self, val : str)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setArrowFirstIsFlipped (self, val : bool)-> None :
      '''                             '''
    ...
    def setArrowSecondIsFlipped (self, val : bool)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setCenter (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setChordPoint (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setConstraintDynamic (self, val : bool)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setDimBlockId (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimBlockPosition (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setDimExt1Linetype (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimExt2Linetype (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimLineLinetype (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimensionStyle (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimensionText (self, val : str)-> None :
      '''                             '''
    ...

    @overload
    def setDimstyleData (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def setDimstyleData (self, rec: PyDb.DimStyleTableRecord)-> None : ...
    def setDimstyleData (self, *args, **kwargs)-> None :
      '''Overloads:
    - id: PyDb.ObjectId
    - rec: PyDb.DimStyleTableRecord
    '''
    ...
    def setDynamicDimension (self, val : bool)-> None :
      '''                             '''
    ...
    def setElevation (self, val : float)-> None :
      '''                             '''
    ...
    def setExtArcEndAngle (self, val : float)-> None :
      '''                             '''
    ...
    def setExtArcStartAngle (self, val : float)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setHorizontalRefTextRotation (self, val : bool)-> None :
      '''                             '''
    ...
    def setHorizontalRotation (self, val : float)-> None :
      '''                             '''
    ...
    def setInspection (self, val : bool)-> None :
      '''                             '''
    ...
    def setInspectionFrame (self, val : int)-> None :
      '''                             '''
    ...
    def setInspectionLabel (self, val : str)-> None :
      '''                             '''
    ...
    def setJogAngle (self, val : float)-> None :
      '''                             '''
    ...
    def setJogPoint (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setJogPointPP (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self, val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOverrideCenter (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setOverrideCenterPP (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, val : str)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setShouldParticipateInOPM (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuffix (self, val : str)-> None :
      '''                             '''
    ...
    def setSuppressAngularTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setTextAttachment (self, val : PyDb.MTextAttachmentPoint)-> None :
      '''                             '''
    ...
    def setTextDefinedSize (self, width : float, height : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingFactor (self, val : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingStyle (self, val : PyDb.LineSpacingStyle)-> None :
      '''                             '''
    ...
    def setTextPosition (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setTextPositionPP (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setTextRotation (self, val : float)-> None :
      '''                             '''
    ...
    def setToleranceSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setUsingDefaultTextPosition (self, val : bool)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def shouldParticipateInOPM (self)-> bool :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def suffix (self)-> str :
      '''                             '''
    ...
    def suppressAngularLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressAngularTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def suppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAttachment (self)-> PyDb.MTextAttachmentPoint :
      '''                             '''
    ...
    def textDefinedSize (self)-> tuple :
      '''                             '''
    ...
    def textLineSpacingFactor (self)-> float :
      '''                             '''
    ...
    def textLineSpacingStyle (self)-> PyDb.LineSpacingStyle :
      '''                             '''
    ...
    def textPosition (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def textRotation (self)-> float :
      '''                             '''
    ...
    def toleranceSuppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def toleranceSuppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def useDefaultTextPosition (self)-> None :
      '''                             '''
    ...
    def useSetTextPosition (self)-> None :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class RasterImage(Image):
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode.kForRead)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def brightness (self)-> int :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.RasterImage :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def clipBoundary (self)-> list :
      '''                             '''
    ...
    def clipBoundaryType (self)-> PyDb.ClipBoundaryType :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.RasterImage :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def contrast (self)-> int :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def fade (self)-> int :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getOrientation (self)-> tuple :
      '''                             '''
    ...
    def getPixelToModelTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def getVertices (self)-> list :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def height (self)-> float :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def imageDefId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def imageHeight (self)-> float :
      '''                             '''
    ...
    def imageSize (self, val: bool=True)-> PyGe.Vector2d :
      '''                             '''
    ...
    def imageWidth (self)-> float :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isClipInverted (self)-> bool :
      '''                             '''
    ...
    def isClipped (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isImageShown (self)-> bool :
      '''                             '''
    ...
    def isImageTransparent (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isSetDisplayOpt (self, val: PyDb.ImageDisplayOpt)-> bool :
      '''                             '''
    ...
    def isShownClipped (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def position (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def reactorId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self)-> float :
      '''                             '''
    ...
    def scale (self)-> PyGe.Vector2d :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBrightness (self, val: int)-> None :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setClipBoundaryToWholeImage (self, vec: PyGe.Vector2d)-> None :
      '''                             '''
    ...
    def setClipInverted (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setContrast (self, val: int)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setDisplayOpt (self, opt: PyDb.ImageDisplayOpt, val: bool)-> None :
      '''                             '''
    ...
    def setFade (self, val: int)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setHeight (self, val: float)-> None :
      '''                             '''
    ...
    def setImageDefId (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setImageTransparency (self, *args, **kwargs)-> None :
      '''setImageTransparency( (RasterImage)arg1, (bool)arg2) -> None :

    C++ signature :
        void setImageTransparency(class PyDbRasterImage {lvalue},bool)'''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOrientation (self, pt: PyGe.Point3d, u: PyGe.Vector3d, v: PyGe.Vector3d)-> bool :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReactorId (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setRotation (self, val: float)-> None :
      '''                             '''
    ...
    def setShowClipped (self, val: bool)-> None :
      '''                             '''
    ...
    def setShowImage (self, val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setWidth (self, val: float)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def width (self)-> float :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class RasterImageDef(DbObject):
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode.kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def activeFileName (self)-> str :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.RasterImageDef :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.RasterImageDef :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...

    @staticmethod
    def createImageDictionary (db: PyDb.Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def embed (self)-> None :
      '''                             '''
    ...
    def entityCount (self)-> int :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def fileType (self)-> str :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...

    @staticmethod
    def imageDictionary (db: PyDb.Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEmbedded (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isLoaded (self)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def load (self)-> None :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def resolutionMMPerPixel (self)-> PyGe.Vector2d :
      '''                             '''
    ...
    def resolutionUnits (self)-> PyDb.ImageUnits :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def searchForActivePath (self)-> str :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setActiveFileName (self, val: str)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setResolutionMMPerPixel (self, vec: PyGe.Vector2d)-> None :
      '''                             '''
    ...
    def setResolutionUnits (self, val: PyDb.ImageUnits)-> None :
      '''                             '''
    ...
    def setSourceFileName (self, val: str)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def size (self)-> PyGe.Vector2d :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def sourceFileName (self)-> str :
      '''                             '''
    ...

    @staticmethod
    def suggestName (db: PyDb.Dictionary,name: str)-> str :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def unload (self, val: bool=True)-> None :
      '''                             '''
    ...
    def updateEntities (self)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class RasterImageDefReactor(DbObject):
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode.kForRead)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.RasterImageDefReactor :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.RasterImageDefReactor :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...

    @staticmethod
    def setEnable (val: bool)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class RegAppTable(SymbolTable):
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode=PyDb.OpenMode.kForRead)-> None :
      '''                             '''
    ...
    def add (self, val: PyDb.RegAppTableRecord)-> PyDb.ObjectId :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.RegAppTable :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.RegAppTable :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getAt (self, val: str)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has (self, val: str|PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def recordIds (self)-> list :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def toDict (self)-> dict :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class RegAppTableRecord(SymbolTableRecord):
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode.kForRead)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.RegAppTableRecord :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.RegAppTableRecord :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getName (self)-> str :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isDependent (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isRenamable (self)-> bool :
      '''                             '''
    ...
    def isResolved (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def name (self)-> str :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setName (self, name: str)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class Region(Entity):
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode=PyDb.OpenMode.kForRead)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Region :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Region :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...

    @staticmethod
    def createFromCurves (curves: PyDb.Curve)-> list :
      '''                             '''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNull (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class RemapFileContext(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kAfterXrefResolution (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDrawingOpen (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kRasterResolution (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kXrefResolution (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class ReservedStringEnumType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kByBlock (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kByColor (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kByLayer (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kContinuous (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kData (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDefPoints (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDefault (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kGlobal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHeader (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMissing (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kModel (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNormal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kReservedStringCount (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kStandard (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTitle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVS2DWireframe (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVS3DHidden (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVS3DWireframe (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVSConceptual (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVSRealistic (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVSShaded (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVSShadedWithEdges (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVSShadesOfGray (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVSSketchy (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVSXRay (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class RevolveOptions(object):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def checkRevolveCurve (self, *args, **kwargs)-> tuple :
      '''checkRevolveCurve( (RevolveOptions)arg1, (Entity)arg2, (Point3d)arg3, (Vector3d)arg4) -> tuple :

    C++ signature :
        class boost::python::tuple checkRevolveCurve(class PyDbRevolveOptions {lvalue},class PyDbEntity {lvalue},class AcGePoint3d,class AcGeVector3d)

checkRevolveCurve( (RevolveOptions)arg1, (Entity)arg2, (Point3d)arg3, (Vector3d)arg4, (bool)arg5) -> tuple :

    C++ signature :
        class boost::python::tuple checkRevolveCurve(class PyDbRevolveOptions {lvalue},class PyDbEntity {lvalue},class AcGePoint3d,class AcGeVector3d,bool)'''
    ...
    def closeToAxis (self, *args, **kwargs)-> bool :
      '''closeToAxis( (RevolveOptions)arg1) -> bool :

    C++ signature :
        bool closeToAxis(class PyDbRevolveOptions {lvalue})'''
    ...
    def draftAngle (self, *args, **kwargs)-> float :
      '''draftAngle( (RevolveOptions)arg1) -> float :

    C++ signature :
        double draftAngle(class PyDbRevolveOptions {lvalue})'''
    ...
    def setCloseToAxis (self, *args, **kwargs)-> None :
      '''setCloseToAxis( (RevolveOptions)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCloseToAxis(class PyDbRevolveOptions {lvalue},bool)'''
    ...
    def setDraftAngle (self, *args, **kwargs)-> None :
      '''setDraftAngle( (RevolveOptions)arg1, (float)arg2) -> None :

    C++ signature :
        void setDraftAngle(class PyDbRevolveOptions {lvalue},double)'''
    ...
    def setTwistAngle (self, *args, **kwargs)-> None :
      '''setTwistAngle( (RevolveOptions)arg1, (float)arg2) -> None :

    C++ signature :
        void setTwistAngle(class PyDbRevolveOptions {lvalue},double)'''
    ...
    def twistAngle (self, *args, **kwargs)-> float :
      '''twistAngle( (RevolveOptions)arg1) -> float :

    C++ signature :
        double twistAngle(class PyDbRevolveOptions {lvalue})'''
    ...

class RevolvedSurface(Surface):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...
    def cast (self, *args, **kwargs)-> PyDb.RevolvedSurface :
      '''cast( (RxObject)arg1) -> RevolvedSurface :

    C++ signature :
        class PyDbRevolvedSurface cast(class PyRxObject)'''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.RevolvedSurface :
      '''cloneFrom( (RxObject)arg1) -> RevolvedSurface :

    C++ signature :
        class PyDbRevolvedSurface cloneFrom(class PyRxObject)'''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def createExtrudedSurface (self, *args, **kwargs)-> PyDb.ExtrudedSurface :
      '''createExtrudedSurface( (Profile3d)arg1, (Vector3d)arg2, (SweepOptions)arg3) -> ExtrudedSurface :

    C++ signature :
        class PyDbExtrudedSurface createExtrudedSurface(class PyDb3dProfile {lvalue},class AcGeVector3d,class PyDbSweepOptions {lvalue})'''
    ...
    def createFrom (self, *args, **kwargs)-> PyDb.Surface :
      '''createFrom( (Entity)arg1) -> Surface :

    C++ signature :
        class PyDbSurface createFrom(class PyDbEntity)'''
    ...
    def creationActionBodyId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''creationActionBodyId( (Surface)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId creationActionBodyId(class PyDbSurface {lvalue})'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extendEdges (self, *args, **kwargs)-> None :
      '''extendEdges( (Surface)arg1, (list)arg2, (float)arg3, (SurfaceEdgeExtensionType)arg4, (bool)arg5) -> None :

    C++ signature :
        void extendEdges(class PyDbSurface {lvalue},class boost::python::list {lvalue},double,enum AcDbSurface::EdgeExtensionType,bool)'''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getArea (self, *args, **kwargs)-> float :
      '''getArea( (Surface)arg1) -> float :

    C++ signature :
        double getArea(class PyDbSurface {lvalue})'''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPerimeter (self, *args, **kwargs)-> float :
      '''getPerimeter( (Surface)arg1) -> float :

    C++ signature :
        double getPerimeter(class PyDbSurface {lvalue})'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def getWireframeType (self, *args, **kwargs)-> PyDb.SurfaceWireframeType :
      '''getWireframeType( (Surface)arg1) -> SurfaceWireframeType :

    C++ signature :
        enum AcDbSurface::WireframeType getWireframeType(class PyDbSurface {lvalue})'''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def modificationActionBodyIds (self, *args, **kwargs)-> list :
      '''modificationActionBodyIds( (Surface)arg1) -> list :

    C++ signature :
        class boost::python::list modificationActionBodyIds(class PyDbSurface {lvalue})'''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def projectOnToSurface (self, *args, **kwargs)-> list :
      '''projectOnToSurface( (Surface)arg1, (Entity)arg2, (Vector3d)arg3) -> list :

    C++ signature :
        class boost::python::list projectOnToSurface(class PyDbSurface {lvalue},class PyDbEntity,class AcGeVector3d)'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def rayTest (self, *args, **kwargs)-> tuple :
      '''rayTest( (Surface)arg1, (Point3d)arg2, (Vector3d)arg3, (float)arg4) -> tuple :

    C++ signature :
        class boost::python::tuple rayTest(class PyDbSurface {lvalue},class AcGePoint3d,class AcGeVector3d,double)'''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setUIsolineDensity (self, *args, **kwargs)-> None :
      '''setUIsolineDensity( (Surface)arg1, (int)arg2) -> None :

    C++ signature :
        void setUIsolineDensity(class PyDbSurface {lvalue},unsigned short)'''
    ...
    def setVIsolineDensity (self, *args, **kwargs)-> None :
      '''setVIsolineDensity( (Surface)arg1, (int)arg2) -> None :

    C++ signature :
        void setVIsolineDensity(class PyDbSurface {lvalue},unsigned short)'''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setWireframeType (self, *args, **kwargs)-> None :
      '''setWireframeType( (Surface)arg1, (SurfaceWireframeType)arg2) -> None :

    C++ signature :
        void setWireframeType(class PyDbSurface {lvalue},enum AcDbSurface::WireframeType)'''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def uIsolineDensity (self, *args, **kwargs)-> int :
      '''uIsolineDensity( (Surface)arg1) -> int :

    C++ signature :
        unsigned short uIsolineDensity(class PyDbSurface {lvalue})'''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def vIsolineDensity (self, *args, **kwargs)-> int :
      '''vIsolineDensity( (Surface)arg1) -> int :

    C++ signature :
        unsigned short vIsolineDensity(class PyDbSurface {lvalue})'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class RotatedDimType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kParallel (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPerpendicular (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnknown (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class RotatedDimension(Dimension):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, rotation: float, xl1: PyGe.Point3d, xl2: PyGe.Point3d, dimLinePoint: PyGe.Point3d)-> None : ...
    @overload
    def __init__ (self, rotation: float, xl1: PyGe.Point3d, xl2: PyGe.Point3d, dimLinePoint: PyGe.Point3d, dimText: str)-> None : ...
    @overload
    def __init__ (self, rotation: float, xl1: PyGe.Point3d, xl2: PyGe.Point3d, dimLinePoint: PyGe.Point3d, dimText: str, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - rotation: float, xl1: PyGe.Point3d, xl2: PyGe.Point3d, dimLinePoint: PyGe.Point3d
    - rotation: float, xl1: PyGe.Point3d, xl2: PyGe.Point3d, dimLinePoint: PyGe.Point3d, dimText: str
    - rotation: float, xl1: PyGe.Point3d, xl2: PyGe.Point3d, dimLinePoint: PyGe.Point3d, dimText: str, id: PyDb.ObjectId
    - id: PyDb.ObjectId
    - id: PyDb.ObjectId, mode: PyDb.OpenMode
    - id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool
    '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def altSuppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def altSuppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def altSuppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def altSuppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def altToleranceSuppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def alternatePrefix (self)-> str :
      '''                             '''
    ...
    def alternateSuffix (self)-> str :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.RotatedDimension :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...
    def centerMarkSize (self)-> float :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.RotatedDimension :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dimBlockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimBlockPosition (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def dimExt1Linetype (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimExt2Linetype (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimLineLinetype (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimLinePoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def dimensionStyle (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def dimensionText (self)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevation (self)-> float :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def fieldFromMText (self, ref : PyDb.MText)-> None :
      '''                             '''
    ...
    def fieldToMText (self, ref : PyDb.MText)-> None :
      '''                             '''
    ...

    @overload
    def formatMeasurement (self, measurement: float)-> str : ...
    @overload
    def formatMeasurement (self, measurement: float, dimensionText: str)-> str : ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''Overloads:
    - measurement: float
    - measurement: float, dimensionText: str
    '''
    ...
    def generateLayout (self)-> None :
      '''                             '''
    ...
    def getArrowFirstIsFlipped (self)-> bool :
      '''                             '''
    ...
    def getArrowSecondIsFlipped (self)-> bool :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDimstyleData (self)-> PyDb.DimStyleTableRecord :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def horizontalRotation (self)-> float :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def inspection (self)-> bool :
      '''                             '''
    ...
    def inspectionFrame (self)-> int :
      '''                             '''
    ...
    def inspectionLabel (self)-> str :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self)-> bool :
      '''                             '''
    ...
    def isConstraintObject (self)-> tuple :
      '''                             '''
    ...
    def isDynamicDimension (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def jogSymbolOn (self)-> bool :
      '''                             '''
    ...
    def jogSymbolPosition (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def measurement (self)-> float :
      '''                             '''
    ...
    def normal (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def oblique (self)-> float :
      '''                             '''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def prefix (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recomputeDimBlock (self, force : bool=False)-> None :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def removeTextField (self)-> None :
      '''                             '''
    ...
    def resetTextDefinedSize (self)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self)-> float :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAltSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setAltToleranceSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setAlternatePrefix (self, val : str)-> None :
      '''                             '''
    ...
    def setAlternateSuffix (self, val : str)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setArrowFirstIsFlipped (self, val : bool)-> None :
      '''                             '''
    ...
    def setArrowSecondIsFlipped (self, val : bool)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setConstraintDynamic (self, val : bool)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setDimBlockId (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimBlockPosition (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setDimExt1Linetype (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimExt2Linetype (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimLineLinetype (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimLinePoint (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setDimensionStyle (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setDimensionText (self, val : str)-> None :
      '''                             '''
    ...

    @overload
    def setDimstyleData (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def setDimstyleData (self, rec: PyDb.DimStyleTableRecord)-> None : ...
    def setDimstyleData (self, *args, **kwargs)-> None :
      '''Overloads:
    - id: PyDb.ObjectId
    - rec: PyDb.DimStyleTableRecord
    '''
    ...
    def setDynamicDimension (self, val : bool)-> None :
      '''                             '''
    ...
    def setElevation (self, val : float)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setHorizontalRefTextRotation (self, val : bool)-> None :
      '''                             '''
    ...
    def setHorizontalRotation (self, val : float)-> None :
      '''                             '''
    ...
    def setInspection (self, val : bool)-> None :
      '''                             '''
    ...
    def setInspectionFrame (self, val : int)-> None :
      '''                             '''
    ...
    def setInspectionLabel (self, val : str)-> None :
      '''                             '''
    ...
    def setJogSymbolOn (self, val : bool)-> None :
      '''                             '''
    ...
    def setJogSymbolPosition (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self, val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOblique (self, val : float)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, val : str)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setRotation (self, val : float)-> None :
      '''                             '''
    ...
    def setShouldParticipateInOPM (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuffix (self, val : str)-> None :
      '''                             '''
    ...
    def setSuppressAngularTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setTextAttachment (self, val : PyDb.MTextAttachmentPoint)-> None :
      '''                             '''
    ...
    def setTextDefinedSize (self, width : float, height : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingFactor (self, val : float)-> None :
      '''                             '''
    ...
    def setTextLineSpacingStyle (self, val : PyDb.LineSpacingStyle)-> None :
      '''                             '''
    ...
    def setTextPosition (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setTextRotation (self, val : float)-> None :
      '''                             '''
    ...
    def setToleranceSuppressLeadingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressTrailingZeros (self, val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroFeet (self, val : bool)-> None :
      '''                             '''
    ...
    def setToleranceSuppressZeroInches (self, val : bool)-> None :
      '''                             '''
    ...
    def setUsingDefaultTextPosition (self, val : bool)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def setXLine1Point (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setXLine2Point (self, pt : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def shouldParticipateInOPM (self)-> bool :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def suffix (self)-> str :
      '''                             '''
    ...
    def suppressAngularLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressAngularTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def suppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def suppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textAttachment (self)-> PyDb.MTextAttachmentPoint :
      '''                             '''
    ...
    def textDefinedSize (self)-> tuple :
      '''                             '''
    ...
    def textLineSpacingFactor (self)-> float :
      '''                             '''
    ...
    def textLineSpacingStyle (self)-> PyDb.LineSpacingStyle :
      '''                             '''
    ...
    def textPosition (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def textRotation (self)-> float :
      '''                             '''
    ...
    def toleranceSuppressLeadingZeros (self)-> bool :
      '''                             '''
    ...
    def toleranceSuppressTrailingZeros (self)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroFeet (self)-> bool :
      '''                             '''
    ...
    def toleranceSuppressZeroInches (self)-> bool :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def useDefaultTextPosition (self)-> None :
      '''                             '''
    ...
    def useSetTextPosition (self)-> None :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xLine1Point (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def xLine2Point (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class RotationAngle(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kDegrees000 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDegrees090 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDegrees180 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDegrees270 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDegreesUnknown (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class RowType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kAllRowTypes (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDataRow (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHeaderRow (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTitleRow (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnknownRow (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class SegType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kArc (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCoincident (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEmpty (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLine (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPoint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class SequenceEnd(Entity):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...
    def cast (self, *args, **kwargs)-> PyDb.SequenceEnd :
      '''cast( (RxObject)arg1) -> SequenceEnd :

    C++ signature :
        class PyDbSequenceEnd cast(class PyRxObject)'''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.SequenceEnd :
      '''cloneFrom( (RxObject)arg1) -> SequenceEnd :

    C++ signature :
        class PyDbSequenceEnd cloneFrom(class PyRxObject)'''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class ShadePlotResLevel(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kAsDisplayed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCustom (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMaximum (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNormal (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPresentation (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPreview (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class ShadePlotType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kAsDisplayed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHidden (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kRenderPreset (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kRendered (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVisualStyle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kWireframe (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class SnoopDwgFiler(object):
    def __init__ (self, filerType: PyDb.FilerType)-> None :
      '''                             '''
    ...
    def buffer (self)-> list :
      '''                             '''
    ...

class SoftOwnershipId(ObjectId):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)'''
    ...
    def asOldId (self)-> int :
      '''                             '''
    ...
    def convertToRedirectedId (self)-> bool :
      '''                             '''
    ...
    def database (self)-> PyDb.Database :
      '''                             '''
    ...

    @staticmethod
    def fromOldId (oldid : int)-> PyDb.ObjectId :
      '''                             '''
    ...
    def handle (self)-> PyDb.Handle :
      '''                             '''
    ...
    def isDerivedFrom (self, desc : PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isEffectivelyErased (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isNull (self)-> bool :
      '''                             '''
    ...
    def isResident (self)-> bool :
      '''                             '''
    ...
    def isValid (self)-> bool :
      '''                             '''
    ...
    def isWellBehaved (self)-> bool :
      '''                             '''
    ...
    def nonForwardedHandle (self)-> PyDb.Handle :
      '''                             '''
    ...
    def objectClass (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def objectLeftOnDisk (self)-> bool :
      '''                             '''
    ...
    def originalDatabase (self)-> PyDb.Database :
      '''                             '''
    ...
    def setFromOldId (self, oldid : int)-> None :
      '''                             '''
    ...

class SoftPointerId(ObjectId):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)'''
    ...
    def asOldId (self)-> int :
      '''                             '''
    ...
    def convertToRedirectedId (self)-> bool :
      '''                             '''
    ...
    def database (self)-> PyDb.Database :
      '''                             '''
    ...

    @staticmethod
    def fromOldId (oldid : int)-> PyDb.ObjectId :
      '''                             '''
    ...
    def handle (self)-> PyDb.Handle :
      '''                             '''
    ...
    def isDerivedFrom (self, desc : PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isEffectivelyErased (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isNull (self)-> bool :
      '''                             '''
    ...
    def isResident (self)-> bool :
      '''                             '''
    ...
    def isValid (self)-> bool :
      '''                             '''
    ...
    def isWellBehaved (self)-> bool :
      '''                             '''
    ...
    def nonForwardedHandle (self)-> PyDb.Handle :
      '''                             '''
    ...
    def objectClass (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def objectLeftOnDisk (self)-> bool :
      '''                             '''
    ...
    def originalDatabase (self)-> PyDb.Database :
      '''                             '''
    ...
    def setFromOldId (self, oldid : int)-> None :
      '''                             '''
    ...

class Solid3d(Entity):
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode=PyDb.OpenMode.kForRead)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def booleanOper (self, *args, **kwargs)-> None :
      '''booleanOper( (Solid3d)arg1, (BoolOperType)arg2, (Solid3d)arg3) -> None :

    C++ signature :
        void booleanOper(class PyDb3dSolid {lvalue},enum AcDb::BoolOperType,class PyDb3dSolid {lvalue})'''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...
    def cast (self, *args, **kwargs)-> PyDb.Solid3d :
      '''cast( (RxObject)arg1) -> Solid3d :

    C++ signature :
        class PyDb3dSolid cast(class PyRxObject)'''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...
    def chamferEdges (self, *args, **kwargs)-> None :
      '''chamferEdges( (Solid3d)arg1, (list)arg2, (SubentId)arg3, (float)arg4, (float)arg5) -> None :

    C++ signature :
        void chamferEdges(class PyDb3dSolid {lvalue},class boost::python::list,class PyDbSubentId,double,double)'''
    ...
    def checkInterference (self, *args, **kwargs)-> tuple :
      '''checkInterference( (Solid3d)arg1, (Solid3d)arg2, (bool)arg3) -> tuple :

    C++ signature :
        class boost::python::tuple checkInterference(class PyDb3dSolid {lvalue},class PyDb3dSolid,bool)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cleanBody (self, *args, **kwargs)-> None :
      '''cleanBody( (Solid3d)arg1) -> None :

    C++ signature :
        void cleanBody(class PyDb3dSolid {lvalue})'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.Solid3d :
      '''cloneFrom( (RxObject)arg1) -> Solid3d :

    C++ signature :
        class PyDb3dSolid cloneFrom(class PyRxObject)'''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyEdge (self, *args, **kwargs)-> PyDb.Entity :
      '''copyEdge( (Solid3d)arg1, (SubentId)arg2) -> Entity :

    C++ signature :
        class PyDbEntity copyEdge(class PyDb3dSolid {lvalue},class PyDbSubentId)'''
    ...
    def copyFace (self, *args, **kwargs)-> PyDb.Entity :
      '''copyFace( (Solid3d)arg1, (SubentId)arg2) -> Entity :

    C++ signature :
        class PyDbEntity copyFace(class PyDb3dSolid {lvalue},class PyDbSubentId)'''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createBox (self, *args, **kwargs)-> None :
      '''createBox( (Solid3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> None :

    C++ signature :
        void createBox(class PyDb3dSolid {lvalue},double,double,double)'''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def createExtrudedSolid (self, *args, **kwargs)-> None :
      '''createExtrudedSolid( (Solid3d)arg1, (Entity)arg2, (Vector3d)arg3, (SweepOptions)arg4) -> None :

    C++ signature :
        void createExtrudedSolid(class PyDb3dSolid {lvalue},class PyDbEntity {lvalue},class AcGeVector3d,class PyDbSweepOptions {lvalue})

createExtrudedSolid( (Solid3d)arg1, (Entity)arg2, (SubentId)arg3, (Vector3d)arg4, (SweepOptions)arg5) -> None :

    C++ signature :
        void createExtrudedSolid(class PyDb3dSolid {lvalue},class PyDbEntity {lvalue},class PyDbSubentId,class AcGeVector3d,class PyDbSweepOptions {lvalue})

createExtrudedSolid( (Solid3d)arg1, (Entity)arg2, (SubentId)arg3, (float)arg4, (SweepOptions)arg5) -> None :

    C++ signature :
        void createExtrudedSolid(class PyDb3dSolid {lvalue},class PyDbEntity {lvalue},class PyDbSubentId,double,class PyDbSweepOptions {lvalue})'''
    ...
    def createFrom (self, *args, **kwargs)-> None :
      '''createFrom( (Solid3d)arg1, (Entity)arg2) -> None :

    C++ signature :
        void createFrom(class PyDb3dSolid {lvalue},class PyDbEntity)'''
    ...
    def createFrustum (self, *args, **kwargs)-> None :
      '''createFrustum( (Solid3d)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> None :

    C++ signature :
        void createFrustum(class PyDb3dSolid {lvalue},double,double,double,double)'''
    ...
    def createPyramid (self, *args, **kwargs)-> None :
      '''createPyramid( (Solid3d)arg1, (float)arg2, (int)arg3, (float)arg4) -> None :

    C++ signature :
        void createPyramid(class PyDb3dSolid {lvalue},double,int,double)

createPyramid( (Solid3d)arg1, (float)arg2, (int)arg3, (float)arg4, (float)arg5) -> None :

    C++ signature :
        void createPyramid(class PyDb3dSolid {lvalue},double,int,double,double)'''
    ...
    def createRevolvedSolid (self, *args, **kwargs)-> None :
      '''createRevolvedSolid( (Solid3d)arg1, (Entity)arg2, (Point3d)arg3, (Vector3d)arg4, (float)arg5, (float)arg6, (RevolveOptions)arg7) -> None :

    C++ signature :
        void createRevolvedSolid(class PyDb3dSolid {lvalue},class PyDbEntity {lvalue},class AcGePoint3d,class AcGeVector3d,double,double,class PyDbRevolveOptions {lvalue})

createRevolvedSolid( (Solid3d)arg1, (Entity)arg2, (SubentId)arg3, (Point3d)arg4, (Vector3d)arg5, (float)arg6, (float)arg7, (RevolveOptions)arg8) -> None :

    C++ signature :
        void createRevolvedSolid(class PyDb3dSolid {lvalue},class PyDbEntity {lvalue},class PyDbSubentId,class AcGePoint3d,class AcGeVector3d,double,double,class PyDbRevolveOptions {lvalue})'''
    ...
    def createSculptedSolid (self, *args, **kwargs)-> None :
      '''createSculptedSolid( (Solid3d)arg1, (list)arg2, (list)arg3) -> None :

    C++ signature :
        void createSculptedSolid(class PyDb3dSolid {lvalue},class boost::python::list,class boost::python::list)'''
    ...
    def createSphere (self, *args, **kwargs)-> None :
      '''createSphere( (Solid3d)arg1, (float)arg2) -> None :

    C++ signature :
        void createSphere(class PyDb3dSolid {lvalue},double)'''
    ...
    def createSweptSolid (self, *args, **kwargs)-> None :
      '''createSweptSolid( (Solid3d)arg1, (Entity)arg2, (Entity)arg3, (SweepOptions)arg4) -> None :

    C++ signature :
        void createSweptSolid(class PyDb3dSolid {lvalue},class PyDbEntity {lvalue},class PyDbEntity {lvalue},class PyDbSweepOptions {lvalue})

createSweptSolid( (Solid3d)arg1, (Entity)arg2, (SubentId)arg3, (Entity)arg4, (SweepOptions)arg5) -> None :

    C++ signature :
        void createSweptSolid(class PyDb3dSolid {lvalue},class PyDbEntity {lvalue},class PyDbSubentId,class PyDbEntity {lvalue},class PyDbSweepOptions {lvalue})'''
    ...
    def createTorus (self, *args, **kwargs)-> None :
      '''createTorus( (Solid3d)arg1, (float)arg2, (float)arg3) -> None :

    C++ signature :
        void createTorus(class PyDb3dSolid {lvalue},double,double)'''
    ...
    def createWedge (self, *args, **kwargs)-> None :
      '''createWedge( (Solid3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> None :

    C++ signature :
        void createWedge(class PyDb3dSolid {lvalue},double,double,double)'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def extrude (self, *args, **kwargs)-> None :
      '''extrude( (Solid3d)arg1, (Region)arg2, (float)arg3) -> None :

    C++ signature :
        void extrude(class PyDb3dSolid {lvalue},class PyDbRegion,double)

extrude( (Solid3d)arg1, (Region)arg2, (float)arg3, (float)arg4) -> None :

    C++ signature :
        void extrude(class PyDb3dSolid {lvalue},class PyDbRegion,double,double)'''
    ...
    def extrudeAlongPath (self, *args, **kwargs)-> None :
      '''extrudeAlongPath( (Solid3d)arg1, (Region)arg2, (Curve)arg3) -> None :

    C++ signature :
        void extrudeAlongPath(class PyDb3dSolid {lvalue},class PyDbRegion,class PyDbCurve)

extrudeAlongPath( (Solid3d)arg1, (Region)arg2, (Curve)arg3, (float)arg4) -> None :

    C++ signature :
        void extrudeAlongPath(class PyDb3dSolid {lvalue},class PyDbRegion,class PyDbCurve,double)'''
    ...
    def extrudeFaces (self, *args, **kwargs)-> None :
      '''extrudeFaces( (Solid3d)arg1, (list)arg2, (float)arg3, (float)arg4) -> None :

    C++ signature :
        void extrudeFaces(class PyDb3dSolid {lvalue},class boost::python::list,double,double)'''
    ...
    def extrudeFacesAlongPath (self, *args, **kwargs)-> None :
      '''extrudeFacesAlongPath( (Solid3d)arg1, (list)arg2, (Curve)arg3) -> None :

    C++ signature :
        void extrudeFacesAlongPath(class PyDb3dSolid {lvalue},class boost::python::list {lvalue},class PyDbCurve)'''
    ...
    def filletEdges (self, *args, **kwargs)-> None :
      '''filletEdges( (Solid3d)arg1, (list)arg2, (list)arg3, (list)arg4, (list)arg5) -> None :

    C++ signature :
        void filletEdges(class PyDb3dSolid {lvalue},class boost::python::list,class boost::python::list {lvalue},class boost::python::list {lvalue},class boost::python::list {lvalue})'''
    ...
    def getArea (self, *args, **kwargs)-> float :
      '''getArea( (Solid3d)arg1) -> float :

    C++ signature :
        double getArea(class PyDb3dSolid {lvalue})'''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getMassProp (self, *args, **kwargs)-> tuple :
      '''getMassProp( (Solid3d)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getMassProp(class PyDb3dSolid {lvalue})'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getSection (self, *args, **kwargs)-> PyDb.Region :
      '''getSection( (Solid3d)arg1, (Plane)arg2) -> Region :

    C++ signature :
        class PyDbRegion getSection(class PyDb3dSolid {lvalue},class PyGePlane)'''
    ...
    def getSlice (self, *args, **kwargs)-> PyDb.Solid3d :
      '''getSlice( (Solid3d)arg1, (Plane)arg2, (bool)arg3) -> Solid3d :

    C++ signature :
        class PyDb3dSolid getSlice(class PyDb3dSolid {lvalue},class PyGePlane,bool)

getSlice( (Solid3d)arg1, (Surface)arg2, (bool)arg3) -> Solid3d :

    C++ signature :
        class PyDb3dSolid getSlice(class PyDb3dSolid {lvalue},class PyDbSurface,bool)'''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentColor (self, *args, **kwargs)-> PyDb.Color :
      '''getSubentColor( (Solid3d)arg1, (SubentId)arg2) -> Color :

    C++ signature :
        class AcCmColor getSubentColor(class PyDb3dSolid {lvalue},class PyDbSubentId)'''
    ...
    def getSubentMaterial (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getSubentMaterial( (Solid3d)arg1, (SubentId)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getSubentMaterial(class PyDb3dSolid {lvalue},class PyDbSubentId)'''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def imprintEntity (self, *args, **kwargs)-> None :
      '''imprintEntity( (Solid3d)arg1, (Entity)arg2) -> None :

    C++ signature :
        void imprintEntity(class PyDb3dSolid {lvalue},class PyDbEntity)'''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (Solid3d)arg1) -> bool :

    C++ signature :
        bool isNull(class PyDb3dSolid {lvalue})'''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def numChanges (self, *args, **kwargs)-> int :
      '''numChanges( (Solid3d)arg1) -> int :

    C++ signature :
        unsigned int numChanges(class PyDb3dSolid {lvalue})'''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def offsetBody (self, *args, **kwargs)-> None :
      '''offsetBody( (Solid3d)arg1, (float)arg2) -> None :

    C++ signature :
        void offsetBody(class PyDb3dSolid {lvalue},double)'''
    ...
    def offsetFaces (self, *args, **kwargs)-> None :
      '''offsetFaces( (Solid3d)arg1, (list)arg2, (float)arg3) -> None :

    C++ signature :
        void offsetFaces(class PyDb3dSolid {lvalue},class boost::python::list,double)'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def projectOnToSolid (self, *args, **kwargs)-> list :
      '''projectOnToSolid( (Solid3d)arg1, (Entity)arg2, (Vector3d)arg3) -> list :

    C++ signature :
        class boost::python::list projectOnToSolid(class PyDb3dSolid {lvalue},class PyDbEntity,class AcGeVector3d)'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def recordHistory (self, *args, **kwargs)-> bool :
      '''recordHistory( (Solid3d)arg1) -> bool :

    C++ signature :
        bool recordHistory(class PyDb3dSolid {lvalue})'''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeFaces (self, *args, **kwargs)-> None :
      '''removeFaces( (Solid3d)arg1, (list)arg2) -> None :

    C++ signature :
        void removeFaces(class PyDb3dSolid {lvalue},class boost::python::list)'''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def separateBody (self, *args, **kwargs)-> list :
      '''separateBody( (Solid3d)arg1) -> list :

    C++ signature :
        class boost::python::list separateBody(class PyDb3dSolid {lvalue})'''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setRecordHistory (self, *args, **kwargs)-> None :
      '''setRecordHistory( (Solid3d)arg1, (bool)arg2) -> None :

    C++ signature :
        void setRecordHistory(class PyDb3dSolid {lvalue},bool)'''
    ...
    def setShowHistory (self, *args, **kwargs)-> None :
      '''setShowHistory( (Solid3d)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShowHistory(class PyDb3dSolid {lvalue},bool)'''
    ...
    def setSubentColor (self, *args, **kwargs)-> None :
      '''setSubentColor( (Solid3d)arg1, (SubentId)arg2, (Color)arg3) -> None :

    C++ signature :
        void setSubentColor(class PyDb3dSolid {lvalue},class PyDbSubentId,class AcCmColor)'''
    ...
    def setSubentMaterial (self, *args, **kwargs)-> None :
      '''setSubentMaterial( (Solid3d)arg1, (SubentId)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void setSubentMaterial(class PyDb3dSolid {lvalue},class PyDbSubentId,class PyDbObjectId)'''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def shellBody (self, *args, **kwargs)-> None :
      '''shellBody( (Solid3d)arg1, (list)arg2, (float)arg3) -> None :

    C++ signature :
        void shellBody(class PyDb3dSolid {lvalue},class boost::python::list,double)'''
    ...
    def showHistory (self, *args, **kwargs)-> bool :
      '''showHistory( (Solid3d)arg1) -> bool :

    C++ signature :
        bool showHistory(class PyDb3dSolid {lvalue})'''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def stlOut (self, *args, **kwargs)-> None :
      '''stlOut( (Solid3d)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void stlOut(class PyDb3dSolid {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

stlOut( (Solid3d)arg1, (str)arg2, (bool)arg3, (float)arg4) -> None :

    C++ signature :
        void stlOut(class PyDb3dSolid {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,double)'''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def taperFaces (self, *args, **kwargs)-> None :
      '''taperFaces( (Solid3d)arg1, (list)arg2, (Point3d)arg3, (Vector3d)arg4, (float)arg5) -> None :

    C++ signature :
        void taperFaces(class PyDb3dSolid {lvalue},class boost::python::list,class AcGePoint3d,class AcGeVector3d,double)'''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def transformFaces (self, *args, **kwargs)-> None :
      '''transformFaces( (Solid3d)arg1, (list)arg2, (Matrix3d)arg3) -> None :

    C++ signature :
        void transformFaces(class PyDb3dSolid {lvalue},class boost::python::list,class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def usesGraphicsCache (self, *args, **kwargs)-> bool :
      '''usesGraphicsCache( (Solid3d)arg1) -> bool :

    C++ signature :
        bool usesGraphicsCache(class PyDb3dSolid {lvalue})'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class SpatialFilter(DbObject):
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode.kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.SpatialFilter :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def clipVolumeIntersectsExtents (self, val : PyDb.Extents)-> bool :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.SpatialFilter :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getClipSpaceToWCSMatrix (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDefinition (self)-> tuple :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getOriginalInverseBlockXform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getVolume (self)-> tuple :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasPerspectiveCamera (self)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def indexClass (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isInverted (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def queryBounds (self, ref : PyDb.BlockReference=None)-> PyDb.Extents :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setDefinition (self, pnt2d: list[PyGe.Point2d], normal: PyGe.Vector3d, elev: float, frontclip: float, backclip: float, enabled: bool)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setInverted (self, val : bool)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPerspectiveCamera (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class Spline(Curve):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool)-> None : ...
    @overload
    def __init__ (self, idfitPoints: list[PyGe.Point3d])-> None : ...
    @overload
    def __init__ (self, idfitPoints: list[PyGe.Point3d], order: int, fitTolerance: float)-> None : ...
    @overload
    def __init__ (self, idfitPoints: list[PyGe.Point3d], startTangent: PyGe.Vector3d, endTangent: PyGe.Vector3d)-> None : ...
    @overload
    def __init__ (self, idfitPoints: list[PyGe.Point3d], startTangent: PyGe.Vector3d, endTangent: PyGe.Vector3d, order: int, fitTolerance: float)-> None : ...
    @overload
    def __init__ (self, idfitPoints: list[PyGe.Point3d], periodic: bool)-> None : ...
    @overload
    def __init__ (self, idfitPoints: list[PyGe.Point3d], periodic: bool, knotParam: PyGe.KnotParameterization, order: int, fitTolerance: float)-> None : ...
    @overload
    def __init__ (self, idfitPoints: list[PyGe.Point3d], startTangent: PyGe.Vector3d, endTangent: PyGe.Vector3d, knotParam: PyGe.KnotParameterization)-> None : ...
    @overload
    def __init__ (self, idfitPoints: list[PyGe.Point3d], startTangent: PyGe.Vector3d, endTangent: PyGe.Vector3d, knotParam: PyGe.KnotParameterization, order: int, fitTolerance: float)-> None : ...
    @overload
    def __init__ (self, degree: int, rational: bool, closed: bool, periodic: bool, controlPoints: list[PyGe.Point3d], knots: list[float], weights: list[float])-> None : ...
    @overload
    def __init__ (self, degree: int, rational: bool, closed: bool, periodic: bool, controlPoints: list[PyGe.Point3d], knots: list[float], weights: list[float], controlPtTol: float, knotTol: float)-> None : ...
    @overload
    def __init__ (self, center: PyGe.Point3d, unitNormal: PyGe.Vector3d, majorAxis: PyGe.Vector3d, radiusRatioL: float)-> None : ...
    @overload
    def __init__ (self, center: PyGe.Point3d, unitNormal: PyGe.Vector3d, majorAxis: PyGe.Vector3d, radiusRatioL: float, startAngle: float, endAngle: float)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - id: PyDb.ObjectId
    - id: PyDb.ObjectId, mode: PyDb.OpenMode
    - id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool
    - idfitPoints: list[PyGe.Point3d]
    - idfitPoints: list[PyGe.Point3d], order: int, fitTolerance: float
    - idfitPoints: list[PyGe.Point3d], startTangent: PyGe.Vector3d, endTangent: PyGe.Vector3d
    - idfitPoints: list[PyGe.Point3d], startTangent: PyGe.Vector3d, endTangent: PyGe.Vector3d, order: int, fitTolerance: float
    - idfitPoints: list[PyGe.Point3d], periodic: bool
    - idfitPoints: list[PyGe.Point3d], periodic: bool, knotParam: PyGe.KnotParameterization, order: int, fitTolerance: float
    - idfitPoints: list[PyGe.Point3d], startTangent: PyGe.Vector3d, endTangent: PyGe.Vector3d, knotParam: PyGe.KnotParameterization
    - idfitPoints: list[PyGe.Point3d], startTangent: PyGe.Vector3d, endTangent: PyGe.Vector3d, knotParam: PyGe.KnotParameterization, order: int, fitTolerance: float
    - degree: int, rational: bool, closed: bool, periodic: bool, controlPoints: list[PyGe.Point3d], knots: list[float], weights: list[float]
    - degree: int, rational: bool, closed: bool, periodic: bool, controlPoints: list[PyGe.Point3d], knots: list[float], weights: list[float], controlPtTol: float, knotTol: float
    - center: PyGe.Point3d, unitNormal: PyGe.Vector3d, majorAxis: PyGe.Vector3d, radiusRatioL: float
    - center: PyGe.Point3d, unitNormal: PyGe.Vector3d, majorAxis: PyGe.Vector3d, radiusRatioL: float, startAngle: float, endAngle: float
    '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Spline :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Spline :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...

    @staticmethod
    def createFromAcGeCurve (curve: PyGe.Curve3d,normal: PyGe.Vector3d = PyGe.Vector3d.kZAxis,tol: PyGe.Tol = 'default')-> PyDb.Curve :
      '''                             '''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def degree (self)-> int :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevateDegree (self, val : int)-> None :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> None :
      '''extend( (Curve)arg1, (float)arg2) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def fitTolerance (self)-> float :
      '''                             '''
    ...
    def getAcGeCurve (self, tol: PyGe.Tol = 'default')-> PyGe.Curve3d :
      '''                             '''
    ...
    def getArea (self)-> float :
      '''                             '''
    ...
    def getClosestPointTo (self, point3d: PyGe.Point3d, direction: PyGe.Vector3d=None, extend: bool=False)-> PyGe.Point3d :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getControlPointAt (self, idx:int)-> PyGe.Point3d :
      '''                             '''
    ...
    def getDistAtParam (self, param: float)-> float :
      '''                             '''
    ...
    def getDistAtPoint (self, point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEndParam (self)-> float :
      '''                             '''
    ...
    def getEndPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self, param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getFitData (self)-> tuple :
      '''                             '''
    ...
    def getFitDataKnot (self)-> tuple :
      '''                             '''
    ...
    def getFitPointAt (self, idx:int)-> PyGe.Point3d :
      '''                             '''
    ...
    def getFitTangents (self)-> tuple :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getNurbsData (self)-> tuple :
      '''                             '''
    ...
    def getOffsetCurves (self, dist: float)-> list :
      '''                             '''
    ...
    def getOffsetCurvesGivenPlaneNormal (self, *args, **kwargs)-> list :
      '''getOffsetCurvesGivenPlaneNormal( (Spline)arg1, (Vector3d)arg2, (float)arg3) -> list :

    C++ signature :
        class boost::python::list getOffsetCurvesGivenPlaneNormal(class PyDbSpline {lvalue},class AcGeVector3d,double)'''
    ...
    def getOrthoProjectedCurve (self, plane: PyGe.Plane)-> PyDb.Curve :
      '''                             '''
    ...
    def getParamAtDist (self, dist: float)-> float :
      '''                             '''
    ...
    def getParamAtPoint (self, point3d: PyGe.Point3d)-> float :
      '''                             '''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getPointAtDist (self, dist: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getPointAtParam (self, param: float)-> PyGe.Point3d :
      '''                             '''
    ...
    def getProjectedCurve (self, plane: PyGe.Plane, projDir: PyGe.Vector3d)-> PyDb.Curve :
      '''                             '''
    ...
    def getSecondDeriv (self, param: float|PyGe.Point3d)-> PyGe.Vector3d :
      '''                             '''
    ...
    def getSpline (self)-> PyDb.Spline :
      '''                             '''
    ...
    def getSplitCurves (self, paramsOrPoints: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParam (self, param: float)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtParams (self, params: list)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoint (self, point: PyGe.Point3d)-> list :
      '''                             '''
    ...
    def getSplitCurvesAtPoints (self, points: list)-> list :
      '''                             '''
    ...
    def getStartParam (self)-> float :
      '''                             '''
    ...
    def getStartPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasFitData (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def insertControlPointAt (self, knotParam: int, ctrlPt: PyGe.Point3d)-> None : ...
    @overload
    def insertControlPointAt (self, knotParam: int, ctrlPt: PyGe.Point3d,weight: float)-> None : ...
    def insertControlPointAt (self, *args, **kwargs)-> None :
      '''Overloads:
    - knotParam: int, ctrlPt: PyGe.Point3d
    - knotParam: int, ctrlPt: PyGe.Point3d,weight: float
    '''
    ...
    def insertFitPointAt (self, idx:int, pnt:PyGe.Point3d)-> None :
      '''                             '''
    ...
    def insertKnot (self, val : float)-> None :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isClosed (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNull (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPeriodic (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isRational (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def numControlPoints (self)-> int :
      '''                             '''
    ...
    def numFitPoints (self)-> int :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def purgeFitData (self)-> None :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def rebuild (self, degree: int, numPnts: int)-> None :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeControlPointAt (self, val : int)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeFitPointAt (self, idx:int)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def reverseCurve (self)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setControlPointAt (self, idx:int, pnt:PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setFitData (self, *args, **kwargs)-> None :
      '''setFitData( (Spline)arg1, (list)arg2, (int)arg3, (float)arg4, (Vector3d)arg5, (Vector3d)arg6) -> None :

    C++ signature :
        void setFitData(class PyDbSpline {lvalue},class boost::python::list,int,double,class AcGeVector3d,class AcGeVector3d)'''
    ...

    @overload
    def setFitDataKnot (self, idfitPoints: list[PyGe.Point3d], periodic: bool, knotParam: PyGe.KnotParameterization)-> None : ...
    @overload
    def setFitDataKnot (self, idfitPoints: list[PyGe.Point3d], periodic: bool, knotParam: PyGe.KnotParameterization, degree: int, fitTolerance: float)-> None : ...
    @overload
    def setFitDataKnot (self, idfitPoints: list[PyGe.Point3d], startTangent: PyGe.Vector3d, endTangent: PyGe.Vector3d, knotParam: PyGe.KnotParameterization)-> None : ...
    @overload
    def setFitDataKnot (self, idfitPoints: list[PyGe.Point3d], startTangent: PyGe.Vector3d, endTangent: PyGe.Vector3d, knotParam: PyGe.KnotParameterization, order: int, fitTolerance: float)-> None : ...
    def setFitDataKnot (self, *args, **kwargs)-> None :
      '''Overloads:
    - idfitPoints: list[PyGe.Point3d], periodic: bool, knotParam: PyGe.KnotParameterization
    - idfitPoints: list[PyGe.Point3d], periodic: bool, knotParam: PyGe.KnotParameterization, degree: int, fitTolerance: float
    - idfitPoints: list[PyGe.Point3d], startTangent: PyGe.Vector3d, endTangent: PyGe.Vector3d, knotParam: PyGe.KnotParameterization
    - idfitPoints: list[PyGe.Point3d], startTangent: PyGe.Vector3d, endTangent: PyGe.Vector3d, knotParam: PyGe.KnotParameterization, order: int, fitTolerance: float
    '''
    ...
    def setFitPointAt (self, idx:int, pnt:PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setFitTangents (self, start : PyGe.Vector3d, end : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setFitTol (self, val : float)-> None :
      '''                             '''
    ...
    def setFromAcGeCurve (self, curve: PyGe.Curve3d, normal: PyGe.Vector3d = PyGe.Vector3d.kZAxis, tol: PyGe.Tol = 'default')-> None :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...

    @overload
    def setNurbsData (self, degree: int, rational: bool, closed: bool, periodic: bool, controlPoints: list[PyGe.Point3d], knots: list[float], weights: list[float])-> None : ...
    @overload
    def setNurbsData (self, degree: int, rational: bool, closed: bool, periodic: bool, controlPoints: list[PyGe.Point3d], knots: list[float], weights: list[float], controlPtTol: float, knotTol: float)-> None : ...
    def setNurbsData (self, *args, **kwargs)-> None :
      '''Overloads:
    - degree: int, rational: bool, closed: bool, periodic: bool, controlPoints: list[PyGe.Point3d], knots: list[float], weights: list[float]
    - degree: int, rational: bool, closed: bool, periodic: bool, controlPoints: list[PyGe.Point3d], knots: list[float], weights: list[float], controlPtTol: float, knotTol: float
    '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setType (self, val: PyDb.SplineType)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def toPolyline (self)-> PyDb.Polyline :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def type (self)-> PyDb.SplineType :
      '''                             '''
    ...
    def updateFitData (self)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def weightAt (self, val : int)-> float :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class SplineType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kControlPoints (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kFitPoints (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class StandardScaleType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def k100_1 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k10_1 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_1 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_10 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_100 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_128in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_16 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_16in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_2 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_20 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_2in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_30 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_32in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_4 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_40 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_4in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_5 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_50 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_64in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_8 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_8in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1and1_2in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1ft_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k2_1 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k3_16in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k3_32in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k3_4in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k3_8in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k3in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k4_1 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k6in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k8_1 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCustomScale (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kScaleToFit (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class StdScaleType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def k1000_1 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k100_1 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k10_1 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_1 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_10 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_100 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_128in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_16 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_16in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_2 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_20 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_2in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_30 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_32in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_4 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_40 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_4in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_5 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_50 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_64in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_8 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1_8in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1and1_2in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1ft_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k1in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k2_1 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k3_16in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k3_32in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k3_4in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k3_8in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k3in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k4_1 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k6in_1ft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k8_1 (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kScaleToFit (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class SubDMesh(Entity):
    def __init__ (self, id: PyDb.ObjectId, mode:  PyDb.OpenMode=PyDb.OpenMode.kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...
    def cap (self, *args, **kwargs)-> None :
      '''cap( (SubDMesh)arg1, (list)arg2) -> None :

    C++ signature :
        void cap(class PyDbSubDMesh {lvalue},class boost::python::list)'''
    ...

    @staticmethod
    def cast (otherObject:  PyRx.RxObject)-> PyDb.SubDMesh :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.SubDMesh :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collapse (self, *args, **kwargs)-> None :
      '''collapse( (SubDMesh)arg1, (SubentId)arg2) -> None :

    C++ signature :
        void collapse(class PyDbSubDMesh {lvalue},class PyDbSubentId)'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def computeSurfaceArea (self)-> float :
      '''                             '''
    ...
    def computeVolume (self)-> float :
      '''                             '''
    ...
    def convertToSolid (self, *args, **kwargs)-> PyDb.Solid3d :
      '''convertToSolid( (SubDMesh)arg1, (bool)arg2, (bool)arg3) -> Solid3d :

    C++ signature :
        class PyDb3dSolid convertToSolid(class PyDbSubDMesh {lvalue},bool,bool)'''
    ...
    def convertToSurface (self, *args, **kwargs)-> PyDb.Surface :
      '''convertToSurface( (SubDMesh)arg1, (bool)arg2, (SubentId)arg3) -> Surface :

    C++ signature :
        class PyDbSurface convertToSurface(class PyDbSubDMesh {lvalue},bool,class PyDbSubentId)

convertToSurface( (SubDMesh)arg1, (bool)arg2, (bool)arg3) -> Surface :

    C++ signature :
        class PyDbSurface convertToSurface(class PyDbSubDMesh {lvalue},bool,bool)'''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def extrudeConnectedFaces (self, *args, **kwargs)-> None :
      '''extrudeConnectedFaces( (SubDMesh)arg1, (list)arg2, (float)arg3, (Vector3d)arg4, (float)arg5) -> None :

    C++ signature :
        void extrudeConnectedFaces(class PyDbSubDMesh {lvalue},class boost::python::list,double,class AcGeVector3d,double)

extrudeConnectedFaces( (SubDMesh)arg1, (list)arg2, (list)arg3, (float)arg4) -> None :

    C++ signature :
        void extrudeConnectedFaces(class PyDbSubDMesh {lvalue},class boost::python::list,class boost::python::list,double)'''
    ...
    def extrudeFaces (self, *args, **kwargs)-> None :
      '''extrudeFaces( (SubDMesh)arg1, (list)arg2, (float)arg3, (Vector3d)arg4, (float)arg5) -> None :

    C++ signature :
        void extrudeFaces(class PyDbSubDMesh {lvalue},class boost::python::list,double,class AcGeVector3d,double)

extrudeFaces( (SubDMesh)arg1, (list)arg2, (list)arg3, (float)arg4) -> None :

    C++ signature :
        void extrudeFaces(class PyDbSubDMesh {lvalue},class boost::python::list,class boost::python::list,double)'''
    ...
    def getAdjacentSubentPath (self, *args, **kwargs)-> list :
      '''getAdjacentSubentPath( (SubDMesh)arg1, (FullSubentPath)arg2, (SubentType)arg3) -> list :

    C++ signature :
        class boost::python::list getAdjacentSubentPath(class PyDbSubDMesh {lvalue},class PyDbFullSubentPath,unsigned int)'''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getCrease (self, *args, **kwargs)-> list :
      '''getCrease( (SubDMesh)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getCrease(class PyDbSubDMesh {lvalue},class boost::python::list)

getCrease( (SubDMesh)arg1, (SubentId)arg2) -> float :

    C++ signature :
        double getCrease(class PyDbSubDMesh {lvalue},class PyDbSubentId)'''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEdgeArray (self)-> list :
      '''                             '''
    ...
    def getFaceArray (self)-> list :
      '''                             '''
    ...
    def getFacePlane (self, *args, **kwargs)-> PyGe.Plane :
      '''getFacePlane( (SubDMesh)arg1, (SubentId)arg2) -> Plane :

    C++ signature :
        class PyGePlane getFacePlane(class PyDbSubDMesh {lvalue},class PyDbSubentId)'''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getNormalArray (self)-> list :
      '''                             '''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubDividedFaceArray (self)-> list :
      '''                             '''
    ...
    def getSubDividedNormalArray (self)-> list :
      '''                             '''
    ...
    def getSubDividedVertexAt (self, *args, **kwargs)-> PyGe.Point3d :
      '''getSubDividedVertexAt( (SubDMesh)arg1, (int)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getSubDividedVertexAt(class PyDbSubDMesh {lvalue},int)

getSubDividedVertexAt( (SubDMesh)arg1, (SubentId)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getSubDividedVertexAt(class PyDbSubDMesh {lvalue},class PyDbSubentId)'''
    ...
    def getSubDividedVertices (self)-> list :
      '''                             '''
    ...
    def getSubentColor (self, *args, **kwargs)-> PyDb.Color :
      '''getSubentColor( (SubDMesh)arg1, (SubentId)arg2) -> Color :

    C++ signature :
        class AcCmColor getSubentColor(class PyDbSubDMesh {lvalue},class PyDbSubentId)'''
    ...
    def getSubentMaterial (self, *args, **kwargs)-> PyDb.ObjectId :
      '''getSubentMaterial( (SubDMesh)arg1, (SubentId)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getSubentMaterial(class PyDbSubDMesh {lvalue},class PyDbSubentId)'''
    ...
    def getSubentPath (self, *args, **kwargs)-> list :
      '''getSubentPath( (SubDMesh)arg1, (int)arg2, (SubentType)arg3) -> list :

    C++ signature :
        class boost::python::list getSubentPath(class PyDbSubDMesh {lvalue},int,unsigned int)'''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def getVertexAt (self, *args, **kwargs)-> PyGe.Point3d :
      '''getVertexAt( (SubDMesh)arg1, (int)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getVertexAt(class PyDbSubDMesh {lvalue},int)

getVertexAt( (SubDMesh)arg1, (SubentId)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getVertexAt(class PyDbSubDMesh {lvalue},class PyDbSubentId)'''
    ...
    def getVertices (self)-> list :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWatertight (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def mergeFaces (self, *args, **kwargs)-> None :
      '''mergeFaces( (SubDMesh)arg1, (list)arg2) -> None :

    C++ signature :
        void mergeFaces(class PyDbSubDMesh {lvalue},class boost::python::list)'''
    ...
    def numOfEdges (self)-> int :
      '''                             '''
    ...
    def numOfFaces (self)-> int :
      '''                             '''
    ...
    def numOfSubDividedFaces (self)-> int :
      '''                             '''
    ...
    def numOfSubDividedFacesAt (self, *args, **kwargs)-> int :
      '''numOfSubDividedFacesAt( (SubDMesh)arg1, (list)arg2) -> int :

    C++ signature :
        int numOfSubDividedFacesAt(class PyDbSubDMesh {lvalue},class boost::python::list)'''
    ...
    def numOfSubDividedVertices (self)-> int :
      '''                             '''
    ...
    def numOfVertices (self)-> int :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBox (self, *args, **kwargs)-> None :
      '''setBox( (SubDMesh)arg1, (float)arg2, (float)arg3, (float)arg4, (int)arg5, (int)arg6, (int)arg7, (int)arg8) -> None :

    C++ signature :
        void setBox(class PyDbSubDMesh {lvalue},double,double,double,int,int,int,int)'''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setCone (self, *args, **kwargs)-> None :
      '''setCone( (SubDMesh)arg1, (float)arg2, (float)arg3, (float)arg4, (int)arg5, (int)arg6, (int)arg7, (float)arg8, (int)arg9) -> None :

    C++ signature :
        void setCone(class PyDbSubDMesh {lvalue},double,double,double,int,int,int,double,int)'''
    ...
    def setCrease (self, *args, **kwargs)-> None :
      '''setCrease( (SubDMesh)arg1, (float)arg2) -> None :

    C++ signature :
        void setCrease(class PyDbSubDMesh {lvalue},double)

setCrease( (SubDMesh)arg1, (list)arg2, (float)arg3) -> None :

    C++ signature :
        void setCrease(class PyDbSubDMesh {lvalue},class boost::python::list,double)'''
    ...
    def setCylinder (self, *args, **kwargs)-> None :
      '''setCylinder( (SubDMesh)arg1, (float)arg2, (float)arg3, (float)arg4, (int)arg5, (int)arg6, (int)arg7, (int)arg8) -> None :

    C++ signature :
        void setCylinder(class PyDbSubDMesh {lvalue},double,double,double,int,int,int,int)'''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setPyramid (self, *args, **kwargs)-> None :
      '''setPyramid( (SubDMesh)arg1, (float)arg2, (float)arg3, (int)arg4, (int)arg5, (int)arg6, (int)arg7, (float)arg8, (int)arg9) -> None :

    C++ signature :
        void setPyramid(class PyDbSubDMesh {lvalue},double,double,int,int,int,int,double,int)'''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setSphere (self, *args, **kwargs)-> None :
      '''setSphere( (SubDMesh)arg1, (float)arg2, (int)arg3, (int)arg4, (int)arg5) -> None :

    C++ signature :
        void setSphere(class PyDbSubDMesh {lvalue},double,int,int,int)'''
    ...
    def setSubDMesh (self, *args, **kwargs)-> None :
      '''setSubDMesh( (SubDMesh)arg1, (list)arg2, (list)arg3, (int)arg4) -> None :

    C++ signature :
        void setSubDMesh(class PyDbSubDMesh {lvalue},class boost::python::list,class boost::python::list,int)'''
    ...
    def setSubentColor (self, *args, **kwargs)-> None :
      '''setSubentColor( (SubDMesh)arg1, (SubentId)arg2, (Color)arg3) -> None :

    C++ signature :
        void setSubentColor(class PyDbSubDMesh {lvalue},class PyDbSubentId,class AcCmColor)'''
    ...
    def setSubentMaterial (self, *args, **kwargs)-> None :
      '''setSubentMaterial( (SubDMesh)arg1, (SubentId)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void setSubentMaterial(class PyDbSubDMesh {lvalue},class PyDbSubentId,class PyDbObjectId)'''
    ...
    def setTorus (self, *args, **kwargs)-> None :
      '''setTorus( (SubDMesh)arg1, (float)arg2, (int)arg3, (int)arg4, (float)arg5, (float)arg6, (int)arg7) -> None :

    C++ signature :
        void setTorus(class PyDbSubDMesh {lvalue},double,int,int,double,double,int)'''
    ...
    def setVertexAt (self, *args, **kwargs)-> None :
      '''setVertexAt( (SubDMesh)arg1, (int)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void setVertexAt(class PyDbSubDMesh {lvalue},int,class AcGePoint3d)

setVertexAt( (SubDMesh)arg1, (SubentId)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void setVertexAt(class PyDbSubDMesh {lvalue},class PyDbSubentId,class AcGePoint3d)'''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setWedge (self, *args, **kwargs)-> None :
      '''setWedge( (SubDMesh)arg1, (float)arg2, (float)arg3, (float)arg4, (int)arg5, (int)arg6, (int)arg7, (int)arg8, (int)arg9, (int)arg10) -> None :

    C++ signature :
        void setWedge(class PyDbSubDMesh {lvalue},double,double,double,int,int,int,int,int,int)'''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def spin (self, *args, **kwargs)-> None :
      '''spin( (SubDMesh)arg1, (SubentId)arg2) -> None :

    C++ signature :
        void spin(class PyDbSubDMesh {lvalue},class PyDbSubentId)'''
    ...
    def splitFace (self, *args, **kwargs)-> None :
      '''splitFace( (SubDMesh)arg1, (SubentId)arg2, (SubentId)arg3, (Point3d)arg4, (SubentId)arg5, (Point3d)arg6) -> None :

    C++ signature :
        void splitFace(class PyDbSubDMesh {lvalue},class PyDbSubentId,class PyDbSubentId,class AcGePoint3d,class PyDbSubentId,class AcGePoint3d)'''
    ...
    def subdDivideDown (self, *args, **kwargs)-> None :
      '''subdDivideDown( (SubDMesh)arg1) -> None :

    C++ signature :
        void subdDivideDown(class PyDbSubDMesh {lvalue})'''
    ...
    def subdDivideUp (self, *args, **kwargs)-> None :
      '''subdDivideUp( (SubDMesh)arg1) -> None :

    C++ signature :
        void subdDivideUp(class PyDbSubDMesh {lvalue})'''
    ...
    def subdLevel (self, *args, **kwargs)-> int :
      '''subdLevel( (SubDMesh)arg1) -> int :

    C++ signature :
        int subdLevel(class PyDbSubDMesh {lvalue})'''
    ...
    def subdRefine (self, *args, **kwargs)-> None :
      '''subdRefine( (SubDMesh)arg1) -> None :

    C++ signature :
        void subdRefine(class PyDbSubDMesh {lvalue})

subdRefine( (SubDMesh)arg1, (list)arg2) -> None :

    C++ signature :
        void subdRefine(class PyDbSubDMesh {lvalue},class boost::python::list)'''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class SubentId(object):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (SubentType)arg2, (int)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,unsigned int,__int64)

__init__( (object)arg1, (RxClass)arg2, (int)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyRxClass {lvalue},__int64)'''
    ...
    def index (self)-> int :
      '''                             '''
    ...
    def kNull (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def setIndex (self, *args, **kwargs)-> None :
      '''setIndex( (SubentId)arg1, (int)arg2) -> None :

    C++ signature :
        void setIndex(class PyDbSubentId {lvalue},__int64)'''
    ...
    def setType (self, *args, **kwargs)-> None :
      '''setType( (SubentId)arg1, (SubentType)arg2) -> None :

    C++ signature :
        void setType(class PyDbSubentId {lvalue},unsigned int)'''
    ...
    def setTypeClass (self, *args, **kwargs)-> None :
      '''setTypeClass( (SubentId)arg1, (RxClass)arg2) -> None :

    C++ signature :
        void setTypeClass(class PyDbSubentId {lvalue},class PyRxClass {lvalue})'''
    ...
    def type (self)-> int :
      '''                             '''
    ...
    def typeClass (self)-> PyRx.RxClass :
      '''                             '''
    ...

class SubentType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kAxisSubentType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kClassSubentType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEdgeSubentType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kFaceSubentType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMlineSubentCache (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNullSubentType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSilhouetteSubentType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVertexSubentType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class Surface(Entity):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...
    def cast (self, *args, **kwargs)-> PyDb.Surface :
      '''cast( (RxObject)arg1) -> Surface :

    C++ signature :
        class PyDbSurface cast(class PyRxObject)'''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.Surface :
      '''cloneFrom( (RxObject)arg1) -> Surface :

    C++ signature :
        class PyDbSurface cloneFrom(class PyRxObject)'''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def createExtrudedSurface (self, *args, **kwargs)-> PyDb.ExtrudedSurface :
      '''createExtrudedSurface( (Profile3d)arg1, (Vector3d)arg2, (SweepOptions)arg3) -> ExtrudedSurface :

    C++ signature :
        class PyDbExtrudedSurface createExtrudedSurface(class PyDb3dProfile {lvalue},class AcGeVector3d,class PyDbSweepOptions {lvalue})'''
    ...
    def createFrom (self, *args, **kwargs)-> PyDb.Surface :
      '''createFrom( (Entity)arg1) -> Surface :

    C++ signature :
        class PyDbSurface createFrom(class PyDbEntity)'''
    ...
    def creationActionBodyId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''creationActionBodyId( (Surface)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId creationActionBodyId(class PyDbSurface {lvalue})'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extendEdges (self, *args, **kwargs)-> None :
      '''extendEdges( (Surface)arg1, (list)arg2, (float)arg3, (SurfaceEdgeExtensionType)arg4, (bool)arg5) -> None :

    C++ signature :
        void extendEdges(class PyDbSurface {lvalue},class boost::python::list {lvalue},double,enum AcDbSurface::EdgeExtensionType,bool)'''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getArea (self, *args, **kwargs)-> float :
      '''getArea( (Surface)arg1) -> float :

    C++ signature :
        double getArea(class PyDbSurface {lvalue})'''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPerimeter (self, *args, **kwargs)-> float :
      '''getPerimeter( (Surface)arg1) -> float :

    C++ signature :
        double getPerimeter(class PyDbSurface {lvalue})'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def getWireframeType (self, *args, **kwargs)-> PyDb.SurfaceWireframeType :
      '''getWireframeType( (Surface)arg1) -> SurfaceWireframeType :

    C++ signature :
        enum AcDbSurface::WireframeType getWireframeType(class PyDbSurface {lvalue})'''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def modificationActionBodyIds (self, *args, **kwargs)-> list :
      '''modificationActionBodyIds( (Surface)arg1) -> list :

    C++ signature :
        class boost::python::list modificationActionBodyIds(class PyDbSurface {lvalue})'''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def projectOnToSurface (self, *args, **kwargs)-> list :
      '''projectOnToSurface( (Surface)arg1, (Entity)arg2, (Vector3d)arg3) -> list :

    C++ signature :
        class boost::python::list projectOnToSurface(class PyDbSurface {lvalue},class PyDbEntity,class AcGeVector3d)'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def rayTest (self, *args, **kwargs)-> tuple :
      '''rayTest( (Surface)arg1, (Point3d)arg2, (Vector3d)arg3, (float)arg4) -> tuple :

    C++ signature :
        class boost::python::tuple rayTest(class PyDbSurface {lvalue},class AcGePoint3d,class AcGeVector3d,double)'''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setUIsolineDensity (self, *args, **kwargs)-> None :
      '''setUIsolineDensity( (Surface)arg1, (int)arg2) -> None :

    C++ signature :
        void setUIsolineDensity(class PyDbSurface {lvalue},unsigned short)'''
    ...
    def setVIsolineDensity (self, *args, **kwargs)-> None :
      '''setVIsolineDensity( (Surface)arg1, (int)arg2) -> None :

    C++ signature :
        void setVIsolineDensity(class PyDbSurface {lvalue},unsigned short)'''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setWireframeType (self, *args, **kwargs)-> None :
      '''setWireframeType( (Surface)arg1, (SurfaceWireframeType)arg2) -> None :

    C++ signature :
        void setWireframeType(class PyDbSurface {lvalue},enum AcDbSurface::WireframeType)'''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def uIsolineDensity (self, *args, **kwargs)-> int :
      '''uIsolineDensity( (Surface)arg1) -> int :

    C++ signature :
        unsigned short uIsolineDensity(class PyDbSurface {lvalue})'''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def vIsolineDensity (self, *args, **kwargs)-> int :
      '''vIsolineDensity( (Surface)arg1) -> int :

    C++ signature :
        unsigned short vIsolineDensity(class PyDbSurface {lvalue})'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class SurfaceEdgeExtensionType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kExtendEdge (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kStretchEdge (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class SurfaceWireframeType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kIsolines (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kIsoparms (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class SweepAlignOption(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kAlignSweepEntityToPath (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNoAlignment (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTranslatePathToSweepEntity (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTranslateSweepEntityToPath (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class SweepMiterOption(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kBendMiter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCrimpMiter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDefaultMiter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNewMiter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kOldMiter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class SweepOptions(object):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def align (self, *args, **kwargs)-> PyDb.SweepAlignOption :
      '''align( (SweepOptions)arg1) -> SweepAlignOption :

    C++ signature :
        enum AcDbSweepOptions::AlignOption align(class PyDbSweepOptions {lvalue})'''
    ...
    def alignAngle (self, *args, **kwargs)-> float :
      '''alignAngle( (SweepOptions)arg1) -> float :

    C++ signature :
        double alignAngle(class PyDbSweepOptions {lvalue})'''
    ...
    def alignStart (self, *args, **kwargs)-> bool :
      '''alignStart( (SweepOptions)arg1) -> bool :

    C++ signature :
        bool alignStart(class PyDbSweepOptions {lvalue})'''
    ...
    def bank (self, *args, **kwargs)-> bool :
      '''bank( (SweepOptions)arg1) -> bool :

    C++ signature :
        bool bank(class PyDbSweepOptions {lvalue})'''
    ...
    def basePoint (self, *args, **kwargs)-> PyGe.Point3d :
      '''basePoint( (SweepOptions)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d basePoint(class PyDbSweepOptions {lvalue})'''
    ...
    def checkIntersections (self, *args, **kwargs)-> bool :
      '''checkIntersections( (SweepOptions)arg1) -> bool :

    C++ signature :
        bool checkIntersections(class PyDbSweepOptions {lvalue})'''
    ...
    def checkPathCurve (self, *args, **kwargs)-> None :
      '''checkPathCurve( (SweepOptions)arg1, (Entity)arg2) -> None :

    C++ signature :
        void checkPathCurve(class PyDbSweepOptions {lvalue},class PyDbEntity {lvalue})

checkPathCurve( (SweepOptions)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void checkPathCurve(class PyDbSweepOptions {lvalue},class PyDbEntity {lvalue},bool)'''
    ...
    def checkSweepCurve (self, *args, **kwargs)-> tuple :
      '''checkSweepCurve( (SweepOptions)arg1, (Entity)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple checkSweepCurve(class PyDbSweepOptions {lvalue},class PyDbEntity {lvalue})

checkSweepCurve( (SweepOptions)arg1, (Entity)arg2, (bool)arg3) -> tuple :

    C++ signature :
        class boost::python::tuple checkSweepCurve(class PyDbSweepOptions {lvalue},class PyDbEntity {lvalue},bool)'''
    ...
    def draftAngle (self, *args, **kwargs)-> float :
      '''draftAngle( (SweepOptions)arg1) -> float :

    C++ signature :
        double draftAngle(class PyDbSweepOptions {lvalue})'''
    ...
    def endDraftDist (self, *args, **kwargs)-> float :
      '''endDraftDist( (SweepOptions)arg1) -> float :

    C++ signature :
        double endDraftDist(class PyDbSweepOptions {lvalue})'''
    ...
    def getPathEntityTransform (self, *args, **kwargs)-> bool :
      '''getPathEntityTransform( (SweepOptions)arg1, (Matrix3d)arg2) -> bool :

    C++ signature :
        bool getPathEntityTransform(class PyDbSweepOptions {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getSweepEntityTransform (self, *args, **kwargs)-> bool :
      '''getSweepEntityTransform( (SweepOptions)arg1, (Matrix3d)arg2) -> bool :

    C++ signature :
        bool getSweepEntityTransform(class PyDbSweepOptions {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def miterOption (self, *args, **kwargs)-> PyDb.SweepMiterOption :
      '''miterOption( (SweepOptions)arg1) -> SweepMiterOption :

    C++ signature :
        enum AcDbSweepOptions::MiterOption miterOption(class PyDbSweepOptions {lvalue})'''
    ...
    def scaleFactor (self, *args, **kwargs)-> float :
      '''scaleFactor( (SweepOptions)arg1) -> float :

    C++ signature :
        double scaleFactor(class PyDbSweepOptions {lvalue})'''
    ...
    def setAlign (self, *args, **kwargs)-> None :
      '''setAlign( (SweepOptions)arg1, (SweepAlignOption)arg2) -> None :

    C++ signature :
        void setAlign(class PyDbSweepOptions {lvalue},enum AcDbSweepOptions::AlignOption)'''
    ...
    def setAlignAngle (self, *args, **kwargs)-> None :
      '''setAlignAngle( (SweepOptions)arg1, (float)arg2) -> None :

    C++ signature :
        void setAlignAngle(class PyDbSweepOptions {lvalue},double)'''
    ...
    def setAlignStart (self, *args, **kwargs)-> None :
      '''setAlignStart( (SweepOptions)arg1, (bool)arg2) -> None :

    C++ signature :
        void setAlignStart(class PyDbSweepOptions {lvalue},bool)'''
    ...
    def setBank (self, *args, **kwargs)-> None :
      '''setBank( (SweepOptions)arg1, (bool)arg2) -> None :

    C++ signature :
        void setBank(class PyDbSweepOptions {lvalue},bool)'''
    ...
    def setBasePoint (self, *args, **kwargs)-> None :
      '''setBasePoint( (SweepOptions)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setBasePoint(class PyDbSweepOptions {lvalue},class AcGePoint3d {lvalue})'''
    ...
    def setCheckIntersections (self, *args, **kwargs)-> None :
      '''setCheckIntersections( (SweepOptions)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCheckIntersections(class PyDbSweepOptions {lvalue},bool)'''
    ...
    def setDraftAngle (self, *args, **kwargs)-> None :
      '''setDraftAngle( (SweepOptions)arg1, (float)arg2) -> None :

    C++ signature :
        void setDraftAngle(class PyDbSweepOptions {lvalue},double)'''
    ...
    def setEndDraftDist (self, *args, **kwargs)-> None :
      '''setEndDraftDist( (SweepOptions)arg1, (float)arg2) -> None :

    C++ signature :
        void setEndDraftDist(class PyDbSweepOptions {lvalue},double)'''
    ...
    def setMiterOption (self, *args, **kwargs)-> None :
      '''setMiterOption( (SweepOptions)arg1, (SweepMiterOption)arg2) -> None :

    C++ signature :
        void setMiterOption(class PyDbSweepOptions {lvalue},enum AcDbSweepOptions::MiterOption)'''
    ...
    def setPathEntityTransform (self, *args, **kwargs)-> None :
      '''setPathEntityTransform( (SweepOptions)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void setPathEntityTransform(class PyDbSweepOptions {lvalue},class AcGeMatrix3d {lvalue})

setPathEntityTransform( (SweepOptions)arg1, (Entity)arg2) -> None :

    C++ signature :
        void setPathEntityTransform(class PyDbSweepOptions {lvalue},class PyDbEntity {lvalue})

setPathEntityTransform( (SweepOptions)arg1, (Entity)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPathEntityTransform(class PyDbSweepOptions {lvalue},class PyDbEntity {lvalue},bool)'''
    ...
    def setScaleFactor (self, *args, **kwargs)-> None :
      '''setScaleFactor( (SweepOptions)arg1, (float)arg2) -> None :

    C++ signature :
        void setScaleFactor(class PyDbSweepOptions {lvalue},double)'''
    ...
    def setStartDraftDist (self, *args, **kwargs)-> None :
      '''setStartDraftDist( (SweepOptions)arg1, (float)arg2) -> None :

    C++ signature :
        void setStartDraftDist(class PyDbSweepOptions {lvalue},double)'''
    ...
    def setSweepEntityTransform (self, *args, **kwargs)-> None :
      '''setSweepEntityTransform( (SweepOptions)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void setSweepEntityTransform(class PyDbSweepOptions {lvalue},class AcGeMatrix3d {lvalue})

setSweepEntityTransform( (SweepOptions)arg1, (list)arg2) -> None :

    C++ signature :
        void setSweepEntityTransform(class PyDbSweepOptions {lvalue},class boost::python::list {lvalue})

setSweepEntityTransform( (SweepOptions)arg1, (list)arg2, (bool)arg3) -> None :

    C++ signature :
        void setSweepEntityTransform(class PyDbSweepOptions {lvalue},class boost::python::list {lvalue},bool)'''
    ...
    def setTwistAngle (self, *args, **kwargs)-> None :
      '''setTwistAngle( (SweepOptions)arg1, (float)arg2) -> None :

    C++ signature :
        void setTwistAngle(class PyDbSweepOptions {lvalue},double)'''
    ...
    def setTwistRefVec (self, *args, **kwargs)-> None :
      '''setTwistRefVec( (SweepOptions)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setTwistRefVec(class PyDbSweepOptions {lvalue},class AcGeVector3d)'''
    ...
    def startDraftDist (self, *args, **kwargs)-> float :
      '''startDraftDist( (SweepOptions)arg1) -> float :

    C++ signature :
        double startDraftDist(class PyDbSweepOptions {lvalue})'''
    ...
    def twistAngle (self, *args, **kwargs)-> float :
      '''twistAngle( (SweepOptions)arg1) -> float :

    C++ signature :
        double twistAngle(class PyDbSweepOptions {lvalue})'''
    ...
    def twistRefVec (self, *args, **kwargs)-> PyGe.Vector3d :
      '''twistRefVec( (SweepOptions)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d twistRefVec(class PyDbSweepOptions {lvalue})'''
    ...

class SweptSurface(Surface):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...
    def cast (self, *args, **kwargs)-> PyDb.SweptSurface :
      '''cast( (RxObject)arg1) -> SweptSurface :

    C++ signature :
        class PyDbSweptSurface cast(class PyRxObject)'''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.SweptSurface :
      '''cloneFrom( (RxObject)arg1) -> SweptSurface :

    C++ signature :
        class PyDbSweptSurface cloneFrom(class PyRxObject)'''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def createExtrudedSurface (self, *args, **kwargs)-> PyDb.ExtrudedSurface :
      '''createExtrudedSurface( (Profile3d)arg1, (Vector3d)arg2, (SweepOptions)arg3) -> ExtrudedSurface :

    C++ signature :
        class PyDbExtrudedSurface createExtrudedSurface(class PyDb3dProfile {lvalue},class AcGeVector3d,class PyDbSweepOptions {lvalue})'''
    ...
    def createFrom (self, *args, **kwargs)-> PyDb.Surface :
      '''createFrom( (Entity)arg1) -> Surface :

    C++ signature :
        class PyDbSurface createFrom(class PyDbEntity)'''
    ...
    def creationActionBodyId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''creationActionBodyId( (Surface)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId creationActionBodyId(class PyDbSurface {lvalue})'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extendEdges (self, *args, **kwargs)-> None :
      '''extendEdges( (Surface)arg1, (list)arg2, (float)arg3, (SurfaceEdgeExtensionType)arg4, (bool)arg5) -> None :

    C++ signature :
        void extendEdges(class PyDbSurface {lvalue},class boost::python::list {lvalue},double,enum AcDbSurface::EdgeExtensionType,bool)'''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getArea (self, *args, **kwargs)-> float :
      '''getArea( (Surface)arg1) -> float :

    C++ signature :
        double getArea(class PyDbSurface {lvalue})'''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPerimeter (self, *args, **kwargs)-> float :
      '''getPerimeter( (Surface)arg1) -> float :

    C++ signature :
        double getPerimeter(class PyDbSurface {lvalue})'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def getWireframeType (self, *args, **kwargs)-> PyDb.SurfaceWireframeType :
      '''getWireframeType( (Surface)arg1) -> SurfaceWireframeType :

    C++ signature :
        enum AcDbSurface::WireframeType getWireframeType(class PyDbSurface {lvalue})'''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def modificationActionBodyIds (self, *args, **kwargs)-> list :
      '''modificationActionBodyIds( (Surface)arg1) -> list :

    C++ signature :
        class boost::python::list modificationActionBodyIds(class PyDbSurface {lvalue})'''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def projectOnToSurface (self, *args, **kwargs)-> list :
      '''projectOnToSurface( (Surface)arg1, (Entity)arg2, (Vector3d)arg3) -> list :

    C++ signature :
        class boost::python::list projectOnToSurface(class PyDbSurface {lvalue},class PyDbEntity,class AcGeVector3d)'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def rayTest (self, *args, **kwargs)-> tuple :
      '''rayTest( (Surface)arg1, (Point3d)arg2, (Vector3d)arg3, (float)arg4) -> tuple :

    C++ signature :
        class boost::python::tuple rayTest(class PyDbSurface {lvalue},class AcGePoint3d,class AcGeVector3d,double)'''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setUIsolineDensity (self, *args, **kwargs)-> None :
      '''setUIsolineDensity( (Surface)arg1, (int)arg2) -> None :

    C++ signature :
        void setUIsolineDensity(class PyDbSurface {lvalue},unsigned short)'''
    ...
    def setVIsolineDensity (self, *args, **kwargs)-> None :
      '''setVIsolineDensity( (Surface)arg1, (int)arg2) -> None :

    C++ signature :
        void setVIsolineDensity(class PyDbSurface {lvalue},unsigned short)'''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setWireframeType (self, *args, **kwargs)-> None :
      '''setWireframeType( (Surface)arg1, (SurfaceWireframeType)arg2) -> None :

    C++ signature :
        void setWireframeType(class PyDbSurface {lvalue},enum AcDbSurface::WireframeType)'''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def uIsolineDensity (self, *args, **kwargs)-> int :
      '''uIsolineDensity( (Surface)arg1) -> int :

    C++ signature :
        unsigned short uIsolineDensity(class PyDbSurface {lvalue})'''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def vIsolineDensity (self, *args, **kwargs)-> int :
      '''vIsolineDensity( (Surface)arg1) -> int :

    C++ signature :
        unsigned short vIsolineDensity(class PyDbSurface {lvalue})'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class SymUtilServices(object):
    def __init__ (self)-> None :
      '''                             '''
    ...
    def blockModelSpaceId (self, db: PyDb.Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockModelSpaceName (self)-> str :
      '''                             '''
    ...
    def blockPaperSpaceId (self, db: PyDb.Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockPaperSpaceName (self)-> str :
      '''                             '''
    ...
    def compareSymbolName (self, thisName: str, otherName: str)-> int :
      '''                             '''
    ...
    def compatibilityMode (self, db: PyDb.Database)-> bool :
      '''                             '''
    ...
    def getBlockNameFromInsertPathName (self, pathname: str)-> str :
      '''                             '''
    ...
    def getInsertPathNameFromBlockName (self, pathname: str)-> str :
      '''                             '''
    ...
    def getPathNameFromSymbolName (self, symname: str, extensions: str)-> str :
      '''                             '''
    ...
    def getSymbolNameFromPathName (self, symname: str, extensions: str)-> str :
      '''                             '''
    ...
    def hasVerticalBar (self, val: str)-> bool :
      '''                             '''
    ...
    def isBlockLayoutName (self, val: str)-> bool :
      '''                             '''
    ...
    def isBlockModelSpaceName (self, val: str)-> bool :
      '''                             '''
    ...
    def isBlockPaperSpaceName (self, val: str)-> bool :
      '''                             '''
    ...
    def isLayerDefpointsName (self, val: str)-> bool :
      '''                             '''
    ...
    def isLayerZeroName (self, val: str)-> bool :
      '''                             '''
    ...
    def isLinetypeByBlockName (self, val: str)-> bool :
      '''                             '''
    ...
    def isLinetypeByLayerName (self, val: str)-> bool :
      '''                             '''
    ...
    def isLinetypeContinuousName (self, val: str)-> bool :
      '''                             '''
    ...
    def isRegAppAcadName (self, val: str)-> bool :
      '''                             '''
    ...
    def isTextStyleStandardName (self, val: str)-> bool :
      '''                             '''
    ...
    def isViewportActiveName (self, val: str)-> bool :
      '''                             '''
    ...
    def layerDefpointsId (self, db: PyDb.Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def layerDefpointsName (self)-> str :
      '''                             '''
    ...
    def layerZeroId (self, db: PyDb.Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def layerZeroName (self)-> str :
      '''                             '''
    ...
    def linetypeByBlockId (self, db: PyDb.Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeByBlockName (self)-> str :
      '''                             '''
    ...
    def linetypeByLayerId (self, db: PyDb.Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeByLayerName (self)-> str :
      '''                             '''
    ...
    def linetypeContinuousId (self, db: PyDb.Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeContinuousName (self)-> str :
      '''                             '''
    ...
    def makeDependentName (self, dwgname: str, symbolName: str)-> str :
      '''                             '''
    ...
    def regAppAcadId (self, db: PyDb.Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def regAppAcadName (self)-> str :
      '''                             '''
    ...
    def repairPreExtendedSymbolName (self, oldname: str, allowVerticalBar: bool)-> str :
      '''                             '''
    ...
    def repairSymbolName (self, oldname: str, allowVerticalBar: bool)-> str :
      '''                             '''
    ...
    def textStyleStandardId (self, db: PyDb.Database)-> PyDb.ObjectId :
      '''                             '''
    ...
    def textStyleStandardName (self)-> str :
      '''                             '''
    ...
    def validateCompatibleSymbolName (self, name: str, isNewName: bool, allowVerticalBar: bool, compatibilityMode: bool)-> PyDb.ErrorStatus :
      '''                             '''
    ...
    def validatePreExtendedSymbolName (self, oldname: str, allowVerticalBar: bool)-> PyDb.ErrorStatus :
      '''                             '''
    ...
    def validateSymbolName (self, name: str, allowVerticalBar: bool)-> PyDb.ErrorStatus :
      '''                             '''
    ...
    def viewportActiveName (self)-> str :
      '''                             '''
    ...

class SymbolTable(DbObject):
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode=PyDb.OpenMode.kForRead)-> None :
      '''                             '''
    ...
    def add (self, val: PyDb.SymbolTableRecord)-> PyDb.ObjectId :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...
    def cast (self, *args, **kwargs)-> PyDb.SymbolTable :
      '''cast( (RxObject)arg1) -> SymbolTable :

    C++ signature :
        class PyDbSymbolTable cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PyDb.SymbolTable :
      '''cloneFrom( (RxObject)arg1) -> SymbolTable :

    C++ signature :
        class PyDbSymbolTable cloneFrom(class PyRxObject)'''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getAt (self, val: str)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has (self, val: str|PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def recordIds (self)-> list :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def toDict (self)-> dict :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class SymbolTableRecord(DbObject):
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode.kForRead)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.SymbolTableRecord :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.SymbolTableRecord :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getName (self)-> str :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isDependent (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isRenamable (self)-> bool :
      '''                             '''
    ...
    def isResolved (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def name (self)-> str :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setName (self, name: str)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class Table(BlockReference):
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode=PyDb.OpenMode.kForRead)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...

    @overload
    def alignment (self, rowType: PyDb.RowType)-> PyDb.CellAlignment : ...
    @overload
    def alignment (self, row: int, col: int)-> PyDb.CellAlignment : ...
    def alignment (self, *args, **kwargs)-> PyDb.CellAlignment :
      '''Overloads:
    - rowType: PyDb.RowType
    - row: int, col: int
    '''
    ...
    def appendAttribute (self, val : PyDb.Attribute)-> PyDb.ObjectId :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def attachmentPoint (self, row: int, col: int, content: int = 1)-> PyGe.Point3d :
      '''                             '''
    ...
    def attributeIds (self)-> list :
      '''                             '''
    ...

    @overload
    def backgroundColor (self, rowType: PyDb.RowType)-> PyDb.Color : ...
    @overload
    def backgroundColor (self, row: int, col: int)-> PyDb.Color : ...
    def backgroundColor (self, *args, **kwargs)-> PyDb.Color :
      '''Overloads:
    - rowType: PyDb.RowType
    - row: int, col: int
    '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockRotation (self, row: int, col: int)-> float :
      '''                             '''
    ...
    def blockScale (self, row: int, col: int)-> float :
      '''                             '''
    ...
    def blockTableRecord (self)-> PyDb.ObjectId :
      '''                             '''
    ...

    @overload
    def blockTableRecordId (self, row: int, col: int)-> PyDb.ObjectId : ...
    @overload
    def blockTableRecordId (self, row: int, col: int, content: int)-> PyDb.ObjectId : ...
    def blockTableRecordId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - row: int, col: int
    - row: int, col: int, content: int
    '''
    ...
    def blockTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def breakFlowDirection (self, *args, **kwargs)-> PyDb.TableBreakFlowDirection :
      '''breakFlowDirection( (Table)arg1) -> TableBreakFlowDirection :

    C++ signature :
        enum AcDb::TableBreakFlowDirection breakFlowDirection(class PyDbTable {lvalue})'''
    ...
    def breakHeight (self, val : int)-> float :
      '''                             '''
    ...
    def breakOffset (self, idx: int)-> PyGe.Vector3d :
      '''                             '''
    ...
    def breakOption (self)-> PyDb.TableBreakOption :
      '''                             '''
    ...
    def breakSpacing (self)-> float :
      '''                             '''
    ...
    def canDelete (self, row: int, col: int, brow : bool)-> bool :
      '''                             '''
    ...
    def canInsert (self, index: int, brow: bool)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Table :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...
    def cellRange (self)-> PyDb.CellRange :
      '''                             '''
    ...
    def cellState (self, row: int, col: int)-> PyDb.CellState :
      '''                             '''
    ...
    def cellStyle (self, row: int, col: int)-> str :
      '''                             '''
    ...
    def cellStyleOverrides (self, row: int)-> list :
      '''                             '''
    ...
    def cellType (self, row: int, col: int)-> PyDb.CellType :
      '''                             '''
    ...

    @overload
    def cellValues (self, /)-> list : ...
    @overload
    def cellValues (self, nOption: PyDb.TableIteratorOption)-> list : ...
    @overload
    def cellValues (self, pRange: PyDb.CellRange)-> list : ...
    @overload
    def cellValues (self, pRange: PyDb.CellRange, nOption: TableIteratorOption)-> list : ...
    def cellValues (self, *args, **kwargs)-> list :
      '''Overloads:
    - None: Any
    - nOption: PyDb.TableIteratorOption
    - pRange: PyDb.CellRange
    - pRange: PyDb.CellRange, nOption: TableIteratorOption
    '''
    ...

    @overload
    def cells (self, /)-> list : ...
    @overload
    def cells (self, nOption: PyDb.TableIteratorOption)-> list : ...
    @overload
    def cells (self, pRange: PyDb.CellRange)-> list : ...
    @overload
    def cells (self, pRange: PyDb.CellRange, nOption: TableIteratorOption)-> list : ...
    def cells (self, *args, **kwargs)-> list :
      '''Overloads:
    - None: Any
    - nOption: PyDb.TableIteratorOption
    - pRange: PyDb.CellRange
    - pRange: PyDb.CellRange, nOption: TableIteratorOption
    '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def clearCellOverrides (self, row: int)-> None :
      '''                             '''
    ...
    def clearSubSelection (self)-> None :
      '''                             '''
    ...
    def clearTableStyleOverrides (self)-> None :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Table :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def columnWidth (self, col : int)-> float :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...

    @overload
    def contentColor (self, rowType: PyDb.RowType)-> PyDb.Color : ...
    @overload
    def contentColor (self, row: int, col: int)-> PyDb.Color : ...
    @overload
    def contentColor (self, row: int, col: int, content: int)-> PyDb.Color : ...
    def contentColor (self, *args, **kwargs)-> PyDb.Color :
      '''Overloads:
    - rowType: PyDb.RowType
    - row: int, col: int
    - row: int, col: int, content: int
    '''
    ...
    def contentLayout (self, row: int, col: int)-> PyDb.CellContentLayout :
      '''                             '''
    ...

    @overload
    def contentType (self, row: int, col: int)-> PyDb.CellContentType : ...
    @overload
    def contentType (self, row: int, col: int, content: int)-> PyDb.CellContentType : ...
    def contentType (self, *args, **kwargs)-> PyDb.CellContentType :
      '''Overloads:
    - row: int, col: int
    - row: int, col: int, content: int
    '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createContent (self, row: int, col: int, idx: int)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...

    @overload
    def dataFormat (self, row: int, col: int)-> str : ...
    @overload
    def dataFormat (self, row: int, col: int, content: int)-> str : ...
    def dataFormat (self, *args, **kwargs)-> str :
      '''Overloads:
    - row: int, col: int
    - row: int, col: int, content: int
    '''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def deleteCellContent (self, row: int, col: int)-> None :
      '''                             '''
    ...
    def deleteColumns (self, row: int, nCols: int)-> None :
      '''                             '''
    ...

    @overload
    def deleteContent (self, row: int, col: int)-> None : ...
    @overload
    def deleteContent (self, row: int, col: int, content: int)-> None : ...
    @overload
    def deleteContent (self, range: PyDb.CellRange)-> None : ...
    def deleteContent (self, *args, **kwargs)-> None :
      '''Overloads:
    - row: int, col: int
    - row: int, col: int, content: int
    - range: PyDb.CellRange
    '''
    ...
    def deleteRows (self, row: int, nRows: int)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def direction (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def enableBreak (self, val : bool)-> None :
      '''                             '''
    ...
    def enableMergeAll (self, row: int, col: int, val : bool)-> None :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def explodeToOwnerSpace (self)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...

    @overload
    def fieldId (self, row: int, col: int)-> PyDb.ObjectId : ...
    @overload
    def fieldId (self, row: int, col: int, content: int)-> PyDb.ObjectId : ...
    def fieldId (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - row: int, col: int
    - row: int, col: int, content: int
    '''
    ...
    def flowDirection (self)-> PyDb.TableFlowDirection :
      '''                             '''
    ...
    def generateLayout (self)-> None :
      '''                             '''
    ...
    def geomExtentsBestFit (self, val : PyGe.Matrix3d=PyGe.Matrix3d.kIdentity)-> PyDb.Extents :
      '''                             '''
    ...

    @overload
    def getBlockAttributeValue (self, row: int, col: int, val: str, id: PyDb.ObjectId)-> str : ...
    @overload
    def getBlockAttributeValue (self, row: int, col: int, content: int, val: str, id: PyDb.ObjectId)-> str : ...
    def getBlockAttributeValue (self, *args, **kwargs)-> str :
      '''Overloads:
    - row: int, col: int, val: str, id: PyDb.ObjectId
    - row: int, col: int, content: int, val: str, id: PyDb.ObjectId
    '''
    ...
    def getBlockName (self)-> str :
      '''                             '''
    ...
    def getCellExtents (self, row: int, col: int, isOuterCell: bool)-> list :
      '''                             '''
    ...
    def getCellOverride (self, row: int, col: int, content: int)-> PyDb.CellProperty :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getDataLink (self, row: int, col: int)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getDataLinkRange (self, row: int, col: int)-> PyDb.CellRange :
      '''                             '''
    ...

    @overload
    def getDataType (self, rowType: PyDb.RowType)-> tuple : ...
    @overload
    def getDataType (self, row: int, col: int)-> tuple : ...
    @overload
    def getDataType (self, row: int, col: int, content: int)-> tuple : ...
    def getDataType (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - rowType: PyDb.RowType
    - row: int, col: int
    - row: int, col: int, content: int
    '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFormula (self, row: int, col: int, content: int)-> str :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...
    def getGridOverride (self, row: int, col: int, nGridLineType: PyDb.GridLineType)-> PyDb.GridProperty :
      '''                             '''
    ...
    def getGridProperty (self, row: int, col: int, nGridLineType: GridLineType)-> object :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getMergeRange (self, row: int, col: int)-> PyDb.CellRange :
      '''                             '''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubSelection (self)-> PyDb.CellRange :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...

    @overload
    def gridColor (self, gridlineType: GridLineType, rowType: PyDb.RowType)-> PyDb.Color : ...
    @overload
    def gridColor (self, row: int, col, gridlineType: GridLineType)-> PyDb.Color : ...
    def gridColor (self, *args, **kwargs)-> PyDb.Color :
      '''Overloads:
    - gridlineType: GridLineType, rowType: PyDb.RowType
    - row: int, col, gridlineType: GridLineType
    '''
    ...
    def gridDoubleLineSpacing (self, row: int, col: int, nGridLineType: GridLineType)-> float :
      '''                             '''
    ...
    def gridEdgeColor (self, row: int, col: int, content: CellEdgeMask)-> PyDb.Color :
      '''                             '''
    ...
    def gridEdgeLineWeight (self, row: int, col: int, content: CellEdgeMask)-> PyDb.LineWeight :
      '''                             '''
    ...
    def gridEdgeVisibility (self, row: int, col: int, content: CellEdgeMask)-> PyDb.Visibility :
      '''                             '''
    ...
    def gridLineStyle (self, row: int, col: int, nGridLineType: PyDb.GridLineType)-> PyDb.GridLineStyle :
      '''                             '''
    ...

    @overload
    def gridLineWeight (self, gridlineType: GridLineType, rowType: PyDb.RowType)-> PyDb.LineWeight : ...
    @overload
    def gridLineWeight (self, row: int, col, gridlineType: GridLineType)-> PyDb.LineWeight : ...
    def gridLineWeight (self, *args, **kwargs)-> PyDb.LineWeight :
      '''Overloads:
    - gridlineType: GridLineType, rowType: PyDb.RowType
    - row: int, col, gridlineType: GridLineType
    '''
    ...
    def gridLinetype (self, row: int, col: int, nGridLineType: PyDb.GridLineType)-> PyDb.ObjectId :
      '''                             '''
    ...

    @overload
    def gridVisibility (self, gridlineType: GridLineType, rowType: PyDb.RowType)-> PyDb.Visibility : ...
    @overload
    def gridVisibility (self, row: int, col, gridlineType: GridLineType)-> PyDb.Visibility : ...
    def gridVisibility (self, *args, **kwargs)-> PyDb.Visibility :
      '''Overloads:
    - gridlineType: GridLineType, rowType: PyDb.RowType
    - row: int, col, gridlineType: GridLineType
    '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasFormula (self, row: int, col: int, content: int)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasSubSelection (self)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def height (self)-> float :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def hitTest (self, wpt: PyGe.Point3d, viewvec: PyGe.Vector3d, wx: float=0.0, wy: float=0.0)-> tuple :
      '''                             '''
    ...
    def horzCellMargin (self)-> float :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def insertColumns (self, row: int, width : float, nCols: int)-> None :
      '''                             '''
    ...
    def insertColumnsAndInherit (self, nIndex: int, nInheritFrom: int, nNumCols: int)-> None :
      '''                             '''
    ...
    def insertRows (self, row: int, height : float, nRows: int)-> None :
      '''                             '''
    ...
    def insertRowsAndInherit (self, nIndex: int, nInheritFrom: int, nNumRows: int)-> None :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...

    @overload
    def isAutoScale (self, row: int, col: int)-> bool : ...
    @overload
    def isAutoScale (self, row: int, col: int, content: int)-> bool : ...
    def isAutoScale (self, *args, **kwargs)-> bool :
      '''Overloads:
    - row: int, col: int
    - row: int, col: int, content: int
    '''
    ...

    @overload
    def isBackgroundColorNone (self, rowType: PyDb.RowType)-> bool : ...
    @overload
    def isBackgroundColorNone (self, row: int, col: int)-> bool : ...
    def isBackgroundColorNone (self, *args, **kwargs)-> bool :
      '''Overloads:
    - rowType: PyDb.RowType
    - row: int, col: int
    '''
    ...
    def isBreakEnabled (self)-> bool :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isContentEditable (self, row: int, col: int)-> bool :
      '''                             '''
    ...
    def isEmpty (self, row: int, col: int)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isFormatEditable (self, row: int, col: int)-> bool :
      '''                             '''
    ...
    def isHeaderSuppressed (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isLinked (self, row: int, col: int)-> bool :
      '''                             '''
    ...
    def isMergeAllEnabled (self, row: int, col: int)-> bool :
      '''                             '''
    ...
    def isMergedCell (self, row: int, col: int)-> tuple :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isRegenerateTableSuppressed (self)-> bool :
      '''                             '''
    ...
    def isTitleSuppressed (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def margin (self, row: int, col: int, nMargin: PyDb.CellMargin)-> float :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def mergeCells (self, minRow: int, maxRow: int, minCol: int, maxCol: int)-> None :
      '''                             '''
    ...
    def minimumColumnWidth (self, col: int)-> float :
      '''                             '''
    ...
    def minimumRowHeight (self, row: int)-> float :
      '''                             '''
    ...
    def minimumTableHeight (self)-> float :
      '''                             '''
    ...
    def minimumTableWidth (self)-> float :
      '''                             '''
    ...
    def moveContent (self, row: int, col: int, frm: int, to: int)-> None :
      '''                             '''
    ...
    def nonAnnotationBlockTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def nonAnnotationScaleFactors (self)-> PyGe.Scale3d :
      '''                             '''
    ...
    def normal (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def numColumns (self)-> int :
      '''                             '''
    ...
    def numContents (self, row: int, col: int)-> int :
      '''                             '''
    ...
    def numRows (self)-> int :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def position (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recomputeTableBlock (self, val : bool)-> None :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeAllOverrides (self, row: int, col: int)-> None :
      '''                             '''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeDataLink (self, row: int=-1, col: int=-1)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self, row: int, col: int, content: int)-> float :
      '''                             '''
    ...
    def rowHeight (self, row : int)-> float :
      '''                             '''
    ...
    def rowType (self, row: int)-> PyDb.RowType :
      '''                             '''
    ...
    def scale (self, row: int, col: int, content: int)-> float :
      '''                             '''
    ...
    def scaleFactors (self)-> PyGe.Scale3d :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...

    @overload
    def setAlignment (self, visible: PyDb.CellAlignment, rowType: PyDb.RowType)-> None : ...
    @overload
    def setAlignment (self, nRow: int, nCol: int, align: PyDb.CellAlignment)-> None : ...
    def setAlignment (self, *args, **kwargs)-> None :
      '''Overloads:
    - visible: PyDb.CellAlignment, rowType: PyDb.RowType
    - nRow: int, nCol: int, align: PyDb.CellAlignment
    '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...

    @overload
    def setAutoScale (self, row: int, col: int, flag: bool)-> None : ...
    @overload
    def setAutoScale (self, row: int, col: int, content: int, flag:bool)-> None : ...
    def setAutoScale (self, *args, **kwargs)-> None :
      '''Overloads:
    - row: int, col: int, flag: bool
    - row: int, col: int, content: int, flag:bool
    '''
    ...

    @overload
    def setBackgroundColor (self, clr: PyDb.Color, rowType: PyDb.RowType)-> None : ...
    @overload
    def setBackgroundColor (self, row: int, col: int, clr: PyDb.Color)-> None : ...
    def setBackgroundColor (self, *args, **kwargs)-> None :
      '''Overloads:
    - clr: PyDb.Color, rowType: PyDb.RowType
    - row: int, col: int, clr: PyDb.Color
    '''
    ...

    @overload
    def setBackgroundColorNone (self, value: bool, rowType: PyDb.RowType)-> None : ...
    @overload
    def setBackgroundColorNone (self, nRow: int, nCol: int, value: bool)-> None : ...
    def setBackgroundColorNone (self, *args, **kwargs)-> None :
      '''Overloads:
    - value: bool, rowType: PyDb.RowType
    - nRow: int, nCol: int, value: bool
    '''
    ...

    @overload
    def setBlockAttributeValue (self, row: int, col: int, id: PyDb.ObjectId, val: str)-> None : ...
    @overload
    def setBlockAttributeValue (self, row: int, col: int, content: int, id: PyDb.ObjectId, val: str)-> None : ...
    def setBlockAttributeValue (self, *args, **kwargs)-> None :
      '''Overloads:
    - row: int, col: int, id: PyDb.ObjectId, val: str
    - row: int, col: int, content: int, id: PyDb.ObjectId, val: str
    '''
    ...
    def setBlockRotation (self, row: int, col: int, rotAng : float)-> None :
      '''                             '''
    ...
    def setBlockScale (self, row: int, col: int, scale : float)-> None :
      '''                             '''
    ...
    def setBlockTableRecord (self, val : ObjectId)-> None :
      '''                             '''
    ...

    @overload
    def setBlockTableRecordId (self, row: int, col: int, id: PyDb.ObjectId, autoFit: bool)-> None : ...
    @overload
    def setBlockTableRecordId (self, row: int, col: int, content: int, id: PyDb.ObjectId, autoFit: bool)-> None : ...
    def setBlockTableRecordId (self, *args, **kwargs)-> None :
      '''Overloads:
    - row: int, col: int, id: PyDb.ObjectId, autoFit: bool
    - row: int, col: int, content: int, id: PyDb.ObjectId, autoFit: bool
    '''
    ...
    def setBlockTransform (self, val : PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def setBreakFlowDirection (self, *args, **kwargs)-> None :
      '''setBreakFlowDirection( (Table)arg1, (TableBreakFlowDirection)arg2) -> None :

    C++ signature :
        void setBreakFlowDirection(class PyDbTable {lvalue},enum AcDb::TableBreakFlowDirection)'''
    ...
    def setBreakHeight (self, val : int, height : float)-> None :
      '''                             '''
    ...
    def setBreakOffset (self, idx: int, vec: PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setBreakOption (self, val: TableBreakOption)-> None :
      '''                             '''
    ...
    def setBreakSpacing (self, val : float)-> None :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setCellOverride (self, row: int, col: int, content: int, nOverride: PyDb.CellProperty)-> None :
      '''                             '''
    ...
    def setCellState (self, row: int, col: int, val : PyDb.CellState)-> None :
      '''                             '''
    ...
    def setCellStyle (self, row: int, col: int, style: str)-> None :
      '''                             '''
    ...
    def setCellType (self, row: int, col: int, type: CellType)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...

    @overload
    def setColumnWidth (self, column:int, width: float)-> None : ...
    @overload
    def setColumnWidth (self, width: float)-> None : ...
    def setColumnWidth (self, *args, **kwargs)-> None :
      '''Overloads:
    - column:int, width: float
    - width: float
    '''
    ...

    @overload
    def setContentColor (self, color: PyDb.Color, rowType: PyDb.RowType)-> None : ...
    @overload
    def setContentColor (self, nRow: int, nCol: int, color: PyDb.Color)-> None : ...
    @overload
    def setContentColor (self, nRow: int, nCol: int, content: int, color: PyDb.Color)-> None : ...
    def setContentColor (self, *args, **kwargs)-> None :
      '''Overloads:
    - color: PyDb.Color, rowType: PyDb.RowType
    - nRow: int, nCol: int, color: PyDb.Color
    - nRow: int, nCol: int, content: int, color: PyDb.Color
    '''
    ...
    def setContentLayout (self, row: int, col: int, val: PyDb.CellContentLayout)-> None :
      '''                             '''
    ...

    @overload
    def setDataFormat (self, row: int, col: int, val: str)-> None : ...
    @overload
    def setDataFormat (self, row: int, col: int, content: int, val: str)-> None : ...
    def setDataFormat (self, *args, **kwargs)-> None :
      '''Overloads:
    - row: int, col: int, val: str
    - row: int, col: int, content: int, val: str
    '''
    ...
    def setDataLink (self, row: int, col: int, id : PyDb.ObjectId, update : bool)-> None :
      '''                             '''
    ...

    @overload
    def setDataType (self, nDataType: ValueDataType, nUnitType: ValueUnitType)-> None : ...
    @overload
    def setDataType (self, nDataType: ValueDataType, nUnitType: ValueUnitType, rowType: PyDb.RowType)-> None : ...
    @overload
    def setDataType (self, row: int, col: int, nDataType: ValueDataType, nUnitType: ValueUnitType)-> None : ...
    @overload
    def setDataType (self, row: int, col, nContent: int,  nDataType: ValueDataType, nUnitType: ValueUnitType)-> None : ...
    def setDataType (self, *args, **kwargs)-> None :
      '''Overloads:
    - nDataType: ValueDataType, nUnitType: ValueUnitType
    - nDataType: ValueDataType, nUnitType: ValueUnitType, rowType: PyDb.RowType
    - row: int, col: int, nDataType: ValueDataType, nUnitType: ValueUnitType
    - row: int, col, nContent: int,  nDataType: ValueDataType, nUnitType: ValueUnitType
    '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setDirection (self, val : PyGe.Vector3d)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...

    @overload
    def setFieldId (self, row: int, col: int,id: PyDb.ObjectId)-> None : ...
    @overload
    def setFieldId (self, row: int, col: int, content: int,id: PyDb.ObjectId, nFlag: CellOption)-> None : ...
    def setFieldId (self, *args, **kwargs)-> None :
      '''Overloads:
    - row: int, col: int,id: PyDb.ObjectId
    - row: int, col: int, content: int,id: PyDb.ObjectId, nFlag: CellOption
    '''
    ...
    def setFlowDirection (self, val : PyDb.TableFlowDirection)-> None :
      '''                             '''
    ...
    def setFormat (self, row: int, col: int, format : str)-> None :
      '''                             '''
    ...
    def setFormula (self, row: int, col: int, content: int, val: str)-> None :
      '''                             '''
    ...

    @overload
    def setGridColor (self, color: PyDb.Color, nBorders: int, nRows: int)-> None : ...
    @overload
    def setGridColor (self, nRow: int, nCol: int, nGridLineTypes: GridLineType, color: PyDb.Color)-> None : ...
    def setGridColor (self, *args, **kwargs)-> None :
      '''Overloads:
    - color: PyDb.Color, nBorders: int, nRows: int
    - nRow: int, nCol: int, nGridLineTypes: GridLineType, color: PyDb.Color
    '''
    ...
    def setGridDoubleLineSpacing (self, row: int, col: int, nGridLineType: GridLineType, spacing: float)-> None :
      '''                             '''
    ...
    def setGridEdgeColor (self, row: int, col: int, content: CellEdgeMask, clr: PyDb.AcCmColor)-> None :
      '''                             '''
    ...
    def setGridEdgeLineWeight (self, row: int, col: int, content: CellEdgeMask, val: PyDb.LineWeight)-> None :
      '''                             '''
    ...
    def setGridEdgeVisibility (self, row: int, col: int, content: CellEdgeMask, val: PyDb.Visibility)-> None :
      '''                             '''
    ...
    def setGridLineStyle (self, row: int, col: int, nGridLineType: PyDb.GridLineTypes, nLineStyle: PyDb.GridLineStyle)-> None :
      '''                             '''
    ...

    @overload
    def setGridLineWeight (self, lwt: LineWeight, nBorders: int, nRows: int)-> None : ...
    @overload
    def setGridLineWeight (self, nRow: int, nCol: int, nGridLineTypes: GridLineType, nLineWeight: LineWeight)-> None : ...
    def setGridLineWeight (self, *args, **kwargs)-> None :
      '''Overloads:
    - lwt: LineWeight, nBorders: int, nRows: int
    - nRow: int, nCol: int, nGridLineTypes: GridLineType, nLineWeight: LineWeight
    '''
    ...
    def setGridLinetype (self, row: int, col: int, nGridLineType: PyDb.GridLineTypes, idLinetype: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setGridOverride (self, row: int, col: int, nGridLineType: PyDb.GridLineType, nOverride: PyDb.GridProperty)-> None :
      '''                             '''
    ...

    @overload
    def setGridVisibility (self, visible: PyDb.Visibility, nBorders: int, nRows: int)-> None : ...
    @overload
    def setGridVisibility (self, nRow: int, nCol: int, nGridLineTypes: GridLineType, visible: PyDb.Visibility)-> None : ...
    def setGridVisibility (self, *args, **kwargs)-> None :
      '''Overloads:
    - visible: PyDb.Visibility, nBorders: int, nRows: int
    - nRow: int, nCol: int, nGridLineTypes: GridLineType, visible: PyDb.Visibility
    '''
    ...
    def setHeight (self, val : float)-> None :
      '''                             '''
    ...
    def setHorzCellMargin (self, val : float)-> None :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMargin (self, row: int, col: int, nMargin: PyDb.CellMargin, val : float)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self, val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setRecomputeTableBlock (self, val : bool)-> None :
      '''                             '''
    ...
    def setRegen (self)-> None :
      '''                             '''
    ...
    def setRotation (self, row: int, col: int, content: int, fang: float)-> None :
      '''                             '''
    ...

    @overload
    def setRowHeight (self, row:int, height: float)-> None : ...
    @overload
    def setRowHeight (self, height: float)-> None : ...
    def setRowHeight (self, *args, **kwargs)-> None :
      '''Overloads:
    - row:int, height: float
    - height: float
    '''
    ...
    def setScale (self, row: int, col: int, content: int, val : float)-> None :
      '''                             '''
    ...
    def setScaleFactors (self, val : PyGe.Scale3d)-> None :
      '''                             '''
    ...
    def setSize (self, rows: int, cols: int)-> None :
      '''                             '''
    ...
    def setSubSelection (self, val : PyDb.CellRange)-> None :
      '''                             '''
    ...
    def setTableRotation (self, val: float)-> None :
      '''                             '''
    ...
    def setTableStyle (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...

    @overload
    def setTextHeight (self, height: float, rowType: PyDb.RowType)-> None : ...
    @overload
    def setTextHeight (self, row: int, col: int, height: float)-> None : ...
    @overload
    def setTextHeight (self, row: int, col, nContent: int, height: float)-> None : ...
    def setTextHeight (self, *args, **kwargs)-> None :
      '''Overloads:
    - height: float, rowType: PyDb.RowType
    - row: int, col: int, height: float
    - row: int, col, nContent: int, height: float
    '''
    ...
    def setTextRotation (self, row: int, col: int, rot: RotationAngle)-> None :
      '''                             '''
    ...

    @overload
    def setTextString (self, row: int, col: int, val: str)-> None : ...
    @overload
    def setTextString (self, row: int, col: int, content: int, val: str)-> None : ...
    @overload
    def setTextString (self, cell: PyDb.Cell, val: str)-> None : ...
    def setTextString (self, *args, **kwargs)-> None :
      '''Overloads:
    - row: int, col: int, val: str
    - row: int, col: int, content: int, val: str
    - cell: PyDb.Cell, val: str
    '''
    ...

    @overload
    def setTextStyle (self, id: PyDb.ObjectId, rowType: PyDb.RowType)-> None : ...
    @overload
    def setTextStyle (self, row: int, col: int, id: PyDb.ObjectId)-> None : ...
    @overload
    def setTextStyle (self, row: int, col, nContent: int, id: PyDb.ObjectId)-> None : ...
    def setTextStyle (self, *args, **kwargs)-> None :
      '''Overloads:
    - id: PyDb.ObjectId, rowType: PyDb.RowType
    - row: int, col: int, id: PyDb.ObjectId
    - row: int, col, nContent: int, id: PyDb.ObjectId
    '''
    ...
    def setVertCellMargin (self, val : float)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setWidth (self, val : float)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def suppressHeaderRow (self, val : bool)-> None :
      '''                             '''
    ...
    def suppressInvisibleGrid (self, val : bool)-> None :
      '''                             '''
    ...
    def suppressRegenerateTable (self, val : bool)-> None :
      '''                             '''
    ...
    def suppressTitleRow (self, val : bool)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def tableRotation (self)-> float :
      '''                             '''
    ...
    def tableStyle (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def tableStyleOverrides (self)-> list :
      '''                             '''
    ...

    @overload
    def textHeight (self, rowType: PyDb.RowType)-> float : ...
    @overload
    def textHeight (self, row: int, col: int)-> float : ...
    @overload
    def textHeight (self, row: int, col: int, content: int)-> float : ...
    def textHeight (self, *args, **kwargs)-> float :
      '''Overloads:
    - rowType: PyDb.RowType
    - row: int, col: int
    - row: int, col: int, content: int
    '''
    ...
    def textRotation (self, row: int, col: int)-> PyDb.RotationAngle :
      '''                             '''
    ...

    @overload
    def textString (self, row: int, col: int)-> str : ...
    @overload
    def textString (self, row: int, col: int, content: int)-> str : ...
    @overload
    def textString (self, cell: PyDb.Cell)-> str : ...
    def textString (self, *args, **kwargs)-> str :
      '''Overloads:
    - row: int, col: int
    - row: int, col: int, content: int
    - cell: PyDb.Cell
    '''
    ...

    @overload
    def textStringFmt (self, row: int, col: int, nOption: ValueFormatOption)-> str : ...
    @overload
    def textStringFmt (self, row: int, col: int, content: int, nOption: ValueFormatOption)-> str : ...
    @overload
    def textStringFmt (self, cell: PyDb.Cell, nOption: ValueFormatOption)-> str : ...
    def textStringFmt (self, *args, **kwargs)-> str :
      '''Overloads:
    - row: int, col: int, nOption: ValueFormatOption
    - row: int, col: int, content: int, nOption: ValueFormatOption
    - cell: PyDb.Cell, nOption: ValueFormatOption
    '''
    ...

    @overload
    def textStyle (self, rowType: PyDb.RowType)-> PyDb.ObjectId : ...
    @overload
    def textStyle (self, row: int, col: int)-> PyDb.ObjectId : ...
    @overload
    def textStyle (self, row: int, col: int, content: int)-> PyDb.ObjectId : ...
    def textStyle (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - rowType: PyDb.RowType
    - row: int, col: int
    - row: int, col: int, content: int
    '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def treatAsAcDbBlockRefForExplode (self)-> bool :
      '''                             '''
    ...
    def unmergeCells (self, minRow: int, maxRow: int, minCol: int, maxCol: int)-> None :
      '''                             '''
    ...

    @overload
    def updateDataLink (self, nDir: UpdateDirection, nOption: UpdateOption)-> None : ...
    @overload
    def updateDataLink (self, row: int, col: int, nDir: UpdateDirection, nOption: UpdateOption)-> None : ...
    def updateDataLink (self, *args, **kwargs)-> None :
      '''Overloads:
    - nDir: UpdateDirection, nOption: UpdateOption
    - row: int, col: int, nDir: UpdateDirection, nOption: UpdateOption
    '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def vertCellMargin (self)-> float :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def width (self)-> float :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class TableBreakFlowDirection(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kTableBreakFlowDownOrUp (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableBreakFlowLeft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableIteratorNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class TableBreakOption(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kTableBreakAllowManualHeights (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableBreakAllowManualPositions (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableBreakEnableBreaking (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableBreakNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableBreakRepeatBottomLabels (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableBreakRepeatTopLabels (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class TableFlowDirection(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kExactly (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTtoB (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class TableHitItem(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kTableHitCell (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableHitColumnIndicator (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableHitGridLine (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableHitNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableHitRowIndicator (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class TableIteratorOption(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kTableIteratorIterateColumns (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableIteratorIterateDataLinks (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableIteratorIterateRows (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableIteratorIterateSelection (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableIteratorNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableIteratorReverseOrder (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableIteratorSkipMerged (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableIteratorSkipReadOnlyContent (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTableIteratorSkipReadOnlyFormat (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class TableStyle(DbObject):
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode.kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...

    @overload
    def alignment (self, rowType: PyDb.RowType)-> PyDb.CellAlignment : ...
    @overload
    def alignment (self, cellStyle: str)-> PyDb.CellAlignment : ...
    def alignment (self, *args, **kwargs)-> PyDb.CellAlignment :
      '''Overloads:
    - rowType: PyDb.RowType
    - cellStyle: str
    '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...

    @overload
    def backgroundColor (self, rowType: PyDb.RowType)-> PyDb.Color : ...
    @overload
    def backgroundColor (self, cellStyle: str)-> PyDb.Color : ...
    def backgroundColor (self, *args, **kwargs)-> PyDb.Color :
      '''Overloads:
    - rowType: PyDb.RowType
    - cellStyle: str
    '''
    ...
    def bitFlags (self)-> int :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.TableStyle :
      '''                             '''
    ...
    def cellClass (self, pszCellStyle: str)-> int :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.TableStyle :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...

    @overload
    def color (self, rowType: PyDb.RowType)-> PyDb.Color : ...
    @overload
    def color (self, cellStyle: str)-> PyDb.Color : ...
    def color (self, *args, **kwargs)-> PyDb.Color :
      '''Overloads:
    - rowType: PyDb.RowType
    - cellStyle: str
    '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyCellStyle (self, pszSrcCellStyle: str, pszTargetCellStyle: str)-> None :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...

    @overload
    def createCellStyle (self, /)-> str : ...
    @overload
    def createCellStyle (self, pszCellStyle: str)-> str : ...
    @overload
    def createCellStyle (self, pszCellStyle: str, fromCellStyle: str)-> str : ...
    def createCellStyle (self, *args, **kwargs)-> str :
      '''Overloads:
    - None: Any
    - pszCellStyle: str
    - pszCellStyle: str, fromCellStyle: str
    '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def deleteCellStyle (self, pszCellStyle: str)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def description (self)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def enableMergeAll (self, val: bool, pszCellStyle: str)-> None :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def flowDirection (self)-> PyDb.TableFlowDirection :
      '''                             '''
    ...

    @overload
    def format (self, /)-> str : ...
    @overload
    def format (self, rowType: PyDb.RowType)-> str : ...
    @overload
    def format (self, cellStyle: str)-> str : ...
    def format (self, *args, **kwargs)-> str :
      '''Overloads:
    - None: Any
    - rowType: PyDb.RowType
    - cellStyle: str
    '''
    ...
    def getCellStyles (self)-> list :
      '''                             '''
    ...

    @overload
    def getDataType (self, rowType: PyDb.RowType)-> tuple : ...
    @overload
    def getDataType (self, cellStyle: str)-> tuple : ...
    def getDataType (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - rowType: PyDb.RowType
    - cellStyle: str
    '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGridProperty (self, gridLineType: PyDb.GridLineType, pszCellStyle: str)-> object :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getName (self)-> str :
      '''                             '''
    ...
    def getTemplate (self)-> PyDb.ObjectId :
      '''                             '''
    ...

    @overload
    def gridColor (self, gridLineType: PyDb.GridLineType ,rowType: PyDb.RowType)-> PyDb.Color : ...
    @overload
    def gridColor (self, gridLineType: PyDb.GridLineType ,cellStyle: str)-> PyDb.Color : ...
    def gridColor (self, *args, **kwargs)-> PyDb.Color :
      '''Overloads:
    - gridLineType: PyDb.GridLineType ,rowType: PyDb.RowType
    - gridLineType: PyDb.GridLineType ,cellStyle: str
    '''
    ...
    def gridDoubleLineSpacing (self, gridLineType: PyDb.GridLineType, pszCellStyle: str)-> float :
      '''                             '''
    ...
    def gridLineStyle (self, gridLineType: PyDb.GridLineType, pszCellStyle: str)-> PyDb.GridLineStyle :
      '''                             '''
    ...

    @overload
    def gridLineWeight (self, gridLineType: PyDb.GridLineType ,rowType: PyDb.RowType)-> PyDb.LineWeight : ...
    @overload
    def gridLineWeight (self, gridLineType: PyDb.GridLineType ,cellStyle: str)-> PyDb.LineWeight : ...
    def gridLineWeight (self, *args, **kwargs)-> PyDb.LineWeight :
      '''Overloads:
    - gridLineType: PyDb.GridLineType ,rowType: PyDb.RowType
    - gridLineType: PyDb.GridLineType ,cellStyle: str
    '''
    ...
    def gridLinetype (self, gridLineType: PyDb.GridLineType, pszCellStyle: str)-> PyDb.ObjectId :
      '''                             '''
    ...

    @overload
    def gridVisibility (self, gridLineType: PyDb.GridLineType ,rowType: PyDb.RowType)-> PyDb.Visibility : ...
    @overload
    def gridVisibility (self, gridLineType: PyDb.GridLineType ,cellStyle: str)-> PyDb.Visibility : ...
    def gridVisibility (self, *args, **kwargs)-> PyDb.Visibility :
      '''Overloads:
    - gridLineType: PyDb.GridLineType ,rowType: PyDb.RowType
    - gridLineType: PyDb.GridLineType ,cellStyle: str
    '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def horzCellMargin (self)-> float :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isBackgroundColorNone (self, rowType: PyDb.RowType)-> bool :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isCellStyleInUse (self, pszCellStyle: str)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isHeaderSuppressed (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isMergeAllEnabled (self, pszCellStyle: str)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTitleSuppressed (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def margin (self, nMargin: PyDb.CellMargin, pszCellStyle: str)-> float :
      '''                             '''
    ...
    def numCellStyles (self)-> int :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def postTableStyleToDb (self, db: PyDb.Database, styleName: str)-> PyDb.ObjectId :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def removeTemplate (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def renameCellStyle (self, pszOldName: str, pszNewName: str)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self, pszCellStyle: str)-> float :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...

    @overload
    def setAlignment (self, val:  PyDb.CellAlignment, rowType: PyDb.RowType)-> None : ...
    @overload
    def setAlignment (self, val:  PyDb.CellAlignment, cellStyle: str)-> None : ...
    def setAlignment (self, *args, **kwargs)-> None :
      '''Overloads:
    - val:  PyDb.CellAlignment, rowType: PyDb.RowType
    - val:  PyDb.CellAlignment, cellStyle: str
    '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...

    @overload
    def setBackgroundColor (self, val:  PyDb.Color, rowType: PyDb.RowType)-> None : ...
    @overload
    def setBackgroundColor (self, val:  PyDb.Color, cellStyle: str)-> None : ...
    def setBackgroundColor (self, *args, **kwargs)-> None :
      '''Overloads:
    - val:  PyDb.Color, rowType: PyDb.RowType
    - val:  PyDb.Color, cellStyle: str
    '''
    ...
    def setBackgroundColorNone (self, val: bool, rowType: PyDb.RowType)-> None :
      '''                             '''
    ...
    def setBitFlags (self, flags: int)-> None :
      '''                             '''
    ...
    def setCellClass (self, val: int, pszCellStyle: str)-> None :
      '''                             '''
    ...

    @overload
    def setColor (self, val:  PyDb.Color, rowType: PyDb.RowType)-> None : ...
    @overload
    def setColor (self, val:  PyDb.Color, cellStyle: str)-> None : ...
    def setColor (self, *args, **kwargs)-> None :
      '''Overloads:
    - val:  PyDb.Color, rowType: PyDb.RowType
    - val:  PyDb.Color, cellStyle: str
    '''
    ...

    @overload
    def setDataType (self, nDataType: PyDb.ValueDataType, nUnitType: PyDb.ValueDataType)-> None : ...
    @overload
    def setDataType (self, nDataType: PyDb.ValueDataType, nUnitType: PyDb.ValueDataType, rowType: PyDb.RowType)-> None : ...
    @overload
    def setDataType (self, nDataType: PyDb.ValueDataType, nUnitType: PyDb.ValueDataType, cellStyle: str)-> None : ...
    def setDataType (self, *args, **kwargs)-> None :
      '''Overloads:
    - nDataType: PyDb.ValueDataType, nUnitType: PyDb.ValueDataType
    - nDataType: PyDb.ValueDataType, nUnitType: PyDb.ValueDataType, rowType: PyDb.RowType
    - nDataType: PyDb.ValueDataType, nUnitType: PyDb.ValueDataType, cellStyle: str
    '''
    ...
    def setDescription (self, val: str)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setFlowDirection (self, val: PyDb.TableFlowDirection)-> None :
      '''                             '''
    ...

    @overload
    def setFormat (self, sFormat: str)-> None : ...
    @overload
    def setFormat (self, sFormat: str, rowType: PyDb.RowType)-> None : ...
    @overload
    def setFormat (self, sFormat: str, cellStyle: str)-> None : ...
    def setFormat (self, *args, **kwargs)-> None :
      '''Overloads:
    - sFormat: str
    - sFormat: str, rowType: PyDb.RowType
    - sFormat: str, cellStyle: str
    '''
    ...

    @overload
    def setGridColor (self, clr: PyDb.Color, gridLineType: PyDb.GridLineType ,rowType: PyDb.RowType)-> None : ...
    @overload
    def setGridColor (self, clr: PyDb.Color, gridLineType: PyDb.GridLineType ,cellStyle: str)-> None : ...
    def setGridColor (self, *args, **kwargs)-> None :
      '''Overloads:
    - clr: PyDb.Color, gridLineType: PyDb.GridLineType ,rowType: PyDb.RowType
    - clr: PyDb.Color, gridLineType: PyDb.GridLineType ,cellStyle: str
    '''
    ...
    def setGridDoubleLineSpacing (self, val: float, gridLineTypes: PyDb.GridLineType, pszCellStyle: str)-> None :
      '''                             '''
    ...
    def setGridLineStyle (self, nLineStyle: PyDb.GridLineStyle, gridLineType: PyDb.GridLineType, pszCellStyle: str)-> None :
      '''                             '''
    ...

    @overload
    def setGridLineWeight (self, lineWeight: PyDb.LineWeight, gridLineType: PyDb.GridLineType ,rowType: PyDb.RowType)-> None : ...
    @overload
    def setGridLineWeight (self, lineWeight: PyDb.LineWeight, gridLineType: PyDb.GridLineType ,cellStyle: str)-> None : ...
    def setGridLineWeight (self, *args, **kwargs)-> None :
      '''Overloads:
    - lineWeight: PyDb.LineWeight, gridLineType: PyDb.GridLineType ,rowType: PyDb.RowType
    - lineWeight: PyDb.LineWeight, gridLineType: PyDb.GridLineType ,cellStyle: str
    '''
    ...
    def setGridLinetype (self, id: PyDb.ObjectId, gridLineType: PyDb.GridLineType, pszCellStyle: str)-> None :
      '''                             '''
    ...
    def setGridProperty (self, gridProp: PyDb.GridProperty, gridLineType: PyDb.GridLineType, pszCellStyle: str)-> None :
      '''                             '''
    ...

    @overload
    def setGridVisibility (self, vis: PyDb.Visibility, gridLineType: PyDb.GridLineType ,rowType: PyDb.RowType)-> None : ...
    @overload
    def setGridVisibility (self, vis: PyDb.Visibility, gridLineType: PyDb.GridLineType ,cellStyle: str)-> None : ...
    def setGridVisibility (self, *args, **kwargs)-> None :
      '''Overloads:
    - vis: PyDb.Visibility, gridLineType: PyDb.GridLineType ,rowType: PyDb.RowType
    - vis: PyDb.Visibility, gridLineType: PyDb.GridLineType ,cellStyle: str
    '''
    ...
    def setHorzCellMargin (self, val: float)-> None :
      '''                             '''
    ...
    def setMargin (self, nMargins: PyDb.CellMargin, val: float, pszCellStyle: str)-> None :
      '''                             '''
    ...
    def setName (self, val: str)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setRotation (self, val: float, pszCellStyle: str)-> None :
      '''                             '''
    ...
    def setTemplate (self, id: PyDb.ObjectId, nOption: PyDb.MergeCellStyleOption)-> None :
      '''                             '''
    ...

    @overload
    def setTextHeight (self, val: float, rowType: PyDb.RowType)-> None : ...
    @overload
    def setTextHeight (self, val: float, cellStyle: str)-> None : ...
    def setTextHeight (self, *args, **kwargs)-> None :
      '''Overloads:
    - val: float, rowType: PyDb.RowType
    - val: float, cellStyle: str
    '''
    ...

    @overload
    def setTextStyle (self, id: PyDb.ObjectId, rowType: PyDb.RowType)-> None : ...
    @overload
    def setTextStyle (self, id: PyDb.ObjectId, cellStyle: str)-> None : ...
    def setTextStyle (self, *args, **kwargs)-> None :
      '''Overloads:
    - id: PyDb.ObjectId, rowType: PyDb.RowType
    - id: PyDb.ObjectId, cellStyle: str
    '''
    ...
    def setVertCellMargin (self, val: float)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def suppressHeaderRow (self, val: bool)-> None :
      '''                             '''
    ...
    def suppressTitleRow (self, val: bool)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...

    @overload
    def textHeight (self, rowType: PyDb.RowType)-> float : ...
    @overload
    def textHeight (self, cellStyle: str)-> float : ...
    def textHeight (self, *args, **kwargs)-> float :
      '''Overloads:
    - rowType: PyDb.RowType
    - cellStyle: str
    '''
    ...

    @overload
    def textStyle (self, rowType: PyDb.RowType)-> PyDb.ObjectId : ...
    @overload
    def textStyle (self, cellStyle: str)-> PyDb.ObjectId : ...
    def textStyle (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - rowType: PyDb.RowType
    - cellStyle: str
    '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def vertCellMargin (self)-> float :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class Text(Entity):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, position: PyGe.Point3d, text: str)-> None : ...
    @overload
    def __init__ (self, position: PyGe.Point3d, text: str, height: float, rotation: float)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - position: PyGe.Point3d, text: str
    - position: PyGe.Point3d, text: str, height: float, rotation: float
    - id: PyDb.ObjectId
    - id: PyDb.ObjectId, mode: PyDb.OpenMode
    - id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool
    '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def adjustAlignment (self, val : Database)-> None :
      '''                             '''
    ...
    def alignmentPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Text :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Text :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def convertFieldToText (self)-> None :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def correctSpelling (self)-> int :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getBoundingPoints (self)-> list :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def height (self)-> float :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def hitTest (self, val : PyGe.Point3d)-> bool :
      '''                             '''
    ...
    def horizontalMode (self)-> PyDb.TextHorzMode :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isDefaultAlignment (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isMirroredInX (self)-> bool :
      '''                             '''
    ...
    def isMirroredInY (self)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def justification (self)-> PyDb.TextAlignment :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def mirrorInX (self, val : bool)-> None :
      '''                             '''
    ...
    def mirrorInY (self, val : bool)-> None :
      '''                             '''
    ...
    def normal (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def oblique (self)-> float :
      '''                             '''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def position (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self)-> float :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAlignmentPoint (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setHeight (self, val : float)-> None :
      '''                             '''
    ...
    def setHorizontalMode (self, val : PyDb.TextHorzMode)-> None :
      '''                             '''
    ...
    def setJustification (self, val : PyDb.TextAlignment)-> None :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self, val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOblique (self, val : float)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, pos : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setRotation (self, val : float)-> None :
      '''                             '''
    ...
    def setTextString (self, val : str)-> None :
      '''                             '''
    ...
    def setTextStyle (self, val : ObjectId)-> None :
      '''                             '''
    ...
    def setThickness (self, val : float)-> None :
      '''                             '''
    ...
    def setVerticalMode (self, val : PyDb.TextVertMode)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setWidthFactor (self, val : float)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textString (self)-> str :
      '''                             '''
    ...
    def textStyle (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def thickness (self)-> float :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def verticalMode (self)-> PyDb.TextHorzMode :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def widthFactor (self)-> float :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class TextAlignment(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kTextAlignmentAligned (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextAlignmentBottomCenter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextAlignmentBottomLeft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextAlignmentBottomRight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextAlignmentCenter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextAlignmentFit (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextAlignmentLeft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextAlignmentMiddle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextAlignmentMiddleCenter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextAlignmentMiddleLeft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextAlignmentMiddleRight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextAlignmentRight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextAlignmentTopCenter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextAlignmentTopLeft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextAlignmentTopRight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class TextHorzMode(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kTextAlign (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextCenter (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextFit (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextLeft (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextMid (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTextRight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class TextStyleTable(SymbolTable):
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode=PyDb.OpenMode.kForRead)-> None :
      '''                             '''
    ...
    def add (self, val: PyDb.TextStyleTableRecord)-> PyDb.ObjectId :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.TextStyleTable :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.TextStyleTable :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getAt (self, val: str)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has (self, val: str|PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def recordIds (self)-> list :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def toDict (self)-> dict :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class TextStyleTableRecord(SymbolTableRecord):
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode.kForRead)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bigFontFileName (self)-> str :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.TextStyleTableRecord :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.TextStyleTableRecord :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def fileName (self)-> str :
      '''                             '''
    ...
    def flagBits (self)-> int :
      '''                             '''
    ...
    def font (self)-> tuple :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getName (self)-> str :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isDependent (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isRenamable (self)-> bool :
      '''                             '''
    ...
    def isResolved (self)-> bool :
      '''                             '''
    ...
    def isShapeFile (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isVertical (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def name (self)-> str :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def obliquingAngle (self)-> float :
      '''                             '''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def priorSize (self)-> float :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBigFontFileName (self, val : str)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setFileName (self, val : str)-> None :
      '''                             '''
    ...
    def setFlagBits (self, *args, **kwargs)-> None :
      '''setFlagBits( (TextStyleTableRecord)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlagBits(class PyDbTextStyleTableRecord {lvalue},unsigned char)'''
    ...
    def setFont (self, *args, **kwargs)-> None :
      '''setFont( (TextStyleTableRecord)arg1, (str)arg2, (bool)arg3, (bool)arg4, (int)arg5, (int)arg6, (int)arg7, (bool)arg8) -> None :

    C++ signature :
        void setFont(class PyDbTextStyleTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool,int,int,int,bool)'''
    ...
    def setIsShapeFile (self, val : bool)-> None :
      '''                             '''
    ...
    def setIsVertical (self, val : bool)-> None :
      '''                             '''
    ...
    def setName (self, name: str)-> None :
      '''                             '''
    ...
    def setObliquingAngle (self, val : float)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPriorSize (self, val : int)-> None :
      '''                             '''
    ...
    def setTextSize (self, val : float)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def setXScale (self, val : float)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def textSize (self)-> float :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xScale (self)-> float :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class TimeZone(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kAbuDhabi (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAdelaide (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAlaska (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAlmaty (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kArizona (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAthens (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAtlanticCanada (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAzores (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBaghdad (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBangkok (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBeijing (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBerlin (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBogota (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBrasilia (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBrisbane (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBuenosAires (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCairo (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCapeVerde (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCaracas (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCaucasus (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCentral (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCentralAmerica (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDarwin (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDhaka (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEastAfrica (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEastern (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEasternEurope (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kEkaterinburg (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kFiji (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kGMT (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kGreenland (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kGuam (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHarare (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHawaii (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHelsinki (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHobart (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kIndiana (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kInternationalDateLine (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kIrkutsk (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kIslamabad (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kJerusalem (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kKabul (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kKathmandu (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kKolkata (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kKrasnoyarsk (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMagadan (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMazatlan (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMexicoCity (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMidAtlantic (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMidwayIsland (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMonrovia (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMoscow (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kMountain (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kNewfoundland (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPacific (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kParis (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPerth (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPrague (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kRangoon (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kRiyadh (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSantiago (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSarajevo (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSaskatchewan (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSeoul (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSingapore (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSriLanka (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSydney (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTaipei (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTehran (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTokyo (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kTonga (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUTC (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVladivostock (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kWellington (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kWestCentralAfrica (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kYakutsk (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class Transaction(PyRx.RxObject):
    def __init__ (self, *args, **kwargs)-> None :
      '''Raises an exception
This class cannot be instantiated from Python'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> PyRx.RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def getAllObjects (self, *args, **kwargs)-> list :
      '''getAllObjects( (Transaction)arg1) -> list :

    C++ signature :
        class boost::python::list getAllObjects(class PyTransaction {lvalue})'''
    ...
    def getObject (self, *args, **kwargs)-> PyDb.DbObject :
      '''getObject( (Transaction)arg1, (ObjectId)arg2) -> DbObject :

    C++ signature :
        class PyDbObject getObject(class PyTransaction {lvalue},class PyDbObjectId)

getObject( (Transaction)arg1, (ObjectId)arg2, (OpenMode)arg3) -> DbObject :

    C++ signature :
        class PyDbObject getObject(class PyTransaction {lvalue},class PyDbObjectId,enum AcDb::OpenMode)

getObject( (Transaction)arg1, (ObjectId)arg2, (OpenMode)arg3, (bool)arg4) -> DbObject :

    C++ signature :
        class PyDbObject getObject(class PyTransaction {lvalue},class PyDbObjectId,enum AcDb::OpenMode,bool)'''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def numOpenedObjects (self, *args, **kwargs)-> int :
      '''numOpenedObjects( (Transaction)arg1) -> int :

    C++ signature :
        int numOpenedObjects(class PyTransaction {lvalue})'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...

class TransactionManager(PyRx.RxObject):
    def __init__ (self)-> None :
      '''                             '''
    ...
    def abortTransaction (self)-> None :
      '''                             '''
    ...
    def addNewlyCreatedDBRObject (self, obj: DbObject, add: bool=True)-> None :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def endTransaction (self)-> None :
      '''                             '''
    ...
    def getAllObjects (self)-> list :
      '''                             '''
    ...
    def getObject (self, id: ObjectId, mode: OpenMode=OpenMode.kForRead, openErasedObject: bool=False)-> PyDb.DbObject :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def numActiveTransactions (self)-> int :
      '''                             '''
    ...
    def numOpenedObjects (self)-> int :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def queueForGraphicsFlush (self)-> None :
      '''                             '''
    ...
    def startTransaction (self)-> PyDb.Transaction :
      '''                             '''
    ...
    def topTransaction (self)-> PyDb.Transaction :
      '''                             '''
    ...

class Transparency(object):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (int)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,unsigned char)

__init__( (object)arg1, (float)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,double)'''
    ...
    def alpha (self)-> int :
      '''                             '''
    ...
    def alphaPercent (self)-> float :
      '''                             '''
    ...
    def isByAlpha (self)-> bool :
      '''                             '''
    ...
    def isByBlock (self)-> bool :
      '''                             '''
    ...
    def isByLayer (self)-> bool :
      '''                             '''
    ...
    def isClear (self)-> bool :
      '''                             '''
    ...
    def isInvalid (self)-> bool :
      '''                             '''
    ...
    def isSolid (self)-> bool :
      '''                             '''
    ...
    def setAlpha (self, alpha : int)-> None :
      '''                             '''
    ...
    def setAlphaPercent (self, alphaPercent : float)-> None :
      '''                             '''
    ...

class TransparencyMethod(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kByAlpha (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kByBlock (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kByLayer (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kErrorValue (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class UCSTable(SymbolTable):
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode=PyDb.OpenMode.kForRead)-> None :
      '''                             '''
    ...
    def add (self, val: PyDb.UCSTableRecord)-> PyDb.ObjectId :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.UCSTable :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.UCSTable :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getAt (self, val: str)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has (self, val: str|PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def recordIds (self)-> list :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def toDict (self)-> dict :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class UCSTableRecord(SymbolTableRecord):
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode.kForRead)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.UCSTableRecord :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.UCSTableRecord :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getName (self)-> str :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isDependent (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isRenamable (self)-> bool :
      '''                             '''
    ...
    def isResolved (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def name (self)-> str :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def origin (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setName (self, name: str)-> None :
      '''                             '''
    ...
    def setOrigin (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setUcsBaseOrigin (self, val : PyGe.Point3d, view : PyDb.OrthographicView)-> None :
      '''                             '''
    ...
    def setXAxis (self, val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def setYAxis (self, val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def ucsBaseOrigin (self, view : PyDb.OrthographicView)-> PyGe.Point3d :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xAxis (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...
    def yAxis (self)-> PyGe.Vector3d :
      '''                             '''
    ...

class UnderlayDefinition(DbObject):
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode.kForRead)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.UnderlayDefinition :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.UnderlayDefinition :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...

    @staticmethod
    def dictionaryKey (underlayDefinitionType: PyRx.RxClass)-> str :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getActiveFileName (self)-> str :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getItemName (self)-> str :
      '''                             '''
    ...
    def getSourceFileName (self)-> str :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isLoaded (self)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def load (self, passwd : str=None)-> None :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setItemName (self, item : str)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setSourceFileName (self, file : str)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def unload (self)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class UnderlayLayer(object):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def name (self)-> str :
      '''                             '''
    ...
    def setName (self, name : str)-> None :
      '''                             '''
    ...
    def setState (self, state : bool)-> None :
      '''                             '''
    ...
    def state (self)-> bool :
      '''                             '''
    ...

class UnderlayReference(Entity):
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode.kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.UnderlayReference :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def clipBoundary (self)-> list :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.UnderlayReference :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def contrast (self)-> int :
      '''                             '''
    ...

    @staticmethod
    def contrastDefault ()-> int :
      '''                             '''
    ...

    @staticmethod
    def contrastLowerLimit ()-> int :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def definitionId (self)-> PyDb.ObjectId :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def fade (self)-> int :
      '''                             '''
    ...

    @staticmethod
    def fadeDefault ()-> int :
      '''                             '''
    ...

    @staticmethod
    def fadeLowerLimit ()-> int :
      '''                             '''
    ...

    @staticmethod
    def fadeUpperLimit ()-> int :
      '''                             '''
    ...
    def generateClipBoundaryFromPline (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def getUnderlayLayer (self, val : int)-> PyDb.UnderlayLayer :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def height (self)-> float :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAdjustedForBackground (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isClipInverted (self)-> bool :
      '''                             '''
    ...
    def isClipped (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isFramePlottable (self)-> bool :
      '''                             '''
    ...
    def isFrameVisible (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isMonochrome (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isOn (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def normal (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def position (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self)-> float :
      '''                             '''
    ...
    def scaleFactors (self)-> PyGe.Scale3d :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setClipBoundary (self, pnts : list[PyGe.Point2d])-> None :
      '''                             '''
    ...
    def setClipInverted (self, val : bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setContrast (self, val : int)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setDefinitionId (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setFade (self, val : int)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setHeight (self, val : float)-> None :
      '''                             '''
    ...
    def setIsAdjustedForBackground (self, val : bool)-> None :
      '''                             '''
    ...
    def setIsClipped (self, val : bool)-> None :
      '''                             '''
    ...
    def setIsMonochrome (self, val : bool)-> None :
      '''                             '''
    ...
    def setIsOn (self, val : bool)-> None :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setNormal (self, val : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setRotation (self, val : float)-> None :
      '''                             '''
    ...
    def setScaleFactors (self, val : PyGe.Scale3d)-> None :
      '''                             '''
    ...
    def setTransform (self, val : PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def setUnderlayLayer (self, val : int, layer : PyDb.UnderlayLayer)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setWidth (self, val : float)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def underlayLayerCount (self)-> int :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def width (self)-> float :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class UnitsValue(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kUnitsAngstroms (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsAstronomical (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsCentimeters (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsDecimeters (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsDekameters (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsFeet (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsGigameters (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsHectometers (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsInches (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsKilometers (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsLightYears (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsMax (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsMeters (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsMicroinches (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsMicrons (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsMiles (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsMillimeters (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsMils (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsNanometers (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsParsecs (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsUSSurveyFeet (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsUSSurveyInch (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsUSSurveyMile (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsUSSurveyYard (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsUndefined (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitsYards (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class UpdateDirection(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kUpdateDirDataToSource (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUpdateDirSourceToData (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class UpdateOption(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kSkipFormatAfterFirstUpdate (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUpdateOptionAllowSourceUpdate (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUpdateOptionForPreview (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUpdateOptionForceFullSourceUpdate (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUpdateOptionIncludeXrefs (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUpdateOptionNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUpdateOptionOverwriteContentModifiedAfterUpdate (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUpdateOptionOverwriteFormatModifiedAfterUpdate (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUpdateOptionSkipFormat (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUpdateOptionUpdateColumnWidth (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUpdateOptionUpdateRowHeight (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class ValueDataType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def k3dPoint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kBuffer (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kColor (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDate (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDouble (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kGeneral (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kLong (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kObjectId (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPoint (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kResbuf (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kString (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnknown (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class ValueFormatOption(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kForEditing (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kForExpression (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kFormatOptionNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kIgnoreMtextFormat (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUseMaximumPrecision (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class ValueParseOption(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kChangeDataType (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kConvertTextToValue (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kParseOptionNone (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kParseTextForFieldCode (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPreserveMtextFormat (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kSetDefaultFormat (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class ValueUnitType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kAngle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kAngleNotTransformed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kArea (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kCurrency (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kDistance (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kPercentage (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kUnitless (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVolume (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class Vertex(Entity):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - id: PyDb.ObjectId
    - id: PyDb.ObjectId, mode: PyDb.OpenMode
    - id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool
    '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Vertex :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Vertex :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class Vertex2d(Vertex):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, pos : PyGe.Point3d, bulge: float, startWidth: float, endWidth: float, tangent:float, vertexId: int)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - pos : PyGe.Point3d, bulge: float, startWidth: float, endWidth: float, tangent:float, vertexId: int
    - id: PyDb.ObjectId
    - id: PyDb.ObjectId, mode: PyDb.OpenMode
    - id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool
    '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def bulge (self)-> float :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Vertex2d :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Vertex2d :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def endWidth (self)-> float :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def ignoreTangent (self)-> None :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTangentUsed (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def position (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBulge (self, val : float)-> None :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setEndWidth (self, val : float)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setStartWidth (self, val : float)-> None :
      '''                             '''
    ...
    def setTangent (self, val : float)-> None :
      '''                             '''
    ...
    def setTangentUsed (self, val : bool)-> None :
      '''                             '''
    ...
    def setVertexIdentifier (self, val : int)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def startWidth (self)-> float :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def tangent (self)-> float :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def useTangent (self)-> None :
      '''                             '''
    ...
    def vertexIdentifier (self)-> int :
      '''                             '''
    ...
    def vertexType (self)-> PyDb.Vertex2dType :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class Vertex2dType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def k2dCurveFitVertex (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k2dSplineCtlVertex (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k2dSplineFitVertex (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def k2dVertex (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class ViewTable(AbstractViewTable):
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode=PyDb.OpenMode.kForRead)-> None :
      '''                             '''
    ...
    def add (self, val: PyDb.AbstractViewTableRecord)-> PyDb.ObjectId :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.AbstractViewTable :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.AbstractViewTable :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getAt (self, val: str)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has (self, val: str|PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def recordIds (self)-> list :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def toDict (self)-> dict :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class ViewTableRecord(AbstractViewTableRecord):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def ambientLightColor (self)-> PyDb.Color :
      '''                             '''
    ...
    def annotationScale (self)-> PyDb.AnnotationScale :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def backClipDistance (self)-> float :
      '''                             '''
    ...
    def backClipEnabled (self)-> bool :
      '''                             '''
    ...
    def background (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def brightness (self)-> float :
      '''                             '''
    ...
    def camera (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.ViewTableRecord :
      '''                             '''
    ...
    def centerPoint (self)-> PyGe.Point2d :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.ViewTableRecord :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def contrast (self)-> float :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def defaultLightingType (self)-> object :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def disassociateUcsFromView (self)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevation (self)-> float :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def frontClipAtEye (self)-> bool :
      '''                             '''
    ...
    def frontClipDistance (self)-> float :
      '''                             '''
    ...
    def frontClipEnabled (self)-> bool :
      '''                             '''
    ...
    def getCategoryName (self)-> str :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getLayerState (self)-> str :
      '''                             '''
    ...
    def getLayout (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getName (self)-> str :
      '''                             '''
    ...
    def getUcs (self)-> tuple :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def height (self)-> float :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCameraPlottable (self)-> bool :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isDefaultLightingOn (self)-> bool :
      '''                             '''
    ...
    def isDependent (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPaperspaceView (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isRenamable (self)-> bool :
      '''                             '''
    ...
    def isResolved (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUcsAssociatedToView (self)-> bool :
      '''                             '''
    ...
    def isUcsOrthographic (self)-> tuple :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isViewAssociatedToViewport (self)-> bool :
      '''                             '''
    ...
    def isViewOrthographic (self)-> tuple :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def lensLength (self)-> float :
      '''                             '''
    ...
    def liveSection (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def name (self)-> str :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def perspectiveEnabled (self)-> bool :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAmbientLightColor (self, val : PyDb.Color)-> None :
      '''                             '''
    ...
    def setAnnotationScale (self, *args, **kwargs)-> None :
      '''setAnnotationScale( (ViewTableRecord)arg1, (AnnotationScale)arg2) -> None :

    C++ signature :
        void setAnnotationScale(class PyDbViewTableRecord {lvalue},class PyDbAnnotationScale)'''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBackClipDistance (self, val : float)-> None :
      '''                             '''
    ...
    def setBackClipEnabled (self, val : bool)-> None :
      '''                             '''
    ...
    def setBackground (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setBrightness (self, val : float)-> None :
      '''                             '''
    ...
    def setCamera (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setCategoryName (self, val : str)-> None :
      '''                             '''
    ...
    def setCenterPoint (self, val : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setContrast (self, val : float)-> None :
      '''                             '''
    ...
    def setDefaultLightingOn (self, val : bool)-> None :
      '''                             '''
    ...
    def setDefaultLightingType (self, *args, **kwargs)-> None :
      '''setDefaultLightingType( (AbstractViewTableRecord)arg1, (object)arg2) -> None :

    C++ signature :
        void setDefaultLightingType(class PyDbAbstractViewTableRecord {lvalue},enum AcGiViewportTraits::DefaultLightingType)'''
    ...
    def setElevation (self, val : float)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setFrontClipAtEye (self, val : bool)-> None :
      '''                             '''
    ...
    def setFrontClipDistance (self, val : float)-> None :
      '''                             '''
    ...
    def setFrontClipEnabled (self, val : bool)-> None :
      '''                             '''
    ...
    def setHeight (self, val : float)-> None :
      '''                             '''
    ...
    def setIsCameraPlottable (self, val : bool)-> None :
      '''                             '''
    ...
    def setIsPaperspaceView (self, val : bool)-> None :
      '''                             '''
    ...
    def setLayerState (self, val : str)-> None :
      '''                             '''
    ...
    def setLayout (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setLensLength (self, val : float)-> None :
      '''                             '''
    ...
    def setLiveSection (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setName (self, name: str)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setParametersFromViewport (self, *args, **kwargs)-> None :
      '''setParametersFromViewport( (ViewTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setParametersFromViewport(class PyDbViewTableRecord {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def setPerspectiveEnabled (self, val : bool)-> None :
      '''                             '''
    ...
    def setSun (self, retId : PyDb.ObjectId, pSun : PyDb.Object, eraseOldSun : bool=True)-> None :
      '''                             '''
    ...
    def setTarget (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setUcs (self, *args, **kwargs)-> None :
      '''setUcs( (AbstractViewTableRecord)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> None :

    C++ signature :
        void setUcs(class PyDbAbstractViewTableRecord {lvalue},class AcGePoint3d,class AcGeVector3d,class AcGeVector3d)

setUcs( (AbstractViewTableRecord)arg1, (OrthographicView)arg2) -> None :

    C++ signature :
        void setUcs(class PyDbAbstractViewTableRecord {lvalue},enum AcDb::OrthographicView)

setUcs( (AbstractViewTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setUcs(class PyDbAbstractViewTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setUcsToWorld (self)-> None :
      '''                             '''
    ...
    def setViewAssociatedToViewport (self, val : bool)-> None :
      '''                             '''
    ...
    def setViewDirection (self, *args, **kwargs)-> None :
      '''setViewDirection( (AbstractViewTableRecord)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setViewDirection(class PyDbAbstractViewTableRecord {lvalue},class AcGeVector3d)

setViewDirection( (AbstractViewTableRecord)arg1, (OrthographicView)arg2) -> None :

    C++ signature :
        void setViewDirection(class PyDbAbstractViewTableRecord {lvalue},enum AcDb::OrthographicView)'''
    ...
    def setViewTwist (self, val : float)-> None :
      '''                             '''
    ...
    def setVisualStyle (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setWidth (self, val : float)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def sunId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def target (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def ucsName (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewDirection (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def viewTwist (self)-> float :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visualStyle (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def width (self)-> float :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class Viewport(Entity):
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode.kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def ambientLightColor (self)-> PyDb.Color :
      '''                             '''
    ...
    def annotationScale (self)-> PyDb.AnnotationScale :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def backClipDistance (self)-> float :
      '''                             '''
    ...
    def background (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def brightness (self)-> float :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Viewport :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...
    def centerPoint (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def circleSides (self)-> int :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Viewport :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def contrast (self)-> float :
      '''                             '''
    ...
    def copied (self, obj: PyDb.Object, newobj: PyDb.Object)-> None :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def customScale (self)-> float :
      '''                             '''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def defaultLightingType (self)-> object :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def effectivePlotStyleSheet (self)-> str :
      '''                             '''
    ...
    def elevation (self)-> float :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def erased (self, obj: PyDb.Object, val: bool)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def freezeLayersInViewport (self, ids : list[PyDb.ObjectId])-> None :
      '''                             '''
    ...
    def frontClipDistance (self)-> float :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFrozenLayerList (self)-> list :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getLabelBlock (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getModelView (self)-> PyDb.XrefObjectId :
      '''                             '''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getSheetView (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def getUcs (self)-> tuple :
      '''                             '''
    ...
    def gridIncrement (self)-> PyGe.Vector2d :
      '''                             '''
    ...
    def gridMajor (self)-> int :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def height (self)-> float :
      '''                             '''
    ...
    def hiddenLinesRemoved (self)-> bool :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isBackClipOn (self)-> bool :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isDefaultLightingOn (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isFastZoomOn (self)-> bool :
      '''                             '''
    ...
    def isFrontClipAtEyeOn (self)-> bool :
      '''                             '''
    ...
    def isFrontClipOn (self)-> bool :
      '''                             '''
    ...
    def isGridAdaptive (self)-> bool :
      '''                             '''
    ...
    def isGridBoundToLimits (self)-> bool :
      '''                             '''
    ...
    def isGridFollow (self)-> bool :
      '''                             '''
    ...
    def isGridOn (self)-> bool :
      '''                             '''
    ...
    def isGridSubdivisionRestricted (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isLayerFrozenInViewport (self, val : PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def isLocked (self)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNonRectClipOn (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isOn (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPerspectiveOn (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isSnapIsometric (self)-> bool :
      '''                             '''
    ...
    def isSnapOn (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isTransparent (self)-> bool :
      '''                             '''
    ...
    def isUcsFollowModeOn (self)-> bool :
      '''                             '''
    ...
    def isUcsIconAtOrigin (self)-> bool :
      '''                             '''
    ...
    def isUcsIconVisible (self)-> bool :
      '''                             '''
    ...
    def isUcsOrthographic (self)-> tuple :
      '''                             '''
    ...
    def isUcsSavedWithViewport (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isViewOrthographic (self)-> tuple :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lensLength (self)-> float :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def modified (self, obj: PyDb.Object)-> None :
      '''                             '''
    ...
    def nonRectClipEntityId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def number (self)-> int :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotAsRaster (self)-> bool :
      '''                             '''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def plotStyleSheet (self)-> str :
      '''                             '''
    ...
    def plotWireframe (self)-> bool :
      '''                             '''
    ...
    def previousBackground (self, type: PyGi.DrawableType = 'AcGiDrawable::kGeometry')-> PyDb.ObjectId :
      '''                             '''
    ...
    def previousBackgroundForcedSwitch (self)-> bool :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeHiddenLines (self, val: bool=True)-> None :
      '''                             '''
    ...
    def removeLabelBlock (self)-> None :
      '''                             '''
    ...
    def removeModelView (self)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def removeSheetView (self)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAmbientLightColor (self, clr: PyDb.AcCmColor)-> None :
      '''                             '''
    ...
    def setAnnotationScale (self, *args, **kwargs)-> None :
      '''setAnnotationScale( (Viewport)arg1, (AnnotationScale)arg2) -> None :

    C++ signature :
        void setAnnotationScale(class PyDbViewport {lvalue},class PyDbAnnotationScale)'''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBackClipDistance (self, val: float)-> None :
      '''                             '''
    ...
    def setBackClipOff (self)-> None :
      '''                             '''
    ...
    def setBackClipOn (self, val: bool=True)-> None :
      '''                             '''
    ...
    def setBackground (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setBrightness (self, val : float)-> None :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setCenterPoint (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setCircleSides (self, val : int)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setContrast (self, val : float)-> None :
      '''                             '''
    ...
    def setCustomScale (self, val: float)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setDefaultLightingOn (self, val : bool)-> None :
      '''                             '''
    ...
    def setDefaultLightingType (self, *args, **kwargs)-> None :
      '''setDefaultLightingType( (Viewport)arg1, (object)arg2) -> None :

    C++ signature :
        void setDefaultLightingType(class PyDbViewport {lvalue},enum AcGiViewportTraits::DefaultLightingType)'''
    ...
    def setElevation (self, val: float)-> None :
      '''                             '''
    ...
    def setFastZoomOff (self)-> None :
      '''                             '''
    ...
    def setFastZoomOn (self, val: bool=True)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setFrontClipAtEyeOff (self)-> None :
      '''                             '''
    ...
    def setFrontClipAtEyeOn (self, val: bool=True)-> None :
      '''                             '''
    ...
    def setFrontClipDistance (self, *args, **kwargs)-> None :
      '''setFrontClipDistance( (Viewport)arg1, (float)arg2) -> None :

    C++ signature :
        void setFrontClipDistance(class PyDbViewport {lvalue},double)'''
    ...
    def setFrontClipOff (self)-> None :
      '''                             '''
    ...
    def setFrontClipOn (self, *args, **kwargs)-> None :
      '''setFrontClipOn( (Viewport)arg1) -> None :

    C++ signature :
        void setFrontClipOn(class PyDbViewport {lvalue})

setFrontClipOn( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setFrontClipOn(class PyDbViewport {lvalue},bool)'''
    ...
    def setGridAdaptive (self, val : bool)-> None :
      '''                             '''
    ...
    def setGridBoundToLimits (self, val : bool)-> None :
      '''                             '''
    ...
    def setGridFollow (self, val : bool)-> None :
      '''                             '''
    ...
    def setGridIncrement (self, val : PyGe.Vector2d)-> None :
      '''                             '''
    ...
    def setGridMajor (self, val : int)-> None :
      '''                             '''
    ...
    def setGridOff (self)-> None :
      '''                             '''
    ...
    def setGridOn (self, val: bool=True)-> None :
      '''                             '''
    ...
    def setGridSubdivisionRestricted (self, val : bool)-> None :
      '''                             '''
    ...
    def setHeight (self, val : float)-> None :
      '''                             '''
    ...
    def setIsOn (self, val : bool)-> None :
      '''                             '''
    ...
    def setLabelBlock (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLensLength (self, val : float)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLocked (self, val : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setModelView (self, val: PyDb.XrefObjectId)-> None :
      '''                             '''
    ...
    def setNonRectClipEntityId (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setNonRectClipOff (self)-> None :
      '''                             '''
    ...
    def setNonRectClipOn (self, val: bool=True)-> None :
      '''                             '''
    ...
    def setOff (self)-> None :
      '''                             '''
    ...
    def setOn (self)-> None :
      '''                             '''
    ...
    def setOpaque (self)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPerspectiveOff (self, *args, **kwargs)-> None :
      '''setPerspectiveOff( (Viewport)arg1) -> None :

    C++ signature :
        void setPerspectiveOff(class PyDbViewport {lvalue})'''
    ...
    def setPerspectiveOn (self, val: bool=True)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPlotStyleSheet (self, val : str)-> None :
      '''                             '''
    ...
    def setPreviousBackground (self, id : PyDb.ObjectId, type: PyGi.DrawableType = 'AcGiDrawable::kGeometry', force: bool=True)-> None :
      '''                             '''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setShadePlot (self, type: PyDb.VpShadePlotType, id: PyDb.ObjectId=None)-> None :
      '''                             '''
    ...
    def setSheetView (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setSnapAngle (self, val : float)-> None :
      '''                             '''
    ...
    def setSnapBasePoint (self, val : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setSnapIncrement (self, val : PyGe.Vector2d)-> None :
      '''                             '''
    ...
    def setSnapIsoPair (self, val : int)-> None :
      '''                             '''
    ...
    def setSnapIsometric (self, val: bool=True)-> None :
      '''                             '''
    ...
    def setSnapOff (self)-> None :
      '''                             '''
    ...
    def setSnapOn (self, val: bool=True)-> None :
      '''                             '''
    ...
    def setSnapStandard (self)-> None :
      '''                             '''
    ...
    def setStandardScale (self, val: PyDb.StandardScaleType)-> None :
      '''                             '''
    ...
    def setSun (self, retid: PyDb.ObjectId, sun: PyDb.Object, erase: bool=True)-> None :
      '''                             '''
    ...
    def setTransparent (self, val : bool=True)-> None :
      '''                             '''
    ...
    def setTwistAngle (self, val : float)-> None :
      '''                             '''
    ...

    @overload
    def setUcs (self, origin: PyGe.Point3d, xAxis: PyGe.Vector3d, yAxis: PyGe.Vector3d)-> None : ...
    @overload
    def setUcs (self, view: PyDb.OrthographicView)-> None : ...
    @overload
    def setUcs (self, ucsId: PyDb.ObjectId)-> None : ...
    def setUcs (self, *args, **kwargs)-> None :
      '''Overloads:
    - origin: PyGe.Point3d, xAxis: PyGe.Vector3d, yAxis: PyGe.Vector3d
    - view: PyDb.OrthographicView
    - ucsId: PyDb.ObjectId'''
    ...
    def setUcsFollowModeOff (self)-> None :
      '''                             '''
    ...
    def setUcsFollowModeOn (self, val: bool=True)-> None :
      '''                             '''
    ...
    def setUcsIconAtCorner (self)-> None :
      '''                             '''
    ...
    def setUcsIconAtOrigin (self, val: bool=True)-> None :
      '''                             '''
    ...
    def setUcsIconInvisible (self)-> None :
      '''                             '''
    ...
    def setUcsIconVisible (self, val: bool=True)-> None :
      '''                             '''
    ...
    def setUcsPerViewport (self, val: bool)-> None :
      '''                             '''
    ...
    def setUcsToWorld (self)-> None :
      '''                             '''
    ...
    def setUnlocked (self)-> None :
      '''                             '''
    ...
    def setViewCenter (self, val : PyGe.Point2d)-> None :
      '''                             '''
    ...

    @overload
    def setViewDirection (self, view: PyDb.OrthographicView)-> None : ...
    @overload
    def setViewDirection (self, dir: PyGe.Vector3d)-> None : ...
    def setViewDirection (self, *args, **kwargs)-> None :
      '''Overloads:
    - view: PyDb.OrthographicView
    - dir: PyGe.Vector3d'''
    ...
    def setViewHeight (self, val : float)-> None :
      '''                             '''
    ...
    def setViewTarget (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setVisualStyle (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setWidth (self, val : float)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def shadePlot (self)-> PyDb.VpShadePlotType :
      '''                             '''
    ...
    def shadePlotId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def showHiddenLines (self)-> None :
      '''                             '''
    ...
    def snapAngle (self)-> float :
      '''                             '''
    ...
    def snapBasePoint (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def snapIncrement (self)-> PyGe.Vector2d :
      '''                             '''
    ...
    def snapIsoPair (self)-> int :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def standardScale (self)-> PyDb.StandardScaleType :
      '''                             '''
    ...
    def subObjModified (self, obj: PyDb.Object, subobj: PyDb.Object)-> None :
      '''                             '''
    ...
    def sunId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def syncModelView (self)-> None :
      '''                             '''
    ...
    def thawAllLayersInViewport (self)-> None :
      '''                             '''
    ...
    def thawLayersInViewport (self, ids : list[PyDb.ObjectId])-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def twistAngle (self)-> float :
      '''                             '''
    ...
    def ucsName (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def updateDisplay (self)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewCenter (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def viewDirection (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def viewHeight (self)-> float :
      '''                             '''
    ...
    def viewTarget (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def visualStyle (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def width (self)-> float :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class ViewportTable(AbstractViewTable):
    def __init__ (self, id: ObjectId, mode: PyDb.OpenMode=PyDb.OpenMode.kForRead)-> None :
      '''                             '''
    ...
    def add (self, val: PyDb.AbstractViewTableRecord)-> PyDb.ObjectId :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.ViewportTable :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.ViewportTable :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getAt (self, val: str)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def has (self, val: str|PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def recordIds (self)-> list :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def toDict (self)-> dict :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class ViewportTableRecord(AbstractViewTableRecord):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def ambientLightColor (self)-> PyDb.Color :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def backClipDistance (self)-> float :
      '''                             '''
    ...
    def backClipEnabled (self)-> bool :
      '''                             '''
    ...
    def background (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def brightness (self)-> float :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.ViewportTableRecord :
      '''                             '''
    ...
    def centerPoint (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def circleSides (self)-> int :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.ViewportTableRecord :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def contrast (self)-> float :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def defaultLightingType (self)-> object :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def elevation (self)-> float :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def fastZoomsEnabled (self)-> bool :
      '''                             '''
    ...
    def frontClipAtEye (self)-> bool :
      '''                             '''
    ...
    def frontClipDistance (self)-> float :
      '''                             '''
    ...
    def frontClipEnabled (self)-> bool :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getName (self)-> str :
      '''                             '''
    ...
    def getUcs (self)-> tuple :
      '''                             '''
    ...
    def gridEnabled (self)-> bool :
      '''                             '''
    ...
    def gridIncrements (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def gridMajor (self)-> int :
      '''                             '''
    ...
    def gsView (self)-> PyGs.GsView :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def height (self)-> float :
      '''                             '''
    ...
    def iconAtOrigin (self)-> bool :
      '''                             '''
    ...
    def iconEnabled (self)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isDefaultLightingOn (self)-> bool :
      '''                             '''
    ...
    def isDependent (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isGridAdaptive (self)-> bool :
      '''                             '''
    ...
    def isGridBoundToLimits (self)-> bool :
      '''                             '''
    ...
    def isGridFollow (self)-> bool :
      '''                             '''
    ...
    def isGridSubdivisionRestricted (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isRenamable (self)-> bool :
      '''                             '''
    ...
    def isResolved (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUcsOrthographic (self)-> tuple :
      '''                             '''
    ...
    def isUcsSavedWithViewport (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isViewOrthographic (self)-> tuple :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def isometricSnapEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def lensLength (self)-> float :
      '''                             '''
    ...
    def lowerLeftCorner (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def name (self)-> str :
      '''                             '''
    ...
    def number (self)-> int :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def perspectiveEnabled (self)-> bool :
      '''                             '''
    ...
    def previousBackground (self, *args, **kwargs)-> PyDb.ObjectId :
      '''previousBackground( (ViewportTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId previousBackground(class PyDbViewportTableRecord {lvalue})

previousBackground( (ViewportTableRecord)arg1, (GiDrawableType)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId previousBackground(class PyDbViewportTableRecord {lvalue},enum AcGiDrawable::DrawableType)'''
    ...
    def previousBackgroundForcedSwitch (self)-> bool :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAmbientLightColor (self, val : PyDb.Color)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBackClipDistance (self, val : float)-> None :
      '''                             '''
    ...
    def setBackClipEnabled (self, val : bool)-> None :
      '''                             '''
    ...
    def setBackground (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setBrightness (self, val : float)-> None :
      '''                             '''
    ...
    def setCenterPoint (self, val : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setCircleSides (self, val : int)-> None :
      '''                             '''
    ...
    def setContrast (self, val : float)-> None :
      '''                             '''
    ...
    def setDefaultLightingOn (self, val : bool)-> None :
      '''                             '''
    ...
    def setDefaultLightingType (self, *args, **kwargs)-> None :
      '''setDefaultLightingType( (AbstractViewTableRecord)arg1, (object)arg2) -> None :

    C++ signature :
        void setDefaultLightingType(class PyDbAbstractViewTableRecord {lvalue},enum AcGiViewportTraits::DefaultLightingType)'''
    ...
    def setElevation (self, val : float)-> None :
      '''                             '''
    ...
    def setFastZoomsEnabled (self, val : bool)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setFrontClipAtEye (self, val : bool)-> None :
      '''                             '''
    ...
    def setFrontClipDistance (self, val : float)-> None :
      '''                             '''
    ...
    def setFrontClipEnabled (self, val : bool)-> None :
      '''                             '''
    ...
    def setGridAdaptive (self, val : bool)-> None :
      '''                             '''
    ...
    def setGridBoundToLimits (self, val : bool)-> None :
      '''                             '''
    ...
    def setGridEnabled (self, val : bool)-> None :
      '''                             '''
    ...
    def setGridFollow (self, val : bool)-> None :
      '''                             '''
    ...
    def setGridIncrements (self, val : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setGridMajor (self, val : int)-> None :
      '''                             '''
    ...
    def setGridSubdivisionRestricted (self, val : bool)-> None :
      '''                             '''
    ...
    def setGsView (self, val : PyGs.GsView)-> None :
      '''                             '''
    ...
    def setHeight (self, val : float)-> None :
      '''                             '''
    ...
    def setIconAtOrigin (self, val : bool)-> None :
      '''                             '''
    ...
    def setIconEnabled (self, val : bool)-> None :
      '''                             '''
    ...
    def setIsometricSnapEnabled (self, val : bool)-> None :
      '''                             '''
    ...
    def setLensLength (self, val : float)-> None :
      '''                             '''
    ...
    def setLowerLeftCorner (self, val : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setName (self, name: str)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPerspectiveEnabled (self, val : bool)-> None :
      '''                             '''
    ...
    def setPreviousBackground (self, *args, **kwargs)-> None :
      '''setPreviousBackground( (ViewportTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setPreviousBackground(class PyDbViewportTableRecord {lvalue},class PyDbObjectId {lvalue})

setPreviousBackground( (ViewportTableRecord)arg1, (ObjectId)arg2, (GiDrawableType)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPreviousBackground(class PyDbViewportTableRecord {lvalue},class PyDbObjectId {lvalue},enum AcGiDrawable::DrawableType,bool)'''
    ...
    def setSnapAngle (self, val : float)-> None :
      '''                             '''
    ...
    def setSnapBase (self, val : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setSnapEnabled (self, val : bool)-> None :
      '''                             '''
    ...
    def setSnapIncrements (self, val : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setSnapPair (self, val : int)-> None :
      '''                             '''
    ...
    def setSun (self, retId : PyDb.ObjectId, pSun : PyDb.Object, eraseOldSun : bool=True)-> None :
      '''                             '''
    ...
    def setTarget (self, val : PyGe.Point3d)-> None :
      '''                             '''
    ...
    def setUcs (self, *args, **kwargs)-> None :
      '''setUcs( (AbstractViewTableRecord)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> None :

    C++ signature :
        void setUcs(class PyDbAbstractViewTableRecord {lvalue},class AcGePoint3d,class AcGeVector3d,class AcGeVector3d)

setUcs( (AbstractViewTableRecord)arg1, (OrthographicView)arg2) -> None :

    C++ signature :
        void setUcs(class PyDbAbstractViewTableRecord {lvalue},enum AcDb::OrthographicView)

setUcs( (AbstractViewTableRecord)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setUcs(class PyDbAbstractViewTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setUcsFollowMode (self, val : bool)-> None :
      '''                             '''
    ...
    def setUcsPerViewport (self, val : bool)-> None :
      '''                             '''
    ...
    def setUcsToWorld (self)-> None :
      '''                             '''
    ...
    def setUpperRightCorner (self, val : PyGe.Point2d)-> None :
      '''                             '''
    ...
    def setViewDirection (self, *args, **kwargs)-> None :
      '''setViewDirection( (AbstractViewTableRecord)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setViewDirection(class PyDbAbstractViewTableRecord {lvalue},class AcGeVector3d)

setViewDirection( (AbstractViewTableRecord)arg1, (OrthographicView)arg2) -> None :

    C++ signature :
        void setViewDirection(class PyDbAbstractViewTableRecord {lvalue},enum AcDb::OrthographicView)'''
    ...
    def setViewTwist (self, val : float)-> None :
      '''                             '''
    ...
    def setVisualStyle (self, val : PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setWidth (self, val : float)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snapAngle (self)-> float :
      '''                             '''
    ...
    def snapBase (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def snapEnabled (self)-> bool :
      '''                             '''
    ...
    def snapIncrements (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def snapPair (self)-> int :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def sunId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def target (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def ucsFollowMode (self)-> bool :
      '''                             '''
    ...
    def ucsName (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def upperRightCorner (self)-> PyGe.Point2d :
      '''                             '''
    ...
    def viewDirection (self)-> PyGe.Vector3d :
      '''                             '''
    ...
    def viewTwist (self)-> float :
      '''                             '''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visualStyle (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def width (self)-> float :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class Visibility(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kInvisible (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVisible (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class VpFreezeOps(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kFreeze (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kReset (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kThaw (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class VpShadePlotType(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kAsDisplayed (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kHidden (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kRenderPreset (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kRendered (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kVisualStyle (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kWireframe (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

class Wipeout(RasterImage):

    @overload
    def __init__ (self, /)-> None : ...
    @overload
    def __init__ (self, points: list[PyGe.Point2d], normal: PyGe.Vector3d)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode)-> None : ...
    @overload
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool)-> None : ...
    def __init__ (self, *args, **kwargs)-> None :
      '''Overloads:
    - None: Any
    - points: list[PyGe.Point2d], normal: PyGe.Vector3d
    - id: PyDb.ObjectId
    - id: PyDb.ObjectId, mode: PyDb.OpenMode
    - id: PyDb.ObjectId, mode: PyDb.OpenMode, erased: bool
    '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def addSubentPaths (self, paths: list[PyDb.FullSubentPath])-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def blockId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def brightness (self)-> int :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Wipeout :
      '''                             '''
    ...
    def castShadows (self)-> bool :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...
    def clipBoundary (self)-> list :
      '''                             '''
    ...
    def clipBoundaryType (self)-> PyDb.ClipBoundaryType :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.Wipeout :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def collisionType (self)-> PyDb.CollisionType :
      '''                             '''
    ...
    def color (self)-> PyDb.Color :
      '''                             '''
    ...
    def colorIndex (self)-> int :
      '''                             '''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def contrast (self)-> int :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def draw (self)-> None :
      '''                             '''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def entityColor (self)-> PyDb.EntityColor :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def explode (self)-> list :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def fade (self)-> int :
      '''                             '''
    ...
    def frame (self)-> bool :
      '''                             '''
    ...
    def getCompoundObjectTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getEcs (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self)-> PyDb.Extents :
      '''                             '''
    ...
    def getGeomExtents2d (self)-> PyDb.Extents2d :
      '''                             '''
    ...

    @overload
    def getGripPoints (self, /)-> tuple : ...
    @overload
    def getGripPoints (self, curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int)-> tuple : ...
    def getGripPoints (self, *args, **kwargs)-> tuple :
      '''Overloads:
    - None: Any
    - curViewUnitSize: float, gripSize: int, curViewDir: PyGe.Vector3d, bitflags: int
    '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def getOrientation (self)-> tuple :
      '''                             '''
    ...
    def getPixelToModelTransform (self)-> PyGe.Matrix3d :
      '''                             '''
    ...
    def getPlane (self)-> PyGe.Plane :
      '''                             '''
    ...
    def getPlotStyleNameId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getStretchPoints (self)-> list :
      '''                             '''
    ...
    def getSubentPathsAtGsMarker (self, type: PyDb.SubentType, gsMark: int, pickPoint: PyGe.Point3d, viewXform: PyGe.Matrix3d)-> list :
      '''                             '''
    ...
    def getTransformedCopy (self, matrix3d: PyGe.Matrix3d)-> PyDb.Entity :
      '''                             '''
    ...
    def getVertices (self)-> list :
      '''                             '''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def height (self)-> float :
      '''                             '''
    ...
    def highlight (self, path: PyDb.FullSubentPath = None, highlightAll : bool = False)-> None :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def imageDefId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def imageHeight (self)-> float :
      '''                             '''
    ...
    def imageSize (self, val: bool=True)-> PyGe.Vector2d :
      '''                             '''
    ...
    def imageWidth (self)-> float :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...

    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane)-> list : ...
    @overload
    def intersectWith (self, entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int)-> list : ...
    def intersectWith (self, *args, **kwargs)-> list :
      '''Overloads:
    - entity: PyDb.Entity, intType : PyDb.Intersect
    - entity: PyDb.Entity, intType : PyDb.Intersect, thisGsMarker : int, otherGsMarker : int
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane
    - entity: PyDb.Entity, intType : PyDb.Intersect, plane : PyGe.Plane, thisGsMarker : int, otherGsMarker : int
    '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isClipInverted (self)-> bool :
      '''                             '''
    ...
    def isClipped (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isImageShown (self)-> bool :
      '''                             '''
    ...
    def isImageTransparent (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isPlanar (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isSetDisplayOpt (self, val: PyDb.ImageDisplayOpt)-> bool :
      '''                             '''
    ...
    def isShownClipped (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def layer (self)-> str :
      '''                             '''
    ...
    def layerId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def lineWeight (self)-> PyDb.LineWeight :
      '''                             '''
    ...
    def linetype (self)-> str :
      '''                             '''
    ...
    def linetypeId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def linetypeScale (self)-> float :
      '''                             '''
    ...
    def list (self)-> None :
      '''                             '''
    ...
    def material (self)-> str :
      '''                             '''
    ...
    def materialId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def plotStyleName (self)-> str :
      '''                             '''
    ...
    def position (self)-> PyGe.Point3d :
      '''                             '''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def reactorId (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def receiveShadows (self)-> bool :
      '''                             '''
    ...
    def recordGraphicsModified (self)-> None :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.EntityReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def rotation (self)-> float :
      '''                             '''
    ...
    def scale (self)-> PyGe.Vector2d :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...
    def setBrightness (self, val: int)-> None :
      '''                             '''
    ...
    def setCastShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setClipBoundaryToWholeImage (self, vec: PyGe.Vector2d)-> None :
      '''                             '''
    ...
    def setClipInverted (self, val: bool)-> None :
      '''                             '''
    ...
    def setColor (self, clr: PyDb.AcCmColor, dosubents : bool=True, db : PyDb.Database='current')-> None :
      '''                             '''
    ...
    def setColorIndex (self, clr: int, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setContrast (self, val: int)-> None :
      '''                             '''
    ...
    def setDatabaseDefaults (self, db: PyDb.Database = 'current')-> None :
      '''                             '''
    ...
    def setDisplayOpt (self, opt: PyDb.ImageDisplayOpt, val: bool)-> None :
      '''                             '''
    ...
    def setFade (self, val: int)-> None :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setFrom (self, points : list[PyGe.Point2d], normal : PyGe.Vector3d)-> None :
      '''                             '''
    ...
    def setHeight (self, val: float)-> None :
      '''                             '''
    ...
    def setImageDefId (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setImageTransparency (self, *args, **kwargs)-> None :
      '''setImageTransparency( (RasterImage)arg1, (bool)arg2) -> None :

    C++ signature :
        void setImageTransparency(class PyDbRasterImage {lvalue},bool)'''
    ...
    def setLayer (self, val: str|PyDb.ObjectId, dosubents : bool=True, allowHiddenLayer : bool=False)-> None :
      '''                             '''
    ...
    def setLineWeight (self, val: PyDb.LineWeight, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetype (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setLinetypeScale (self, val: float, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setMaterial (self, val: str|PyDb.ObjectId, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setOrientation (self, pt: PyGe.Point3d, u: PyGe.Vector3d, v: PyGe.Vector3d)-> bool :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> None :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> None :

    C++ signature :
        void setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, entity: PyDb.Entity, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setReactorId (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setReceiveShadows (self, val: bool)-> None :
      '''                             '''
    ...
    def setRotation (self, val: float)-> None :
      '''                             '''
    ...
    def setShowClipped (self, val: bool)-> None :
      '''                             '''
    ...
    def setShowImage (self, val: bool)-> None :
      '''                             '''
    ...
    def setVisibility (self, val: PyDb.Visibility, dosubents : bool=True)-> None :
      '''                             '''
    ...
    def setWidth (self, val: float)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def transformBy (self, matrix3d: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def visibility (self)-> PyDb.Visibility :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def width (self)-> float :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class Xrecord(DbObject):
    def __init__ (self, id: PyDb.ObjectId, mode: PyDb.OpenMode.kForRead, erased: bool=False)-> None :
      '''                             '''
    ...
    def addContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def addReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def assertNotifyEnabled (self)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self)-> None :
      '''                             '''
    ...
    def bounds (self, ext: PyDb.Extents)-> bool :
      '''                             '''
    ...
    def cancel (self)-> None :
      '''Terminates the current open operation. All changes made to the object since it was opened are undone, the object is marked as closed, and "cancel" notification is sent.Returns Acad::eOk if successful.'''
    ...

    @staticmethod
    def cast (otherObject: PyRx.RxObject)-> PyDb.Xrecord :
      '''                             '''
    ...

    @staticmethod
    def className ()-> str :
      '''                             '''
    ...

    @staticmethod
    def cloneFrom (otherObject: PyRx.RxObject)-> PyDb.DbObject :
      '''                             '''
    ...
    def close (self)-> None :
      '''Closes the object. All changes made to the object since it was opened are committed to the database, the object is marked as pageable, and a "closed" notification (as well as any other appropriate notification such as "modified", "erased", and so on) is sent.Returns Acad::eOk if successful.If the object is not in an AcDbDatabase yet, then Acad::eNoDatabase is returned.If the object is sending notification, then Acad::eCloseWasNotifying is returned.If the subClose() call made within the close() method returns anything other than Acad::eOk, then that ErrorStatus is returned.'''
    ...
    def comparedTo (self, other: PyRx.RxObject)-> PyRx.Ordering :
      '''                             '''
    ...
    def copyFrom (self, other: PyRx.RxObject)-> None :
      '''                             '''
    ...
    def createExtensionDictionary (self)-> None :
      '''Creates an AcDbDictionary object and sets it up as the extension dictionary for the AcDbObject.Returns Acad::eOk if successful. If an extension dictionary already exists, Acad::eAlreadyInDb is returned.'''
    ...
    def database (self)-> PyDb.Database :
      '''Returns a pointer to the AcDbDatabase object that contains the AcDbObject.'''
    ...
    def deepClone (self, owner: PyDb.DbObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...

    @staticmethod
    def desc ()-> PyRx.RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self, disable: bool)-> None :
      '''                             '''
    ...
    def dispose (self)-> None :
      '''                             '''
    ...
    def downgradeOpen (self)-> None :
      '''Downgrades the object from being open AcDb::kForWrite, to being AcDb::kForRead. In the process, all changes made to the object while it was open for write are committed to the database and appropriate notification is sent.'''
    ...
    def downgradeToNotify (self, wasWritable: bool)-> None :
      '''Restores an object from being open both AcDb::kForNotify and AcDb::kForWrite, to being open just AcDb::kForNotify. The wasWritable value that was returned from the matching AcDbObject::upgradeFromNotify() call should be passed into this function to restore the proper open status.This function must have been preceded by a call to upgradeFromNotify().Returns Acad::eOk if successful.'''
    ...
    def drawableType (self)-> PyGi.GiDrawableType :
      '''                             '''
    ...
    def erase (self, erasing : bool=True)-> None :
      '''                             '''
    ...
    def extensionDictionary (self)-> PyDb.ObjectId :
      '''Returns the objectId of the extension dictionary owned by the object. If the object does not own an extension dictionary, then the returned objectId is set to AcDbObjectId::kNull.'''
    ...
    def getField (self, prop: str='TEXT')-> PyDb.ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def getHandle (self)-> PyDb.Handle :
      '''Fills in handle with the handle value for the object. If the object is not yet database-resident, then it will not have a handle. Use AcDbHandle::isNull to test for this condition.'''
    ...
    def handOverTo (self, newObject: PyDb.DbObject, keepXData: bool, keepExtDict: bool)-> None :
      '''                             '''
    ...
    def hasFields (self)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self, id: PyDb.ObjectId)-> bool :
      '''                             '''
    ...
    def hasXData (self, appname: str)-> bool :
      '''                             '''
    ...
    def id (self)-> PyDb.ObjectId :
      '''                             '''
    ...
    def implRefCount (self)-> int :
      '''                             '''
    ...
    def isA (self)-> PyRx.RxClass :
      '''                             '''
    ...
    def isAProxy (self)-> bool :
      '''                             '''
    ...
    def isAcDbObjectIdsInFlux (self)-> bool :
      '''                             '''
    ...
    def isAnnotative (self)-> PyDb.AnnotativeStates :
      '''                             '''
    ...
    def isCancelling (self)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self)-> bool :
      '''                             '''
    ...
    def isErased (self)-> bool :
      '''                             '''
    ...
    def isKindOf (self, rhs: PyRx.RxClass)-> bool :
      '''                             '''
    ...
    def isModified (self)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self)-> bool :
      '''                             '''
    ...
    def isNewObject (self)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self)-> bool :
      '''                             '''
    ...
    def isNotifying (self)-> bool :
      '''                             '''
    ...
    def isNullObj (self)-> bool :
      '''                             '''
    ...
    def isPersistent (self)-> bool :
      '''                             '''
    ...
    def isReadEnabled (self)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self)-> bool :
      '''                             '''
    ...
    def isUndoing (self)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self)-> bool :
      '''                             '''
    ...
    def isXlateReferences (self)-> bool :
      '''                             '''
    ...
    def keepAlive (self, flag: bool)-> None :
      '''                             '''
    ...
    def mergeStyle (self)-> PyDb.DuplicateRecordCloning :
      '''                             '''
    ...
    def objectId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the object. If the object is not yet database-resident, then the returned objectId will be set to AcDbObjectId::kNull.'''
    ...
    def ownerId (self)-> PyDb.ObjectId :
      '''Returns the objectId of the owner of the object. If the object does not yet have an owner, or the ownerId data member has not yet been set using AcDbObject::setOwnerId, then the returned objectId will be set to AcDbObjectId::kNull.Appending the object to a BlockTable record, a symbol table, or a dictionary automatically calls AcDbObject::setOwnerId.'''
    ...
    def queryX (self, rhs: PyRx.RxClass)-> PyRx.RxObject :
      '''                             '''
    ...
    def rbChain (self, auxDb : PyDb.Database = None )-> list :
      '''                             '''
    ...
    def releaseExtensionDictionary (self)-> None :
      '''Removes the object's extension dictionary (that is, removes the object as the owner of the dictionary object) if it exists and is empty. Once removed, this function calls the dictionary's erase() method. Any reactors attached to the extension dictionary receive normal notification appropriate to an open for write, erase, close sequence.Returns Acad::eOk if successful.If the dictionary is not empty, then this function fails and returns Acad::eContainerNotEmpty.'''
    ...
    def removeContext (self, obj : PyDb.ObjectContext)-> None :
      '''                             '''
    ...
    def removeField (self, id: str|PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removePersistentReactor (self, id: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def removeReactor (self, reactor: PyDb.DbObjectReactor)-> None :
      '''                             '''
    ...
    def rolloverHit (self, nSubentId: int, nMouseFlags: int, bReset: bool)-> bool :
      '''                             '''
    ...
    def setAcDbObjectIdsInFlux (self)-> None :
      '''                             '''
    ...
    def setAnnotative (self, state : PyDb.AnnotativeStates)-> None :
      '''                             '''
    ...
    def setAttributes (self, traits: PyGi.DrawableTraits)-> int :
      '''                             '''
    ...

    @overload
    def setField (self, field: PyDb.Field)-> PyDb.ObjectId : ...
    @overload
    def setField (self, propName: str, field: PyDb.Field)-> PyDb.ObjectId : ...
    def setField (self, *args, **kwargs)-> PyDb.ObjectId :
      '''Overloads:
    - field: PyDb.Field
    - propName: str, field: PyDb.Field
    '''
    ...
    def setFromRbChain (self, resbuf : list, auxDb : PyDb.Database = None )-> None :
      '''                             '''
    ...
    def setMergeStyle (self, style: PyDb.DuplicateRecordCloning)-> None :
      '''                             '''
    ...
    def setOwnerId (self, owner: PyDb.ObjectId)-> None :
      '''                             '''
    ...
    def setXData (self, xdata: list)-> None :
      '''                             '''
    ...
    def setXlateReferences (self, val : bool)-> None :
      '''                             '''
    ...
    def snoop (self,  filer : PyDb.SnoopDwgFiler)-> None :
      '''                             '''
    ...
    def swapIdWith (self, otherId: PyDb.DbObject, swapXdata: bool, swapExtDict: bool)-> None :
      '''                             '''
    ...
    def upgradeFromNotify (self, wasWritable: bool)-> None :
      '''Upgrades the object from being at least open AcDb::kForNotify to being open both AcDb::kForNotify and AcDb::kForWrite. The wasWritable argument is set to Adesk::kTrue if the object was already open for write, otherwise it's set to Adesk::kFalse. The wasWritable value should be saved to be passed into the downgradeToNotify() call later.This function must be followed at some point by a call to downgradeToNotify() with no open() (in any of its forms) or close() calls in between.This method should only be called from within other methods of the same object it is being called from. In other words, this method is intended to be used by an object to change it's own open status so that it can safely modify itself.upgradeFromNotify() and downgradeToNotify() call pairs are not nestable.Returns Acad::eOk if successful. If the object is not currently open AcDb::kForNotify, then Acad::eNotApplicable is returned. If the object is currently in the process of actually sending notification (that is, isNotifying() returns Adesk::kTrue), then Acad::eWasNotifying is returned.'''
    ...
    def upgradeOpen (self)-> None :
      '''If the object is currently open AcDb::kForRead with only one reader, then this function upgrades the object to open AcDb::kForWrite. In the process of changing to open for write, the object is closed, thus triggering any pertinent notification.Returns Acad::eOk if successful. If the object has more than one reader, then the open status is not changed and Adesk::eHadMultipleReaders is returned. If the object is already open AcDb::kForWrite, then Acad::eWasOpenForWrite is returned. If the object is currently sending notification, then the open status is not changed and Acad::eWasNotifying is returned.'''
    ...
    def viewportDraw (self, vpdraw: PyGi.ViewportDraw)-> None :
      '''                             '''
    ...
    def viewportDrawLogicalFlags (self, vpdraw: PyGi.ViewportDraw)-> int :
      '''                             '''
    ...
    def wblockClone (self, owner: PyRx.RxObject, mapping: PyDb.IdMapping, isPrimary:bool=True)-> PyDb.DbObject :
      '''                             '''
    ...
    def worldDraw (self, wdraw: PyGi.WorldDraw)-> bool :
      '''                             '''
    ...
    def xData (self, appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self, xform: PyGe.Matrix3d)-> None :
      '''                             '''
    ...
    def xmitPropagateModify (self)-> None :
      '''                             '''
    ...

class XrefObjectId(object):
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def getLocalId (self, *args, **kwargs)-> None :
      '''getLocalId( (XrefObjectId)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void getLocalId(class PyDbXrefObjectId {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def getXrefId (self, *args, **kwargs)-> None :
      '''getXrefId( (XrefObjectId)arg1, (ObjectId)arg2, (Handle)arg3) -> None :

    C++ signature :
        void getXrefId(class PyDbXrefObjectId {lvalue},class PyDbObjectId {lvalue},class PyDbHandle {lvalue})'''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (XrefObjectId)arg1) -> bool :

    C++ signature :
        bool isNull(class PyDbXrefObjectId {lvalue})'''
    ...
    def isValid (self, *args, **kwargs)-> bool :
      '''isValid( (XrefObjectId)arg1) -> bool :

    C++ signature :
        bool isValid(class PyDbXrefObjectId {lvalue})'''
    ...
    def isXref (self, *args, **kwargs)-> bool :
      '''isXref( (XrefObjectId)arg1) -> bool :

    C++ signature :
        bool isXref(class PyDbXrefObjectId {lvalue})'''
    ...
    def resolveObjectId (self, *args, **kwargs)-> None :
      '''resolveObjectId( (XrefObjectId)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void resolveObjectId(class PyDbXrefObjectId {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def setLocalId (self, *args, **kwargs)-> None :
      '''setLocalId( (XrefObjectId)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setLocalId(class PyDbXrefObjectId {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def setNull (self, *args, **kwargs)-> None :
      '''setNull( (XrefObjectId)arg1) -> None :

    C++ signature :
        void setNull(class PyDbXrefObjectId {lvalue})'''
    ...
    def setXrefId (self, *args, **kwargs)-> None :
      '''setXrefId( (XrefObjectId)arg1, (ObjectId)arg2, (Handle)arg3) -> None :

    C++ signature :
        void setXrefId(class PyDbXrefObjectId {lvalue},class PyDbObjectId {lvalue},class PyDbHandle)'''
    ...

class XrefStatus(object):
    def __init__ (self, /, *args, **kwargs) :
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def kXrfFileNotFound (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kXrfNotAnXref (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kXrfResolved (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kXrfUnloaded (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kXrfUnreferenced (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def kXrfUnresolved (self, *args, **kwargs)-> None :
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None :
      '''None'''
    ...

def curDb (*args, **kwargs)-> PyDb.Database :
    '''curDb() -> Database :

    C++ signature :
        class PyDbDatabase curDb()'''
    ...

def setWorkingDb (*args, **kwargs)-> None :
    '''setWorkingDb( (Database)arg1) -> None :

    C++ signature :
        void setWorkingDb(class PyDbDatabase {lvalue})'''
    ...

def workingDb (*args, **kwargs)-> PyDb.Database :
    '''workingDb() -> Database :

    C++ signature :
        class PyDbDatabase workingDb()'''
    ...
