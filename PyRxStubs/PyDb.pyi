
class ACIcolorMethod:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kACIbyBlock (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kACIbyLayer (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kACIclear (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kACIforeground (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kACIfrozenLayer (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kACImaximum (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kACIminimum (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kACInone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kACIstandard (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class AbstractViewTable:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def add (self, *args, **kwargs)-> ObjectId :
      '''add( (AbstractViewTable)arg1, (AbstractViewTableRecord)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId add(class PyDbAbstractViewTable {lvalue},class PyDbAbstractViewTableRecord)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> AbstractViewTable :
      '''cast( (RxObject)arg1) -> AbstractViewTable :

    C++ signature :
        class PyDbAbstractViewTable cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> AbstractViewTable :
      '''cloneFrom( (RxObject)arg1) -> AbstractViewTable :

    C++ signature :
        class PyDbAbstractViewTable cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getAt (self, *args, **kwargs)-> ObjectId :
      '''getAt( (SymbolTable)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getAt(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def has (self, *args, **kwargs)-> bool :
      '''has( (SymbolTable)arg1, (str)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

has( (SymbolTable)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class PyDbObjectId)'''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def recordIds (self, *args, **kwargs)-> list :
      '''recordIds( (SymbolTable)arg1) -> list :

    C++ signature :
        class boost::python::list recordIds(class PyDbSymbolTable {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def toDict (self, *args, **kwargs)-> dict :
      '''toDict( (SymbolTable)arg1) -> dict :

    C++ signature :
        class boost::python::dict toDict(class PyDbSymbolTable {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class AbstractViewTableRecord:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def ambientLightColor (self, *args, **kwargs)-> Color :
      '''ambientLightColor( (AbstractViewTableRecord)arg1) -> Color :

    C++ signature :
        class AcCmColor ambientLightColor(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def backClipDistance (self, *args, **kwargs)-> float :
      '''backClipDistance( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double backClipDistance(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def backClipEnabled (self, *args, **kwargs)-> bool :
      '''backClipEnabled( (AbstractViewTableRecord)arg1) -> bool :

    C++ signature :
        bool backClipEnabled(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def background (self, *args, **kwargs)-> ObjectId :
      '''background( (AbstractViewTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId background(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def brightness (self, *args, **kwargs)-> float :
      '''brightness( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double brightness(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> AbstractViewTableRecord :
      '''cast( (RxObject)arg1) -> AbstractViewTableRecord :

    C++ signature :
        class PyDbAbstractViewTableRecord cast(class PyRxObject)'''
    ...
    def centerPoint (self, *args, **kwargs)-> Point2d :
      '''centerPoint( (AbstractViewTableRecord)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d centerPoint(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> AbstractViewTableRecord :
      '''cloneFrom( (RxObject)arg1) -> AbstractViewTableRecord :

    C++ signature :
        class PyDbAbstractViewTableRecord cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def contrast (self, *args, **kwargs)-> float :
      '''contrast( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double contrast(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def defaultLightingType (self, *args, **kwargs)-> object :
      '''defaultLightingType( (AbstractViewTableRecord)arg1) -> object :

    C++ signature :
        enum AcGiViewportTraits::DefaultLightingType defaultLightingType(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def elevation (self, *args, **kwargs)-> float :
      '''elevation( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double elevation(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def frontClipAtEye (self, *args, **kwargs)-> bool :
      '''frontClipAtEye( (AbstractViewTableRecord)arg1) -> bool :

    C++ signature :
        bool frontClipAtEye(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def frontClipDistance (self, *args, **kwargs)-> float :
      '''frontClipDistance( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double frontClipDistance(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def frontClipEnabled (self, *args, **kwargs)-> bool :
      '''frontClipEnabled( (AbstractViewTableRecord)arg1) -> bool :

    C++ signature :
        bool frontClipEnabled(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getName (self, *args, **kwargs)-> str :
      '''getName( (SymbolTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getName(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def getUcs (self, *args, **kwargs)-> ErrorStatus :
      '''getUcs( (AbstractViewTableRecord)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getUcs(class PyDbAbstractViewTableRecord {lvalue},class AcGePoint3d {lvalue},class AcGeVector3d {lvalue},class AcGeVector3d {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def height (self, *args, **kwargs)-> float :
      '''height( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double height(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isDefaultLightingOn (self, *args, **kwargs)-> bool :
      '''isDefaultLightingOn( (AbstractViewTableRecord)arg1) -> bool :

    C++ signature :
        bool isDefaultLightingOn(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def isDependent (self, *args, **kwargs)-> bool :
      '''isDependent( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isDependent(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isRenamable (self, *args, **kwargs)-> bool :
      '''isRenamable( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isRenamable(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isResolved (self, *args, **kwargs)-> bool :
      '''isResolved( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isResolved(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUcsOrthographic (self, *args, **kwargs)-> tuple :
      '''isUcsOrthographic( (AbstractViewTableRecord)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isUcsOrthographic(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isViewOrthographic (self, *args, **kwargs)-> tuple :
      '''isViewOrthographic( (AbstractViewTableRecord)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isViewOrthographic(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def lensLength (self, *args, **kwargs)-> float :
      '''lensLength( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double lensLength(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def perspectiveEnabled (self, *args, **kwargs)-> bool :
      '''perspectiveEnabled( (AbstractViewTableRecord)arg1) -> bool :

    C++ signature :
        bool perspectiveEnabled(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setAmbientLightColor (self, *args, **kwargs)-> ErrorStatus :
      '''setAmbientLightColor( (AbstractViewTableRecord)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAmbientLightColor(class PyDbAbstractViewTableRecord {lvalue},class AcCmColor)'''
    ...
    def setBackClipDistance (self, *args, **kwargs)-> None :
      '''setBackClipDistance( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setBackClipDistance(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setBackClipEnabled (self, *args, **kwargs)-> None :
      '''setBackClipEnabled( (AbstractViewTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setBackClipEnabled(class PyDbAbstractViewTableRecord {lvalue},bool)'''
    ...
    def setBackground (self, *args, **kwargs)-> ErrorStatus :
      '''setBackground( (AbstractViewTableRecord)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBackground(class PyDbAbstractViewTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setBrightness (self, *args, **kwargs)-> ErrorStatus :
      '''setBrightness( (AbstractViewTableRecord)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBrightness(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setCenterPoint (self, *args, **kwargs)-> None :
      '''setCenterPoint( (AbstractViewTableRecord)arg1, (Point2d)arg2) -> None :

    C++ signature :
        void setCenterPoint(class PyDbAbstractViewTableRecord {lvalue},class AcGePoint2d)'''
    ...
    def setContrast (self, *args, **kwargs)-> ErrorStatus :
      '''setContrast( (AbstractViewTableRecord)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setContrast(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setDefaultLightingOn (self, *args, **kwargs)-> ErrorStatus :
      '''setDefaultLightingOn( (AbstractViewTableRecord)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDefaultLightingOn(class PyDbAbstractViewTableRecord {lvalue},bool)'''
    ...
    def setDefaultLightingType (self, *args, **kwargs)-> ErrorStatus :
      '''setDefaultLightingType( (AbstractViewTableRecord)arg1, (object)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDefaultLightingType(class PyDbAbstractViewTableRecord {lvalue},enum AcGiViewportTraits::DefaultLightingType)'''
    ...
    def setElevation (self, *args, **kwargs)-> ErrorStatus :
      '''setElevation( (AbstractViewTableRecord)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setElevation(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFrontClipAtEye (self, *args, **kwargs)-> None :
      '''setFrontClipAtEye( (AbstractViewTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setFrontClipAtEye(class PyDbAbstractViewTableRecord {lvalue},bool)'''
    ...
    def setFrontClipDistance (self, *args, **kwargs)-> None :
      '''setFrontClipDistance( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setFrontClipDistance(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setFrontClipEnabled (self, *args, **kwargs)-> None :
      '''setFrontClipEnabled( (AbstractViewTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setFrontClipEnabled(class PyDbAbstractViewTableRecord {lvalue},bool)'''
    ...
    def setHeight (self, *args, **kwargs)-> None :
      '''setHeight( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setHeight(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setLensLength (self, *args, **kwargs)-> None :
      '''setLensLength( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setLensLength(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setName (self, *args, **kwargs)-> ErrorStatus :
      '''setName( (SymbolTableRecord)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setName(class PyDbSymbolTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPerspectiveEnabled (self, *args, **kwargs)-> None :
      '''setPerspectiveEnabled( (AbstractViewTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPerspectiveEnabled(class PyDbAbstractViewTableRecord {lvalue},bool)'''
    ...
    def setSun (self, *args, **kwargs)-> ErrorStatus :
      '''setSun( (AbstractViewTableRecord)arg1, (ObjectId)arg2, (DbObject)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSun(class PyDbAbstractViewTableRecord {lvalue},class PyDbObjectId {lvalue},class PyDbObject {lvalue})

setSun( (AbstractViewTableRecord)arg1, (ObjectId)arg2, (DbObject)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSun(class PyDbAbstractViewTableRecord {lvalue},class PyDbObjectId {lvalue},class PyDbObject {lvalue},bool)'''
    ...
    def setTarget (self, *args, **kwargs)-> None :
      '''setTarget( (AbstractViewTableRecord)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setTarget(class PyDbAbstractViewTableRecord {lvalue},class AcGePoint3d)'''
    ...
    def setUcs (self, *args, **kwargs)-> ErrorStatus :
      '''setUcs( (AbstractViewTableRecord)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUcs(class PyDbAbstractViewTableRecord {lvalue},class AcGePoint3d,class AcGeVector3d,class AcGeVector3d)

setUcs( (AbstractViewTableRecord)arg1, (OrthographicView)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUcs(class PyDbAbstractViewTableRecord {lvalue},enum AcDb::OrthographicView)

setUcs( (AbstractViewTableRecord)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUcs(class PyDbAbstractViewTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setUcsToWorld (self, *args, **kwargs)-> ErrorStatus :
      '''setUcsToWorld( (AbstractViewTableRecord)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUcsToWorld(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def setViewDirection (self, *args, **kwargs)-> None :
      '''setViewDirection( (AbstractViewTableRecord)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setViewDirection(class PyDbAbstractViewTableRecord {lvalue},class AcGeVector3d)

setViewDirection( (AbstractViewTableRecord)arg1, (OrthographicView)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setViewDirection(class PyDbAbstractViewTableRecord {lvalue},enum AcDb::OrthographicView)'''
    ...
    def setViewTwist (self, *args, **kwargs)-> None :
      '''setViewTwist( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setViewTwist(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setVisualStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setVisualStyle( (AbstractViewTableRecord)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisualStyle(class PyDbAbstractViewTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setWidth (self, *args, **kwargs)-> None :
      '''setWidth( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setWidth(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def sunId (self, *args, **kwargs)-> ObjectId :
      '''sunId( (AbstractViewTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId sunId(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def target (self, *args, **kwargs)-> Point3d :
      '''target( (AbstractViewTableRecord)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d target(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def ucsName (self, *args, **kwargs)-> ObjectId :
      '''ucsName( (AbstractViewTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ucsName(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def viewDirection (self, *args, **kwargs)-> Vector3d :
      '''viewDirection( (AbstractViewTableRecord)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d viewDirection(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def viewTwist (self, *args, **kwargs)-> float :
      '''viewTwist( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double viewTwist(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def visualStyle (self, *args, **kwargs)-> ObjectId :
      '''visualStyle( (AbstractViewTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId visualStyle(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def width (self, *args, **kwargs)-> float :
      '''width( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double width(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class AdsName:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def fromObjectId (self, *args, **kwargs)-> None :
      '''fromObjectId( (AdsName)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void fromObjectId(class AdsName {lvalue},class PyDbObjectId)'''
    ...
    def toObjectId (self, *args, **kwargs)-> ObjectId :
      '''toObjectId( (AdsName)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId toObjectId(class AdsName {lvalue})'''
    ...

class AlignedDimension:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (str)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (str)arg5, (ObjectId)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def altSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def alternatePrefix (self, *args, **kwargs)-> str :
      '''alternatePrefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternatePrefix(class PyDbDimension {lvalue})'''
    ...
    def alternateSuffix (self, *args, **kwargs)-> str :
      '''alternateSuffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternateSuffix(class PyDbDimension {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def blockTransform (self, *args, **kwargs)-> Matrix3d :
      '''blockTransform( (Dimension)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbDimension {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> AlignedDimension :
      '''cast( (RxObject)arg1) -> AlignedDimension :

    C++ signature :
        class PyDbAlignedDimension cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def centerMarkSize (self, *args, **kwargs)-> float :
      '''centerMarkSize( (Dimension)arg1) -> float :

    C++ signature :
        double centerMarkSize(class PyDbDimension {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> AlignedDimension :
      '''cloneFrom( (RxObject)arg1) -> AlignedDimension :

    C++ signature :
        class PyDbAlignedDimension cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self, *args, **kwargs)-> ObjectId :
      '''dimBlockId( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimBlockId(class PyDbDimension {lvalue})'''
    ...
    def dimBlockPosition (self, *args, **kwargs)-> Point3d :
      '''dimBlockPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimBlockPosition(class PyDbDimension {lvalue})'''
    ...
    def dimExt1Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt1Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt1Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimExt2Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt2Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt2Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimLineLinetype (self, *args, **kwargs)-> ObjectId :
      '''dimLineLinetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimLineLinetype(class PyDbDimension {lvalue})'''
    ...
    def dimLinePoint (self, *args, **kwargs)-> Point3d :
      '''dimLinePoint( (AlignedDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimLinePoint(class PyDbAlignedDimension {lvalue})'''
    ...
    def dimensionStyle (self, *args, **kwargs)-> ObjectId :
      '''dimensionStyle( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimensionStyle(class PyDbDimension {lvalue})'''
    ...
    def dimensionText (self, *args, **kwargs)-> str :
      '''dimensionText( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dimensionText(class PyDbDimension {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def elevation (self, *args, **kwargs)-> float :
      '''elevation( (Dimension)arg1) -> float :

    C++ signature :
        double elevation(class PyDbDimension {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fieldFromMText (self, *args, **kwargs)-> ErrorStatus :
      '''fieldFromMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldFromMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def fieldToMText (self, *args, **kwargs)-> ErrorStatus :
      '''fieldToMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldToMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self, *args, **kwargs)-> ErrorStatus :
      '''generateLayout( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus generateLayout(class PyDbDimension {lvalue})'''
    ...
    def getArrowFirstIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowFirstIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowFirstIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getArrowSecondIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowSecondIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowSecondIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDimstyleData (self, *args, **kwargs)-> DimStyleTableRecord :
      '''getDimstyleData( (Dimension)arg1) -> DimStyleTableRecord :

    C++ signature :
        class PyDbDimStyleTableRecord getDimstyleData(class PyDbDimension {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def horizontalRotation (self, *args, **kwargs)-> float :
      '''horizontalRotation( (Dimension)arg1) -> float :

    C++ signature :
        double horizontalRotation(class PyDbDimension {lvalue})'''
    ...
    def inspection (self, *args, **kwargs)-> bool :
      '''inspection( (Dimension)arg1) -> bool :

    C++ signature :
        bool inspection(class PyDbDimension {lvalue})'''
    ...
    def inspectionFrame (self, *args, **kwargs)-> int :
      '''inspectionFrame( (Dimension)arg1) -> int :

    C++ signature :
        int inspectionFrame(class PyDbDimension {lvalue})'''
    ...
    def inspectionLabel (self, *args, **kwargs)-> str :
      '''inspectionLabel( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > inspectionLabel(class PyDbDimension {lvalue})'''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self, *args, **kwargs)-> bool :
      '''isConstraintDynamic( (Dimension)arg1) -> bool :

    C++ signature :
        bool isConstraintDynamic(class PyDbDimension {lvalue})'''
    ...
    def isConstraintObject (self, *args, **kwargs)-> tuple :
      '''isConstraintObject( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isConstraintObject(class PyDbDimension {lvalue})'''
    ...
    def isDynamicDimension (self, *args, **kwargs)-> bool :
      '''isDynamicDimension( (Dimension)arg1) -> bool :

    C++ signature :
        bool isDynamicDimension(class PyDbDimension {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self, *args, **kwargs)-> bool :
      '''isHorizontalRefTextRotation( (Dimension)arg1) -> bool :

    C++ signature :
        bool isHorizontalRefTextRotation(class PyDbDimension {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self, *args, **kwargs)-> bool :
      '''isUsingDefaultTextPosition( (Dimension)arg1) -> bool :

    C++ signature :
        bool isUsingDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def jogSymbolOn (self, *args, **kwargs)-> bool :
      '''jogSymbolOn( (AlignedDimension)arg1) -> bool :

    C++ signature :
        bool jogSymbolOn(class PyDbAlignedDimension {lvalue})'''
    ...
    def jogSymbolPosition (self, *args, **kwargs)-> Point3d :
      '''jogSymbolPosition( (AlignedDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d jogSymbolPosition(class PyDbAlignedDimension {lvalue})'''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def measurement (self, *args, **kwargs)-> float :
      '''measurement( (Dimension)arg1) -> float :

    C++ signature :
        double measurement(class PyDbDimension {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Dimension)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbDimension {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def oblique (self, *args, **kwargs)-> float :
      '''oblique( (AlignedDimension)arg1) -> float :

    C++ signature :
        double oblique(class PyDbAlignedDimension {lvalue})'''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def prefix (self, *args, **kwargs)-> str :
      '''prefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > prefix(class PyDbDimension {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recomputeDimBlock (self, *args, **kwargs)-> ErrorStatus :
      '''recomputeDimBlock( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue})

recomputeDimBlock( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue},bool)'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removeTextField (self, *args, **kwargs)-> ErrorStatus :
      '''removeTextField( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeTextField(class PyDbDimension {lvalue})'''
    ...
    def resetTextDefinedSize (self, *args, **kwargs)-> None :
      '''resetTextDefinedSize( (Dimension)arg1) -> None :

    C++ signature :
        void resetTextDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def setAltSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAlternatePrefix (self, *args, **kwargs)-> ErrorStatus :
      '''setAlternatePrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternatePrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAlternateSuffix (self, *args, **kwargs)-> ErrorStatus :
      '''setAlternateSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternateSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setArrowFirstIsFlipped (self, *args, **kwargs)-> ErrorStatus :
      '''setArrowFirstIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowFirstIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setArrowSecondIsFlipped (self, *args, **kwargs)-> ErrorStatus :
      '''setArrowSecondIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowSecondIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setConstraintDynamic (self, *args, **kwargs)-> ErrorStatus :
      '''setConstraintDynamic( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setConstraintDynamic(class PyDbDimension {lvalue},bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDimBlockId (self, *args, **kwargs)-> ErrorStatus :
      '''setDimBlockId( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockId(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimBlockPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setDimBlockPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimExt1Linetype (self, *args, **kwargs)-> ErrorStatus :
      '''setDimExt1Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt1Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimExt2Linetype (self, *args, **kwargs)-> ErrorStatus :
      '''setDimExt2Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt2Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimLineLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setDimLineLinetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimLineLinetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimLinePoint (self, *args, **kwargs)-> ErrorStatus :
      '''setDimLinePoint( (AlignedDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimLinePoint(class PyDbAlignedDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimensionStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setDimensionStyle( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionStyle(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionText (self, *args, **kwargs)-> ErrorStatus :
      '''setDimensionText( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionText(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDimstyleData (self, *args, **kwargs)-> ErrorStatus :
      '''setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self, *args, **kwargs)-> ErrorStatus :
      '''setDynamicDimension( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDynamicDimension(class PyDbDimension {lvalue},bool)'''
    ...
    def setElevation (self, *args, **kwargs)-> ErrorStatus :
      '''setElevation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setElevation(class PyDbDimension {lvalue},double)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setHorizontalRefTextRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setHorizontalRefTextRotation( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRefTextRotation(class PyDbDimension {lvalue},bool)'''
    ...
    def setHorizontalRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setHorizontalRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setInspection (self, *args, **kwargs)-> ErrorStatus :
      '''setInspection( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspection(class PyDbDimension {lvalue},bool)'''
    ...
    def setInspectionFrame (self, *args, **kwargs)-> ErrorStatus :
      '''setInspectionFrame( (Dimension)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionFrame(class PyDbDimension {lvalue},int)'''
    ...
    def setInspectionLabel (self, *args, **kwargs)-> ErrorStatus :
      '''setInspectionLabel( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionLabel(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setJogSymbolOn (self, *args, **kwargs)-> ErrorStatus :
      '''setJogSymbolOn( (AlignedDimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setJogSymbolOn(class PyDbAlignedDimension {lvalue},bool)'''
    ...
    def setJogSymbolPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setJogSymbolPosition( (AlignedDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setJogSymbolPosition(class PyDbAlignedDimension {lvalue},class AcGePoint3d)'''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs)-> ErrorStatus :
      '''setNormal( (Dimension)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbDimension {lvalue},class AcGeVector3d)'''
    ...
    def setOblique (self, *args, **kwargs)-> ErrorStatus :
      '''setOblique( (AlignedDimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOblique(class PyDbAlignedDimension {lvalue},double)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, *args, **kwargs)-> ErrorStatus :
      '''setPrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setShouldParticipateInOPM (self, *args, **kwargs)-> None :
      '''setShouldParticipateInOPM( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShouldParticipateInOPM(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuffix (self, *args, **kwargs)-> ErrorStatus :
      '''setSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setSuppressAngularTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressAngularTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressAngularTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setTextAttachment (self, *args, **kwargs)-> ErrorStatus :
      '''setTextAttachment( (Dimension)arg1, (MTextAttachmentPoint)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAttachment(class PyDbDimension {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setTextDefinedSize (self, *args, **kwargs)-> None :
      '''setTextDefinedSize( (Dimension)arg1, (float)arg2, (float)arg3) -> None :

    C++ signature :
        void setTextDefinedSize(class PyDbDimension {lvalue},double,double)'''
    ...
    def setTextLineSpacingFactor (self, *args, **kwargs)-> ErrorStatus :
      '''setTextLineSpacingFactor( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingFactor(class PyDbDimension {lvalue},double)'''
    ...
    def setTextLineSpacingStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setTextLineSpacingStyle( (Dimension)arg1, (LineSpacingStyle)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingStyle(class PyDbDimension {lvalue},enum AcDb::LineSpacingStyle)'''
    ...
    def setTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setTextPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setTextRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setTextRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setToleranceSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setUsingDefaultTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setUsingDefaultTextPosition( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUsingDefaultTextPosition(class PyDbDimension {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def setXLine1Point (self, *args, **kwargs)-> ErrorStatus :
      '''setXLine1Point( (AlignedDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXLine1Point(class PyDbAlignedDimension {lvalue},class AcGePoint3d)'''
    ...
    def setXLine2Point (self, *args, **kwargs)-> ErrorStatus :
      '''setXLine2Point( (AlignedDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXLine2Point(class PyDbAlignedDimension {lvalue},class AcGePoint3d)'''
    ...
    def shouldParticipateInOPM (self, *args, **kwargs)-> bool :
      '''shouldParticipateInOPM( (Dimension)arg1) -> bool :

    C++ signature :
        bool shouldParticipateInOPM(class PyDbDimension {lvalue})'''
    ...
    def suffix (self, *args, **kwargs)-> str :
      '''suffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > suffix(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroFeet (self, *args, **kwargs)-> bool :
      '''suppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroInches (self, *args, **kwargs)-> bool :
      '''suppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def textAttachment (self, *args, **kwargs)-> MTextAttachmentPoint :
      '''textAttachment( (Dimension)arg1) -> MTextAttachmentPoint :

    C++ signature :
        enum AcDbMText::AttachmentPoint textAttachment(class PyDbDimension {lvalue})'''
    ...
    def textDefinedSize (self, *args, **kwargs)-> tuple :
      '''textDefinedSize( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple textDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingFactor (self, *args, **kwargs)-> float :
      '''textLineSpacingFactor( (Dimension)arg1) -> float :

    C++ signature :
        double textLineSpacingFactor(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingStyle (self, *args, **kwargs)-> LineSpacingStyle :
      '''textLineSpacingStyle( (Dimension)arg1) -> LineSpacingStyle :

    C++ signature :
        enum AcDb::LineSpacingStyle textLineSpacingStyle(class PyDbDimension {lvalue})'''
    ...
    def textPosition (self, *args, **kwargs)-> Point3d :
      '''textPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d textPosition(class PyDbDimension {lvalue})'''
    ...
    def textRotation (self, *args, **kwargs)-> float :
      '''textRotation( (Dimension)arg1) -> float :

    C++ signature :
        double textRotation(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def useDefaultTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''useDefaultTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def useSetTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''useSetTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useSetTextPosition(class PyDbDimension {lvalue})'''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...
    def xLine1Point (self, *args, **kwargs)-> Point3d :
      '''xLine1Point( (AlignedDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine1Point(class PyDbAlignedDimension {lvalue})'''
    ...
    def xLine2Point (self, *args, **kwargs)-> Point3d :
      '''xLine2Point( (AlignedDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine2Point(class PyDbAlignedDimension {lvalue})'''
    ...

class AnnoType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kBlockRef (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kFcf (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMText (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kNoAnno (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class AnnotationScale:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def collectionName (self, *args, **kwargs)-> str :
      '''collectionName( (ObjectContext)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > collectionName(class PyDbObjectContext {lvalue})'''
    ...
    def copyFrom (self, *args, **kwargs)-> ErrorStatus :
      '''copyFrom( (AnnotationScale)arg1, (RxObject)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus copyFrom(class PyDbAnnotationScale {lvalue},class PyRxObject)'''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def getDrawingUnits (self, *args, **kwargs)-> float :
      '''getDrawingUnits( (AnnotationScale)arg1) -> float :

    C++ signature :
        double getDrawingUnits(class PyDbAnnotationScale {lvalue})'''
    ...
    def getIsTemporaryScale (self, *args, **kwargs)-> bool :
      '''getIsTemporaryScale( (AnnotationScale)arg1) -> bool :

    C++ signature :
        bool getIsTemporaryScale(class PyDbAnnotationScale {lvalue})'''
    ...
    def getName (self, *args, **kwargs)-> str :
      '''getName( (ObjectContext)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getName(class PyDbObjectContext {lvalue})'''
    ...
    def getPaperUnits (self, *args, **kwargs)-> float :
      '''getPaperUnits( (AnnotationScale)arg1) -> float :

    C++ signature :
        double getPaperUnits(class PyDbAnnotationScale {lvalue})'''
    ...
    def getScale (self, *args, **kwargs)-> float :
      '''getScale( (AnnotationScale)arg1) -> float :

    C++ signature :
        double getScale(class PyDbAnnotationScale {lvalue})'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (RxObject)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyRxObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def matchScaleId (self, *args, **kwargs)-> bool :
      '''matchScaleId( (AnnotationScale)arg1, (int)arg2) -> bool :

    C++ signature :
        bool matchScaleId(class PyDbAnnotationScale {lvalue},__int64)'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def setDrawingUnits (self, *args, **kwargs)-> ErrorStatus :
      '''setDrawingUnits( (AnnotationScale)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDrawingUnits(class PyDbAnnotationScale {lvalue},double)'''
    ...
    def setName (self, *args, **kwargs)-> ErrorStatus :
      '''setName( (ObjectContext)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setName(class PyDbObjectContext {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPaperUnits (self, *args, **kwargs)-> ErrorStatus :
      '''setPaperUnits( (AnnotationScale)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPaperUnits(class PyDbAnnotationScale {lvalue},double)'''
    ...
    def uniqueIdentifier (self, *args, **kwargs)-> int :
      '''uniqueIdentifier( (ObjectContext)arg1) -> int :

    C++ signature :
        __int64 uniqueIdentifier(class PyDbObjectContext {lvalue})'''
    ...

class Arc:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (float)arg3, (float)arg4, (float)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,double,double,double)

__init__( (object)arg1, (Point3d)arg2, (Vector3d)arg3, (float)arg4, (float)arg5, (float)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGeVector3d,double,double,double)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Arc :
      '''cast( (RxObject)arg1) -> Arc :

    C++ signature :
        class PyDbArc cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def center (self, *args, **kwargs)-> Point3d :
      '''center( (Arc)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d center(class PyDbArc {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Arc :
      '''cloneFrom( (RxObject)arg1) -> Arc :

    C++ signature :
        class PyDbArc cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def endAngle (self, *args, **kwargs)-> float :
      '''endAngle( (Arc)arg1) -> float :

    C++ signature :
        double endAngle(class PyDbArc {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> ErrorStatus :
      '''extend( (Curve)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getArea (self, *args, **kwargs)-> float :
      '''getArea( (Curve)arg1) -> float :

    C++ signature :
        double getArea(class PyDbCurve {lvalue})'''
    ...
    def getClosestPointTo (self, *args, **kwargs)-> Point3d :
      '''getClosestPointTo( (Curve)arg1, (Point3d)arg2, (bool)arg3) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbCurve {lvalue},class AcGePoint3d,bool)

getClosestPointTo( (Curve)arg1, (Point3d)arg2, (Vector3d)arg3, (bool)arg4) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbCurve {lvalue},class AcGePoint3d,class AcGeVector3d,bool)'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDistAtParam (self, *args, **kwargs)-> float :
      '''getDistAtParam( (Curve)arg1, (float)arg2) -> float :

    C++ signature :
        double getDistAtParam(class PyDbCurve {lvalue},double)'''
    ...
    def getDistAtPoint (self, *args, **kwargs)-> float :
      '''getDistAtPoint( (Curve)arg1, (Point3d)arg2) -> float :

    C++ signature :
        double getDistAtPoint(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEndParam (self, *args, **kwargs)-> float :
      '''getEndParam( (Curve)arg1) -> float :

    C++ signature :
        double getEndParam(class PyDbCurve {lvalue})'''
    ...
    def getEndPoint (self, *args, **kwargs)-> Point3d :
      '''getEndPoint( (Curve)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getEndPoint(class PyDbCurve {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self, *args, **kwargs)-> Vector3d :
      '''getFirstDeriv( (Curve)arg1, (float)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getFirstDeriv(class PyDbCurve {lvalue},double)

getFirstDeriv( (Curve)arg1, (Point3d)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getFirstDeriv(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getOffsetCurves (self, *args, **kwargs)-> list :
      '''getOffsetCurves( (Curve)arg1, (float)arg2) -> list :

    C++ signature :
        class boost::python::list getOffsetCurves(class PyDbCurve {lvalue},double)'''
    ...
    def getOffsetCurvesGivenPlaneNormal (self, *args, **kwargs)-> list :
      '''getOffsetCurvesGivenPlaneNormal( (Curve)arg1, (Vector3d)arg2, (float)arg3) -> list :

    C++ signature :
        class boost::python::list getOffsetCurvesGivenPlaneNormal(class PyDbCurve {lvalue},class AcGeVector3d,double)'''
    ...
    def getParamAtDist (self, *args, **kwargs)-> float :
      '''getParamAtDist( (Curve)arg1, (float)arg2) -> float :

    C++ signature :
        double getParamAtDist(class PyDbCurve {lvalue},double)'''
    ...
    def getParamAtPoint (self, *args, **kwargs)-> float :
      '''getParamAtPoint( (Curve)arg1, (Point3d)arg2) -> float :

    C++ signature :
        double getParamAtPoint(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def getPointAtDist (self, *args, **kwargs)-> Point3d :
      '''getPointAtDist( (Curve)arg1, (float)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getPointAtDist(class PyDbCurve {lvalue},double)'''
    ...
    def getPointAtParam (self, *args, **kwargs)-> Point3d :
      '''getPointAtParam( (Curve)arg1, (float)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getPointAtParam(class PyDbCurve {lvalue},double)'''
    ...
    def getSecondDeriv (self, *args, **kwargs)-> Vector3d :
      '''getSecondDeriv( (Curve)arg1, (float)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getSecondDeriv(class PyDbCurve {lvalue},double)

getSecondDeriv( (Curve)arg1, (Point3d)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getSecondDeriv(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getSplitCurves (self, *args, **kwargs)-> list :
      '''getSplitCurves( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurves(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getSplitCurvesAtParams (self, *args, **kwargs)-> list :
      '''getSplitCurvesAtParams( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurvesAtParams(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getSplitCurvesAtPoints (self, *args, **kwargs)-> list :
      '''getSplitCurvesAtPoints( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurvesAtPoints(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getStartParam (self, *args, **kwargs)-> float :
      '''getStartParam( (Curve)arg1) -> float :

    C++ signature :
        double getStartParam(class PyDbCurve {lvalue})'''
    ...
    def getStartPoint (self, *args, **kwargs)-> Point3d :
      '''getStartPoint( (Curve)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getStartPoint(class PyDbCurve {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isClosed (self, *args, **kwargs)-> bool :
      '''isClosed( (Curve)arg1) -> bool :

    C++ signature :
        bool isClosed(class PyDbCurve {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPeriodic (self, *args, **kwargs)-> bool :
      '''isPeriodic( (Curve)arg1) -> bool :

    C++ signature :
        bool isPeriodic(class PyDbCurve {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def length (self, *args, **kwargs)-> float :
      '''length( (Arc)arg1) -> float :

    C++ signature :
        double length(class PyDbArc {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Arc)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbArc {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def radius (self, *args, **kwargs)-> float :
      '''radius( (Arc)arg1) -> float :

    C++ signature :
        double radius(class PyDbArc {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def reverseCurve (self, *args, **kwargs)-> ErrorStatus :
      '''reverseCurve( (Curve)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus reverseCurve(class PyDbCurve {lvalue})'''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setCenter (self, *args, **kwargs)-> ErrorStatus :
      '''setCenter( (Arc)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCenter(class PyDbArc {lvalue},class AcGePoint3d)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setEndAngle (self, *args, **kwargs)-> ErrorStatus :
      '''setEndAngle( (Arc)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setEndAngle(class PyDbArc {lvalue},double)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs)-> ErrorStatus :
      '''setNormal( (Arc)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbArc {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setRadius (self, *args, **kwargs)-> ErrorStatus :
      '''setRadius( (Arc)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRadius(class PyDbArc {lvalue},double)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setStartAngle (self, *args, **kwargs)-> ErrorStatus :
      '''setStartAngle( (Arc)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setStartAngle(class PyDbArc {lvalue},double)'''
    ...
    def setThickness (self, *args, **kwargs)-> ErrorStatus :
      '''setThickness( (Arc)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setThickness(class PyDbArc {lvalue},double)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def startAngle (self, *args, **kwargs)-> float :
      '''startAngle( (Arc)arg1) -> float :

    C++ signature :
        double startAngle(class PyDbArc {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def thickness (self, *args, **kwargs)-> float :
      '''thickness( (Arc)arg1) -> float :

    C++ signature :
        double thickness(class PyDbArc {lvalue})'''
    ...
    def totalAngle (self, *args, **kwargs)-> float :
      '''totalAngle( (Arc)arg1) -> float :

    C++ signature :
        double totalAngle(class PyDbArc {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class ArcDimension:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (str)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (str)arg6, (ObjectId)arg7) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def altSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def alternatePrefix (self, *args, **kwargs)-> str :
      '''alternatePrefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternatePrefix(class PyDbDimension {lvalue})'''
    ...
    def alternateSuffix (self, *args, **kwargs)-> str :
      '''alternateSuffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternateSuffix(class PyDbDimension {lvalue})'''
    ...
    def arcEndParam (self, *args, **kwargs)-> float :
      '''arcEndParam( (ArcDimension)arg1) -> float :

    C++ signature :
        double arcEndParam(class PyDbArcDimension {lvalue})'''
    ...
    def arcPoint (self, *args, **kwargs)-> Point3d :
      '''arcPoint( (ArcDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d arcPoint(class PyDbArcDimension {lvalue})'''
    ...
    def arcStartParam (self, *args, **kwargs)-> float :
      '''arcStartParam( (ArcDimension)arg1) -> float :

    C++ signature :
        double arcStartParam(class PyDbArcDimension {lvalue})'''
    ...
    def arcSymbolType (self, *args, **kwargs)-> int :
      '''arcSymbolType( (ArcDimension)arg1) -> int :

    C++ signature :
        int arcSymbolType(class PyDbArcDimension {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def blockTransform (self, *args, **kwargs)-> Matrix3d :
      '''blockTransform( (Dimension)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbDimension {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> ArcDimension :
      '''cast( (RxObject)arg1) -> ArcDimension :

    C++ signature :
        class PyDbArcDimension cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def centerMarkSize (self, *args, **kwargs)-> float :
      '''centerMarkSize( (Dimension)arg1) -> float :

    C++ signature :
        double centerMarkSize(class PyDbDimension {lvalue})'''
    ...
    def centerPoint (self, *args, **kwargs)-> Point3d :
      '''centerPoint( (ArcDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d centerPoint(class PyDbArcDimension {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> ArcDimension :
      '''cloneFrom( (RxObject)arg1) -> ArcDimension :

    C++ signature :
        class PyDbArcDimension cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self, *args, **kwargs)-> ObjectId :
      '''dimBlockId( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimBlockId(class PyDbDimension {lvalue})'''
    ...
    def dimBlockPosition (self, *args, **kwargs)-> Point3d :
      '''dimBlockPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimBlockPosition(class PyDbDimension {lvalue})'''
    ...
    def dimExt1Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt1Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt1Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimExt2Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt2Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt2Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimLineLinetype (self, *args, **kwargs)-> ObjectId :
      '''dimLineLinetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimLineLinetype(class PyDbDimension {lvalue})'''
    ...
    def dimensionStyle (self, *args, **kwargs)-> ObjectId :
      '''dimensionStyle( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimensionStyle(class PyDbDimension {lvalue})'''
    ...
    def dimensionText (self, *args, **kwargs)-> str :
      '''dimensionText( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dimensionText(class PyDbDimension {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def elevation (self, *args, **kwargs)-> float :
      '''elevation( (Dimension)arg1) -> float :

    C++ signature :
        double elevation(class PyDbDimension {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fieldFromMText (self, *args, **kwargs)-> ErrorStatus :
      '''fieldFromMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldFromMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def fieldToMText (self, *args, **kwargs)-> ErrorStatus :
      '''fieldToMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldToMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self, *args, **kwargs)-> ErrorStatus :
      '''generateLayout( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus generateLayout(class PyDbDimension {lvalue})'''
    ...
    def getArrowFirstIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowFirstIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowFirstIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getArrowSecondIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowSecondIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowSecondIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDimstyleData (self, *args, **kwargs)-> DimStyleTableRecord :
      '''getDimstyleData( (Dimension)arg1) -> DimStyleTableRecord :

    C++ signature :
        class PyDbDimStyleTableRecord getDimstyleData(class PyDbDimension {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasLeader (self, *args, **kwargs)-> bool :
      '''hasLeader( (ArcDimension)arg1) -> bool :

    C++ signature :
        bool hasLeader(class PyDbArcDimension {lvalue})'''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def horizontalRotation (self, *args, **kwargs)-> float :
      '''horizontalRotation( (Dimension)arg1) -> float :

    C++ signature :
        double horizontalRotation(class PyDbDimension {lvalue})'''
    ...
    def inspection (self, *args, **kwargs)-> bool :
      '''inspection( (Dimension)arg1) -> bool :

    C++ signature :
        bool inspection(class PyDbDimension {lvalue})'''
    ...
    def inspectionFrame (self, *args, **kwargs)-> int :
      '''inspectionFrame( (Dimension)arg1) -> int :

    C++ signature :
        int inspectionFrame(class PyDbDimension {lvalue})'''
    ...
    def inspectionLabel (self, *args, **kwargs)-> str :
      '''inspectionLabel( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > inspectionLabel(class PyDbDimension {lvalue})'''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self, *args, **kwargs)-> bool :
      '''isConstraintDynamic( (Dimension)arg1) -> bool :

    C++ signature :
        bool isConstraintDynamic(class PyDbDimension {lvalue})'''
    ...
    def isConstraintObject (self, *args, **kwargs)-> tuple :
      '''isConstraintObject( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isConstraintObject(class PyDbDimension {lvalue})'''
    ...
    def isDynamicDimension (self, *args, **kwargs)-> bool :
      '''isDynamicDimension( (Dimension)arg1) -> bool :

    C++ signature :
        bool isDynamicDimension(class PyDbDimension {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self, *args, **kwargs)-> bool :
      '''isHorizontalRefTextRotation( (Dimension)arg1) -> bool :

    C++ signature :
        bool isHorizontalRefTextRotation(class PyDbDimension {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPartial (self, *args, **kwargs)-> bool :
      '''isPartial( (ArcDimension)arg1) -> bool :

    C++ signature :
        bool isPartial(class PyDbArcDimension {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self, *args, **kwargs)-> bool :
      '''isUsingDefaultTextPosition( (Dimension)arg1) -> bool :

    C++ signature :
        bool isUsingDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def leader1Point (self, *args, **kwargs)-> Point3d :
      '''leader1Point( (ArcDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d leader1Point(class PyDbArcDimension {lvalue})'''
    ...
    def leader2Point (self, *args, **kwargs)-> Point3d :
      '''leader2Point( (ArcDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d leader2Point(class PyDbArcDimension {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def measurement (self, *args, **kwargs)-> float :
      '''measurement( (Dimension)arg1) -> float :

    C++ signature :
        double measurement(class PyDbDimension {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Dimension)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbDimension {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def prefix (self, *args, **kwargs)-> str :
      '''prefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > prefix(class PyDbDimension {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recomputeDimBlock (self, *args, **kwargs)-> ErrorStatus :
      '''recomputeDimBlock( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue})

recomputeDimBlock( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue},bool)'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removeTextField (self, *args, **kwargs)-> ErrorStatus :
      '''removeTextField( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeTextField(class PyDbDimension {lvalue})'''
    ...
    def resetTextDefinedSize (self, *args, **kwargs)-> None :
      '''resetTextDefinedSize( (Dimension)arg1) -> None :

    C++ signature :
        void resetTextDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def setAltSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAlternatePrefix (self, *args, **kwargs)-> ErrorStatus :
      '''setAlternatePrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternatePrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAlternateSuffix (self, *args, **kwargs)-> ErrorStatus :
      '''setAlternateSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternateSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setArcEndParam (self, *args, **kwargs)-> ErrorStatus :
      '''setArcEndParam( (ArcDimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArcEndParam(class PyDbArcDimension {lvalue},double)'''
    ...
    def setArcPoint (self, *args, **kwargs)-> ErrorStatus :
      '''setArcPoint( (ArcDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArcPoint(class PyDbArcDimension {lvalue},class AcGePoint3d)'''
    ...
    def setArcStartParam (self, *args, **kwargs)-> ErrorStatus :
      '''setArcStartParam( (ArcDimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArcStartParam(class PyDbArcDimension {lvalue},double)'''
    ...
    def setArcSymbolType (self, *args, **kwargs)-> ErrorStatus :
      '''setArcSymbolType( (ArcDimension)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArcSymbolType(class PyDbArcDimension {lvalue},int)'''
    ...
    def setArrowFirstIsFlipped (self, *args, **kwargs)-> ErrorStatus :
      '''setArrowFirstIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowFirstIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setArrowSecondIsFlipped (self, *args, **kwargs)-> ErrorStatus :
      '''setArrowSecondIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowSecondIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setCenterPoint (self, *args, **kwargs)-> ErrorStatus :
      '''setCenterPoint( (ArcDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCenterPoint(class PyDbArcDimension {lvalue},class AcGePoint3d)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setConstraintDynamic (self, *args, **kwargs)-> ErrorStatus :
      '''setConstraintDynamic( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setConstraintDynamic(class PyDbDimension {lvalue},bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDimBlockId (self, *args, **kwargs)-> ErrorStatus :
      '''setDimBlockId( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockId(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimBlockPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setDimBlockPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimExt1Linetype (self, *args, **kwargs)-> ErrorStatus :
      '''setDimExt1Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt1Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimExt2Linetype (self, *args, **kwargs)-> ErrorStatus :
      '''setDimExt2Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt2Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimLineLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setDimLineLinetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimLineLinetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setDimensionStyle( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionStyle(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionText (self, *args, **kwargs)-> ErrorStatus :
      '''setDimensionText( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionText(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDimstyleData (self, *args, **kwargs)-> ErrorStatus :
      '''setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self, *args, **kwargs)-> ErrorStatus :
      '''setDynamicDimension( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDynamicDimension(class PyDbDimension {lvalue},bool)'''
    ...
    def setElevation (self, *args, **kwargs)-> ErrorStatus :
      '''setElevation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setElevation(class PyDbDimension {lvalue},double)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setHasLeader (self, *args, **kwargs)-> ErrorStatus :
      '''setHasLeader( (ArcDimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHasLeader(class PyDbArcDimension {lvalue},bool)'''
    ...
    def setHorizontalRefTextRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setHorizontalRefTextRotation( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRefTextRotation(class PyDbDimension {lvalue},bool)'''
    ...
    def setHorizontalRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setHorizontalRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setInspection (self, *args, **kwargs)-> ErrorStatus :
      '''setInspection( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspection(class PyDbDimension {lvalue},bool)'''
    ...
    def setInspectionFrame (self, *args, **kwargs)-> ErrorStatus :
      '''setInspectionFrame( (Dimension)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionFrame(class PyDbDimension {lvalue},int)'''
    ...
    def setInspectionLabel (self, *args, **kwargs)-> ErrorStatus :
      '''setInspectionLabel( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionLabel(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setIsPartial (self, *args, **kwargs)-> ErrorStatus :
      '''setIsPartial( (ArcDimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setIsPartial(class PyDbArcDimension {lvalue},bool)'''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLeader1Point (self, *args, **kwargs)-> ErrorStatus :
      '''setLeader1Point( (ArcDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLeader1Point(class PyDbArcDimension {lvalue},class AcGePoint3d)'''
    ...
    def setLeader2Point (self, *args, **kwargs)-> ErrorStatus :
      '''setLeader2Point( (ArcDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLeader2Point(class PyDbArcDimension {lvalue},class AcGePoint3d)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs)-> ErrorStatus :
      '''setNormal( (Dimension)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbDimension {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, *args, **kwargs)-> ErrorStatus :
      '''setPrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setShouldParticipateInOPM (self, *args, **kwargs)-> None :
      '''setShouldParticipateInOPM( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShouldParticipateInOPM(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuffix (self, *args, **kwargs)-> ErrorStatus :
      '''setSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setSuppressAngularTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressAngularTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressAngularTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setTextAttachment (self, *args, **kwargs)-> ErrorStatus :
      '''setTextAttachment( (Dimension)arg1, (MTextAttachmentPoint)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAttachment(class PyDbDimension {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setTextDefinedSize (self, *args, **kwargs)-> None :
      '''setTextDefinedSize( (Dimension)arg1, (float)arg2, (float)arg3) -> None :

    C++ signature :
        void setTextDefinedSize(class PyDbDimension {lvalue},double,double)'''
    ...
    def setTextLineSpacingFactor (self, *args, **kwargs)-> ErrorStatus :
      '''setTextLineSpacingFactor( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingFactor(class PyDbDimension {lvalue},double)'''
    ...
    def setTextLineSpacingStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setTextLineSpacingStyle( (Dimension)arg1, (LineSpacingStyle)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingStyle(class PyDbDimension {lvalue},enum AcDb::LineSpacingStyle)'''
    ...
    def setTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setTextPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setTextRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setTextRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setToleranceSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setUsingDefaultTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setUsingDefaultTextPosition( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUsingDefaultTextPosition(class PyDbDimension {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def setXLine1Point (self, *args, **kwargs)-> ErrorStatus :
      '''setXLine1Point( (ArcDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXLine1Point(class PyDbArcDimension {lvalue},class AcGePoint3d)'''
    ...
    def setXLine2Point (self, *args, **kwargs)-> ErrorStatus :
      '''setXLine2Point( (ArcDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXLine2Point(class PyDbArcDimension {lvalue},class AcGePoint3d)'''
    ...
    def shouldParticipateInOPM (self, *args, **kwargs)-> bool :
      '''shouldParticipateInOPM( (Dimension)arg1) -> bool :

    C++ signature :
        bool shouldParticipateInOPM(class PyDbDimension {lvalue})'''
    ...
    def suffix (self, *args, **kwargs)-> str :
      '''suffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > suffix(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroFeet (self, *args, **kwargs)-> bool :
      '''suppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroInches (self, *args, **kwargs)-> bool :
      '''suppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def textAttachment (self, *args, **kwargs)-> MTextAttachmentPoint :
      '''textAttachment( (Dimension)arg1) -> MTextAttachmentPoint :

    C++ signature :
        enum AcDbMText::AttachmentPoint textAttachment(class PyDbDimension {lvalue})'''
    ...
    def textDefinedSize (self, *args, **kwargs)-> tuple :
      '''textDefinedSize( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple textDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingFactor (self, *args, **kwargs)-> float :
      '''textLineSpacingFactor( (Dimension)arg1) -> float :

    C++ signature :
        double textLineSpacingFactor(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingStyle (self, *args, **kwargs)-> LineSpacingStyle :
      '''textLineSpacingStyle( (Dimension)arg1) -> LineSpacingStyle :

    C++ signature :
        enum AcDb::LineSpacingStyle textLineSpacingStyle(class PyDbDimension {lvalue})'''
    ...
    def textPosition (self, *args, **kwargs)-> Point3d :
      '''textPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d textPosition(class PyDbDimension {lvalue})'''
    ...
    def textRotation (self, *args, **kwargs)-> float :
      '''textRotation( (Dimension)arg1) -> float :

    C++ signature :
        double textRotation(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def useDefaultTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''useDefaultTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def useSetTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''useSetTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useSetTextPosition(class PyDbDimension {lvalue})'''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...
    def xLine1Point (self, *args, **kwargs)-> Point3d :
      '''xLine1Point( (ArcDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine1Point(class PyDbArcDimension {lvalue})'''
    ...
    def xLine2Point (self, *args, **kwargs)-> Point3d :
      '''xLine2Point( (ArcDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine2Point(class PyDbArcDimension {lvalue})'''
    ...

class AttributeDefinition:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2, (str)arg3, (str)arg4, (str)arg5, (ObjectId)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def adjustAlignment (self, *args, **kwargs)-> ErrorStatus :
      '''adjustAlignment( (AttributeDefinition)arg1, (Database)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus adjustAlignment(class PyDbAttributeDefinition {lvalue},class PyDbDatabase)'''
    ...
    def alignmentPoint (self, *args, **kwargs)-> Point3d :
      '''alignmentPoint( (Text)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d alignmentPoint(class PyDbText {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> AttributeDefinition :
      '''cast( (RxObject)arg1) -> AttributeDefinition :

    C++ signature :
        class PyDbAttributeDefinition cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> AttributeDefinition :
      '''cloneFrom( (RxObject)arg1) -> AttributeDefinition :

    C++ signature :
        class PyDbAttributeDefinition cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def convertFieldToText (self, *args, **kwargs)-> ErrorStatus :
      '''convertFieldToText( (Text)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus convertFieldToText(class PyDbText {lvalue})'''
    ...
    def convertIntoMTextAttributeDefinition (self, *args, **kwargs)-> ErrorStatus :
      '''convertIntoMTextAttributeDefinition( (AttributeDefinition)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus convertIntoMTextAttributeDefinition(class PyDbAttributeDefinition {lvalue},bool)'''
    ...
    def correctSpelling (self, *args, **kwargs)-> int :
      '''correctSpelling( (Text)arg1) -> int :

    C++ signature :
        int correctSpelling(class PyDbText {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fieldLength (self, *args, **kwargs)-> int :
      '''fieldLength( (AttributeDefinition)arg1) -> int :

    C++ signature :
        unsigned short fieldLength(class PyDbAttributeDefinition {lvalue})'''
    ...
    def getBoundingPoints (self, *args, **kwargs)-> list :
      '''getBoundingPoints( (Text)arg1) -> list :

    C++ signature :
        class boost::python::list getBoundingPoints(class PyDbText {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getMTextAttributeDefinition (self, *args, **kwargs)-> MText :
      '''getMTextAttributeDefinition( (AttributeDefinition)arg1) -> MText :

    C++ signature :
        class PyDbMText getMTextAttributeDefinition(class PyDbAttributeDefinition {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def height (self, *args, **kwargs)-> float :
      '''height( (Text)arg1) -> float :

    C++ signature :
        double height(class PyDbText {lvalue})'''
    ...
    def hitTest (self, *args, **kwargs)-> bool :
      '''hitTest( (Text)arg1, (Point3d)arg2) -> bool :

    C++ signature :
        bool hitTest(class PyDbText {lvalue},class AcGePoint3d)'''
    ...
    def horizontalMode (self, *args, **kwargs)-> TextHorzMode :
      '''horizontalMode( (Text)arg1) -> TextHorzMode :

    C++ signature :
        enum AcDb::TextHorzMode horizontalMode(class PyDbText {lvalue})'''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isConstant (self, *args, **kwargs)-> bool :
      '''isConstant( (AttributeDefinition)arg1) -> bool :

    C++ signature :
        bool isConstant(class PyDbAttributeDefinition {lvalue})'''
    ...
    def isDefaultAlignment (self, *args, **kwargs)-> bool :
      '''isDefaultAlignment( (Text)arg1) -> bool :

    C++ signature :
        bool isDefaultAlignment(class PyDbText {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isInvisible (self, *args, **kwargs)-> bool :
      '''isInvisible( (AttributeDefinition)arg1) -> bool :

    C++ signature :
        bool isInvisible(class PyDbAttributeDefinition {lvalue})'''
    ...
    def isMTextAttributeDefinition (self, *args, **kwargs)-> bool :
      '''isMTextAttributeDefinition( (AttributeDefinition)arg1) -> bool :

    C++ signature :
        bool isMTextAttributeDefinition(class PyDbAttributeDefinition {lvalue})'''
    ...
    def isMirroredInX (self, *args, **kwargs)-> bool :
      '''isMirroredInX( (Text)arg1) -> bool :

    C++ signature :
        bool isMirroredInX(class PyDbText {lvalue})'''
    ...
    def isMirroredInY (self, *args, **kwargs)-> bool :
      '''isMirroredInY( (Text)arg1) -> bool :

    C++ signature :
        bool isMirroredInY(class PyDbText {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isPreset (self, *args, **kwargs)-> bool :
      '''isPreset( (AttributeDefinition)arg1) -> bool :

    C++ signature :
        bool isPreset(class PyDbAttributeDefinition {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isVerifiable (self, *args, **kwargs)-> bool :
      '''isVerifiable( (AttributeDefinition)arg1) -> bool :

    C++ signature :
        bool isVerifiable(class PyDbAttributeDefinition {lvalue})'''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def justification (self, *args, **kwargs)-> TextAlignment :
      '''justification( (Text)arg1) -> TextAlignment :

    C++ signature :
        enum AcDbText::AcTextAlignment justification(class PyDbText {lvalue})'''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def lockPositionInBlock (self, *args, **kwargs)-> bool :
      '''lockPositionInBlock( (AttributeDefinition)arg1) -> bool :

    C++ signature :
        bool lockPositionInBlock(class PyDbAttributeDefinition {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def mirrorInX (self, *args, **kwargs)-> ErrorStatus :
      '''mirrorInX( (Text)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus mirrorInX(class PyDbText {lvalue},bool)'''
    ...
    def mirrorInY (self, *args, **kwargs)-> ErrorStatus :
      '''mirrorInY( (Text)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus mirrorInY(class PyDbText {lvalue},bool)'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Text)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbText {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def oblique (self, *args, **kwargs)-> float :
      '''oblique( (Text)arg1) -> float :

    C++ signature :
        double oblique(class PyDbText {lvalue})'''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def position (self, *args, **kwargs)-> Point3d :
      '''position( (Text)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDbText {lvalue})'''
    ...
    def prompt (self, *args, **kwargs)-> str :
      '''prompt( (AttributeDefinition)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > prompt(class PyDbAttributeDefinition {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def rotation (self, *args, **kwargs)-> float :
      '''rotation( (Text)arg1) -> float :

    C++ signature :
        double rotation(class PyDbText {lvalue})'''
    ...
    def setAlignmentPoint (self, *args, **kwargs)-> ErrorStatus :
      '''setAlignmentPoint( (Text)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlignmentPoint(class PyDbText {lvalue},class AcGePoint3d)'''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setConstant (self, *args, **kwargs)-> ErrorStatus :
      '''setConstant( (AttributeDefinition)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setConstant(class PyDbAttributeDefinition {lvalue},bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFieldLength (self, *args, **kwargs)-> ErrorStatus :
      '''setFieldLength( (AttributeDefinition)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFieldLength(class PyDbAttributeDefinition {lvalue},unsigned short)'''
    ...
    def setHeight (self, *args, **kwargs)-> ErrorStatus :
      '''setHeight( (Text)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHeight(class PyDbText {lvalue},double)'''
    ...
    def setHorizontalMode (self, *args, **kwargs)-> ErrorStatus :
      '''setHorizontalMode( (Text)arg1, (TextHorzMode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalMode(class PyDbText {lvalue},enum AcDb::TextHorzMode)'''
    ...
    def setInvisible (self, *args, **kwargs)-> ErrorStatus :
      '''setInvisible( (AttributeDefinition)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInvisible(class PyDbAttributeDefinition {lvalue},bool)'''
    ...
    def setJustification (self, *args, **kwargs)-> ErrorStatus :
      '''setJustification( (Text)arg1, (TextAlignment)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setJustification(class PyDbText {lvalue},enum AcDbText::AcTextAlignment)'''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setLockPositionInBlock (self, *args, **kwargs)-> ErrorStatus :
      '''setLockPositionInBlock( (AttributeDefinition)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLockPositionInBlock(class PyDbAttributeDefinition {lvalue},bool)'''
    ...
    def setMTextAttributeDefinition (self, *args, **kwargs)-> ErrorStatus :
      '''setMTextAttributeDefinition( (AttributeDefinition)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMTextAttributeDefinition(class PyDbAttributeDefinition {lvalue},class PyDbMText)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs)-> ErrorStatus :
      '''setNormal( (Text)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbText {lvalue},class AcGeVector3d)'''
    ...
    def setOblique (self, *args, **kwargs)-> ErrorStatus :
      '''setOblique( (Text)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOblique(class PyDbText {lvalue},double)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setPosition( (Text)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPosition(class PyDbText {lvalue},class AcGePoint3d)'''
    ...
    def setPreset (self, *args, **kwargs)-> ErrorStatus :
      '''setPreset( (AttributeDefinition)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPreset(class PyDbAttributeDefinition {lvalue},bool)'''
    ...
    def setPrompt (self, *args, **kwargs)-> ErrorStatus :
      '''setPrompt( (AttributeDefinition)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPrompt(class PyDbAttributeDefinition {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setRotation( (Text)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRotation(class PyDbText {lvalue},double)'''
    ...
    def setTag (self, *args, **kwargs)-> ErrorStatus :
      '''setTag( (AttributeDefinition)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTag(class PyDbAttributeDefinition {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setTextString (self, *args, **kwargs)-> ErrorStatus :
      '''setTextString( (Text)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextString(class PyDbText {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setTextStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setTextStyle( (Text)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextStyle(class PyDbText {lvalue},class PyDbObjectId)'''
    ...
    def setThickness (self, *args, **kwargs)-> ErrorStatus :
      '''setThickness( (Text)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setThickness(class PyDbText {lvalue},double)'''
    ...
    def setVerifiable (self, *args, **kwargs)-> ErrorStatus :
      '''setVerifiable( (AttributeDefinition)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVerifiable(class PyDbAttributeDefinition {lvalue},bool)'''
    ...
    def setVerticalMode (self, *args, **kwargs)-> ErrorStatus :
      '''setVerticalMode( (Text)arg1, (TextHorzMode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVerticalMode(class PyDbText {lvalue},enum AcDb::TextVertMode)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setWidthFactor (self, *args, **kwargs)-> ErrorStatus :
      '''setWidthFactor( (Text)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setWidthFactor(class PyDbText {lvalue},double)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def tag (self, *args, **kwargs)-> str :
      '''tag( (AttributeDefinition)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > tag(class PyDbAttributeDefinition {lvalue})'''
    ...
    def textString (self, *args, **kwargs)-> str :
      '''textString( (Text)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > textString(class PyDbText {lvalue})'''
    ...
    def textStyle (self, *args, **kwargs)-> ObjectId :
      '''textStyle( (Text)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyle(class PyDbText {lvalue})'''
    ...
    def thickness (self, *args, **kwargs)-> float :
      '''thickness( (Text)arg1) -> float :

    C++ signature :
        double thickness(class PyDbText {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def updateMTextAttributeDefinition (self, *args, **kwargs)-> ErrorStatus :
      '''updateMTextAttributeDefinition( (AttributeDefinition)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus updateMTextAttributeDefinition(class PyDbAttributeDefinition {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def verticalMode (self, *args, **kwargs)-> TextHorzMode :
      '''verticalMode( (Text)arg1) -> TextHorzMode :

    C++ signature :
        enum AcDb::TextVertMode verticalMode(class PyDbText {lvalue})'''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def widthFactor (self, *args, **kwargs)-> float :
      '''widthFactor( (Text)arg1) -> float :

    C++ signature :
        double widthFactor(class PyDbText {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class AttributeReference:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2, (str)arg3, (str)arg4, (ObjectId)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def adjustAlignment (self, *args, **kwargs)-> ErrorStatus :
      '''adjustAlignment( (Text)arg1, (Database)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus adjustAlignment(class PyDbText {lvalue},class PyDbDatabase)'''
    ...
    def alignmentPoint (self, *args, **kwargs)-> Point3d :
      '''alignmentPoint( (Text)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d alignmentPoint(class PyDbText {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> AttributeReference :
      '''cast( (RxObject)arg1) -> AttributeReference :

    C++ signature :
        class PyDbAttribute cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> AttributeReference :
      '''cloneFrom( (RxObject)arg1) -> AttributeReference :

    C++ signature :
        class PyDbAttribute cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def convertFieldToText (self, *args, **kwargs)-> ErrorStatus :
      '''convertFieldToText( (Text)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus convertFieldToText(class PyDbText {lvalue})'''
    ...
    def convertIntoMTextAttribute (self, *args, **kwargs)-> ErrorStatus :
      '''convertIntoMTextAttribute( (AttributeReference)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus convertIntoMTextAttribute(class PyDbAttribute {lvalue},bool)'''
    ...
    def correctSpelling (self, *args, **kwargs)-> int :
      '''correctSpelling( (Text)arg1) -> int :

    C++ signature :
        int correctSpelling(class PyDbText {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fieldLength (self, *args, **kwargs)-> int :
      '''fieldLength( (AttributeReference)arg1) -> int :

    C++ signature :
        unsigned short fieldLength(class PyDbAttribute {lvalue})'''
    ...
    def getBoundingPoints (self, *args, **kwargs)-> list :
      '''getBoundingPoints( (Text)arg1) -> list :

    C++ signature :
        class boost::python::list getBoundingPoints(class PyDbText {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getMTextAttribute (self, *args, **kwargs)-> MText :
      '''getMTextAttribute( (AttributeReference)arg1) -> MText :

    C++ signature :
        class PyDbMText getMTextAttribute(class PyDbAttribute {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def height (self, *args, **kwargs)-> float :
      '''height( (Text)arg1) -> float :

    C++ signature :
        double height(class PyDbText {lvalue})'''
    ...
    def hitTest (self, *args, **kwargs)-> bool :
      '''hitTest( (Text)arg1, (Point3d)arg2) -> bool :

    C++ signature :
        bool hitTest(class PyDbText {lvalue},class AcGePoint3d)'''
    ...
    def horizontalMode (self, *args, **kwargs)-> TextHorzMode :
      '''horizontalMode( (Text)arg1) -> TextHorzMode :

    C++ signature :
        enum AcDb::TextHorzMode horizontalMode(class PyDbText {lvalue})'''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isConstant (self, *args, **kwargs)-> bool :
      '''isConstant( (AttributeReference)arg1) -> bool :

    C++ signature :
        bool isConstant(class PyDbAttribute {lvalue})'''
    ...
    def isDefaultAlignment (self, *args, **kwargs)-> bool :
      '''isDefaultAlignment( (Text)arg1) -> bool :

    C++ signature :
        bool isDefaultAlignment(class PyDbText {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isInvisible (self, *args, **kwargs)-> bool :
      '''isInvisible( (AttributeReference)arg1) -> bool :

    C++ signature :
        bool isInvisible(class PyDbAttribute {lvalue})'''
    ...
    def isMTextAttribute (self, *args, **kwargs)-> bool :
      '''isMTextAttribute( (AttributeReference)arg1) -> bool :

    C++ signature :
        bool isMTextAttribute(class PyDbAttribute {lvalue})'''
    ...
    def isMirroredInX (self, *args, **kwargs)-> bool :
      '''isMirroredInX( (Text)arg1) -> bool :

    C++ signature :
        bool isMirroredInX(class PyDbText {lvalue})'''
    ...
    def isMirroredInY (self, *args, **kwargs)-> bool :
      '''isMirroredInY( (Text)arg1) -> bool :

    C++ signature :
        bool isMirroredInY(class PyDbText {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isPreset (self, *args, **kwargs)-> bool :
      '''isPreset( (AttributeReference)arg1) -> bool :

    C++ signature :
        bool isPreset(class PyDbAttribute {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyLocked (self, *args, **kwargs)-> bool :
      '''isReallyLocked( (AttributeReference)arg1) -> bool :

    C++ signature :
        bool isReallyLocked(class PyDbAttribute {lvalue})'''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isVerifiable (self, *args, **kwargs)-> bool :
      '''isVerifiable( (AttributeReference)arg1) -> bool :

    C++ signature :
        bool isVerifiable(class PyDbAttribute {lvalue})'''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def justification (self, *args, **kwargs)-> TextAlignment :
      '''justification( (Text)arg1) -> TextAlignment :

    C++ signature :
        enum AcDbText::AcTextAlignment justification(class PyDbText {lvalue})'''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def lockPositionInBlock (self, *args, **kwargs)-> bool :
      '''lockPositionInBlock( (AttributeReference)arg1) -> bool :

    C++ signature :
        bool lockPositionInBlock(class PyDbAttribute {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def mirrorInX (self, *args, **kwargs)-> ErrorStatus :
      '''mirrorInX( (Text)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus mirrorInX(class PyDbText {lvalue},bool)'''
    ...
    def mirrorInY (self, *args, **kwargs)-> ErrorStatus :
      '''mirrorInY( (Text)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus mirrorInY(class PyDbText {lvalue},bool)'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Text)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbText {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def oblique (self, *args, **kwargs)-> float :
      '''oblique( (Text)arg1) -> float :

    C++ signature :
        double oblique(class PyDbText {lvalue})'''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def position (self, *args, **kwargs)-> Point3d :
      '''position( (Text)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDbText {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def rotation (self, *args, **kwargs)-> float :
      '''rotation( (Text)arg1) -> float :

    C++ signature :
        double rotation(class PyDbText {lvalue})'''
    ...
    def setAlignmentPoint (self, *args, **kwargs)-> ErrorStatus :
      '''setAlignmentPoint( (Text)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlignmentPoint(class PyDbText {lvalue},class AcGePoint3d)'''
    ...
    def setAttributeFromBlock (self, *args, **kwargs)-> ErrorStatus :
      '''setAttributeFromBlock( (AttributeReference)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAttributeFromBlock(class PyDbAttribute {lvalue},class AcGeMatrix3d)

setAttributeFromBlock( (AttributeReference)arg1, (AttributeDefinition)arg2, (Matrix3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAttributeFromBlock(class PyDbAttribute {lvalue},class PyDbAttributeDefinition,class AcGeMatrix3d)'''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFieldLength (self, *args, **kwargs)-> ErrorStatus :
      '''setFieldLength( (AttributeReference)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFieldLength(class PyDbAttribute {lvalue},unsigned short)'''
    ...
    def setHeight (self, *args, **kwargs)-> ErrorStatus :
      '''setHeight( (Text)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHeight(class PyDbText {lvalue},double)'''
    ...
    def setHorizontalMode (self, *args, **kwargs)-> ErrorStatus :
      '''setHorizontalMode( (Text)arg1, (TextHorzMode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalMode(class PyDbText {lvalue},enum AcDb::TextHorzMode)'''
    ...
    def setInvisible (self, *args, **kwargs)-> ErrorStatus :
      '''setInvisible( (AttributeReference)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInvisible(class PyDbAttribute {lvalue},bool)'''
    ...
    def setJustification (self, *args, **kwargs)-> ErrorStatus :
      '''setJustification( (Text)arg1, (TextAlignment)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setJustification(class PyDbText {lvalue},enum AcDbText::AcTextAlignment)'''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setLockPositionInBlock (self, *args, **kwargs)-> ErrorStatus :
      '''setLockPositionInBlock( (AttributeReference)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLockPositionInBlock(class PyDbAttribute {lvalue},bool)'''
    ...
    def setMTextAttribute (self, *args, **kwargs)-> ErrorStatus :
      '''setMTextAttribute( (AttributeReference)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMTextAttribute(class PyDbAttribute {lvalue},class PyDbMText {lvalue})'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs)-> ErrorStatus :
      '''setNormal( (Text)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbText {lvalue},class AcGeVector3d)'''
    ...
    def setOblique (self, *args, **kwargs)-> ErrorStatus :
      '''setOblique( (Text)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOblique(class PyDbText {lvalue},double)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setPosition( (Text)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPosition(class PyDbText {lvalue},class AcGePoint3d)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setRotation( (Text)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRotation(class PyDbText {lvalue},double)'''
    ...
    def setTag (self, *args, **kwargs)-> ErrorStatus :
      '''setTag( (AttributeReference)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTag(class PyDbAttribute {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setTextString (self, *args, **kwargs)-> ErrorStatus :
      '''setTextString( (Text)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextString(class PyDbText {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setTextStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setTextStyle( (Text)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextStyle(class PyDbText {lvalue},class PyDbObjectId)'''
    ...
    def setThickness (self, *args, **kwargs)-> ErrorStatus :
      '''setThickness( (Text)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setThickness(class PyDbText {lvalue},double)'''
    ...
    def setVerticalMode (self, *args, **kwargs)-> ErrorStatus :
      '''setVerticalMode( (Text)arg1, (TextHorzMode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVerticalMode(class PyDbText {lvalue},enum AcDb::TextVertMode)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setWidthFactor (self, *args, **kwargs)-> ErrorStatus :
      '''setWidthFactor( (Text)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setWidthFactor(class PyDbText {lvalue},double)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def tag (self, *args, **kwargs)-> str :
      '''tag( (AttributeReference)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > tag(class PyDbAttribute {lvalue})'''
    ...
    def textString (self, *args, **kwargs)-> str :
      '''textString( (Text)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > textString(class PyDbText {lvalue})'''
    ...
    def textStyle (self, *args, **kwargs)-> ObjectId :
      '''textStyle( (Text)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyle(class PyDbText {lvalue})'''
    ...
    def thickness (self, *args, **kwargs)-> float :
      '''thickness( (Text)arg1) -> float :

    C++ signature :
        double thickness(class PyDbText {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def updateMTextAttribute (self, *args, **kwargs)-> ErrorStatus :
      '''updateMTextAttribute( (AttributeReference)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus updateMTextAttribute(class PyDbAttribute {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def verticalMode (self, *args, **kwargs)-> TextHorzMode :
      '''verticalMode( (Text)arg1) -> TextHorzMode :

    C++ signature :
        enum AcDb::TextVertMode verticalMode(class PyDbText {lvalue})'''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def widthFactor (self, *args, **kwargs)-> float :
      '''widthFactor( (Text)arg1) -> float :

    C++ signature :
        double widthFactor(class PyDbText {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class BlockBegin:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> BlockBegin :
      '''cast( (RxObject)arg1) -> BlockBegin :

    C++ signature :
        class PyDbBlockBegin cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> BlockBegin :
      '''cloneFrom( (RxObject)arg1) -> BlockBegin :

    C++ signature :
        class PyDbBlockBegin cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class BlockEnd:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> BlockEnd :
      '''cast( (RxObject)arg1) -> BlockEnd :

    C++ signature :
        class PyDbBlockEnd cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> BlockEnd :
      '''cloneFrom( (RxObject)arg1) -> BlockEnd :

    C++ signature :
        class PyDbBlockEnd cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class BlockReference:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2, (ObjectId)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d {lvalue},class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def appendAttribute (self, *args, **kwargs)-> ObjectId :
      '''appendAttribute( (BlockReference)arg1, (AttributeReference)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId appendAttribute(class PyDbBlockReference {lvalue},class PyDbAttribute {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def attributeIds (self, *args, **kwargs)-> list :
      '''attributeIds( (BlockReference)arg1) -> list :

    C++ signature :
        class boost::python::list attributeIds(class PyDbBlockReference {lvalue})'''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def blockTableRecord (self, *args, **kwargs)-> ObjectId :
      '''blockTableRecord( (BlockReference)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockTableRecord(class PyDbBlockReference {lvalue})'''
    ...
    def blockTransform (self, *args, **kwargs)-> Matrix3d :
      '''blockTransform( (BlockReference)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbBlockReference {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> BlockReference :
      '''cast( (RxObject)arg1) -> BlockReference :

    C++ signature :
        class PyDbBlockReference cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> BlockReference :
      '''cloneFrom( (RxObject)arg1) -> BlockReference :

    C++ signature :
        class PyDbBlockReference cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def explodeToOwnerSpace (self, *args, **kwargs)-> ErrorStatus :
      '''explodeToOwnerSpace( (BlockReference)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus explodeToOwnerSpace(class PyDbBlockReference {lvalue})'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def geomExtentsBestFit (self, *args, **kwargs)-> Extents :
      '''geomExtentsBestFit( (BlockReference)arg1) -> Extents :

    C++ signature :
        class AcDbExtents geomExtentsBestFit(class PyDbBlockReference {lvalue})

geomExtentsBestFit( (BlockReference)arg1, (Matrix3d)arg2) -> Extents :

    C++ signature :
        class AcDbExtents geomExtentsBestFit(class PyDbBlockReference {lvalue},class AcGeMatrix3d)'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def nonAnnotationBlockTransform (self, *args, **kwargs)-> Matrix3d :
      '''nonAnnotationBlockTransform( (BlockReference)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d nonAnnotationBlockTransform(class PyDbBlockReference {lvalue})'''
    ...
    def nonAnnotationScaleFactors (self, *args, **kwargs)-> Scale3d :
      '''nonAnnotationScaleFactors( (BlockReference)arg1) -> Scale3d :

    C++ signature :
        class AcGeScale3d nonAnnotationScaleFactors(class PyDbBlockReference {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (BlockReference)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbBlockReference {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def position (self, *args, **kwargs)-> Point3d :
      '''position( (BlockReference)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDbBlockReference {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def rotation (self, *args, **kwargs)-> float :
      '''rotation( (BlockReference)arg1) -> float :

    C++ signature :
        double rotation(class PyDbBlockReference {lvalue})'''
    ...
    def scaleFactors (self, *args, **kwargs)-> Scale3d :
      '''scaleFactors( (BlockReference)arg1) -> Scale3d :

    C++ signature :
        class AcGeScale3d scaleFactors(class PyDbBlockReference {lvalue})'''
    ...
    def setBlockTableRecord (self, *args, **kwargs)-> ErrorStatus :
      '''setBlockTableRecord( (BlockReference)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockTableRecord(class PyDbBlockReference {lvalue},class PyDbObjectId)'''
    ...
    def setBlockTransform (self, *args, **kwargs)-> ErrorStatus :
      '''setBlockTransform( (BlockReference)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockTransform(class PyDbBlockReference {lvalue},class AcGeMatrix3d)'''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs)-> ErrorStatus :
      '''setNormal( (BlockReference)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbBlockReference {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setPosition( (BlockReference)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPosition(class PyDbBlockReference {lvalue},class AcGePoint3d)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setRotation( (BlockReference)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRotation(class PyDbBlockReference {lvalue},double)'''
    ...
    def setScaleFactors (self, *args, **kwargs)-> ErrorStatus :
      '''setScaleFactors( (BlockReference)arg1, (Scale3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setScaleFactors(class PyDbBlockReference {lvalue},class AcGeScale3d)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def treatAsAcDbBlockRefForExplode (self, *args, **kwargs)-> bool :
      '''treatAsAcDbBlockRefForExplode( (BlockReference)arg1) -> bool :

    C++ signature :
        bool treatAsAcDbBlockRefForExplode(class PyDbBlockReference {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class BlockScaling:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kAny (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUniform (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class BlockTable:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def add (self, *args, **kwargs)-> ObjectId :
      '''add( (BlockTable)arg1, (TextStyleTableRecord)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId add(class PyDbTextStyleTable {lvalue},class PyDbTextStyleTableRecord)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> BlockTable :
      '''cast( (RxObject)arg1) -> BlockTable :

    C++ signature :
        class PyDbTextStyleTable cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> BlockTable :
      '''cloneFrom( (RxObject)arg1) -> BlockTable :

    C++ signature :
        class PyDbTextStyleTable cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getAt (self, *args, **kwargs)-> ObjectId :
      '''getAt( (SymbolTable)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getAt(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def has (self, *args, **kwargs)-> bool :
      '''has( (SymbolTable)arg1, (str)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

has( (SymbolTable)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class PyDbObjectId)'''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def recordIds (self, *args, **kwargs)-> list :
      '''recordIds( (SymbolTable)arg1) -> list :

    C++ signature :
        class boost::python::list recordIds(class PyDbSymbolTable {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def toDict (self, *args, **kwargs)-> dict :
      '''toDict( (SymbolTable)arg1) -> dict :

    C++ signature :
        class boost::python::dict toDict(class PyDbSymbolTable {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class BlockTableRecord:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addAnnoScalestoBlkRefs (self, *args, **kwargs)-> ErrorStatus :
      '''addAnnoScalestoBlkRefs( (BlockTableRecord)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addAnnoScalestoBlkRefs(class PyDbBlockTableRecord {lvalue},bool)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def appendAcDbEntity (self, *args, **kwargs)-> ObjectId :
      '''appendAcDbEntity( (BlockTableRecord)arg1, (Entity)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId appendAcDbEntity(class PyDbBlockTableRecord {lvalue},class PyDbEntity)'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assumeOwnershipOf (self, *args, **kwargs)-> ErrorStatus :
      '''assumeOwnershipOf( (BlockTableRecord)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus assumeOwnershipOf(class PyDbBlockTableRecord {lvalue},class boost::python::list)'''
    ...
    def blockInsertUnits (self, *args, **kwargs)-> UnitsValue :
      '''blockInsertUnits( (BlockTableRecord)arg1) -> UnitsValue :

    C++ signature :
        enum AcDb::UnitsValue blockInsertUnits(class PyDbBlockTableRecord {lvalue})'''
    ...
    def blockScaling (self, *args, **kwargs)-> BlockScaling :
      '''blockScaling( (BlockTableRecord)arg1) -> BlockScaling :

    C++ signature :
        enum AcDbBlockTableRecord::BlockScaling blockScaling(class PyDbBlockTableRecord {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> BlockTableRecord :
      '''cast( (RxObject)arg1) -> BlockTableRecord :

    C++ signature :
        class PyDbBlockTableRecord cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> BlockTableRecord :
      '''cloneFrom( (RxObject)arg1) -> BlockTableRecord :

    C++ signature :
        class PyDbBlockTableRecord cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def comments (self, *args, **kwargs)-> str :
      '''comments( (BlockTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > comments(class PyDbBlockTableRecord {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def explodable (self, *args, **kwargs)-> bool :
      '''explodable( (BlockTableRecord)arg1) -> bool :

    C++ signature :
        bool explodable(class PyDbBlockTableRecord {lvalue})'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getBlockReferenceIds (self, *args, **kwargs)-> list :
      '''getBlockReferenceIds( (BlockTableRecord)arg1) -> list :

    C++ signature :
        class boost::python::list getBlockReferenceIds(class PyDbBlockTableRecord {lvalue})

getBlockReferenceIds( (BlockTableRecord)arg1, (bool)arg2, (bool)arg3) -> list :

    C++ signature :
        class boost::python::list getBlockReferenceIds(class PyDbBlockTableRecord {lvalue},bool,bool)'''
    ...
    def getErasedBlockReferenceIds (self, *args, **kwargs)-> list :
      '''getErasedBlockReferenceIds( (BlockTableRecord)arg1) -> list :

    C++ signature :
        class boost::python::list getErasedBlockReferenceIds(class PyDbBlockTableRecord {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getLayoutId (self, *args, **kwargs)-> ObjectId :
      '''getLayoutId( (BlockTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getLayoutId(class PyDbBlockTableRecord {lvalue})'''
    ...
    def getName (self, *args, **kwargs)-> str :
      '''getName( (SymbolTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getName(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasAttributeDefinitions (self, *args, **kwargs)-> bool :
      '''hasAttributeDefinitions( (BlockTableRecord)arg1) -> bool :

    C++ signature :
        bool hasAttributeDefinitions(class PyDbBlockTableRecord {lvalue})'''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isAnonymous (self, *args, **kwargs)-> bool :
      '''isAnonymous( (BlockTableRecord)arg1) -> bool :

    C++ signature :
        bool isAnonymous(class PyDbBlockTableRecord {lvalue})'''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isDependent (self, *args, **kwargs)-> bool :
      '''isDependent( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isDependent(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isFromExternalReference (self, *args, **kwargs)-> bool :
      '''isFromExternalReference( (BlockTableRecord)arg1) -> bool :

    C++ signature :
        bool isFromExternalReference(class PyDbBlockTableRecord {lvalue})'''
    ...
    def isFromOverlayReference (self, *args, **kwargs)-> bool :
      '''isFromOverlayReference( (BlockTableRecord)arg1) -> bool :

    C++ signature :
        bool isFromOverlayReference(class PyDbBlockTableRecord {lvalue})'''
    ...
    def isLayout (self, *args, **kwargs)-> bool :
      '''isLayout( (BlockTableRecord)arg1) -> bool :

    C++ signature :
        bool isLayout(class PyDbBlockTableRecord {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isRenamable (self, *args, **kwargs)-> bool :
      '''isRenamable( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isRenamable(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isResolved (self, *args, **kwargs)-> bool :
      '''isResolved( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isResolved(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUnloaded (self, *args, **kwargs)-> bool :
      '''isUnloaded( (BlockTableRecord)arg1) -> bool :

    C++ signature :
        bool isUnloaded(class PyDbBlockTableRecord {lvalue})'''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def objectIds (self, *args, **kwargs)-> list :
      '''objectIds( (BlockTableRecord)arg1) -> list :

    C++ signature :
        class boost::python::list objectIds(class PyDbBlockTableRecord {lvalue})'''
    ...
    def openBlockBegin (self, *args, **kwargs)-> ErrorStatus :
      '''openBlockBegin( (BlockTableRecord)arg1, (BlockBegin)arg2, (OpenMode)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus openBlockBegin(class PyDbBlockTableRecord {lvalue},class PyDbBlockBegin {lvalue},enum AcDb::OpenMode)'''
    ...
    def openBlockEnd (self, *args, **kwargs)-> ErrorStatus :
      '''openBlockEnd( (BlockTableRecord)arg1, (BlockEnd)arg2, (OpenMode)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus openBlockEnd(class PyDbBlockTableRecord {lvalue},class PyDbBlockEnd {lvalue},enum AcDb::OpenMode)'''
    ...
    def origin (self, *args, **kwargs)-> Point3d :
      '''origin( (BlockTableRecord)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d origin(class PyDbBlockTableRecord {lvalue})'''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def pathName (self, *args, **kwargs)-> str :
      '''pathName( (BlockTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > pathName(class PyDbBlockTableRecord {lvalue})'''
    ...
    def postProcessAnnotativeBTR (self, *args, **kwargs)-> int :
      '''postProcessAnnotativeBTR( (BlockTableRecord)arg1, (bool)arg2, (bool)arg3) -> int :

    C++ signature :
        int postProcessAnnotativeBTR(class PyDbBlockTableRecord {lvalue},bool,bool)'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setBlockInsertUnits (self, *args, **kwargs)-> ErrorStatus :
      '''setBlockInsertUnits( (BlockTableRecord)arg1, (UnitsValue)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockInsertUnits(class PyDbBlockTableRecord {lvalue},enum AcDb::UnitsValue)'''
    ...
    def setBlockScaling (self, *args, **kwargs)-> ErrorStatus :
      '''setBlockScaling( (BlockTableRecord)arg1, (BlockScaling)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockScaling(class PyDbBlockTableRecord {lvalue},enum AcDbBlockTableRecord::BlockScaling)'''
    ...
    def setComments (self, *args, **kwargs)-> ErrorStatus :
      '''setComments( (BlockTableRecord)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setComments(class PyDbBlockTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setExplodable (self, *args, **kwargs)-> ErrorStatus :
      '''setExplodable( (BlockTableRecord)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setExplodable(class PyDbBlockTableRecord {lvalue},bool)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setIsFromOverlayReference (self, *args, **kwargs)-> ErrorStatus :
      '''setIsFromOverlayReference( (BlockTableRecord)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setIsFromOverlayReference(class PyDbBlockTableRecord {lvalue},bool)'''
    ...
    def setIsUnloaded (self, *args, **kwargs)-> ErrorStatus :
      '''setIsUnloaded( (BlockTableRecord)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setIsUnloaded(class PyDbBlockTableRecord {lvalue},bool)'''
    ...
    def setLayoutId (self, *args, **kwargs)-> ErrorStatus :
      '''setLayoutId( (BlockTableRecord)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayoutId(class PyDbBlockTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setName (self, *args, **kwargs)-> ErrorStatus :
      '''setName( (SymbolTableRecord)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setName(class PyDbSymbolTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOrigin (self, *args, **kwargs)-> ErrorStatus :
      '''setOrigin( (BlockTableRecord)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOrigin(class PyDbBlockTableRecord {lvalue},class AcGePoint3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPathName (self, *args, **kwargs)-> ErrorStatus :
      '''setPathName( (BlockTableRecord)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPathName(class PyDbBlockTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...
    def xrefDatabase (self, *args, **kwargs)-> Database :
      '''xrefDatabase( (BlockTableRecord)arg1, (bool)arg2) -> Database :

    C++ signature :
        class PyDbDatabase xrefDatabase(class PyDbBlockTableRecord {lvalue},bool)'''
    ...
    def xrefStatus (self, *args, **kwargs)-> XrefStatus :
      '''xrefStatus( (BlockTableRecord)arg1) -> XrefStatus :

    C++ signature :
        enum AcDb::XrefStatus xrefStatus(class PyDbBlockTableRecord {lvalue})'''
    ...

class Cell:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def column (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def row (self, *args, **kwargs)-> None:
      '''None'''
    ...

class CellAlignment:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kBottomCenter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBottomLeft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBottomRight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMiddleCenter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMiddleLeft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMiddleRight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTopCenter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTopLeft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTopRight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class CellContentLayout:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kCellContentLayoutStackedHorizontal (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellContentLayoutStackedVertical (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellStateNone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class CellContentType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kCellContentTypeBlock (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellContentTypeField (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellContentTypeUnknown (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellContentTypeValue (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class CellEdgeMask:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kBottomMask (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLeftMask (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kRightMask (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTopMask (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class CellMargin:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kCellMarginBottom (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellMarginHorzSpacing (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellMarginLeft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellMarginRight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellMarginTop (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellMarginVertSpacing (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class CellProperty:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kCellPropAlignment (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropAll (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropAutoScale (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropBackgroundColor (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropBitProperties (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropContent (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropContentColor (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropContentLayout (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropDataFormat (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropDataType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropDataTypeAndFormat (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropFlowDirBtoT (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropInvalid (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropMarginBottom (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropMarginHorzSpacing (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropMarginLeft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropMarginRight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropMarginTop (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropMarginVertSpacing (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropMergeAll (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropRotation (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropScale (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropTextHeight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellPropTextStyle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class CellRange:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def bottomRow (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def leftColumn (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def rightColumn (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def topRow (self, *args, **kwargs)-> None:
      '''None'''
    ...

class CellState:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kAllCellStates (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellStateContentLocked (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellStateContentModifiedAfterUpdate (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellStateContentReadOnly (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellStateFormatLocked (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellStateFormatModifiedAfterUpdate (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellStateFormatReadOnly (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellStateLinked (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCellStateNone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class CellType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kBlockCell (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMultipleContentCell (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextCell (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnknownCell (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class CenterMarkType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kLine (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMark (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kNone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Circle:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Vector3d)arg3, (float)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGeVector3d,double)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Circle :
      '''cast( (RxObject)arg1) -> Circle :

    C++ signature :
        class PyDbCircle cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def center (self, *args, **kwargs)-> Point3d :
      '''center( (Circle)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d center(class PyDbCircle {lvalue})'''
    ...
    def circumference (self, *args, **kwargs)-> float :
      '''circumference( (Circle)arg1) -> float :

    C++ signature :
        double circumference(class PyDbCircle {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Circle :
      '''cloneFrom( (RxObject)arg1) -> Circle :

    C++ signature :
        class PyDbCircle cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def diameter (self, *args, **kwargs)-> float :
      '''diameter( (Circle)arg1) -> float :

    C++ signature :
        double diameter(class PyDbCircle {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> ErrorStatus :
      '''extend( (Curve)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getArea (self, *args, **kwargs)-> float :
      '''getArea( (Curve)arg1) -> float :

    C++ signature :
        double getArea(class PyDbCurve {lvalue})'''
    ...
    def getClosestPointTo (self, *args, **kwargs)-> Point3d :
      '''getClosestPointTo( (Curve)arg1, (Point3d)arg2, (bool)arg3) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbCurve {lvalue},class AcGePoint3d,bool)

getClosestPointTo( (Curve)arg1, (Point3d)arg2, (Vector3d)arg3, (bool)arg4) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbCurve {lvalue},class AcGePoint3d,class AcGeVector3d,bool)'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDistAtParam (self, *args, **kwargs)-> float :
      '''getDistAtParam( (Curve)arg1, (float)arg2) -> float :

    C++ signature :
        double getDistAtParam(class PyDbCurve {lvalue},double)'''
    ...
    def getDistAtPoint (self, *args, **kwargs)-> float :
      '''getDistAtPoint( (Curve)arg1, (Point3d)arg2) -> float :

    C++ signature :
        double getDistAtPoint(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEndParam (self, *args, **kwargs)-> float :
      '''getEndParam( (Curve)arg1) -> float :

    C++ signature :
        double getEndParam(class PyDbCurve {lvalue})'''
    ...
    def getEndPoint (self, *args, **kwargs)-> Point3d :
      '''getEndPoint( (Curve)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getEndPoint(class PyDbCurve {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self, *args, **kwargs)-> Vector3d :
      '''getFirstDeriv( (Curve)arg1, (float)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getFirstDeriv(class PyDbCurve {lvalue},double)

getFirstDeriv( (Curve)arg1, (Point3d)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getFirstDeriv(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getOffsetCurves (self, *args, **kwargs)-> list :
      '''getOffsetCurves( (Curve)arg1, (float)arg2) -> list :

    C++ signature :
        class boost::python::list getOffsetCurves(class PyDbCurve {lvalue},double)'''
    ...
    def getOffsetCurvesGivenPlaneNormal (self, *args, **kwargs)-> list :
      '''getOffsetCurvesGivenPlaneNormal( (Curve)arg1, (Vector3d)arg2, (float)arg3) -> list :

    C++ signature :
        class boost::python::list getOffsetCurvesGivenPlaneNormal(class PyDbCurve {lvalue},class AcGeVector3d,double)'''
    ...
    def getParamAtDist (self, *args, **kwargs)-> float :
      '''getParamAtDist( (Curve)arg1, (float)arg2) -> float :

    C++ signature :
        double getParamAtDist(class PyDbCurve {lvalue},double)'''
    ...
    def getParamAtPoint (self, *args, **kwargs)-> float :
      '''getParamAtPoint( (Curve)arg1, (Point3d)arg2) -> float :

    C++ signature :
        double getParamAtPoint(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def getPointAtDist (self, *args, **kwargs)-> Point3d :
      '''getPointAtDist( (Curve)arg1, (float)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getPointAtDist(class PyDbCurve {lvalue},double)'''
    ...
    def getPointAtParam (self, *args, **kwargs)-> Point3d :
      '''getPointAtParam( (Curve)arg1, (float)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getPointAtParam(class PyDbCurve {lvalue},double)'''
    ...
    def getSecondDeriv (self, *args, **kwargs)-> Vector3d :
      '''getSecondDeriv( (Curve)arg1, (float)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getSecondDeriv(class PyDbCurve {lvalue},double)

getSecondDeriv( (Curve)arg1, (Point3d)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getSecondDeriv(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getSplitCurves (self, *args, **kwargs)-> list :
      '''getSplitCurves( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurves(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getSplitCurvesAtParams (self, *args, **kwargs)-> list :
      '''getSplitCurvesAtParams( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurvesAtParams(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getSplitCurvesAtPoints (self, *args, **kwargs)-> list :
      '''getSplitCurvesAtPoints( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurvesAtPoints(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getStartParam (self, *args, **kwargs)-> float :
      '''getStartParam( (Curve)arg1) -> float :

    C++ signature :
        double getStartParam(class PyDbCurve {lvalue})'''
    ...
    def getStartPoint (self, *args, **kwargs)-> Point3d :
      '''getStartPoint( (Curve)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getStartPoint(class PyDbCurve {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isClosed (self, *args, **kwargs)-> bool :
      '''isClosed( (Curve)arg1) -> bool :

    C++ signature :
        bool isClosed(class PyDbCurve {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPeriodic (self, *args, **kwargs)-> bool :
      '''isPeriodic( (Curve)arg1) -> bool :

    C++ signature :
        bool isPeriodic(class PyDbCurve {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Circle)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbCircle {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def radius (self, *args, **kwargs)-> float :
      '''radius( (Circle)arg1) -> float :

    C++ signature :
        double radius(class PyDbCircle {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def reverseCurve (self, *args, **kwargs)-> ErrorStatus :
      '''reverseCurve( (Curve)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus reverseCurve(class PyDbCurve {lvalue})'''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setCenter (self, *args, **kwargs)-> ErrorStatus :
      '''setCenter( (Circle)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCenter(class PyDbCircle {lvalue},class AcGePoint3d)'''
    ...
    def setCircumference (self, *args, **kwargs)-> ErrorStatus :
      '''setCircumference( (Circle)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCircumference(class PyDbCircle {lvalue},double)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDiameter (self, *args, **kwargs)-> ErrorStatus :
      '''setDiameter( (Circle)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDiameter(class PyDbCircle {lvalue},double)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs)-> ErrorStatus :
      '''setNormal( (Circle)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbCircle {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setRadius (self, *args, **kwargs)-> ErrorStatus :
      '''setRadius( (Circle)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRadius(class PyDbCircle {lvalue},double)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setThickness (self, *args, **kwargs)-> ErrorStatus :
      '''setThickness( (Circle)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setThickness(class PyDbCircle {lvalue},double)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def thickness (self, *args, **kwargs)-> float :
      '''thickness( (Circle)arg1) -> float :

    C++ signature :
        double thickness(class PyDbCircle {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class ClipBoundaryType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kInvalid (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPoly (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kRect (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class CollisionType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kCollisionTypeNone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCollisionTypeSolid (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Color:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def blue (self, *args, **kwargs)-> int :
      '''blue( (Color)arg1) -> int :

    C++ signature :
        unsigned char blue(class AcCmColor {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Color)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class AcCmColor {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Color)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class AcCmColor {lvalue})'''
    ...
    def getCOLORREF (self, *args, **kwargs)-> int :
      '''getCOLORREF( (Color)arg1) -> int :

    C++ signature :
        unsigned int getCOLORREF(class AcCmColor {lvalue})'''
    ...
    def getRGB (self, *args, **kwargs)-> int :
      '''getRGB( (Color)arg1) -> int :

    C++ signature :
        unsigned int getRGB(class AcCmColor {lvalue})'''
    ...
    def getRGBM (self, *args, **kwargs)-> int :
      '''getRGBM( (Color)arg1) -> int :

    C++ signature :
        unsigned int getRGBM(class AcCmColor {lvalue})'''
    ...
    def green (self, *args, **kwargs)-> int :
      '''green( (Color)arg1) -> int :

    C++ signature :
        unsigned char green(class AcCmColor {lvalue})'''
    ...
    def isByACI (self, *args, **kwargs)-> bool :
      '''isByACI( (Color)arg1) -> bool :

    C++ signature :
        bool isByACI(class AcCmColor {lvalue})'''
    ...
    def isByBlock (self, *args, **kwargs)-> bool :
      '''isByBlock( (Color)arg1) -> bool :

    C++ signature :
        bool isByBlock(class AcCmColor {lvalue})'''
    ...
    def isByColor (self, *args, **kwargs)-> bool :
      '''isByColor( (Color)arg1) -> bool :

    C++ signature :
        bool isByColor(class AcCmColor {lvalue})'''
    ...
    def isByLayer (self, *args, **kwargs)-> bool :
      '''isByLayer( (Color)arg1) -> bool :

    C++ signature :
        bool isByLayer(class AcCmColor {lvalue})'''
    ...
    def isByPen (self, *args, **kwargs)-> bool :
      '''isByPen( (Color)arg1) -> bool :

    C++ signature :
        bool isByPen(class AcCmColor {lvalue})'''
    ...
    def isForeground (self, *args, **kwargs)-> bool :
      '''isForeground( (Color)arg1) -> bool :

    C++ signature :
        bool isForeground(class AcCmColor {lvalue})'''
    ...
    def isNone (self, *args, **kwargs)-> bool :
      '''isNone( (Color)arg1) -> bool :

    C++ signature :
        bool isNone(class AcCmColor {lvalue})'''
    ...
    def penIndex (self, *args, **kwargs)-> int :
      '''penIndex( (Color)arg1) -> int :

    C++ signature :
        unsigned short penIndex(class AcCmColor {lvalue})'''
    ...
    def red (self, *args, **kwargs)-> int :
      '''red( (Color)arg1) -> int :

    C++ signature :
        unsigned char red(class AcCmColor {lvalue})'''
    ...
    def setByBlock (self, *args, **kwargs)-> None :
      '''setByBlock( (Color)arg1) -> None :

    C++ signature :
        void setByBlock(class AcCmColor {lvalue})'''
    ...
    def setByLayer (self, *args, **kwargs)-> None :
      '''setByLayer( (Color)arg1) -> None :

    C++ signature :
        void setByLayer(class AcCmColor {lvalue})'''
    ...
    def setCOLORREF (self, *args, **kwargs)-> ErrorStatus :
      '''setCOLORREF( (Color)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCOLORREF(class AcCmColor {lvalue},unsigned int)'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Color)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class AcCmColor {lvalue},unsigned short)'''
    ...
    def setForeground (self, *args, **kwargs)-> None :
      '''setForeground( (Color)arg1) -> None :

    C++ signature :
        void setForeground(class AcCmColor {lvalue})'''
    ...
    def setLayerOff (self, *args, **kwargs)-> None :
      '''setLayerOff( (Color)arg1) -> None :

    C++ signature :
        void setLayerOff(class AcCmColor {lvalue})'''
    ...
    def setNone (self, *args, **kwargs)-> None :
      '''setNone( (Color)arg1) -> None :

    C++ signature :
        void setNone(class AcCmColor {lvalue})'''
    ...
    def setPenIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setPenIndex( (Color)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPenIndex(class AcCmColor {lvalue},unsigned short)'''
    ...
    def setRGB (self, *args, **kwargs)-> ErrorStatus :
      '''setRGB( (Color)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRGB(class AcCmColor {lvalue},unsigned int)

setRGB( (Color)arg1, (int)arg2, (int)arg3, (int)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRGB(class AcCmColor {lvalue},unsigned char,unsigned char,unsigned char)'''
    ...
    def setRGBM (self, *args, **kwargs)-> ErrorStatus :
      '''setRGBM( (Color)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRGBM(class AcCmColor {lvalue},unsigned int)'''
    ...

class ColorMethod:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kByACI (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kByBlock (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kByColor (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kByLayer (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kByPen (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kForeground (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLayerFrozen (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLayerOff (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kNone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Core:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def ecs2Wcs (self, *args, **kwargs)-> bool :
      '''ecs2Wcs( (Point3d)arg1, (Vector3d)arg2, (Point3d)arg3) -> bool :

    C++ signature :
        bool ecs2Wcs(class AcGePoint3d,class AcGeVector3d,class AcGePoint3d {lvalue})

ecs2Wcs( (Vector3d)arg1, (Vector3d)arg2, (Vector3d)arg3) -> bool :

    C++ signature :
        bool ecs2Wcs(class AcGeVector3d,class AcGeVector3d,class AcGeVector3d {lvalue})'''
    ...
    def entDel (self, *args, **kwargs)-> bool :
      '''entDel( (ObjectId)arg1) -> bool :

    C++ signature :
        bool entDel(class PyDbObjectId)'''
    ...
    def entGet (self, *args, **kwargs)-> list :
      '''entGet( (ObjectId)arg1) -> list :

    C++ signature :
        class boost::python::list entGet(class PyDbObjectId)'''
    ...
    def entLast (self, *args, **kwargs)-> ObjectId :
      '''entLast() -> ObjectId :

    C++ signature :
        class PyDbObjectId entLast()'''
    ...
    def entMod (self, *args, **kwargs)-> bool :
      '''entMod( (list)arg1) -> bool :

    C++ signature :
        bool entMod(class boost::python::list)'''
    ...
    def entNext (self, *args, **kwargs)-> ObjectId :
      '''entNext( (ObjectId)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId entNext(class PyDbObjectId)'''
    ...
    def entUpd (self, *args, **kwargs)-> bool :
      '''entUpd( (ObjectId)arg1) -> bool :

    C++ signature :
        bool entUpd(class PyDbObjectId)'''
    ...
    def openDbEntity (self, *args, **kwargs)-> Entity :
      '''openDbEntity( (ObjectId)arg1, (OpenMode)arg2) -> Entity :

    C++ signature :
        class PyDbEntity openDbEntity(class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def openDbObject (self, *args, **kwargs)-> DbObject :
      '''openDbObject( (ObjectId)arg1, (OpenMode)arg2) -> DbObject :
    Args :
        
    	1, PyDb.ObjectId : object id for the object to open.  
    	2, PyDb.OpenMode : kForRead, kForWrite or kForNotify. 
    
        
    Returns :
        
    	The PyDb.DbObject or PyAp.PyAcadErrorStatus exception

    C++ signature :
        class PyDbObject openDbObject(class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def regApp (self, *args, **kwargs)-> bool :
      '''regApp( (str)arg1) -> bool :

    C++ signature :
        bool regApp(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def resbufTest (self, *args, **kwargs)-> list :
      '''resbufTest( (list)arg1) -> list :

    C++ signature :
        class boost::python::list resbufTest(class boost::python::list)'''
    ...
    def ucs2Ucs (self, *args, **kwargs)-> bool :
      '''ucs2Ucs( (Point3d)arg1, (Point3d)arg2) -> bool :

    C++ signature :
        bool ucs2Ucs(class AcGePoint3d,class AcGePoint3d {lvalue})

ucs2Ucs( (Vector3d)arg1, (Vector3d)arg2) -> bool :

    C++ signature :
        bool ucs2Ucs(class AcGeVector3d,class AcGeVector3d {lvalue})'''
    ...
    def ucs2Wcs (self, *args, **kwargs)-> bool :
      '''ucs2Wcs( (Point3d)arg1, (Point3d)arg2) -> bool :

    C++ signature :
        bool ucs2Wcs(class AcGePoint3d,class AcGePoint3d {lvalue})

ucs2Wcs( (Vector3d)arg1, (Vector3d)arg2) -> bool :

    C++ signature :
        bool ucs2Wcs(class AcGeVector3d,class AcGeVector3d {lvalue})'''
    ...
    def updateDimension (self, *args, **kwargs)-> ErrorStatus :
      '''updateDimension( (ObjectId)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus updateDimension(class PyDbObjectId)'''
    ...
    def wcs2Ecs (self, *args, **kwargs)-> bool :
      '''wcs2Ecs( (Point3d)arg1, (Vector3d)arg2, (Point3d)arg3) -> bool :

    C++ signature :
        bool wcs2Ecs(class AcGePoint3d,class AcGeVector3d,class AcGePoint3d {lvalue})

wcs2Ecs( (Vector3d)arg1, (Vector3d)arg2, (Vector3d)arg3) -> bool :

    C++ signature :
        bool wcs2Ecs(class AcGeVector3d,class AcGeVector3d,class AcGeVector3d {lvalue})'''
    ...

class Curve:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Curve :
      '''cast( (RxObject)arg1) -> Curve :

    C++ signature :
        class PyDbCurve cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Curve :
      '''cloneFrom( (RxObject)arg1) -> Curve :

    C++ signature :
        class PyDbCurve cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> ErrorStatus :
      '''extend( (Curve)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getArea (self, *args, **kwargs)-> float :
      '''getArea( (Curve)arg1) -> float :

    C++ signature :
        double getArea(class PyDbCurve {lvalue})'''
    ...
    def getClosestPointTo (self, *args, **kwargs)-> Point3d :
      '''getClosestPointTo( (Curve)arg1, (Point3d)arg2, (bool)arg3) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbCurve {lvalue},class AcGePoint3d,bool)

getClosestPointTo( (Curve)arg1, (Point3d)arg2, (Vector3d)arg3, (bool)arg4) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbCurve {lvalue},class AcGePoint3d,class AcGeVector3d,bool)'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDistAtParam (self, *args, **kwargs)-> float :
      '''getDistAtParam( (Curve)arg1, (float)arg2) -> float :

    C++ signature :
        double getDistAtParam(class PyDbCurve {lvalue},double)'''
    ...
    def getDistAtPoint (self, *args, **kwargs)-> float :
      '''getDistAtPoint( (Curve)arg1, (Point3d)arg2) -> float :

    C++ signature :
        double getDistAtPoint(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEndParam (self, *args, **kwargs)-> float :
      '''getEndParam( (Curve)arg1) -> float :

    C++ signature :
        double getEndParam(class PyDbCurve {lvalue})'''
    ...
    def getEndPoint (self, *args, **kwargs)-> Point3d :
      '''getEndPoint( (Curve)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getEndPoint(class PyDbCurve {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self, *args, **kwargs)-> Vector3d :
      '''getFirstDeriv( (Curve)arg1, (float)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getFirstDeriv(class PyDbCurve {lvalue},double)

getFirstDeriv( (Curve)arg1, (Point3d)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getFirstDeriv(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getOffsetCurves (self, *args, **kwargs)-> list :
      '''getOffsetCurves( (Curve)arg1, (float)arg2) -> list :

    C++ signature :
        class boost::python::list getOffsetCurves(class PyDbCurve {lvalue},double)'''
    ...
    def getOffsetCurvesGivenPlaneNormal (self, *args, **kwargs)-> list :
      '''getOffsetCurvesGivenPlaneNormal( (Curve)arg1, (Vector3d)arg2, (float)arg3) -> list :

    C++ signature :
        class boost::python::list getOffsetCurvesGivenPlaneNormal(class PyDbCurve {lvalue},class AcGeVector3d,double)'''
    ...
    def getParamAtDist (self, *args, **kwargs)-> float :
      '''getParamAtDist( (Curve)arg1, (float)arg2) -> float :

    C++ signature :
        double getParamAtDist(class PyDbCurve {lvalue},double)'''
    ...
    def getParamAtPoint (self, *args, **kwargs)-> float :
      '''getParamAtPoint( (Curve)arg1, (Point3d)arg2) -> float :

    C++ signature :
        double getParamAtPoint(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def getPointAtDist (self, *args, **kwargs)-> Point3d :
      '''getPointAtDist( (Curve)arg1, (float)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getPointAtDist(class PyDbCurve {lvalue},double)'''
    ...
    def getPointAtParam (self, *args, **kwargs)-> Point3d :
      '''getPointAtParam( (Curve)arg1, (float)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getPointAtParam(class PyDbCurve {lvalue},double)'''
    ...
    def getSecondDeriv (self, *args, **kwargs)-> Vector3d :
      '''getSecondDeriv( (Curve)arg1, (float)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getSecondDeriv(class PyDbCurve {lvalue},double)

getSecondDeriv( (Curve)arg1, (Point3d)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getSecondDeriv(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getSplitCurves (self, *args, **kwargs)-> list :
      '''getSplitCurves( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurves(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getSplitCurvesAtParams (self, *args, **kwargs)-> list :
      '''getSplitCurvesAtParams( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurvesAtParams(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getSplitCurvesAtPoints (self, *args, **kwargs)-> list :
      '''getSplitCurvesAtPoints( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurvesAtPoints(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getStartParam (self, *args, **kwargs)-> float :
      '''getStartParam( (Curve)arg1) -> float :

    C++ signature :
        double getStartParam(class PyDbCurve {lvalue})'''
    ...
    def getStartPoint (self, *args, **kwargs)-> Point3d :
      '''getStartPoint( (Curve)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getStartPoint(class PyDbCurve {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isClosed (self, *args, **kwargs)-> bool :
      '''isClosed( (Curve)arg1) -> bool :

    C++ signature :
        bool isClosed(class PyDbCurve {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPeriodic (self, *args, **kwargs)-> bool :
      '''isPeriodic( (Curve)arg1) -> bool :

    C++ signature :
        bool isPeriodic(class PyDbCurve {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def reverseCurve (self, *args, **kwargs)-> ErrorStatus :
      '''reverseCurve( (Curve)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus reverseCurve(class PyDbCurve {lvalue})'''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class Database:
    def UCSTableId (self, *args, **kwargs)-> ObjectId :
      '''UCSTableId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId UCSTableId(class PyDbDatabase {lvalue})'''
    ...
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (bool)arg2, (bool)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,bool,bool)'''
    ...
    def addObject (self, *args, **kwargs)-> ObjectId :
      '''addObject( (Database)arg1, (DbObject)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId addObject(class PyDbDatabase {lvalue},class PyDbObject {lvalue})'''
    ...
    def angbase (self, *args, **kwargs)-> float :
      '''angbase( (Database)arg1) -> float :

    C++ signature :
        double angbase(class PyDbDatabase {lvalue})'''
    ...
    def angdir (self, *args, **kwargs)-> bool :
      '''angdir( (Database)arg1) -> bool :

    C++ signature :
        bool angdir(class PyDbDatabase {lvalue})'''
    ...
    def annoAllVisible (self, *args, **kwargs)-> bool :
      '''annoAllVisible( (Database)arg1) -> bool :

    C++ signature :
        bool annoAllVisible(class PyDbDatabase {lvalue})'''
    ...
    def annotativeDwg (self, *args, **kwargs)-> bool :
      '''annotativeDwg( (Database)arg1) -> bool :

    C++ signature :
        bool annotativeDwg(class PyDbDatabase {lvalue})'''
    ...
    def approxNumObjects (self, *args, **kwargs)-> int :
      '''approxNumObjects( (Database)arg1) -> int :

    C++ signature :
        int approxNumObjects(class PyDbDatabase {lvalue})'''
    ...
    def attmode (self, *args, **kwargs)-> int :
      '''attmode( (Database)arg1) -> int :

    C++ signature :
        short attmode(class PyDbDatabase {lvalue})'''
    ...
    def aunits (self, *args, **kwargs)-> int :
      '''aunits( (Database)arg1) -> int :

    C++ signature :
        short aunits(class PyDbDatabase {lvalue})'''
    ...
    def auprec (self, *args, **kwargs)-> int :
      '''auprec( (Database)arg1) -> int :

    C++ signature :
        short auprec(class PyDbDatabase {lvalue})'''
    ...
    def blipmode (self, *args, **kwargs)-> bool :
      '''blipmode( (Database)arg1) -> bool :

    C++ signature :
        bool blipmode(class PyDbDatabase {lvalue})'''
    ...
    def blockTableId (self, *args, **kwargs)-> ObjectId :
      '''blockTableId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockTableId(class PyDbDatabase {lvalue})'''
    ...
    def byBlockLinetype (self, *args, **kwargs)-> ObjectId :
      '''byBlockLinetype( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId byBlockLinetype(class PyDbDatabase {lvalue})'''
    ...
    def byBlockMaterial (self, *args, **kwargs)-> ObjectId :
      '''byBlockMaterial( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId byBlockMaterial(class PyDbDatabase {lvalue})'''
    ...
    def byLayerLinetype (self, *args, **kwargs)-> ObjectId :
      '''byLayerLinetype( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId byLayerLinetype(class PyDbDatabase {lvalue})'''
    ...
    def byLayerMaterial (self, *args, **kwargs)-> ObjectId :
      '''byLayerMaterial( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId byLayerMaterial(class PyDbDatabase {lvalue})'''
    ...
    def cDynDisplayMode (self, *args, **kwargs)-> int :
      '''cDynDisplayMode( (Database)arg1) -> int :

    C++ signature :
        short cDynDisplayMode(class PyDbDatabase {lvalue})'''
    ...
    def cameraDisplay (self, *args, **kwargs)-> bool :
      '''cameraDisplay( (Database)arg1) -> bool :

    C++ signature :
        bool cameraDisplay(class PyDbDatabase {lvalue})'''
    ...
    def cameraHeight (self, *args, **kwargs)-> float :
      '''cameraHeight( (Database)arg1) -> float :

    C++ signature :
        double cameraHeight(class PyDbDatabase {lvalue})'''
    ...
    def celtscale (self, *args, **kwargs)-> float :
      '''celtscale( (Database)arg1) -> float :

    C++ signature :
        double celtscale(class PyDbDatabase {lvalue})'''
    ...
    def celtype (self, *args, **kwargs)-> ObjectId :
      '''celtype( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId celtype(class PyDbDatabase {lvalue})'''
    ...
    def celweight (self, *args, **kwargs)-> LineWeight :
      '''celweight( (Database)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight celweight(class PyDbDatabase {lvalue})'''
    ...
    def chamfera (self, *args, **kwargs)-> float :
      '''chamfera( (Database)arg1) -> float :

    C++ signature :
        double chamfera(class PyDbDatabase {lvalue})'''
    ...
    def chamferb (self, *args, **kwargs)-> float :
      '''chamferb( (Database)arg1) -> float :

    C++ signature :
        double chamferb(class PyDbDatabase {lvalue})'''
    ...
    def chamferc (self, *args, **kwargs)-> float :
      '''chamferc( (Database)arg1) -> float :

    C++ signature :
        double chamferc(class PyDbDatabase {lvalue})'''
    ...
    def chamferd (self, *args, **kwargs)-> float :
      '''chamferd( (Database)arg1) -> float :

    C++ signature :
        double chamferd(class PyDbDatabase {lvalue})'''
    ...
    def classDxfName (self, *args, **kwargs)-> str :
      '''classDxfName( (Database)arg1, (RxClass)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > classDxfName(class PyDbDatabase {lvalue},class PyRxClass)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def clayer (self, *args, **kwargs)-> ObjectId :
      '''clayer( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId clayer(class PyDbDatabase {lvalue})'''
    ...
    def closeInput (self, *args, **kwargs)-> ErrorStatus :
      '''closeInput( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus closeInput(class PyDbDatabase {lvalue},bool)'''
    ...
    def cmaterial (self, *args, **kwargs)-> ObjectId :
      '''cmaterial( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId cmaterial(class PyDbDatabase {lvalue})'''
    ...
    def cmljust (self, *args, **kwargs)-> int :
      '''cmljust( (Database)arg1) -> int :

    C++ signature :
        short cmljust(class PyDbDatabase {lvalue})'''
    ...
    def cmlscale (self, *args, **kwargs)-> float :
      '''cmlscale( (Database)arg1) -> float :

    C++ signature :
        double cmlscale(class PyDbDatabase {lvalue})'''
    ...
    def cmlstyleID (self, *args, **kwargs)-> ObjectId :
      '''cmlstyleID( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId cmlstyleID(class PyDbDatabase {lvalue})'''
    ...
    def colorDictionaryId (self, *args, **kwargs)-> ObjectId :
      '''colorDictionaryId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId colorDictionaryId(class PyDbDatabase {lvalue})'''
    ...
    def continuousLinetype (self, *args, **kwargs)-> ObjectId :
      '''continuousLinetype( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId continuousLinetype(class PyDbDatabase {lvalue})'''
    ...
    def coords (self, *args, **kwargs)-> int :
      '''coords( (Database)arg1) -> int :

    C++ signature :
        short coords(class PyDbDatabase {lvalue})'''
    ...
    def countEmptyObjects (self, *args, **kwargs)-> int :
      '''countEmptyObjects( (Database)arg1, (int)arg2) -> int :

    C++ signature :
        unsigned int countEmptyObjects(class PyDbDatabase {lvalue},unsigned int)'''
    ...
    def currentSpaceId (self, *args, **kwargs)-> ObjectId :
      '''currentSpaceId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId currentSpaceId(class PyDbDatabase {lvalue})'''
    ...
    def detailViewStyle (self, *args, **kwargs)-> ObjectId :
      '''detailViewStyle( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId detailViewStyle(class PyDbDatabase {lvalue})'''
    ...
    def detailViewStyleDictionaryId (self, *args, **kwargs)-> ObjectId :
      '''detailViewStyleDictionaryId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId detailViewStyleDictionaryId(class PyDbDatabase {lvalue})'''
    ...
    def dimAssoc (self, *args, **kwargs)-> int :
      '''dimAssoc( (Database)arg1) -> int :

    C++ signature :
        unsigned char dimAssoc(class PyDbDatabase {lvalue})'''
    ...
    def dimStyleTableId (self, *args, **kwargs)-> ObjectId :
      '''dimStyleTableId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimStyleTableId(class PyDbDatabase {lvalue})'''
    ...
    def dimapost (self, *args, **kwargs)-> str :
      '''dimapost( (Database)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dimapost(class PyDbDatabase {lvalue})'''
    ...
    def dimaso (self, *args, **kwargs)-> bool :
      '''dimaso( (Database)arg1) -> bool :

    C++ signature :
        bool dimaso(class PyDbDatabase {lvalue})'''
    ...
    def dimblk (self, *args, **kwargs)-> ObjectId :
      '''dimblk( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimblk(class PyDbDatabase {lvalue})'''
    ...
    def dimblk1 (self, *args, **kwargs)-> ObjectId :
      '''dimblk1( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimblk1(class PyDbDatabase {lvalue})'''
    ...
    def dimblk2 (self, *args, **kwargs)-> ObjectId :
      '''dimblk2( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimblk2(class PyDbDatabase {lvalue})'''
    ...
    def dimfit (self, *args, **kwargs)-> int :
      '''dimfit( (Database)arg1) -> int :

    C++ signature :
        int dimfit(class PyDbDatabase {lvalue})'''
    ...
    def dimpost (self, *args, **kwargs)-> ObjectId :
      '''dimpost( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimpost(class PyDbDatabase {lvalue})'''
    ...
    def dimsho (self, *args, **kwargs)-> bool :
      '''dimsho( (Database)arg1) -> bool :

    C++ signature :
        bool dimsho(class PyDbDatabase {lvalue})'''
    ...
    def dimstyle (self, *args, **kwargs)-> ObjectId :
      '''dimstyle( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimstyle(class PyDbDatabase {lvalue})'''
    ...
    def dimunit (self, *args, **kwargs)-> int :
      '''dimunit( (Database)arg1) -> int :

    C++ signature :
        int dimunit(class PyDbDatabase {lvalue})'''
    ...
    def disablePartialOpen (self, *args, **kwargs)-> None :
      '''disablePartialOpen( (Database)arg1) -> None :

    C++ signature :
        void disablePartialOpen(class PyDbDatabase {lvalue})'''
    ...
    def disableUndoRecording (self, *args, **kwargs)-> None :
      '''disableUndoRecording( (Database)arg1, (bool)arg2) -> None :

    C++ signature :
        void disableUndoRecording(class PyDbDatabase {lvalue},bool)'''
    ...
    def dispSilh (self, *args, **kwargs)-> bool :
      '''dispSilh( (Database)arg1) -> bool :

    C++ signature :
        bool dispSilh(class PyDbDatabase {lvalue})'''
    ...
    def dragVisStyle (self, *args, **kwargs)-> ObjectId :
      '''dragVisStyle( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dragVisStyle(class PyDbDatabase {lvalue})'''
    ...
    def dragmode (self, *args, **kwargs)-> int :
      '''dragmode( (Database)arg1) -> int :

    C++ signature :
        short dragmode(class PyDbDatabase {lvalue})'''
    ...
    def drawOrderCtl (self, *args, **kwargs)-> int :
      '''drawOrderCtl( (Database)arg1) -> int :

    C++ signature :
        unsigned char drawOrderCtl(class PyDbDatabase {lvalue})'''
    ...
    def dwfframe (self, *args, **kwargs)-> int :
      '''dwfframe( (Database)arg1) -> int :

    C++ signature :
        unsigned char dwfframe(class PyDbDatabase {lvalue})'''
    ...
    def dwgFileWasSavedByAutodeskSoftware (self, *args, **kwargs)-> bool :
      '''dwgFileWasSavedByAutodeskSoftware( (Database)arg1) -> bool :

    C++ signature :
        bool dwgFileWasSavedByAutodeskSoftware(class PyDbDatabase {lvalue})'''
    ...
    def dxfIn (self, *args, **kwargs)-> ErrorStatus :
      '''dxfIn( (Database)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus dxfIn(class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def dxfOut (self, *args, **kwargs)-> ErrorStatus :
      '''dxfOut( (Database)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus dxfOut(class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def elevation (self, *args, **kwargs)-> float :
      '''elevation( (Database)arg1) -> float :

    C++ signature :
        double elevation(class PyDbDatabase {lvalue})'''
    ...
    def eraseEmptyObjects (self, *args, **kwargs)-> int :
      '''eraseEmptyObjects( (Database)arg1, (int)arg2) -> int :

    C++ signature :
        unsigned int eraseEmptyObjects(class PyDbDatabase {lvalue},unsigned int)'''
    ...
    def extmax (self, *args, **kwargs)-> Point3d :
      '''extmax( (Database)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d extmax(class PyDbDatabase {lvalue})'''
    ...
    def extmin (self, *args, **kwargs)-> Point3d :
      '''extmin( (Database)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d extmin(class PyDbDatabase {lvalue})'''
    ...
    def facetres (self, *args, **kwargs)-> float :
      '''facetres( (Database)arg1) -> float :

    C++ signature :
        double facetres(class PyDbDatabase {lvalue})'''
    ...
    def filletrad (self, *args, **kwargs)-> float :
      '''filletrad( (Database)arg1) -> float :

    C++ signature :
        double filletrad(class PyDbDatabase {lvalue})'''
    ...
    def fillmode (self, *args, **kwargs)-> bool :
      '''fillmode( (Database)arg1) -> bool :

    C++ signature :
        bool fillmode(class PyDbDatabase {lvalue})'''
    ...
    def forceWblockDatabaseCopy (self, *args, **kwargs)-> None :
      '''forceWblockDatabaseCopy( (Database)arg1) -> None :

    C++ signature :
        void forceWblockDatabaseCopy(class PyDbDatabase {lvalue})'''
    ...
    def geoCoordinateSystemId (self, *args, **kwargs)-> str :
      '''geoCoordinateSystemId( (Database)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > geoCoordinateSystemId(class PyDbDatabase {lvalue})'''
    ...
    def geoMarkerVisibility (self, *args, **kwargs)-> bool :
      '''geoMarkerVisibility( (Database)arg1) -> bool :

    C++ signature :
        bool geoMarkerVisibility(class PyDbDatabase {lvalue})'''
    ...
    def get3dDwfPrec (self, *args, **kwargs)-> float :
      '''get3dDwfPrec( (Database)arg1) -> float :

    C++ signature :
        double get3dDwfPrec(class PyDbDatabase {lvalue})'''
    ...
    def getAcDbObjectId (self, *args, **kwargs)-> ErrorStatus :
      '''getAcDbObjectId( (Database)arg1, (ObjectId)arg2, (bool)arg3, (Handle)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getAcDbObjectId(class PyDbDatabase {lvalue},class PyDbObjectId {lvalue},bool,class PyDbHandle)

getAcDbObjectId( (Database)arg1, (ObjectId)arg2, (bool)arg3, (Handle)arg4, (int)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getAcDbObjectId(class PyDbDatabase {lvalue},class PyDbObjectId {lvalue},bool,class PyDbHandle,unsigned int)'''
    ...
    def getCePlotStyleNameId (self, *args, **kwargs)-> PlotStyleNameType :
      '''getCePlotStyleNameId( (Database)arg1, (ObjectId)arg2) -> PlotStyleNameType :

    C++ signature :
        enum AcDb::PlotStyleNameType getCePlotStyleNameId(class PyDbDatabase {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def getDimstyleParentId (self, *args, **kwargs)-> ObjectId :
      '''getDimstyleParentId( (Database)arg1, (ObjectId)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getDimstyleParentId(class PyDbDatabase {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def getFilename (self, *args, **kwargs)-> str :
      '''getFilename( (Database)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getFilename(class PyDbDatabase {lvalue})'''
    ...
    def getNearestLineWeight (self, *args, **kwargs)-> LineWeight :
      '''getNearestLineWeight( (int)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight getNearestLineWeight(int)'''
    ...
    def getViewportArray (self, *args, **kwargs)-> list :
      '''getViewportArray( (Database)arg1) -> list :

    C++ signature :
        class boost::python::list getViewportArray(class PyDbDatabase {lvalue})'''
    ...
    def getVisualStyleList (self, *args, **kwargs)-> list :
      '''getVisualStyleList( (Database)arg1) -> list :

    C++ signature :
        class boost::python::list getVisualStyleList(class PyDbDatabase {lvalue})'''
    ...
    def globalMaterial (self, *args, **kwargs)-> ObjectId :
      '''globalMaterial( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId globalMaterial(class PyDbDatabase {lvalue})'''
    ...
    def groupDictionaryId (self, *args, **kwargs)-> ObjectId :
      '''groupDictionaryId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId groupDictionaryId(class PyDbDatabase {lvalue})'''
    ...
    def haloGap (self, *args, **kwargs)-> int :
      '''haloGap( (Database)arg1) -> int :

    C++ signature :
        unsigned char haloGap(class PyDbDatabase {lvalue})'''
    ...
    def handseed (self, *args, **kwargs)-> Handle :
      '''handseed( (Database)arg1) -> Handle :

    C++ signature :
        class PyDbHandle handseed(class PyDbDatabase {lvalue})'''
    ...
    def hasClass (self, *args, **kwargs)-> bool :
      '''hasClass( (Database)arg1, (RxClass)arg2) -> bool :

    C++ signature :
        bool hasClass(class PyDbDatabase {lvalue},class PyRxClass)'''
    ...
    def hideText (self, *args, **kwargs)-> int :
      '''hideText( (Database)arg1) -> int :

    C++ signature :
        unsigned char hideText(class PyDbDatabase {lvalue})'''
    ...
    def hpInherit (self, *args, **kwargs)-> bool :
      '''hpInherit( (Database)arg1) -> bool :

    C++ signature :
        bool hpInherit(class PyDbDatabase {lvalue})'''
    ...
    def hpOrigin (self, *args, **kwargs)-> Point2d :
      '''hpOrigin( (Database)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d hpOrigin(class PyDbDatabase {lvalue})

hpOrigin( (Database)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d hpOrigin(class PyDbDatabase {lvalue})

hpOrigin( (Database)arg1) -> int :

    C++ signature :
        unsigned char hpOrigin(class PyDbDatabase {lvalue})'''
    ...
    def insert (self, *args, **kwargs)-> ErrorStatus :
      '''insert( (Database)arg1, (ObjectId)arg2, (str)arg3, (Database)arg4, (bool)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus insert(class PyDbDatabase {lvalue},class PyDbObjectId {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase {lvalue},bool)

insert( (Database)arg1, (ObjectId)arg2, (str)arg3, (str)arg4, (Database)arg5, (bool)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus insert(class PyDbDatabase {lvalue},class PyDbObjectId {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase {lvalue},bool)

insert( (Database)arg1, (Matrix3d)arg2, (Database)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus insert(class PyDbDatabase {lvalue},class AcGeMatrix3d,class PyDbDatabase {lvalue},bool)'''
    ...
    def insunits (self, *args, **kwargs)-> UnitsValue :
      '''insunits( (Database)arg1) -> UnitsValue :

    C++ signature :
        enum AcDb::UnitsValue insunits(class PyDbDatabase {lvalue})'''
    ...
    def interfereVpVisStyle (self, *args, **kwargs)-> ObjectId :
      '''interfereVpVisStyle( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId interfereVpVisStyle(class PyDbDatabase {lvalue})'''
    ...
    def intersectColor (self, *args, **kwargs)-> int :
      '''intersectColor( (Database)arg1) -> int :

    C++ signature :
        unsigned short intersectColor(class PyDbDatabase {lvalue})'''
    ...
    def intersectDisplay (self, *args, **kwargs)-> int :
      '''intersectDisplay( (Database)arg1) -> int :

    C++ signature :
        unsigned char intersectDisplay(class PyDbDatabase {lvalue})'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (RxObject)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyRxObject {lvalue})'''
    ...
    def isAppRegistered (self, *args, **kwargs)-> bool :
      '''isAppRegistered( (Database)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isAppRegistered(class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def isBeingDestroyed (self, *args, **kwargs)-> bool :
      '''isBeingDestroyed( (Database)arg1) -> bool :

    C++ signature :
        bool isBeingDestroyed(class PyDbDatabase {lvalue})'''
    ...
    def isEMR (self, *args, **kwargs)-> bool :
      '''isEMR( (Database)arg1) -> bool :

    C++ signature :
        bool isEMR(class PyDbDatabase {lvalue})'''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isObjectNonPersistent (self, *args, **kwargs)-> bool :
      '''isObjectNonPersistent( (ObjectId)arg1) -> bool :

    C++ signature :
        bool isObjectNonPersistent(class PyDbObjectId)'''
    ...
    def isPartiallyOpened (self, *args, **kwargs)-> bool :
      '''isPartiallyOpened( (Database)arg1) -> bool :

    C++ signature :
        bool isPartiallyOpened(class PyDbDatabase {lvalue})'''
    ...
    def isPucsOrthographic (self, *args, **kwargs)-> bool :
      '''isPucsOrthographic( (Database)arg1, (OrthographicView)arg2) -> bool :

    C++ signature :
        bool isPucsOrthographic(class PyDbDatabase {lvalue},enum AcDb::OrthographicView {lvalue})'''
    ...
    def isUcsOrthographic (self, *args, **kwargs)-> bool :
      '''isUcsOrthographic( (Database)arg1, (OrthographicView)arg2) -> bool :

    C++ signature :
        bool isUcsOrthographic(class PyDbDatabase {lvalue},enum AcDb::OrthographicView {lvalue})'''
    ...
    def isValidLineWeight (self, *args, **kwargs)-> bool :
      '''isValidLineWeight( (int)arg1) -> bool :

    C++ signature :
        bool isValidLineWeight(int)'''
    ...
    def isolines (self, *args, **kwargs)-> int :
      '''isolines( (Database)arg1) -> int :

    C++ signature :
        short isolines(class PyDbDatabase {lvalue})'''
    ...
    def joinStyle (self, *args, **kwargs)-> JoinStyle :
      '''joinStyle( (Database)arg1) -> JoinStyle :

    C++ signature :
        enum AcDb::JoinStyle joinStyle(class PyDbDatabase {lvalue})'''
    ...
    def lastSavedAsMaintenanceVersion (self, *args, **kwargs)-> int :
      '''lastSavedAsMaintenanceVersion( (Database)arg1) -> int :

    C++ signature :
        int lastSavedAsMaintenanceVersion(class PyDbDatabase {lvalue})'''
    ...
    def lastSavedAsVersion (self, *args, **kwargs)-> int :
      '''lastSavedAsVersion( (Database)arg1) -> int :

    C++ signature :
        int lastSavedAsVersion(class PyDbDatabase {lvalue})'''
    ...
    def latitude (self, *args, **kwargs)-> float :
      '''latitude( (Database)arg1) -> float :

    C++ signature :
        double latitude(class PyDbDatabase {lvalue})'''
    ...
    def layerEval (self, *args, **kwargs)-> int :
      '''layerEval( (Database)arg1) -> int :

    C++ signature :
        unsigned char layerEval(class PyDbDatabase {lvalue})'''
    ...
    def layerNotify (self, *args, **kwargs)-> int :
      '''layerNotify( (Database)arg1) -> int :

    C++ signature :
        short layerNotify(class PyDbDatabase {lvalue})'''
    ...
    def layerTableId (self, *args, **kwargs)-> ObjectId :
      '''layerTableId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerTableId(class PyDbDatabase {lvalue})'''
    ...
    def layerZero (self, *args, **kwargs)-> ObjectId :
      '''layerZero( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerZero(class PyDbDatabase {lvalue})'''
    ...
    def layoutDictionaryId (self, *args, **kwargs)-> ObjectId :
      '''layoutDictionaryId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layoutDictionaryId(class PyDbDatabase {lvalue})'''
    ...
    def lensLength (self, *args, **kwargs)-> float :
      '''lensLength( (Database)arg1) -> float :

    C++ signature :
        double lensLength(class PyDbDatabase {lvalue})'''
    ...
    def lightGlyphDisplay (self, *args, **kwargs)-> int :
      '''lightGlyphDisplay( (Database)arg1) -> int :

    C++ signature :
        unsigned char lightGlyphDisplay(class PyDbDatabase {lvalue})'''
    ...
    def lightingUnits (self, *args, **kwargs)-> int :
      '''lightingUnits( (Database)arg1) -> int :

    C++ signature :
        unsigned char lightingUnits(class PyDbDatabase {lvalue})'''
    ...
    def lightsInBlocks (self, *args, **kwargs)-> bool :
      '''lightsInBlocks( (Database)arg1) -> bool :

    C++ signature :
        bool lightsInBlocks(class PyDbDatabase {lvalue})'''
    ...
    def limcheck (self, *args, **kwargs)-> bool :
      '''limcheck( (Database)arg1) -> bool :

    C++ signature :
        bool limcheck(class PyDbDatabase {lvalue})'''
    ...
    def limmax (self, *args, **kwargs)-> Point2d :
      '''limmax( (Database)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d limmax(class PyDbDatabase {lvalue})'''
    ...
    def limmin (self, *args, **kwargs)-> Point2d :
      '''limmin( (Database)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d limmin(class PyDbDatabase {lvalue})'''
    ...
    def lineWeightDisplay (self, *args, **kwargs)-> bool :
      '''lineWeightDisplay( (Database)arg1) -> bool :

    C++ signature :
        bool lineWeightDisplay(class PyDbDatabase {lvalue})'''
    ...
    def linetypeTableId (self, *args, **kwargs)-> ObjectId :
      '''linetypeTableId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeTableId(class PyDbDatabase {lvalue})'''
    ...
    def loadLineTypeFile (self, *args, **kwargs)-> ErrorStatus :
      '''loadLineTypeFile( (Database)arg1, (str)arg2, (str)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus loadLineTypeFile(class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def loftAng1 (self, *args, **kwargs)-> float :
      '''loftAng1( (Database)arg1) -> float :

    C++ signature :
        double loftAng1(class PyDbDatabase {lvalue})'''
    ...
    def loftAng2 (self, *args, **kwargs)-> float :
      '''loftAng2( (Database)arg1) -> float :

    C++ signature :
        double loftAng2(class PyDbDatabase {lvalue})'''
    ...
    def loftMag1 (self, *args, **kwargs)-> float :
      '''loftMag1( (Database)arg1) -> float :

    C++ signature :
        double loftMag1(class PyDbDatabase {lvalue})'''
    ...
    def loftMag2 (self, *args, **kwargs)-> float :
      '''loftMag2( (Database)arg1) -> float :

    C++ signature :
        double loftMag2(class PyDbDatabase {lvalue})'''
    ...
    def loftNormals (self, *args, **kwargs)-> int :
      '''loftNormals( (Database)arg1) -> int :

    C++ signature :
        unsigned char loftNormals(class PyDbDatabase {lvalue})'''
    ...
    def loftParam (self, *args, **kwargs)-> int :
      '''loftParam( (Database)arg1) -> int :

    C++ signature :
        unsigned short loftParam(class PyDbDatabase {lvalue})'''
    ...
    def longitude (self, *args, **kwargs)-> float :
      '''longitude( (Database)arg1) -> float :

    C++ signature :
        double longitude(class PyDbDatabase {lvalue})'''
    ...
    def ltscale (self, *args, **kwargs)-> float :
      '''ltscale( (Database)arg1) -> float :

    C++ signature :
        double ltscale(class PyDbDatabase {lvalue})'''
    ...
    def lunits (self, *args, **kwargs)-> int :
      '''lunits( (Database)arg1) -> int :

    C++ signature :
        short lunits(class PyDbDatabase {lvalue})'''
    ...
    def luprec (self, *args, **kwargs)-> int :
      '''luprec( (Database)arg1) -> int :

    C++ signature :
        short luprec(class PyDbDatabase {lvalue})'''
    ...
    def mLStyleDictionaryId (self, *args, **kwargs)-> ObjectId :
      '''mLStyleDictionaryId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId mLStyleDictionaryId(class PyDbDatabase {lvalue})'''
    ...
    def maintenanceReleaseVersion (self, *args, **kwargs)-> int :
      '''maintenanceReleaseVersion( (Database)arg1) -> int :

    C++ signature :
        int maintenanceReleaseVersion(class PyDbDatabase {lvalue})'''
    ...
    def markObjectNonPersistent (self, *args, **kwargs)-> ErrorStatus :
      '''markObjectNonPersistent( (ObjectId)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus markObjectNonPersistent(class PyDbObjectId,bool)'''
    ...
    def materialDictionaryId (self, *args, **kwargs)-> ObjectId :
      '''materialDictionaryId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialDictionaryId(class PyDbDatabase {lvalue})'''
    ...
    def maxactvp (self, *args, **kwargs)-> int :
      '''maxactvp( (Database)arg1) -> int :

    C++ signature :
        short maxactvp(class PyDbDatabase {lvalue})'''
    ...
    def measurement (self, *args, **kwargs)-> MeasurementValue :
      '''measurement( (Database)arg1) -> MeasurementValue :

    C++ signature :
        enum AcDb::MeasurementValue measurement(class PyDbDatabase {lvalue})'''
    ...
    def mirrtext (self, *args, **kwargs)-> bool :
      '''mirrtext( (Database)arg1) -> bool :

    C++ signature :
        bool mirrtext(class PyDbDatabase {lvalue})'''
    ...
    def mleaderStyleDictionaryId (self, *args, **kwargs)-> ObjectId :
      '''mleaderStyleDictionaryId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId mleaderStyleDictionaryId(class PyDbDatabase {lvalue})'''
    ...
    def mleaderscale (self, *args, **kwargs)-> float :
      '''mleaderscale( (Database)arg1) -> float :

    C++ signature :
        double mleaderscale(class PyDbDatabase {lvalue})'''
    ...
    def mleaderstyle (self, *args, **kwargs)-> ObjectId :
      '''mleaderstyle( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId mleaderstyle(class PyDbDatabase {lvalue})'''
    ...
    def modelSpaceId (self, *args, **kwargs)-> ObjectId :
      '''modelSpaceId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId modelSpaceId(class PyDbDatabase {lvalue})'''
    ...
    def msOleScale (self, *args, **kwargs)-> float :
      '''msOleScale( (Database)arg1) -> float :

    C++ signature :
        double msOleScale(class PyDbDatabase {lvalue})'''
    ...
    def msltscale (self, *args, **kwargs)-> bool :
      '''msltscale( (Database)arg1) -> bool :

    C++ signature :
        bool msltscale(class PyDbDatabase {lvalue})'''
    ...
    def namedObjectsDictionaryId (self, *args, **kwargs)-> ObjectId :
      '''namedObjectsDictionaryId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId namedObjectsDictionaryId(class PyDbDatabase {lvalue})'''
    ...
    def needsRecovery (self, *args, **kwargs)-> bool :
      '''needsRecovery( (Database)arg1) -> bool :

    C++ signature :
        bool needsRecovery(class PyDbDatabase {lvalue})'''
    ...
    def northDirection (self, *args, **kwargs)-> float :
      '''northDirection( (Database)arg1) -> float :

    C++ signature :
        double northDirection(class PyDbDatabase {lvalue})'''
    ...
    def numberOfSaves (self, *args, **kwargs)-> int :
      '''numberOfSaves( (Database)arg1) -> int :

    C++ signature :
        int numberOfSaves(class PyDbDatabase {lvalue})'''
    ...
    def obscuredColor (self, *args, **kwargs)-> int :
      '''obscuredColor( (Database)arg1) -> int :

    C++ signature :
        unsigned short obscuredColor(class PyDbDatabase {lvalue})'''
    ...
    def obscuredLineType (self, *args, **kwargs)-> int :
      '''obscuredLineType( (Database)arg1) -> int :

    C++ signature :
        unsigned char obscuredLineType(class PyDbDatabase {lvalue})'''
    ...
    def oleStartUp (self, *args, **kwargs)-> bool :
      '''oleStartUp( (Database)arg1) -> bool :

    C++ signature :
        bool oleStartUp(class PyDbDatabase {lvalue})'''
    ...
    def originalFileMaintenanceVersion (self, *args, **kwargs)-> int :
      '''originalFileMaintenanceVersion( (Database)arg1) -> int :

    C++ signature :
        int originalFileMaintenanceVersion(class PyDbDatabase {lvalue})'''
    ...
    def originalFileName (self, *args, **kwargs)-> str :
      '''originalFileName( (Database)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > originalFileName(class PyDbDatabase {lvalue})'''
    ...
    def originalFileSavedByMaintenanceVersion (self, *args, **kwargs)-> int :
      '''originalFileSavedByMaintenanceVersion( (Database)arg1) -> int :

    C++ signature :
        int originalFileSavedByMaintenanceVersion(class PyDbDatabase {lvalue})'''
    ...
    def originalFileSavedByVersion (self, *args, **kwargs)-> int :
      '''originalFileSavedByVersion( (Database)arg1) -> int :

    C++ signature :
        int originalFileSavedByVersion(class PyDbDatabase {lvalue})'''
    ...
    def originalFileVersion (self, *args, **kwargs)-> int :
      '''originalFileVersion( (Database)arg1) -> int :

    C++ signature :
        int originalFileVersion(class PyDbDatabase {lvalue})'''
    ...
    def orthomode (self, *args, **kwargs)-> bool :
      '''orthomode( (Database)arg1) -> bool :

    C++ signature :
        bool orthomode(class PyDbDatabase {lvalue})'''
    ...
    def paperSpaceVportId (self, *args, **kwargs)-> ObjectId :
      '''paperSpaceVportId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId paperSpaceVportId(class PyDbDatabase {lvalue})'''
    ...
    def pdfframe (self, *args, **kwargs)-> int :
      '''pdfframe( (Database)arg1) -> int :

    C++ signature :
        signed char pdfframe(class PyDbDatabase {lvalue})'''
    ...
    def pdmode (self, *args, **kwargs)-> int :
      '''pdmode( (Database)arg1) -> int :

    C++ signature :
        short pdmode(class PyDbDatabase {lvalue})'''
    ...
    def pdsize (self, *args, **kwargs)-> float :
      '''pdsize( (Database)arg1) -> float :

    C++ signature :
        double pdsize(class PyDbDatabase {lvalue})'''
    ...
    def pextmax (self, *args, **kwargs)-> Point3d :
      '''pextmax( (Database)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d pextmax(class PyDbDatabase {lvalue})'''
    ...
    def pextmin (self, *args, **kwargs)-> Point3d :
      '''pextmin( (Database)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d pextmin(class PyDbDatabase {lvalue})'''
    ...
    def pickstyle (self, *args, **kwargs)-> int :
      '''pickstyle( (Database)arg1) -> int :

    C++ signature :
        short pickstyle(class PyDbDatabase {lvalue})'''
    ...
    def pinsbase (self, *args, **kwargs)-> Point3d :
      '''pinsbase( (Database)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d pinsbase(class PyDbDatabase {lvalue})'''
    ...
    def plimcheck (self, *args, **kwargs)-> bool :
      '''plimcheck( (Database)arg1) -> bool :

    C++ signature :
        bool plimcheck(class PyDbDatabase {lvalue})'''
    ...
    def plimmax (self, *args, **kwargs)-> Point2d :
      '''plimmax( (Database)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d plimmax(class PyDbDatabase {lvalue})'''
    ...
    def plimmin (self, *args, **kwargs)-> Point2d :
      '''plimmin( (Database)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d plimmin(class PyDbDatabase {lvalue})'''
    ...
    def plineEllipse (self, *args, **kwargs)-> bool :
      '''plineEllipse( (Database)arg1) -> bool :

    C++ signature :
        bool plineEllipse(class PyDbDatabase {lvalue})'''
    ...
    def plinegen (self, *args, **kwargs)-> bool :
      '''plinegen( (Database)arg1) -> bool :

    C++ signature :
        bool plinegen(class PyDbDatabase {lvalue})'''
    ...
    def plinewid (self, *args, **kwargs)-> float :
      '''plinewid( (Database)arg1) -> float :

    C++ signature :
        double plinewid(class PyDbDatabase {lvalue})'''
    ...
    def plotSettingsDictionaryId (self, *args, **kwargs)-> ObjectId :
      '''plotSettingsDictionaryId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId plotSettingsDictionaryId(class PyDbDatabase {lvalue})'''
    ...
    def plotStyleMode (self, *args, **kwargs)-> bool :
      '''plotStyleMode( (Database)arg1) -> bool :

    C++ signature :
        bool plotStyleMode(class PyDbDatabase {lvalue})'''
    ...
    def plotStyleNameDictionaryId (self, *args, **kwargs)-> ObjectId :
      '''plotStyleNameDictionaryId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId plotStyleNameDictionaryId(class PyDbDatabase {lvalue})'''
    ...
    def previewType (self, *args, **kwargs)-> int :
      '''previewType( (Database)arg1) -> int :

    C++ signature :
        short previewType(class PyDbDatabase {lvalue})'''
    ...
    def psltscale (self, *args, **kwargs)-> bool :
      '''psltscale( (Database)arg1) -> bool :

    C++ signature :
        bool psltscale(class PyDbDatabase {lvalue})'''
    ...
    def psolHeight (self, *args, **kwargs)-> float :
      '''psolHeight( (Database)arg1) -> float :

    C++ signature :
        double psolHeight(class PyDbDatabase {lvalue})'''
    ...
    def psolWidth (self, *args, **kwargs)-> float :
      '''psolWidth( (Database)arg1) -> float :

    C++ signature :
        double psolWidth(class PyDbDatabase {lvalue})'''
    ...
    def pucsBase (self, *args, **kwargs)-> ObjectId :
      '''pucsBase( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId pucsBase(class PyDbDatabase {lvalue})'''
    ...
    def pucsname (self, *args, **kwargs)-> ObjectId :
      '''pucsname( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId pucsname(class PyDbDatabase {lvalue})'''
    ...
    def pucsorg (self, *args, **kwargs)-> Point3d :
      '''pucsorg( (Database)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d pucsorg(class PyDbDatabase {lvalue})'''
    ...
    def pucsxdir (self, *args, **kwargs)-> Vector3d :
      '''pucsxdir( (Database)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d pucsxdir(class PyDbDatabase {lvalue})'''
    ...
    def pucsydir (self, *args, **kwargs)-> Vector3d :
      '''pucsydir( (Database)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d pucsydir(class PyDbDatabase {lvalue})'''
    ...
    def qtextmode (self, *args, **kwargs)-> bool :
      '''qtextmode( (Database)arg1) -> bool :

    C++ signature :
        bool qtextmode(class PyDbDatabase {lvalue})'''
    ...
    def readDwgFile (self, *args, **kwargs)-> ErrorStatus :
      '''readDwgFile( (Database)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus readDwgFile(class PyDbDatabase {lvalue},char const * __ptr64)

readDwgFile( (Database)arg1, (str)arg2, (int)arg3, (bool)arg4, (str)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus readDwgFile(class PyDbDatabase {lvalue},char const * __ptr64,int,bool,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def reclaimMemoryFromErasedObjects (self, *args, **kwargs)-> ErrorStatus :
      '''reclaimMemoryFromErasedObjects( (Database)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus reclaimMemoryFromErasedObjects(class PyDbDatabase {lvalue},class boost::python::list)'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def regAppTableId (self, *args, **kwargs)-> ObjectId :
      '''regAppTableId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId regAppTableId(class PyDbDatabase {lvalue})'''
    ...
    def regenmode (self, *args, **kwargs)-> bool :
      '''regenmode( (Database)arg1) -> bool :

    C++ signature :
        bool regenmode(class PyDbDatabase {lvalue})'''
    ...
    def registerApp (self, *args, **kwargs)-> ErrorStatus :
      '''registerApp( (Database)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus registerApp(class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def resetTimes (self, *args, **kwargs)-> ErrorStatus :
      '''resetTimes( (Database)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus resetTimes(class PyDbDatabase {lvalue})'''
    ...
    def restoreForwardingXrefSymbols (self, *args, **kwargs)-> ErrorStatus :
      '''restoreForwardingXrefSymbols( (Database)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus restoreForwardingXrefSymbols(class PyDbDatabase {lvalue})'''
    ...
    def restoreOriginalXrefSymbols (self, *args, **kwargs)-> ErrorStatus :
      '''restoreOriginalXrefSymbols( (Database)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus restoreOriginalXrefSymbols(class PyDbDatabase {lvalue})'''
    ...
    def retainOriginalThumbnailBitmap (self, *args, **kwargs)-> bool :
      '''retainOriginalThumbnailBitmap( (Database)arg1) -> bool :

    C++ signature :
        bool retainOriginalThumbnailBitmap(class PyDbDatabase {lvalue})'''
    ...
    def saveAs (self, *args, **kwargs)-> ErrorStatus :
      '''saveAs( (Database)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus saveAs(class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def saveproxygraphics (self, *args, **kwargs)-> int :
      '''saveproxygraphics( (Database)arg1) -> int :

    C++ signature :
        short saveproxygraphics(class PyDbDatabase {lvalue})'''
    ...
    def scaleListDictionaryId (self, *args, **kwargs)-> ObjectId :
      '''scaleListDictionaryId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId scaleListDictionaryId(class PyDbDatabase {lvalue})'''
    ...
    def sectionViewStyle (self, *args, **kwargs)-> ObjectId :
      '''sectionViewStyle( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId sectionViewStyle(class PyDbDatabase {lvalue})'''
    ...
    def sectionViewStyleDictionaryId (self, *args, **kwargs)-> ObjectId :
      '''sectionViewStyleDictionaryId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId sectionViewStyleDictionaryId(class PyDbDatabase {lvalue})'''
    ...
    def set3dDwfPrec (self, *args, **kwargs)-> ErrorStatus :
      '''set3dDwfPrec( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus set3dDwfPrec(class PyDbDatabase {lvalue},double)'''
    ...
    def setAngbase (self, *args, **kwargs)-> ErrorStatus :
      '''setAngbase( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAngbase(class PyDbDatabase {lvalue},double)'''
    ...
    def setAngdir (self, *args, **kwargs)-> ErrorStatus :
      '''setAngdir( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAngdir(class PyDbDatabase {lvalue},bool)'''
    ...
    def setAnnoAllVisible (self, *args, **kwargs)-> ErrorStatus :
      '''setAnnoAllVisible( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAnnoAllVisible(class PyDbDatabase {lvalue},bool)'''
    ...
    def setAttdia (self, *args, **kwargs)-> ErrorStatus :
      '''setAttdia( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAttdia(class PyDbDatabase {lvalue},bool)'''
    ...
    def setAttmode (self, *args, **kwargs)-> ErrorStatus :
      '''setAttmode( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAttmode(class PyDbDatabase {lvalue},short)'''
    ...
    def setAttreq (self, *args, **kwargs)-> ErrorStatus :
      '''setAttreq( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAttreq(class PyDbDatabase {lvalue},bool)'''
    ...
    def setAunits (self, *args, **kwargs)-> ErrorStatus :
      '''setAunits( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAunits(class PyDbDatabase {lvalue},short)'''
    ...
    def setAuprec (self, *args, **kwargs)-> ErrorStatus :
      '''setAuprec( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAuprec(class PyDbDatabase {lvalue},short)'''
    ...
    def setBlipmode (self, *args, **kwargs)-> ErrorStatus :
      '''setBlipmode( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlipmode(class PyDbDatabase {lvalue},bool)'''
    ...
    def setCDynDisplayMode (self, *args, **kwargs)-> ErrorStatus :
      '''setCDynDisplayMode( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCDynDisplayMode(class PyDbDatabase {lvalue},short)'''
    ...
    def setCameraDisplay (self, *args, **kwargs)-> ErrorStatus :
      '''setCameraDisplay( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCameraDisplay(class PyDbDatabase {lvalue},bool)'''
    ...
    def setCameraHeight (self, *args, **kwargs)-> ErrorStatus :
      '''setCameraHeight( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCameraHeight(class PyDbDatabase {lvalue},double)'''
    ...
    def setCePlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setCePlotStyleName( (Database)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCePlotStyleName(class PyDbDatabase {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId)'''
    ...
    def setCeltscale (self, *args, **kwargs)-> ErrorStatus :
      '''setCeltscale( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCeltscale(class PyDbDatabase {lvalue},double)'''
    ...
    def setCeltype (self, *args, **kwargs)-> ErrorStatus :
      '''setCeltype( (Database)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCeltype(class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def setCelweight (self, *args, **kwargs)-> ErrorStatus :
      '''setCelweight( (Database)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCelweight(class PyDbDatabase {lvalue},enum AcDb::LineWeight)'''
    ...
    def setChamfera (self, *args, **kwargs)-> ErrorStatus :
      '''setChamfera( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setChamfera(class PyDbDatabase {lvalue},double)'''
    ...
    def setChamferb (self, *args, **kwargs)-> ErrorStatus :
      '''setChamferb( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setChamferb(class PyDbDatabase {lvalue},double)'''
    ...
    def setChamferc (self, *args, **kwargs)-> ErrorStatus :
      '''setChamferc( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setChamferc(class PyDbDatabase {lvalue},double)'''
    ...
    def setChamferd (self, *args, **kwargs)-> ErrorStatus :
      '''setChamferd( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setChamferd(class PyDbDatabase {lvalue},double)'''
    ...
    def setClayer (self, *args, **kwargs)-> ErrorStatus :
      '''setClayer( (Database)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setClayer(class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def setCmaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setCmaterial( (Database)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCmaterial(class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def setCmljust (self, *args, **kwargs)-> ErrorStatus :
      '''setCmljust( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCmljust(class PyDbDatabase {lvalue},short)'''
    ...
    def setCmlscale (self, *args, **kwargs)-> ErrorStatus :
      '''setCmlscale( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCmlscale(class PyDbDatabase {lvalue},double)'''
    ...
    def setCmlstyleID (self, *args, **kwargs)-> ErrorStatus :
      '''setCmlstyleID( (Database)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCmlstyleID(class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def setCoords (self, *args, **kwargs)-> ErrorStatus :
      '''setCoords( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCoords(class PyDbDatabase {lvalue},short)'''
    ...
    def setCshadow (self, *args, **kwargs)-> ErrorStatus :
      '''setCshadow( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCshadow(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setDelUsedObj (self, *args, **kwargs)-> ErrorStatus :
      '''setDelUsedObj( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDelUsedObj(class PyDbDatabase {lvalue},short)'''
    ...
    def setDgnframe (self, *args, **kwargs)-> ErrorStatus :
      '''setDgnframe( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDgnframe(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setDimAssoc (self, *args, **kwargs)-> ErrorStatus :
      '''setDimAssoc( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimAssoc(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setDimaso (self, *args, **kwargs)-> ErrorStatus :
      '''setDimaso( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimaso(class PyDbDatabase {lvalue},bool)'''
    ...
    def setDimfit (self, *args, **kwargs)-> ErrorStatus :
      '''setDimfit( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimfit(class PyDbDatabase {lvalue},int)'''
    ...
    def setDimsho (self, *args, **kwargs)-> ErrorStatus :
      '''setDimsho( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimsho(class PyDbDatabase {lvalue},bool)'''
    ...
    def setDimstyle (self, *args, **kwargs)-> ErrorStatus :
      '''setDimstyle( (Database)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyle(class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def setDimstyleData (self, *args, **kwargs)-> ErrorStatus :
      '''setDimstyleData( (Database)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def setDimunit (self, *args, **kwargs)-> ErrorStatus :
      '''setDimunit( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimunit(class PyDbDatabase {lvalue},int)'''
    ...
    def setDispSilh (self, *args, **kwargs)-> ErrorStatus :
      '''setDispSilh( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDispSilh(class PyDbDatabase {lvalue},bool)'''
    ...
    def setDragVisStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setDragVisStyle( (Database)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDragVisStyle(class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def setDragmode (self, *args, **kwargs)-> ErrorStatus :
      '''setDragmode( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDragmode(class PyDbDatabase {lvalue},short)'''
    ...
    def setDrawOrderCtl (self, *args, **kwargs)-> ErrorStatus :
      '''setDrawOrderCtl( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDrawOrderCtl(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setDwfframe (self, *args, **kwargs)-> ErrorStatus :
      '''setDwfframe( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDwfframe(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setElevation (self, *args, **kwargs)-> ErrorStatus :
      '''setElevation( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setElevation(class PyDbDatabase {lvalue},double)'''
    ...
    def setEndCaps (self, *args, **kwargs)-> ErrorStatus :
      '''setEndCaps( (Database)arg1, (EndCaps)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setEndCaps(class PyDbDatabase {lvalue},enum AcDb::EndCaps)'''
    ...
    def setExtmax (self, *args, **kwargs)-> ErrorStatus :
      '''setExtmax( (Database)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setExtmax(class PyDbDatabase {lvalue},class AcGePoint3d)'''
    ...
    def setExtmin (self, *args, **kwargs)-> ErrorStatus :
      '''setExtmin( (Database)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setExtmin(class PyDbDatabase {lvalue},class AcGePoint3d)'''
    ...
    def setFacetres (self, *args, **kwargs)-> ErrorStatus :
      '''setFacetres( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFacetres(class PyDbDatabase {lvalue},double)'''
    ...
    def setFilletrad (self, *args, **kwargs)-> ErrorStatus :
      '''setFilletrad( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFilletrad(class PyDbDatabase {lvalue},double)'''
    ...
    def setFillmode (self, *args, **kwargs)-> ErrorStatus :
      '''setFillmode( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFillmode(class PyDbDatabase {lvalue},bool)'''
    ...
    def setFingerprintGuid (self, *args, **kwargs)-> ErrorStatus :
      '''setFingerprintGuid( (Database)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFingerprintGuid(class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setFullSaveRequired (self, *args, **kwargs)-> None :
      '''setFullSaveRequired( (Database)arg1) -> None :

    C++ signature :
        void setFullSaveRequired(class PyDbDatabase {lvalue})'''
    ...
    def setGeoMarkerVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setGeoMarkerVisibility( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGeoMarkerVisibility(class PyDbDatabase {lvalue},bool)'''
    ...
    def setHaloGap (self, *args, **kwargs)-> ErrorStatus :
      '''setHaloGap( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHaloGap(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setHandseed (self, *args, **kwargs)-> ErrorStatus :
      '''setHandseed( (Database)arg1, (Handle)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHandseed(class PyDbDatabase {lvalue},class PyDbHandle)'''
    ...
    def setHideText (self, *args, **kwargs)-> ErrorStatus :
      '''setHideText( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHideText(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setHpInherit (self, *args, **kwargs)-> ErrorStatus :
      '''setHpInherit( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHpInherit(class PyDbDatabase {lvalue},bool)'''
    ...
    def setHpOrigin (self, *args, **kwargs)-> ErrorStatus :
      '''setHpOrigin( (Database)arg1, (Point2d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHpOrigin(class PyDbDatabase {lvalue},class AcGePoint2d)'''
    ...
    def setHyperlinkBase (self, *args, **kwargs)-> ErrorStatus :
      '''setHyperlinkBase( (Database)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHyperlinkBase(class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setIndexctl (self, *args, **kwargs)-> ErrorStatus :
      '''setIndexctl( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setIndexctl(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setInsbase (self, *args, **kwargs)-> ErrorStatus :
      '''setInsbase( (Database)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInsbase(class PyDbDatabase {lvalue},class AcGePoint3d)'''
    ...
    def setInsunits (self, *args, **kwargs)-> ErrorStatus :
      '''setInsunits( (Database)arg1, (UnitsValue)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInsunits(class PyDbDatabase {lvalue},enum AcDb::UnitsValue)'''
    ...
    def setInterfereObjVisStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setInterfereObjVisStyle( (Database)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInterfereObjVisStyle(class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def setInterfereVpVisStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setInterfereVpVisStyle( (Database)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInterfereVpVisStyle(class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def setIntersectColor (self, *args, **kwargs)-> ErrorStatus :
      '''setIntersectColor( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setIntersectColor(class PyDbDatabase {lvalue},unsigned short)'''
    ...
    def setIntersectDisplay (self, *args, **kwargs)-> ErrorStatus :
      '''setIntersectDisplay( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setIntersectDisplay(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setIsolines (self, *args, **kwargs)-> ErrorStatus :
      '''setIsolines( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setIsolines(class PyDbDatabase {lvalue},short)'''
    ...
    def setJoinStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setJoinStyle( (Database)arg1, (JoinStyle)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setJoinStyle(class PyDbDatabase {lvalue},enum AcDb::JoinStyle)'''
    ...
    def setLatitude (self, *args, **kwargs)-> ErrorStatus :
      '''setLatitude( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLatitude(class PyDbDatabase {lvalue},double)'''
    ...
    def setLayerEval (self, *args, **kwargs)-> ErrorStatus :
      '''setLayerEval( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayerEval(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setLayerNotify (self, *args, **kwargs)-> ErrorStatus :
      '''setLayerNotify( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayerNotify(class PyDbDatabase {lvalue},short)'''
    ...
    def setLensLength (self, *args, **kwargs)-> ErrorStatus :
      '''setLensLength( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLensLength(class PyDbDatabase {lvalue},double)'''
    ...
    def setLightGlyphDisplay (self, *args, **kwargs)-> ErrorStatus :
      '''setLightGlyphDisplay( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLightGlyphDisplay(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setLightingUnits (self, *args, **kwargs)-> ErrorStatus :
      '''setLightingUnits( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLightingUnits(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setLightsInBlocks (self, *args, **kwargs)-> ErrorStatus :
      '''setLightsInBlocks( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLightsInBlocks(class PyDbDatabase {lvalue},bool)'''
    ...
    def setLimcheck (self, *args, **kwargs)-> ErrorStatus :
      '''setLimcheck( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLimcheck(class PyDbDatabase {lvalue},bool)'''
    ...
    def setLimmax (self, *args, **kwargs)-> ErrorStatus :
      '''setLimmax( (Database)arg1, (Point2d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLimmax(class PyDbDatabase {lvalue},class AcGePoint2d)'''
    ...
    def setLimmin (self, *args, **kwargs)-> ErrorStatus :
      '''setLimmin( (Database)arg1, (Point2d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLimmin(class PyDbDatabase {lvalue},class AcGePoint2d)'''
    ...
    def setLineWeightDisplay (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeightDisplay( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeightDisplay(class PyDbDatabase {lvalue},bool)'''
    ...
    def setLoftAng1 (self, *args, **kwargs)-> ErrorStatus :
      '''setLoftAng1( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLoftAng1(class PyDbDatabase {lvalue},double)'''
    ...
    def setLoftAng2 (self, *args, **kwargs)-> ErrorStatus :
      '''setLoftAng2( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLoftAng2(class PyDbDatabase {lvalue},double)'''
    ...
    def setLoftMag1 (self, *args, **kwargs)-> ErrorStatus :
      '''setLoftMag1( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLoftMag1(class PyDbDatabase {lvalue},double)'''
    ...
    def setLoftMag2 (self, *args, **kwargs)-> ErrorStatus :
      '''setLoftMag2( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLoftMag2(class PyDbDatabase {lvalue},double)'''
    ...
    def setLoftNormals (self, *args, **kwargs)-> ErrorStatus :
      '''setLoftNormals( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLoftNormals(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setLoftParam (self, *args, **kwargs)-> ErrorStatus :
      '''setLoftParam( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLoftParam(class PyDbDatabase {lvalue},unsigned short)'''
    ...
    def setLongitude (self, *args, **kwargs)-> ErrorStatus :
      '''setLongitude( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLongitude(class PyDbDatabase {lvalue},double)'''
    ...
    def setLtscale (self, *args, **kwargs)-> ErrorStatus :
      '''setLtscale( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLtscale(class PyDbDatabase {lvalue},double)'''
    ...
    def setLunits (self, *args, **kwargs)-> ErrorStatus :
      '''setLunits( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLunits(class PyDbDatabase {lvalue},short)'''
    ...
    def setLuprec (self, *args, **kwargs)-> ErrorStatus :
      '''setLuprec( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLuprec(class PyDbDatabase {lvalue},short)'''
    ...
    def setMLeaderscale (self, *args, **kwargs)-> ErrorStatus :
      '''setMLeaderscale( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMLeaderscale(class PyDbDatabase {lvalue},double)'''
    ...
    def setMLeaderstyle (self, *args, **kwargs)-> ErrorStatus :
      '''setMLeaderstyle( (Database)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMLeaderstyle(class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def setMaxactvp (self, *args, **kwargs)-> ErrorStatus :
      '''setMaxactvp( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaxactvp(class PyDbDatabase {lvalue},short)'''
    ...
    def setMeasurement (self, *args, **kwargs)-> ErrorStatus :
      '''setMeasurement( (Database)arg1, (MeasurementValue)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMeasurement(class PyDbDatabase {lvalue},enum AcDb::MeasurementValue)'''
    ...
    def setMirrtext (self, *args, **kwargs)-> ErrorStatus :
      '''setMirrtext( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMirrtext(class PyDbDatabase {lvalue},bool)'''
    ...
    def setMsOleScale (self, *args, **kwargs)-> ErrorStatus :
      '''setMsOleScale( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMsOleScale(class PyDbDatabase {lvalue},double)'''
    ...
    def setMsltscale (self, *args, **kwargs)-> ErrorStatus :
      '''setMsltscale( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMsltscale(class PyDbDatabase {lvalue},bool)'''
    ...
    def setNorthDirection (self, *args, **kwargs)-> ErrorStatus :
      '''setNorthDirection( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNorthDirection(class PyDbDatabase {lvalue},double)'''
    ...
    def setObscuredColor (self, *args, **kwargs)-> ErrorStatus :
      '''setObscuredColor( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setObscuredColor(class PyDbDatabase {lvalue},unsigned short)'''
    ...
    def setObscuredLineType (self, *args, **kwargs)-> ErrorStatus :
      '''setObscuredLineType( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setObscuredLineType(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setOleStartUp (self, *args, **kwargs)-> ErrorStatus :
      '''setOleStartUp( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOleStartUp(class PyDbDatabase {lvalue},bool)'''
    ...
    def setOrthomode (self, *args, **kwargs)-> ErrorStatus :
      '''setOrthomode( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOrthomode(class PyDbDatabase {lvalue},bool)'''
    ...
    def setPdfframe (self, *args, **kwargs)-> ErrorStatus :
      '''setPdfframe( (Database)arg1, (MlineJustification)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPdfframe(class PyDbDatabase {lvalue},signed char)'''
    ...
    def setPdmode (self, *args, **kwargs)-> ErrorStatus :
      '''setPdmode( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPdmode(class PyDbDatabase {lvalue},short)'''
    ...
    def setPdsize (self, *args, **kwargs)-> ErrorStatus :
      '''setPdsize( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPdsize(class PyDbDatabase {lvalue},double)'''
    ...
    def setPelevation (self, *args, **kwargs)-> ErrorStatus :
      '''setPelevation( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPelevation(class PyDbDatabase {lvalue},double)'''
    ...
    def setPextmax (self, *args, **kwargs)-> ErrorStatus :
      '''setPextmax( (Database)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPextmax(class PyDbDatabase {lvalue},class AcGePoint3d)'''
    ...
    def setPextmin (self, *args, **kwargs)-> ErrorStatus :
      '''setPextmin( (Database)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPextmin(class PyDbDatabase {lvalue},class AcGePoint3d)'''
    ...
    def setPickstyle (self, *args, **kwargs)-> ErrorStatus :
      '''setPickstyle( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPickstyle(class PyDbDatabase {lvalue},short)'''
    ...
    def setPinsbase (self, *args, **kwargs)-> ErrorStatus :
      '''setPinsbase( (Database)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPinsbase(class PyDbDatabase {lvalue},class AcGePoint3d)'''
    ...
    def setPlimcheck (self, *args, **kwargs)-> ErrorStatus :
      '''setPlimcheck( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlimcheck(class PyDbDatabase {lvalue},bool)'''
    ...
    def setPlimmax (self, *args, **kwargs)-> ErrorStatus :
      '''setPlimmax( (Database)arg1, (Point2d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlimmax(class PyDbDatabase {lvalue},class AcGePoint2d)'''
    ...
    def setPlimmin (self, *args, **kwargs)-> ErrorStatus :
      '''setPlimmin( (Database)arg1, (Point2d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlimmin(class PyDbDatabase {lvalue},class AcGePoint2d)'''
    ...
    def setPlineEllipse (self, *args, **kwargs)-> ErrorStatus :
      '''setPlineEllipse( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlineEllipse(class PyDbDatabase {lvalue},bool)'''
    ...
    def setPlinegen (self, *args, **kwargs)-> ErrorStatus :
      '''setPlinegen( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlinegen(class PyDbDatabase {lvalue},bool)'''
    ...
    def setPlinewid (self, *args, **kwargs)-> ErrorStatus :
      '''setPlinewid( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlinewid(class PyDbDatabase {lvalue},double)'''
    ...
    def setPreviewType (self, *args, **kwargs)-> ErrorStatus :
      '''setPreviewType( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPreviewType(class PyDbDatabase {lvalue},short)'''
    ...
    def setProjectName (self, *args, **kwargs)-> ErrorStatus :
      '''setProjectName( (Database)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setProjectName(class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPsltscale (self, *args, **kwargs)-> ErrorStatus :
      '''setPsltscale( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPsltscale(class PyDbDatabase {lvalue},bool)'''
    ...
    def setPsolHeight (self, *args, **kwargs)-> ErrorStatus :
      '''setPsolHeight( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPsolHeight(class PyDbDatabase {lvalue},double)'''
    ...
    def setPsolWidth (self, *args, **kwargs)-> ErrorStatus :
      '''setPsolWidth( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPsolWidth(class PyDbDatabase {lvalue},double)'''
    ...
    def setPucs (self, *args, **kwargs)-> ErrorStatus :
      '''setPucs( (Database)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPucs(class PyDbDatabase {lvalue},class AcGePoint3d,class AcGeVector3d,class AcGeVector3d)'''
    ...
    def setPucsBase (self, *args, **kwargs)-> ErrorStatus :
      '''setPucsBase( (Database)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPucsBase(class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def setPucsname (self, *args, **kwargs)-> ErrorStatus :
      '''setPucsname( (Database)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPucsname(class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def setQtextmode (self, *args, **kwargs)-> ErrorStatus :
      '''setQtextmode( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setQtextmode(class PyDbDatabase {lvalue},bool)'''
    ...
    def setRealWorldScale (self, *args, **kwargs)-> ErrorStatus :
      '''setRealWorldScale( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRealWorldScale(class PyDbDatabase {lvalue},bool)'''
    ...
    def setRegenmode (self, *args, **kwargs)-> ErrorStatus :
      '''setRegenmode( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRegenmode(class PyDbDatabase {lvalue},bool)'''
    ...
    def setRetainOriginalThumbnailBitmap (self, *args, **kwargs)-> None :
      '''setRetainOriginalThumbnailBitmap( (Database)arg1, (bool)arg2) -> None :

    C++ signature :
        void setRetainOriginalThumbnailBitmap(class PyDbDatabase {lvalue},bool)'''
    ...
    def setSaveproxygraphics (self, *args, **kwargs)-> ErrorStatus :
      '''setSaveproxygraphics( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSaveproxygraphics(class PyDbDatabase {lvalue},short)'''
    ...
    def setSectionViewStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setSectionViewStyle( (Database)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSectionViewStyle(class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def setShadedge (self, *args, **kwargs)-> ErrorStatus :
      '''setShadedge( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setShadedge(class PyDbDatabase {lvalue},short)'''
    ...
    def setShadedif (self, *args, **kwargs)-> ErrorStatus :
      '''setShadedif( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setShadedif(class PyDbDatabase {lvalue},short)'''
    ...
    def setShadowPlaneLocation (self, *args, **kwargs)-> ErrorStatus :
      '''setShadowPlaneLocation( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setShadowPlaneLocation(class PyDbDatabase {lvalue},double)'''
    ...
    def setShowHist (self, *args, **kwargs)-> ErrorStatus :
      '''setShowHist( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setShowHist(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setSketchinc (self, *args, **kwargs)-> ErrorStatus :
      '''setSketchinc( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSketchinc(class PyDbDatabase {lvalue},double)'''
    ...
    def setSkpoly (self, *args, **kwargs)-> ErrorStatus :
      '''setSkpoly( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSkpoly(class PyDbDatabase {lvalue},bool)'''
    ...
    def setSolidHist (self, *args, **kwargs)-> ErrorStatus :
      '''setSolidHist( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSolidHist(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setSortEnts (self, *args, **kwargs)-> ErrorStatus :
      '''setSortEnts( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSortEnts(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setSplframe (self, *args, **kwargs)-> ErrorStatus :
      '''setSplframe( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSplframe(class PyDbDatabase {lvalue},bool)'''
    ...
    def setSplinesegs (self, *args, **kwargs)-> ErrorStatus :
      '''setSplinesegs( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSplinesegs(class PyDbDatabase {lvalue},short)'''
    ...
    def setSplinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setSplinetype( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSplinetype(class PyDbDatabase {lvalue},short)'''
    ...
    def setStepSize (self, *args, **kwargs)-> ErrorStatus :
      '''setStepSize( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setStepSize(class PyDbDatabase {lvalue},double)'''
    ...
    def setStepsPerSec (self, *args, **kwargs)-> ErrorStatus :
      '''setStepsPerSec( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setStepsPerSec(class PyDbDatabase {lvalue},double)'''
    ...
    def setStyleSheet (self, *args, **kwargs)-> ErrorStatus :
      '''setStyleSheet( (Database)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setStyleSheet(class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setSurftab1 (self, *args, **kwargs)-> ErrorStatus :
      '''setSurftab1( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSurftab1(class PyDbDatabase {lvalue},short)'''
    ...
    def setSurftab2 (self, *args, **kwargs)-> ErrorStatus :
      '''setSurftab2( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSurftab2(class PyDbDatabase {lvalue},short)'''
    ...
    def setSurftype (self, *args, **kwargs)-> ErrorStatus :
      '''setSurftype( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSurftype(class PyDbDatabase {lvalue},short)'''
    ...
    def setSurfu (self, *args, **kwargs)-> ErrorStatus :
      '''setSurfu( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSurfu(class PyDbDatabase {lvalue},short)'''
    ...
    def setSurfv (self, *args, **kwargs)-> ErrorStatus :
      '''setSurfv( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSurfv(class PyDbDatabase {lvalue},short)'''
    ...
    def setTStackAlign (self, *args, **kwargs)-> ErrorStatus :
      '''setTStackAlign( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTStackAlign(class PyDbDatabase {lvalue},int)'''
    ...
    def setTStackSize (self, *args, **kwargs)-> ErrorStatus :
      '''setTStackSize( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTStackSize(class PyDbDatabase {lvalue},int)'''
    ...
    def setTablestyle (self, *args, **kwargs)-> ErrorStatus :
      '''setTablestyle( (Database)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTablestyle(class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def setTextsize (self, *args, **kwargs)-> ErrorStatus :
      '''setTextsize( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextsize(class PyDbDatabase {lvalue},double)'''
    ...
    def setTextstyle (self, *args, **kwargs)-> ErrorStatus :
      '''setTextstyle( (Database)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextstyle(class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def setThickness (self, *args, **kwargs)-> ErrorStatus :
      '''setThickness( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setThickness(class PyDbDatabase {lvalue},double)'''
    ...
    def setTilemode (self, *args, **kwargs)-> ErrorStatus :
      '''setTilemode( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTilemode(class PyDbDatabase {lvalue},bool)'''
    ...
    def setTimeZone (self, *args, **kwargs)-> ErrorStatus :
      '''setTimeZone( (Database)arg1, (object)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTimeZone(class PyDbDatabase {lvalue},enum AcDb::TimeZone)'''
    ...
    def setTimeZoneAsUtcOffset (self, *args, **kwargs)-> ErrorStatus :
      '''setTimeZoneAsUtcOffset( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTimeZoneAsUtcOffset(class PyDbDatabase {lvalue},double)'''
    ...
    def setTracewid (self, *args, **kwargs)-> ErrorStatus :
      '''setTracewid( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTracewid(class PyDbDatabase {lvalue},double)'''
    ...
    def setTreedepth (self, *args, **kwargs)-> ErrorStatus :
      '''setTreedepth( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTreedepth(class PyDbDatabase {lvalue},short)'''
    ...
    def setUcs (self, *args, **kwargs)-> ErrorStatus :
      '''setUcs( (Database)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUcs(class PyDbDatabase {lvalue},class AcGePoint3d,class AcGeVector3d,class AcGeVector3d)'''
    ...
    def setUcsBase (self, *args, **kwargs)-> ErrorStatus :
      '''setUcsBase( (Database)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUcsBase(class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def setUcsname (self, *args, **kwargs)-> ErrorStatus :
      '''setUcsname( (Database)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUcsname(class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def setUnitmode (self, *args, **kwargs)-> ErrorStatus :
      '''setUnitmode( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUnitmode(class PyDbDatabase {lvalue},short)'''
    ...
    def setUpdateThumbnail (self, *args, **kwargs)-> ErrorStatus :
      '''setUpdateThumbnail( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUpdateThumbnail(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setUseri1 (self, *args, **kwargs)-> ErrorStatus :
      '''setUseri1( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUseri1(class PyDbDatabase {lvalue},short)'''
    ...
    def setUseri2 (self, *args, **kwargs)-> ErrorStatus :
      '''setUseri2( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUseri2(class PyDbDatabase {lvalue},short)'''
    ...
    def setUseri3 (self, *args, **kwargs)-> ErrorStatus :
      '''setUseri3( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUseri3(class PyDbDatabase {lvalue},short)'''
    ...
    def setUseri4 (self, *args, **kwargs)-> ErrorStatus :
      '''setUseri4( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUseri4(class PyDbDatabase {lvalue},short)'''
    ...
    def setUseri5 (self, *args, **kwargs)-> ErrorStatus :
      '''setUseri5( (Database)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUseri5(class PyDbDatabase {lvalue},short)'''
    ...
    def setUserr1 (self, *args, **kwargs)-> ErrorStatus :
      '''setUserr1( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUserr1(class PyDbDatabase {lvalue},double)'''
    ...
    def setUserr2 (self, *args, **kwargs)-> ErrorStatus :
      '''setUserr2( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUserr2(class PyDbDatabase {lvalue},double)'''
    ...
    def setUserr3 (self, *args, **kwargs)-> ErrorStatus :
      '''setUserr3( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUserr3(class PyDbDatabase {lvalue},double)'''
    ...
    def setUserr4 (self, *args, **kwargs)-> ErrorStatus :
      '''setUserr4( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUserr4(class PyDbDatabase {lvalue},double)'''
    ...
    def setUserr5 (self, *args, **kwargs)-> ErrorStatus :
      '''setUserr5( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUserr5(class PyDbDatabase {lvalue},double)'''
    ...
    def setUsrtimer (self, *args, **kwargs)-> ErrorStatus :
      '''setUsrtimer( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUsrtimer(class PyDbDatabase {lvalue},bool)'''
    ...
    def setVersionGuid (self, *args, **kwargs)-> ErrorStatus :
      '''setVersionGuid( (Database)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVersionGuid(class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setViewportScaleDefault (self, *args, **kwargs)-> ErrorStatus :
      '''setViewportScaleDefault( (Database)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setViewportScaleDefault(class PyDbDatabase {lvalue},double)'''
    ...
    def setVisretain (self, *args, **kwargs)-> ErrorStatus :
      '''setVisretain( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisretain(class PyDbDatabase {lvalue},bool)'''
    ...
    def setWorldPucsBaseOrigin (self, *args, **kwargs)-> ErrorStatus :
      '''setWorldPucsBaseOrigin( (Database)arg1, (Point3d)arg2, (OrthographicView)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setWorldPucsBaseOrigin(class PyDbDatabase {lvalue},class AcGePoint3d,enum AcDb::OrthographicView)'''
    ...
    def setWorldUcsBaseOrigin (self, *args, **kwargs)-> ErrorStatus :
      '''setWorldUcsBaseOrigin( (Database)arg1, (Point3d)arg2, (OrthographicView)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setWorldUcsBaseOrigin(class PyDbDatabase {lvalue},class AcGePoint3d,enum AcDb::OrthographicView)'''
    ...
    def setWorldview (self, *args, **kwargs)-> ErrorStatus :
      '''setWorldview( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setWorldview(class PyDbDatabase {lvalue},bool)'''
    ...
    def setXclipFrame (self, *args, **kwargs)-> ErrorStatus :
      '''setXclipFrame( (Database)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXclipFrame(class PyDbDatabase {lvalue},unsigned char)'''
    ...
    def setXrefEditEnabled (self, *args, **kwargs)-> ErrorStatus :
      '''setXrefEditEnabled( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXrefEditEnabled(class PyDbDatabase {lvalue},bool)'''
    ...
    def shadedge (self, *args, **kwargs)-> int :
      '''shadedge( (Database)arg1) -> int :

    C++ signature :
        short shadedge(class PyDbDatabase {lvalue})'''
    ...
    def shadedif (self, *args, **kwargs)-> int :
      '''shadedif( (Database)arg1) -> int :

    C++ signature :
        short shadedif(class PyDbDatabase {lvalue})'''
    ...
    def shadowPlaneLocation (self, *args, **kwargs)-> float :
      '''shadowPlaneLocation( (Database)arg1) -> float :

    C++ signature :
        double shadowPlaneLocation(class PyDbDatabase {lvalue})'''
    ...
    def showHist (self, *args, **kwargs)-> int :
      '''showHist( (Database)arg1) -> int :

    C++ signature :
        unsigned char showHist(class PyDbDatabase {lvalue})'''
    ...
    def sketchinc (self, *args, **kwargs)-> float :
      '''sketchinc( (Database)arg1) -> float :

    C++ signature :
        double sketchinc(class PyDbDatabase {lvalue})'''
    ...
    def skpoly (self, *args, **kwargs)-> bool :
      '''skpoly( (Database)arg1) -> bool :

    C++ signature :
        bool skpoly(class PyDbDatabase {lvalue})'''
    ...
    def solidHist (self, *args, **kwargs)-> int :
      '''solidHist( (Database)arg1) -> int :

    C++ signature :
        unsigned char solidHist(class PyDbDatabase {lvalue})'''
    ...
    def sortEnts (self, *args, **kwargs)-> int :
      '''sortEnts( (Database)arg1) -> int :

    C++ signature :
        unsigned char sortEnts(class PyDbDatabase {lvalue})'''
    ...
    def splframe (self, *args, **kwargs)-> bool :
      '''splframe( (Database)arg1) -> bool :

    C++ signature :
        bool splframe(class PyDbDatabase {lvalue})'''
    ...
    def splinesegs (self, *args, **kwargs)-> int :
      '''splinesegs( (Database)arg1) -> int :

    C++ signature :
        short splinesegs(class PyDbDatabase {lvalue})'''
    ...
    def splinetype (self, *args, **kwargs)-> int :
      '''splinetype( (Database)arg1) -> int :

    C++ signature :
        short splinetype(class PyDbDatabase {lvalue})'''
    ...
    def stepSize (self, *args, **kwargs)-> float :
      '''stepSize( (Database)arg1) -> float :

    C++ signature :
        double stepSize(class PyDbDatabase {lvalue})'''
    ...
    def stepsPerSec (self, *args, **kwargs)-> float :
      '''stepsPerSec( (Database)arg1) -> float :

    C++ signature :
        double stepsPerSec(class PyDbDatabase {lvalue})'''
    ...
    def surftab1 (self, *args, **kwargs)-> int :
      '''surftab1( (Database)arg1) -> int :

    C++ signature :
        short surftab1(class PyDbDatabase {lvalue})'''
    ...
    def surftab2 (self, *args, **kwargs)-> int :
      '''surftab2( (Database)arg1) -> int :

    C++ signature :
        short surftab2(class PyDbDatabase {lvalue})'''
    ...
    def surftype (self, *args, **kwargs)-> int :
      '''surftype( (Database)arg1) -> int :

    C++ signature :
        short surftype(class PyDbDatabase {lvalue})'''
    ...
    def surfu (self, *args, **kwargs)-> int :
      '''surfu( (Database)arg1) -> int :

    C++ signature :
        short surfu(class PyDbDatabase {lvalue})'''
    ...
    def surfv (self, *args, **kwargs)-> int :
      '''surfv( (Database)arg1) -> int :

    C++ signature :
        short surfv(class PyDbDatabase {lvalue})'''
    ...
    def tableStyleDictionaryId (self, *args, **kwargs)-> ObjectId :
      '''tableStyleDictionaryId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId tableStyleDictionaryId(class PyDbDatabase {lvalue})'''
    ...
    def tablestyle (self, *args, **kwargs)-> ObjectId :
      '''tablestyle( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId tablestyle(class PyDbDatabase {lvalue})'''
    ...
    def textStyleTableId (self, *args, **kwargs)-> ObjectId :
      '''textStyleTableId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyleTableId(class PyDbDatabase {lvalue})'''
    ...
    def textsize (self, *args, **kwargs)-> float :
      '''textsize( (Database)arg1) -> float :

    C++ signature :
        double textsize(class PyDbDatabase {lvalue})'''
    ...
    def textstyle (self, *args, **kwargs)-> ObjectId :
      '''textstyle( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId textstyle(class PyDbDatabase {lvalue})'''
    ...
    def thickness (self, *args, **kwargs)-> float :
      '''thickness( (Database)arg1) -> float :

    C++ signature :
        double thickness(class PyDbDatabase {lvalue})'''
    ...
    def tileModeLightSynch (self, *args, **kwargs)-> int :
      '''tileModeLightSynch( (Database)arg1) -> int :

    C++ signature :
        unsigned char tileModeLightSynch(class PyDbDatabase {lvalue})'''
    ...
    def tilemode (self, *args, **kwargs)-> bool :
      '''tilemode( (Database)arg1) -> bool :

    C++ signature :
        bool tilemode(class PyDbDatabase {lvalue})'''
    ...
    def timeZone (self, *args, **kwargs)-> int :
      '''timeZone( (Database)arg1) -> int :

    C++ signature :
        int timeZone(class PyDbDatabase {lvalue})'''
    ...
    def tracewid (self, *args, **kwargs)-> float :
      '''tracewid( (Database)arg1) -> float :

    C++ signature :
        double tracewid(class PyDbDatabase {lvalue})'''
    ...
    def transactionManager (self, *args, **kwargs)-> TransactionManager :
      '''transactionManager( (Database)arg1) -> TransactionManager :

    C++ signature :
        class PyDbTransactionManager transactionManager(class PyDbDatabase {lvalue})'''
    ...
    def treedepth (self, *args, **kwargs)-> int :
      '''treedepth( (Database)arg1) -> int :

    C++ signature :
        short treedepth(class PyDbDatabase {lvalue})'''
    ...
    def tstackalign (self, *args, **kwargs)-> int :
      '''tstackalign( (Database)arg1) -> int :

    C++ signature :
        int tstackalign(class PyDbDatabase {lvalue})'''
    ...
    def tstacksize (self, *args, **kwargs)-> int :
      '''tstacksize( (Database)arg1) -> int :

    C++ signature :
        int tstacksize(class PyDbDatabase {lvalue})'''
    ...
    def ucsBase (self, *args, **kwargs)-> ObjectId :
      '''ucsBase( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ucsBase(class PyDbDatabase {lvalue})'''
    ...
    def ucsname (self, *args, **kwargs)-> ObjectId :
      '''ucsname( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ucsname(class PyDbDatabase {lvalue})'''
    ...
    def ucsorg (self, *args, **kwargs)-> Point3d :
      '''ucsorg( (Database)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d ucsorg(class PyDbDatabase {lvalue})'''
    ...
    def ucsxdir (self, *args, **kwargs)-> Vector3d :
      '''ucsxdir( (Database)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d ucsxdir(class PyDbDatabase {lvalue})'''
    ...
    def ucsydir (self, *args, **kwargs)-> Vector3d :
      '''ucsydir( (Database)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d ucsydir(class PyDbDatabase {lvalue})'''
    ...
    def undoRecording (self, *args, **kwargs)-> bool :
      '''undoRecording( (Database)arg1) -> bool :

    C++ signature :
        bool undoRecording(class PyDbDatabase {lvalue})'''
    ...
    def unitmode (self, *args, **kwargs)-> int :
      '''unitmode( (Database)arg1) -> int :

    C++ signature :
        short unitmode(class PyDbDatabase {lvalue})'''
    ...
    def updateDataLink (self, *args, **kwargs)-> ErrorStatus :
      '''updateDataLink( (Database)arg1, (UpdateDirection)arg2, (UpdateOption)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus updateDataLink(class PyDbDatabase {lvalue},enum AcDb::UpdateDirection,enum AcDb::UpdateOption)'''
    ...
    def updateExt (self, *args, **kwargs)-> ErrorStatus :
      '''updateExt( (Database)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus updateExt(class PyDbDatabase {lvalue},bool)'''
    ...
    def updateThumbnail (self, *args, **kwargs)-> int :
      '''updateThumbnail( (Database)arg1) -> int :

    C++ signature :
        unsigned char updateThumbnail(class PyDbDatabase {lvalue})'''
    ...
    def useri1 (self, *args, **kwargs)-> int :
      '''useri1( (Database)arg1) -> int :

    C++ signature :
        short useri1(class PyDbDatabase {lvalue})'''
    ...
    def useri2 (self, *args, **kwargs)-> int :
      '''useri2( (Database)arg1) -> int :

    C++ signature :
        short useri2(class PyDbDatabase {lvalue})'''
    ...
    def useri3 (self, *args, **kwargs)-> int :
      '''useri3( (Database)arg1) -> int :

    C++ signature :
        short useri3(class PyDbDatabase {lvalue})'''
    ...
    def useri4 (self, *args, **kwargs)-> int :
      '''useri4( (Database)arg1) -> int :

    C++ signature :
        short useri4(class PyDbDatabase {lvalue})'''
    ...
    def useri5 (self, *args, **kwargs)-> int :
      '''useri5( (Database)arg1) -> int :

    C++ signature :
        short useri5(class PyDbDatabase {lvalue})'''
    ...
    def userr1 (self, *args, **kwargs)-> float :
      '''userr1( (Database)arg1) -> float :

    C++ signature :
        double userr1(class PyDbDatabase {lvalue})'''
    ...
    def userr2 (self, *args, **kwargs)-> float :
      '''userr2( (Database)arg1) -> float :

    C++ signature :
        double userr2(class PyDbDatabase {lvalue})'''
    ...
    def userr3 (self, *args, **kwargs)-> float :
      '''userr3( (Database)arg1) -> float :

    C++ signature :
        double userr3(class PyDbDatabase {lvalue})'''
    ...
    def userr4 (self, *args, **kwargs)-> float :
      '''userr4( (Database)arg1) -> float :

    C++ signature :
        double userr4(class PyDbDatabase {lvalue})'''
    ...
    def userr5 (self, *args, **kwargs)-> float :
      '''userr5( (Database)arg1) -> float :

    C++ signature :
        double userr5(class PyDbDatabase {lvalue})'''
    ...
    def usrtimer (self, *args, **kwargs)-> bool :
      '''usrtimer( (Database)arg1) -> bool :

    C++ signature :
        bool usrtimer(class PyDbDatabase {lvalue})'''
    ...
    def viewTableId (self, *args, **kwargs)-> ObjectId :
      '''viewTableId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId viewTableId(class PyDbDatabase {lvalue})'''
    ...
    def viewportScaleDefault (self, *args, **kwargs)-> float :
      '''viewportScaleDefault( (Database)arg1) -> float :

    C++ signature :
        double viewportScaleDefault(class PyDbDatabase {lvalue})'''
    ...
    def viewportTableId (self, *args, **kwargs)-> ObjectId :
      '''viewportTableId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId viewportTableId(class PyDbDatabase {lvalue})'''
    ...
    def visretain (self, *args, **kwargs)-> bool :
      '''visretain( (Database)arg1) -> bool :

    C++ signature :
        bool visretain(class PyDbDatabase {lvalue})'''
    ...
    def visualStyleDictionaryId (self, *args, **kwargs)-> ObjectId :
      '''visualStyleDictionaryId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId visualStyleDictionaryId(class PyDbDatabase {lvalue})'''
    ...
    def wblock (self, *args, **kwargs)-> ErrorStatus :
      '''wblock( (Database)arg1, (Database)arg2, (list)arg3, (Point3d)arg4 [, (DuplicateRecordCloning)arg5]) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus wblock(class PyDbDatabase {lvalue},class PyDbDatabase {lvalue},class boost::python::list,class AcGePoint3d [,enum AcDb::DuplicateRecordCloning])

wblock( (Database)arg1, (Database)arg2 [, (ObjectId)arg3]) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus wblock(class PyDbDatabase {lvalue},class PyDbDatabase {lvalue} [,class PyDbObjectId])'''
    ...
    def worldPucsBaseOrigin (self, *args, **kwargs)-> Point3d :
      '''worldPucsBaseOrigin( (Database)arg1, (OrthographicView)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d worldPucsBaseOrigin(class PyDbDatabase {lvalue},enum AcDb::OrthographicView)'''
    ...
    def worldUcsBaseOrigin (self, *args, **kwargs)-> Point3d :
      '''worldUcsBaseOrigin( (Database)arg1, (OrthographicView)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d worldUcsBaseOrigin(class PyDbDatabase {lvalue},enum AcDb::OrthographicView)'''
    ...
    def worldview (self, *args, **kwargs)-> bool :
      '''worldview( (Database)arg1) -> bool :

    C++ signature :
        bool worldview(class PyDbDatabase {lvalue})'''
    ...
    def xclipFrame (self, *args, **kwargs)-> int :
      '''xclipFrame( (Database)arg1) -> int :

    C++ signature :
        unsigned char xclipFrame(class PyDbDatabase {lvalue})'''
    ...
    def xrefBlockId (self, *args, **kwargs)-> ObjectId :
      '''xrefBlockId( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId xrefBlockId(class PyDbDatabase {lvalue})'''
    ...
    def xrefEditEnabled (self, *args, **kwargs)-> bool :
      '''xrefEditEnabled( (Database)arg1) -> bool :

    C++ signature :
        bool xrefEditEnabled(class PyDbDatabase {lvalue})'''
    ...

class DbObject:
    def __init__ (self: DbObject,id: ObjectId,mode: OpenMode)-> None :
      '''                             '''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast ()-> DbObject :
      '''                             '''
    ...
    def className ()-> str :
      '''                             '''
    ...
    def cloneFrom ()-> DbObject :
      '''                             '''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc ()-> RxClass :
      '''                             '''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class DiametricDimension:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (float)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,double)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (float)arg4, (str)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (float)arg4, (str)arg5, (ObjectId)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def altSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def alternatePrefix (self, *args, **kwargs)-> str :
      '''alternatePrefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternatePrefix(class PyDbDimension {lvalue})'''
    ...
    def alternateSuffix (self, *args, **kwargs)-> str :
      '''alternateSuffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternateSuffix(class PyDbDimension {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def blockTransform (self, *args, **kwargs)-> Matrix3d :
      '''blockTransform( (Dimension)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbDimension {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> DiametricDimension :
      '''cast( (RxObject)arg1) -> DiametricDimension :

    C++ signature :
        class PyDbDiametricDimension cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def centerMarkSize (self, *args, **kwargs)-> float :
      '''centerMarkSize( (Dimension)arg1) -> float :

    C++ signature :
        double centerMarkSize(class PyDbDimension {lvalue})'''
    ...
    def chordPoint (self, *args, **kwargs)-> Point3d :
      '''chordPoint( (DiametricDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d chordPoint(class PyDbDiametricDimension {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> DiametricDimension :
      '''cloneFrom( (RxObject)arg1) -> DiametricDimension :

    C++ signature :
        class PyDbDiametricDimension cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self, *args, **kwargs)-> ObjectId :
      '''dimBlockId( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimBlockId(class PyDbDimension {lvalue})'''
    ...
    def dimBlockPosition (self, *args, **kwargs)-> Point3d :
      '''dimBlockPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimBlockPosition(class PyDbDimension {lvalue})'''
    ...
    def dimExt1Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt1Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt1Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimExt2Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt2Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt2Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimLineLinetype (self, *args, **kwargs)-> ObjectId :
      '''dimLineLinetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimLineLinetype(class PyDbDimension {lvalue})'''
    ...
    def dimensionStyle (self, *args, **kwargs)-> ObjectId :
      '''dimensionStyle( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimensionStyle(class PyDbDimension {lvalue})'''
    ...
    def dimensionText (self, *args, **kwargs)-> str :
      '''dimensionText( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dimensionText(class PyDbDimension {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def elevation (self, *args, **kwargs)-> float :
      '''elevation( (Dimension)arg1) -> float :

    C++ signature :
        double elevation(class PyDbDimension {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extArcEndAngle (self, *args, **kwargs)-> float :
      '''extArcEndAngle( (DiametricDimension)arg1) -> float :

    C++ signature :
        double extArcEndAngle(class PyDbDiametricDimension {lvalue})'''
    ...
    def extArcStartAngle (self, *args, **kwargs)-> float :
      '''extArcStartAngle( (DiametricDimension)arg1) -> float :

    C++ signature :
        double extArcStartAngle(class PyDbDiametricDimension {lvalue})'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def farChordPoint (self, *args, **kwargs)-> Point3d :
      '''farChordPoint( (DiametricDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d farChordPoint(class PyDbDiametricDimension {lvalue})'''
    ...
    def fieldFromMText (self, *args, **kwargs)-> ErrorStatus :
      '''fieldFromMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldFromMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def fieldToMText (self, *args, **kwargs)-> ErrorStatus :
      '''fieldToMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldToMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self, *args, **kwargs)-> ErrorStatus :
      '''generateLayout( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus generateLayout(class PyDbDimension {lvalue})'''
    ...
    def getArrowFirstIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowFirstIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowFirstIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getArrowSecondIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowSecondIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowSecondIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDimstyleData (self, *args, **kwargs)-> DimStyleTableRecord :
      '''getDimstyleData( (Dimension)arg1) -> DimStyleTableRecord :

    C++ signature :
        class PyDbDimStyleTableRecord getDimstyleData(class PyDbDimension {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def horizontalRotation (self, *args, **kwargs)-> float :
      '''horizontalRotation( (Dimension)arg1) -> float :

    C++ signature :
        double horizontalRotation(class PyDbDimension {lvalue})'''
    ...
    def inspection (self, *args, **kwargs)-> bool :
      '''inspection( (Dimension)arg1) -> bool :

    C++ signature :
        bool inspection(class PyDbDimension {lvalue})'''
    ...
    def inspectionFrame (self, *args, **kwargs)-> int :
      '''inspectionFrame( (Dimension)arg1) -> int :

    C++ signature :
        int inspectionFrame(class PyDbDimension {lvalue})'''
    ...
    def inspectionLabel (self, *args, **kwargs)-> str :
      '''inspectionLabel( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > inspectionLabel(class PyDbDimension {lvalue})'''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self, *args, **kwargs)-> bool :
      '''isConstraintDynamic( (Dimension)arg1) -> bool :

    C++ signature :
        bool isConstraintDynamic(class PyDbDimension {lvalue})'''
    ...
    def isConstraintObject (self, *args, **kwargs)-> tuple :
      '''isConstraintObject( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isConstraintObject(class PyDbDimension {lvalue})'''
    ...
    def isDynamicDimension (self, *args, **kwargs)-> bool :
      '''isDynamicDimension( (Dimension)arg1) -> bool :

    C++ signature :
        bool isDynamicDimension(class PyDbDimension {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self, *args, **kwargs)-> bool :
      '''isHorizontalRefTextRotation( (Dimension)arg1) -> bool :

    C++ signature :
        bool isHorizontalRefTextRotation(class PyDbDimension {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self, *args, **kwargs)-> bool :
      '''isUsingDefaultTextPosition( (Dimension)arg1) -> bool :

    C++ signature :
        bool isUsingDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def leaderLength (self, *args, **kwargs)-> float :
      '''leaderLength( (DiametricDimension)arg1) -> float :

    C++ signature :
        double leaderLength(class PyDbDiametricDimension {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def measurement (self, *args, **kwargs)-> float :
      '''measurement( (Dimension)arg1) -> float :

    C++ signature :
        double measurement(class PyDbDimension {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Dimension)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbDimension {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def prefix (self, *args, **kwargs)-> str :
      '''prefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > prefix(class PyDbDimension {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recomputeDimBlock (self, *args, **kwargs)-> ErrorStatus :
      '''recomputeDimBlock( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue})

recomputeDimBlock( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue},bool)'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removeTextField (self, *args, **kwargs)-> ErrorStatus :
      '''removeTextField( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeTextField(class PyDbDimension {lvalue})'''
    ...
    def resetTextDefinedSize (self, *args, **kwargs)-> None :
      '''resetTextDefinedSize( (Dimension)arg1) -> None :

    C++ signature :
        void resetTextDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def setAltSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAlternatePrefix (self, *args, **kwargs)-> ErrorStatus :
      '''setAlternatePrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternatePrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAlternateSuffix (self, *args, **kwargs)-> ErrorStatus :
      '''setAlternateSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternateSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setArrowFirstIsFlipped (self, *args, **kwargs)-> ErrorStatus :
      '''setArrowFirstIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowFirstIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setArrowSecondIsFlipped (self, *args, **kwargs)-> ErrorStatus :
      '''setArrowSecondIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowSecondIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setChordPoint (self, *args, **kwargs)-> ErrorStatus :
      '''setChordPoint( (DiametricDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setChordPoint(class PyDbDiametricDimension {lvalue},class AcGePoint3d)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setConstraintDynamic (self, *args, **kwargs)-> ErrorStatus :
      '''setConstraintDynamic( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setConstraintDynamic(class PyDbDimension {lvalue},bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDimBlockId (self, *args, **kwargs)-> ErrorStatus :
      '''setDimBlockId( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockId(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimBlockPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setDimBlockPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimExt1Linetype (self, *args, **kwargs)-> ErrorStatus :
      '''setDimExt1Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt1Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimExt2Linetype (self, *args, **kwargs)-> ErrorStatus :
      '''setDimExt2Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt2Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimLineLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setDimLineLinetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimLineLinetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setDimensionStyle( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionStyle(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionText (self, *args, **kwargs)-> ErrorStatus :
      '''setDimensionText( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionText(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDimstyleData (self, *args, **kwargs)-> ErrorStatus :
      '''setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self, *args, **kwargs)-> ErrorStatus :
      '''setDynamicDimension( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDynamicDimension(class PyDbDimension {lvalue},bool)'''
    ...
    def setElevation (self, *args, **kwargs)-> ErrorStatus :
      '''setElevation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setElevation(class PyDbDimension {lvalue},double)'''
    ...
    def setExtArcEndAngle (self, *args, **kwargs)-> ErrorStatus :
      '''setExtArcEndAngle( (DiametricDimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setExtArcEndAngle(class PyDbDiametricDimension {lvalue},double)'''
    ...
    def setExtArcStartAngle (self, *args, **kwargs)-> ErrorStatus :
      '''setExtArcStartAngle( (DiametricDimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setExtArcStartAngle(class PyDbDiametricDimension {lvalue},double)'''
    ...
    def setFarChordPoint (self, *args, **kwargs)-> ErrorStatus :
      '''setFarChordPoint( (DiametricDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFarChordPoint(class PyDbDiametricDimension {lvalue},class AcGePoint3d)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setHorizontalRefTextRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setHorizontalRefTextRotation( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRefTextRotation(class PyDbDimension {lvalue},bool)'''
    ...
    def setHorizontalRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setHorizontalRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setInspection (self, *args, **kwargs)-> ErrorStatus :
      '''setInspection( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspection(class PyDbDimension {lvalue},bool)'''
    ...
    def setInspectionFrame (self, *args, **kwargs)-> ErrorStatus :
      '''setInspectionFrame( (Dimension)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionFrame(class PyDbDimension {lvalue},int)'''
    ...
    def setInspectionLabel (self, *args, **kwargs)-> ErrorStatus :
      '''setInspectionLabel( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionLabel(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLeaderLength (self, *args, **kwargs)-> ErrorStatus :
      '''setLeaderLength( (DiametricDimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLeaderLength(class PyDbDiametricDimension {lvalue},double)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs)-> ErrorStatus :
      '''setNormal( (Dimension)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbDimension {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, *args, **kwargs)-> ErrorStatus :
      '''setPrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setShouldParticipateInOPM (self, *args, **kwargs)-> None :
      '''setShouldParticipateInOPM( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShouldParticipateInOPM(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuffix (self, *args, **kwargs)-> ErrorStatus :
      '''setSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setSuppressAngularTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressAngularTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressAngularTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setTextAttachment (self, *args, **kwargs)-> ErrorStatus :
      '''setTextAttachment( (Dimension)arg1, (MTextAttachmentPoint)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAttachment(class PyDbDimension {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setTextDefinedSize (self, *args, **kwargs)-> None :
      '''setTextDefinedSize( (Dimension)arg1, (float)arg2, (float)arg3) -> None :

    C++ signature :
        void setTextDefinedSize(class PyDbDimension {lvalue},double,double)'''
    ...
    def setTextLineSpacingFactor (self, *args, **kwargs)-> ErrorStatus :
      '''setTextLineSpacingFactor( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingFactor(class PyDbDimension {lvalue},double)'''
    ...
    def setTextLineSpacingStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setTextLineSpacingStyle( (Dimension)arg1, (LineSpacingStyle)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingStyle(class PyDbDimension {lvalue},enum AcDb::LineSpacingStyle)'''
    ...
    def setTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setTextPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setTextRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setTextRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setToleranceSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setUsingDefaultTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setUsingDefaultTextPosition( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUsingDefaultTextPosition(class PyDbDimension {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def shouldParticipateInOPM (self, *args, **kwargs)-> bool :
      '''shouldParticipateInOPM( (Dimension)arg1) -> bool :

    C++ signature :
        bool shouldParticipateInOPM(class PyDbDimension {lvalue})'''
    ...
    def suffix (self, *args, **kwargs)-> str :
      '''suffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > suffix(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroFeet (self, *args, **kwargs)-> bool :
      '''suppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroInches (self, *args, **kwargs)-> bool :
      '''suppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def textAttachment (self, *args, **kwargs)-> MTextAttachmentPoint :
      '''textAttachment( (Dimension)arg1) -> MTextAttachmentPoint :

    C++ signature :
        enum AcDbMText::AttachmentPoint textAttachment(class PyDbDimension {lvalue})'''
    ...
    def textDefinedSize (self, *args, **kwargs)-> tuple :
      '''textDefinedSize( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple textDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingFactor (self, *args, **kwargs)-> float :
      '''textLineSpacingFactor( (Dimension)arg1) -> float :

    C++ signature :
        double textLineSpacingFactor(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingStyle (self, *args, **kwargs)-> LineSpacingStyle :
      '''textLineSpacingStyle( (Dimension)arg1) -> LineSpacingStyle :

    C++ signature :
        enum AcDb::LineSpacingStyle textLineSpacingStyle(class PyDbDimension {lvalue})'''
    ...
    def textPosition (self, *args, **kwargs)-> Point3d :
      '''textPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d textPosition(class PyDbDimension {lvalue})'''
    ...
    def textRotation (self, *args, **kwargs)-> float :
      '''textRotation( (Dimension)arg1) -> float :

    C++ signature :
        double textRotation(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def useDefaultTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''useDefaultTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def useSetTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''useSetTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useSetTextPosition(class PyDbDimension {lvalue})'''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class Dictionary:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def asDict (self, *args, **kwargs)-> dict :
      '''asDict( (Dictionary)arg1) -> dict :

    C++ signature :
        class boost::python::dict asDict(class PyDbDictionary {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Dictionary :
      '''cast( (RxObject)arg1) -> Dictionary :

    C++ signature :
        class PyDbDictionary cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Dictionary :
      '''cloneFrom( (RxObject)arg1) -> Dictionary :

    C++ signature :
        class PyDbDictionary cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getAt (self, *args, **kwargs)-> ObjectId :
      '''getAt( (Dictionary)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getAt(class PyDbDictionary {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def has (self, *args, **kwargs)-> bool :
      '''has( (Dictionary)arg1, (str)arg2) -> bool :

    C++ signature :
        bool has(class PyDbDictionary {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

has( (Dictionary)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool has(class PyDbDictionary {lvalue},class PyDbObjectId)'''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def nameAt (self, *args, **kwargs)-> str :
      '''nameAt( (Dictionary)arg1, (ObjectId)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > nameAt(class PyDbDictionary {lvalue},class PyDbObjectId)'''
    ...
    def numEntries (self, *args, **kwargs)-> int :
      '''numEntries( (Dictionary)arg1) -> int :

    C++ signature :
        unsigned int numEntries(class PyDbDictionary {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def remove (self, *args, **kwargs)-> ErrorStatus :
      '''remove( (Dictionary)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus remove(class PyDbDictionary {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

remove( (Dictionary)arg1, (str)arg2, (ObjectId)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus remove(class PyDbDictionary {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId {lvalue})

remove( (Dictionary)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus remove(class PyDbDictionary {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setAt (self, *args, **kwargs)-> ObjectId :
      '''setAt( (Dictionary)arg1, (str)arg2, (DbObject)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId setAt(class PyDbDictionary {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObject {lvalue})'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setName (self, *args, **kwargs)-> bool :
      '''setName( (Dictionary)arg1, (str)arg2, (str)arg3) -> bool :

    C++ signature :
        bool setName(class PyDbDictionary {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class DimInspect:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kShapeAngular (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kShapeLabel (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kShapeNone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kShapeRate (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kShapeRemove (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kShapeRound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class DimStyleTable:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def add (self, *args, **kwargs)-> ObjectId :
      '''add( (DimStyleTable)arg1, (DimStyleTableRecord)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId add(class PyDbDimStyleTable {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> DimStyleTable :
      '''cast( (RxObject)arg1) -> DimStyleTable :

    C++ signature :
        class PyDbDimStyleTable cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> DimStyleTable :
      '''cloneFrom( (RxObject)arg1) -> DimStyleTable :

    C++ signature :
        class PyDbDimStyleTable cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getAt (self, *args, **kwargs)-> ObjectId :
      '''getAt( (SymbolTable)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getAt(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def has (self, *args, **kwargs)-> bool :
      '''has( (SymbolTable)arg1, (str)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

has( (SymbolTable)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class PyDbObjectId)'''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def recordIds (self, *args, **kwargs)-> list :
      '''recordIds( (SymbolTable)arg1) -> list :

    C++ signature :
        class boost::python::list recordIds(class PyDbSymbolTable {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def toDict (self, *args, **kwargs)-> dict :
      '''toDict( (SymbolTable)arg1) -> dict :

    C++ signature :
        class boost::python::dict toDict(class PyDbSymbolTable {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class DimStyleTableRecord:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> DimStyleTableRecord :
      '''cast( (RxObject)arg1) -> DimStyleTableRecord :

    C++ signature :
        class PyDbDimStyleTableRecord cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> DimStyleTableRecord :
      '''cloneFrom( (RxObject)arg1) -> DimStyleTableRecord :

    C++ signature :
        class PyDbDimStyleTableRecord cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getName (self, *args, **kwargs)-> str :
      '''getName( (SymbolTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getName(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isDependent (self, *args, **kwargs)-> bool :
      '''isDependent( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isDependent(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isRenamable (self, *args, **kwargs)-> bool :
      '''isRenamable( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isRenamable(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isResolved (self, *args, **kwargs)-> bool :
      '''isResolved( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isResolved(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setName (self, *args, **kwargs)-> ErrorStatus :
      '''setName( (SymbolTableRecord)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setName(class PyDbSymbolTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class Dimension:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def altSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def alternatePrefix (self, *args, **kwargs)-> str :
      '''alternatePrefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternatePrefix(class PyDbDimension {lvalue})'''
    ...
    def alternateSuffix (self, *args, **kwargs)-> str :
      '''alternateSuffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternateSuffix(class PyDbDimension {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def blockTransform (self, *args, **kwargs)-> Matrix3d :
      '''blockTransform( (Dimension)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbDimension {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Dimension :
      '''cast( (RxObject)arg1) -> Dimension :

    C++ signature :
        class PyDbDimension cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def centerMarkSize (self, *args, **kwargs)-> float :
      '''centerMarkSize( (Dimension)arg1) -> float :

    C++ signature :
        double centerMarkSize(class PyDbDimension {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Dimension :
      '''cloneFrom( (RxObject)arg1) -> Dimension :

    C++ signature :
        class PyDbDimension cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self, *args, **kwargs)-> ObjectId :
      '''dimBlockId( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimBlockId(class PyDbDimension {lvalue})'''
    ...
    def dimBlockPosition (self, *args, **kwargs)-> Point3d :
      '''dimBlockPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimBlockPosition(class PyDbDimension {lvalue})'''
    ...
    def dimExt1Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt1Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt1Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimExt2Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt2Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt2Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimLineLinetype (self, *args, **kwargs)-> ObjectId :
      '''dimLineLinetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimLineLinetype(class PyDbDimension {lvalue})'''
    ...
    def dimensionStyle (self, *args, **kwargs)-> ObjectId :
      '''dimensionStyle( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimensionStyle(class PyDbDimension {lvalue})'''
    ...
    def dimensionText (self, *args, **kwargs)-> str :
      '''dimensionText( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dimensionText(class PyDbDimension {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def elevation (self, *args, **kwargs)-> float :
      '''elevation( (Dimension)arg1) -> float :

    C++ signature :
        double elevation(class PyDbDimension {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fieldFromMText (self, *args, **kwargs)-> ErrorStatus :
      '''fieldFromMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldFromMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def fieldToMText (self, *args, **kwargs)-> ErrorStatus :
      '''fieldToMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldToMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self, *args, **kwargs)-> ErrorStatus :
      '''generateLayout( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus generateLayout(class PyDbDimension {lvalue})'''
    ...
    def getArrowFirstIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowFirstIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowFirstIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getArrowSecondIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowSecondIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowSecondIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDimstyleData (self, *args, **kwargs)-> DimStyleTableRecord :
      '''getDimstyleData( (Dimension)arg1) -> DimStyleTableRecord :

    C++ signature :
        class PyDbDimStyleTableRecord getDimstyleData(class PyDbDimension {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def horizontalRotation (self, *args, **kwargs)-> float :
      '''horizontalRotation( (Dimension)arg1) -> float :

    C++ signature :
        double horizontalRotation(class PyDbDimension {lvalue})'''
    ...
    def inspection (self, *args, **kwargs)-> bool :
      '''inspection( (Dimension)arg1) -> bool :

    C++ signature :
        bool inspection(class PyDbDimension {lvalue})'''
    ...
    def inspectionFrame (self, *args, **kwargs)-> int :
      '''inspectionFrame( (Dimension)arg1) -> int :

    C++ signature :
        int inspectionFrame(class PyDbDimension {lvalue})'''
    ...
    def inspectionLabel (self, *args, **kwargs)-> str :
      '''inspectionLabel( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > inspectionLabel(class PyDbDimension {lvalue})'''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self, *args, **kwargs)-> bool :
      '''isConstraintDynamic( (Dimension)arg1) -> bool :

    C++ signature :
        bool isConstraintDynamic(class PyDbDimension {lvalue})'''
    ...
    def isConstraintObject (self, *args, **kwargs)-> tuple :
      '''isConstraintObject( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isConstraintObject(class PyDbDimension {lvalue})'''
    ...
    def isDynamicDimension (self, *args, **kwargs)-> bool :
      '''isDynamicDimension( (Dimension)arg1) -> bool :

    C++ signature :
        bool isDynamicDimension(class PyDbDimension {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self, *args, **kwargs)-> bool :
      '''isHorizontalRefTextRotation( (Dimension)arg1) -> bool :

    C++ signature :
        bool isHorizontalRefTextRotation(class PyDbDimension {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self, *args, **kwargs)-> bool :
      '''isUsingDefaultTextPosition( (Dimension)arg1) -> bool :

    C++ signature :
        bool isUsingDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def measurement (self, *args, **kwargs)-> float :
      '''measurement( (Dimension)arg1) -> float :

    C++ signature :
        double measurement(class PyDbDimension {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Dimension)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbDimension {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def prefix (self, *args, **kwargs)-> str :
      '''prefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > prefix(class PyDbDimension {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recomputeDimBlock (self, *args, **kwargs)-> ErrorStatus :
      '''recomputeDimBlock( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue})

recomputeDimBlock( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue},bool)'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removeTextField (self, *args, **kwargs)-> ErrorStatus :
      '''removeTextField( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeTextField(class PyDbDimension {lvalue})'''
    ...
    def resetTextDefinedSize (self, *args, **kwargs)-> None :
      '''resetTextDefinedSize( (Dimension)arg1) -> None :

    C++ signature :
        void resetTextDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def setAltSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAlternatePrefix (self, *args, **kwargs)-> ErrorStatus :
      '''setAlternatePrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternatePrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAlternateSuffix (self, *args, **kwargs)-> ErrorStatus :
      '''setAlternateSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternateSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setArrowFirstIsFlipped (self, *args, **kwargs)-> ErrorStatus :
      '''setArrowFirstIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowFirstIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setArrowSecondIsFlipped (self, *args, **kwargs)-> ErrorStatus :
      '''setArrowSecondIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowSecondIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setConstraintDynamic (self, *args, **kwargs)-> ErrorStatus :
      '''setConstraintDynamic( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setConstraintDynamic(class PyDbDimension {lvalue},bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDimBlockId (self, *args, **kwargs)-> ErrorStatus :
      '''setDimBlockId( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockId(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimBlockPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setDimBlockPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimExt1Linetype (self, *args, **kwargs)-> ErrorStatus :
      '''setDimExt1Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt1Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimExt2Linetype (self, *args, **kwargs)-> ErrorStatus :
      '''setDimExt2Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt2Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimLineLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setDimLineLinetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimLineLinetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setDimensionStyle( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionStyle(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionText (self, *args, **kwargs)-> ErrorStatus :
      '''setDimensionText( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionText(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDimstyleData (self, *args, **kwargs)-> ErrorStatus :
      '''setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self, *args, **kwargs)-> ErrorStatus :
      '''setDynamicDimension( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDynamicDimension(class PyDbDimension {lvalue},bool)'''
    ...
    def setElevation (self, *args, **kwargs)-> ErrorStatus :
      '''setElevation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setElevation(class PyDbDimension {lvalue},double)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setHorizontalRefTextRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setHorizontalRefTextRotation( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRefTextRotation(class PyDbDimension {lvalue},bool)'''
    ...
    def setHorizontalRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setHorizontalRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setInspection (self, *args, **kwargs)-> ErrorStatus :
      '''setInspection( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspection(class PyDbDimension {lvalue},bool)'''
    ...
    def setInspectionFrame (self, *args, **kwargs)-> ErrorStatus :
      '''setInspectionFrame( (Dimension)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionFrame(class PyDbDimension {lvalue},int)'''
    ...
    def setInspectionLabel (self, *args, **kwargs)-> ErrorStatus :
      '''setInspectionLabel( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionLabel(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs)-> ErrorStatus :
      '''setNormal( (Dimension)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbDimension {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, *args, **kwargs)-> ErrorStatus :
      '''setPrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setShouldParticipateInOPM (self, *args, **kwargs)-> None :
      '''setShouldParticipateInOPM( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShouldParticipateInOPM(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuffix (self, *args, **kwargs)-> ErrorStatus :
      '''setSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setSuppressAngularTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressAngularTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressAngularTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setTextAttachment (self, *args, **kwargs)-> ErrorStatus :
      '''setTextAttachment( (Dimension)arg1, (MTextAttachmentPoint)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAttachment(class PyDbDimension {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setTextDefinedSize (self, *args, **kwargs)-> None :
      '''setTextDefinedSize( (Dimension)arg1, (float)arg2, (float)arg3) -> None :

    C++ signature :
        void setTextDefinedSize(class PyDbDimension {lvalue},double,double)'''
    ...
    def setTextLineSpacingFactor (self, *args, **kwargs)-> ErrorStatus :
      '''setTextLineSpacingFactor( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingFactor(class PyDbDimension {lvalue},double)'''
    ...
    def setTextLineSpacingStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setTextLineSpacingStyle( (Dimension)arg1, (LineSpacingStyle)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingStyle(class PyDbDimension {lvalue},enum AcDb::LineSpacingStyle)'''
    ...
    def setTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setTextPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setTextRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setTextRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setToleranceSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setUsingDefaultTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setUsingDefaultTextPosition( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUsingDefaultTextPosition(class PyDbDimension {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def shouldParticipateInOPM (self, *args, **kwargs)-> bool :
      '''shouldParticipateInOPM( (Dimension)arg1) -> bool :

    C++ signature :
        bool shouldParticipateInOPM(class PyDbDimension {lvalue})'''
    ...
    def suffix (self, *args, **kwargs)-> str :
      '''suffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > suffix(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroFeet (self, *args, **kwargs)-> bool :
      '''suppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroInches (self, *args, **kwargs)-> bool :
      '''suppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def textAttachment (self, *args, **kwargs)-> MTextAttachmentPoint :
      '''textAttachment( (Dimension)arg1) -> MTextAttachmentPoint :

    C++ signature :
        enum AcDbMText::AttachmentPoint textAttachment(class PyDbDimension {lvalue})'''
    ...
    def textDefinedSize (self, *args, **kwargs)-> tuple :
      '''textDefinedSize( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple textDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingFactor (self, *args, **kwargs)-> float :
      '''textLineSpacingFactor( (Dimension)arg1) -> float :

    C++ signature :
        double textLineSpacingFactor(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingStyle (self, *args, **kwargs)-> LineSpacingStyle :
      '''textLineSpacingStyle( (Dimension)arg1) -> LineSpacingStyle :

    C++ signature :
        enum AcDb::LineSpacingStyle textLineSpacingStyle(class PyDbDimension {lvalue})'''
    ...
    def textPosition (self, *args, **kwargs)-> Point3d :
      '''textPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d textPosition(class PyDbDimension {lvalue})'''
    ...
    def textRotation (self, *args, **kwargs)-> float :
      '''textRotation( (Dimension)arg1) -> float :

    C++ signature :
        double textRotation(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def useDefaultTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''useDefaultTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def useSetTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''useSetTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useSetTextPosition(class PyDbDimension {lvalue})'''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class DrawLeaderOrderType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kDrawLeaderHeadFirst (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDrawLeaderTailFirst (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class DrawMLeaderOrderType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kDrawContentFirst (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDrawLeaderFirst (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class DuplicateRecordCloning:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kDrcIgnore (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDrcMangleName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDrcNotApplicable (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDrcReplace (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDrcUnmangleName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDrcXrefMangleName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class DwgDataType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kDwg3Real (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDwgBChunk (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDwgHandle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDwgHardOwnershipId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDwgHardPointerId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDwgInt16 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDwgInt32 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDwgInt64 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDwgInt8 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDwgNotRecognized (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDwgNull (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDwgReal (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDwgSoftOwnershipId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDwgSoftPointerId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDwgText (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class DxfCode:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kDxfAlpha (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfAngle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfArbHandle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfAttributePrompt (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfAttributeTag (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfBinaryChunk (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfBlockName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfBool (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfCLShapeName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfCLShapeText (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfCircleSides (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfColor (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfColorName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfColorRGB (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfComment (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfControlString (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfDashLength (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfDefaultLightingOn (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfDefaultLightingType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfDescription (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfDimAPostStr (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfDimBlk (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfDimBlk1 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfDimBlk2 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfDimPostStr (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfDimStyleName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfDimVarHandle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfDragVisualStyleId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfEdgeStyleId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfElevation (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfEmbeddedObjectStart (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfEnd (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfFaceStyleId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfFirstEntId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfGradientAngle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfGradientColCount (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfGradientColVal (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfGradientName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfGradientObjType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfGradientPatType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfGradientShift (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfGradientTintType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfGradientTintVal (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfHandle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfHardOwnershipId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfHardPointerId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfHasSubentities (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfHeaderId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfInt16 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfInt32 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfInt64 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfInt8 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfInvalid (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfLayerLinetype (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfLayerName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfLayoutName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfLineWeight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfLinetypeAlign (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfLinetypeElement (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfLinetypeName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfLinetypePDC (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfLinetypeProse (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfLinetypeScale (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfLiveSectionId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfLiveSectionName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfMaterialId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfMlineOffset (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfMstyleName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfNormalX (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfNormalY (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfNormalZ (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfObjVisualStyleId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfOperator (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfPReactors (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfPixelScale (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfPlotStyleNameId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfPlotStyleNameType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfReal (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfRegAppFlags (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfRegAppName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfRenderMode (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfShadePlotId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfShadowFlags (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfShapeName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfShapeScale (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfShapeXOffset (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfShapeYOffset (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfSoftOwnershipId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfSoftPointerId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfStart (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfSubclass (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfSunId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfSymTableRecComments (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfSymTableRecName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfSymbolTableName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfText (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfTextBigFontFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfTextFontFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfTextStyleName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfThickness (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfTxtSize (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfTxtStyleFlags (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfTxtStylePSize (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfTxtStyleXScale (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfUCSOrg (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfUCSOriX (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfUCSOriY (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfVertexIdentifier (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewBackClip (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewBackgroundId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewBrightness (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewContrast (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewFrontClip (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewHeight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewLensLength (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewMode (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewWidth (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewportActive (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewportAspect (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewportGrid (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewportGridDisplay (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewportGridMajor (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewportHeight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewportIcon (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewportNumber (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewportSnap (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewportSnapAngle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewportSnapPair (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewportSnapStyle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewportTwist (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewportVisibility (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfViewportZoom (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfVisibility (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfVisualStyleId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfVpVisualStyleId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXCoord (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXDataStart (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXDictionary (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXInt16 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXReal (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXRefPath (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXTextString (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXXInt16 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXXXInt16 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdAsciiString (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdBinaryChunk (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdControlString (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdDist (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdHandle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdInteger16 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdInteger32 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdLayerName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdMax (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdReal (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdScale (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdWorldXCoord (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdWorldXDir (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdWorldXDisp (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdWorldYCoord (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdWorldYDir (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdWorldYDisp (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdWorldZCoord (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdWorldZDir (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdWorldZDisp (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdXCoord (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdYCoord (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfXdZCoord (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfYCoord (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDxfZCoord (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class DynBlockReference:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)'''
    ...
    def anonymousBlockTableRecord (self, *args, **kwargs)-> ObjectId :
      '''anonymousBlockTableRecord( (DynBlockReference)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId anonymousBlockTableRecord(class PyDbDynBlockReference {lvalue})'''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (DynBlockReference)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbDynBlockReference {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def convertToStaticBlock (self, *args, **kwargs)-> ErrorStatus :
      '''convertToStaticBlock( (DynBlockReference)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus convertToStaticBlock(class PyDbDynBlockReference {lvalue})

convertToStaticBlock( (DynBlockReference)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus convertToStaticBlock(class PyDbDynBlockReference {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def dynamicBlockTableRecord (self, *args, **kwargs)-> ObjectId :
      '''dynamicBlockTableRecord( (DynBlockReference)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dynamicBlockTableRecord(class PyDbDynBlockReference {lvalue})'''
    ...
    def getBlockProperties (self, *args, **kwargs)-> list :
      '''getBlockProperties( (DynBlockReference)arg1) -> list :

    C++ signature :
        class boost::python::list getBlockProperties(class PyDbDynBlockReference {lvalue})'''
    ...
    def getIsDynamicBlock (self, *args, **kwargs)-> bool :
      '''getIsDynamicBlock( (ObjectId)arg1) -> bool :

    C++ signature :
        bool getIsDynamicBlock(class PyDbObjectId)'''
    ...
    def isDynamicBlock (self, *args, **kwargs)-> bool :
      '''isDynamicBlock( (DynBlockReference)arg1) -> bool :

    C++ signature :
        bool isDynamicBlock(class PyDbDynBlockReference {lvalue})'''
    ...
    def resetBlock (self, *args, **kwargs)-> ErrorStatus :
      '''resetBlock( (DynBlockReference)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus resetBlock(class PyDbDynBlockReference {lvalue})'''
    ...

class DynBlockReferenceProperty:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (DynBlockReferenceProperty)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def description (self, *args, **kwargs)-> str :
      '''description( (DynBlockReferenceProperty)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > description(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...
    def getAllowedValues (self, *args, **kwargs)-> list :
      '''getAllowedValues( (DynBlockReferenceProperty)arg1) -> list :

    C++ signature :
        class boost::python::list getAllowedValues(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...
    def propertyName (self, *args, **kwargs)-> str :
      '''propertyName( (DynBlockReferenceProperty)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > propertyName(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...
    def propertyType (self, *args, **kwargs)-> DwgDataType :
      '''propertyType( (DynBlockReferenceProperty)arg1) -> DwgDataType :

    C++ signature :
        enum AcDb::DwgDataType propertyType(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...
    def readOnly (self, *args, **kwargs)-> bool :
      '''readOnly( (DynBlockReferenceProperty)arg1) -> bool :

    C++ signature :
        bool readOnly(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...
    def setValue (self, *args, **kwargs)-> ErrorStatus :
      '''setValue( (DynBlockReferenceProperty)arg1, (EvalVariant)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setValue(class PyDbDynBlockReferenceProperty {lvalue},class PyDbEvalVariant)'''
    ...
    def show (self, *args, **kwargs)-> bool :
      '''show( (DynBlockReferenceProperty)arg1) -> bool :

    C++ signature :
        bool show(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...
    def unitsType (self, *args, **kwargs)-> DynUnitsType :
      '''unitsType( (DynBlockReferenceProperty)arg1) -> DynUnitsType :

    C++ signature :
        enum AcDbDynBlockReferenceProperty::UnitsType unitsType(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...
    def value (self, *args, **kwargs)-> EvalVariant :
      '''value( (DynBlockReferenceProperty)arg1) -> EvalVariant :

    C++ signature :
        class PyDbEvalVariant value(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...
    def visibleInCurrentVisibilityState (self, *args, **kwargs)-> bool :
      '''visibleInCurrentVisibilityState( (DynBlockReferenceProperty)arg1) -> bool :

    C++ signature :
        bool visibleInCurrentVisibilityState(class PyDbDynBlockReferenceProperty {lvalue})'''
    ...

class DynUnitsType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kAngular (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kArea (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDistance (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kNoUnits (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class EndCaps:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kEndCapAngle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kEndCapNone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kEndCapRound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kEndCapSquare (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Entity:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Entity :
      '''cast( (RxObject)arg1) -> Entity :

    C++ signature :
        class PyDbEntity cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Entity :
      '''cloneFrom( (RxObject)arg1) -> Entity :

    C++ signature :
        class PyDbEntity cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class EntityColor:
    def ByBlock (self, *args, **kwargs)-> EntityColor :
      '''ByBlock() -> EntityColor :

    C++ signature :
        class AcCmEntityColor ByBlock()

ByBlock() -> EntityColor :

    C++ signature :
        class AcCmEntityColor ByBlock()'''
    ...
    def ByLayer (self, *args, **kwargs)-> EntityColor :
      '''ByLayer() -> EntityColor :

    C++ signature :
        class AcCmEntityColor ByLayer()

ByLayer() -> EntityColor :

    C++ signature :
        class AcCmEntityColor ByLayer()'''
    ...
    def Foreground (self, *args, **kwargs)-> EntityColor :
      '''Foreground() -> EntityColor :

    C++ signature :
        class AcCmEntityColor Foreground()

Foreground() -> EntityColor :

    C++ signature :
        class AcCmEntityColor Foreground()'''
    ...
    def None (self, *args, **kwargs)-> EntityColor :
      '''None() -> EntityColor :

    C++ signature :
        class AcCmEntityColor None()

None() -> EntityColor :

    C++ signature :
        class AcCmEntityColor None()'''
    ...
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (int)arg2, (int)arg3, (int)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,unsigned char,unsigned char,unsigned char)'''
    ...
    def black (self, *args, **kwargs)-> EntityColor :
      '''black() -> EntityColor :

    C++ signature :
        class AcCmEntityColor black()

black() -> EntityColor :

    C++ signature :
        class AcCmEntityColor black()'''
    ...
    def blue (self, *args, **kwargs)-> int :
      '''blue( (EntityColor)arg1) -> int :

    C++ signature :
        unsigned char blue(class AcCmEntityColor {lvalue})'''
    ...
    def canResolveRGB (self, *args, **kwargs)-> bool :
      '''canResolveRGB( (EntityColor)arg1) -> bool :

    C++ signature :
        bool canResolveRGB(class AcCmEntityColor {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (EntityColor)arg1) -> int :

    C++ signature :
        short colorIndex(class AcCmEntityColor {lvalue})'''
    ...
    def colorMethod (self, *args, **kwargs)-> ColorMethod :
      '''colorMethod( (EntityColor)arg1) -> ColorMethod :

    C++ signature :
        enum AcCmEntityColor::ColorMethod colorMethod(class AcCmEntityColor {lvalue})'''
    ...
    def getCOLORREF (self, *args, **kwargs)-> int :
      '''getCOLORREF( (EntityColor)arg1) -> int :

    C++ signature :
        unsigned int getCOLORREF(class AcCmEntityColor {lvalue})'''
    ...
    def getRGB (self, *args, **kwargs)-> int :
      '''getRGB( (EntityColor)arg1) -> int :

    C++ signature :
        unsigned int getRGB(class AcCmEntityColor {lvalue})'''
    ...
    def getRGBM (self, *args, **kwargs)-> int :
      '''getRGBM( (EntityColor)arg1) -> int :

    C++ signature :
        unsigned int getRGBM(class AcCmEntityColor {lvalue})'''
    ...
    def green (self, *args, **kwargs)-> int :
      '''green( (EntityColor)arg1) -> int :

    C++ signature :
        unsigned char green(class AcCmEntityColor {lvalue})'''
    ...
    def isByACI (self, *args, **kwargs)-> bool :
      '''isByACI( (EntityColor)arg1) -> bool :

    C++ signature :
        bool isByACI(class AcCmEntityColor {lvalue})'''
    ...
    def isByBlock (self, *args, **kwargs)-> bool :
      '''isByBlock( (EntityColor)arg1) -> bool :

    C++ signature :
        bool isByBlock(class AcCmEntityColor {lvalue})'''
    ...
    def isByColor (self, *args, **kwargs)-> bool :
      '''isByColor( (EntityColor)arg1) -> bool :

    C++ signature :
        bool isByColor(class AcCmEntityColor {lvalue})'''
    ...
    def isByLayer (self, *args, **kwargs)-> bool :
      '''isByLayer( (EntityColor)arg1) -> bool :

    C++ signature :
        bool isByLayer(class AcCmEntityColor {lvalue})'''
    ...
    def isByPen (self, *args, **kwargs)-> bool :
      '''isByPen( (EntityColor)arg1) -> bool :

    C++ signature :
        bool isByPen(class AcCmEntityColor {lvalue})'''
    ...
    def isForeground (self, *args, **kwargs)-> bool :
      '''isForeground( (EntityColor)arg1) -> bool :

    C++ signature :
        bool isForeground(class AcCmEntityColor {lvalue})'''
    ...
    def isLayerFrozen (self, *args, **kwargs)-> bool :
      '''isLayerFrozen( (EntityColor)arg1) -> bool :

    C++ signature :
        bool isLayerFrozen(class AcCmEntityColor {lvalue})'''
    ...
    def isLayerFrozenOrOff (self, *args, **kwargs)-> bool :
      '''isLayerFrozenOrOff( (EntityColor)arg1) -> bool :

    C++ signature :
        bool isLayerFrozenOrOff(class AcCmEntityColor {lvalue})'''
    ...
    def isLayerOff (self, *args, **kwargs)-> bool :
      '''isLayerOff( (EntityColor)arg1) -> bool :

    C++ signature :
        bool isLayerOff(class AcCmEntityColor {lvalue})'''
    ...
    def isNone (self, *args, **kwargs)-> bool :
      '''isNone( (EntityColor)arg1) -> bool :

    C++ signature :
        bool isNone(class AcCmEntityColor {lvalue})'''
    ...
    def layerIndex (self, *args, **kwargs)-> int :
      '''layerIndex( (EntityColor)arg1) -> int :

    C++ signature :
        int layerIndex(class AcCmEntityColor {lvalue})'''
    ...
    def makeTrueColor (self, *args, **kwargs)-> EntityColor :
      '''makeTrueColor( (EntityColor)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor makeTrueColor(class AcCmEntityColor {lvalue})'''
    ...
    def penIndex (self, *args, **kwargs)-> int :
      '''penIndex( (EntityColor)arg1) -> int :

    C++ signature :
        unsigned short penIndex(class AcCmEntityColor {lvalue})'''
    ...
    def red (self, *args, **kwargs)-> int :
      '''red( (EntityColor)arg1) -> int :

    C++ signature :
        unsigned char red(class AcCmEntityColor {lvalue})'''
    ...
    def setByBlock (self, *args, **kwargs)-> None :
      '''setByBlock( (EntityColor)arg1) -> None :

    C++ signature :
        void setByBlock(class AcCmEntityColor {lvalue})'''
    ...
    def setByLayer (self, *args, **kwargs)-> None :
      '''setByLayer( (EntityColor)arg1) -> None :

    C++ signature :
        void setByLayer(class AcCmEntityColor {lvalue})'''
    ...
    def setCOLORREF (self, *args, **kwargs)-> ErrorStatus :
      '''setCOLORREF( (EntityColor)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCOLORREF(class AcCmEntityColor {lvalue},unsigned int)'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (EntityColor)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class AcCmEntityColor {lvalue},short)'''
    ...
    def setForeground (self, *args, **kwargs)-> None :
      '''setForeground( (EntityColor)arg1) -> None :

    C++ signature :
        void setForeground(class AcCmEntityColor {lvalue})'''
    ...
    def setLayerIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setLayerIndex( (EntityColor)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayerIndex(class AcCmEntityColor {lvalue},int)'''
    ...
    def setLayerOff (self, *args, **kwargs)-> None :
      '''setLayerOff( (EntityColor)arg1) -> None :

    C++ signature :
        void setLayerOff(class AcCmEntityColor {lvalue})'''
    ...
    def setNone (self, *args, **kwargs)-> None :
      '''setNone( (EntityColor)arg1) -> None :

    C++ signature :
        void setNone(class AcCmEntityColor {lvalue})'''
    ...
    def setPenIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setPenIndex( (EntityColor)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPenIndex(class AcCmEntityColor {lvalue},unsigned short)'''
    ...
    def setRGB (self, *args, **kwargs)-> ErrorStatus :
      '''setRGB( (EntityColor)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRGB(class AcCmEntityColor {lvalue},unsigned int)

setRGB( (EntityColor)arg1, (int)arg2, (int)arg3, (int)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRGB(class AcCmEntityColor {lvalue},unsigned char,unsigned char,unsigned char)'''
    ...
    def setRGBM (self, *args, **kwargs)-> ErrorStatus :
      '''setRGBM( (EntityColor)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRGBM(class AcCmEntityColor {lvalue},unsigned int)'''
    ...
    def white (self, *args, **kwargs)-> EntityColor :
      '''white() -> EntityColor :

    C++ signature :
        class AcCmEntityColor white()

white() -> EntityColor :

    C++ signature :
        class AcCmEntityColor white()'''
    ...

class ErrorStatus:
    def Ok (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def eAbortPreview (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eAllInSameRigidSet (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eAlreadyActive (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eAlreadyHasRepresentation (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eAlreadyInDb (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eAlreadyInGroup (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eAlreadyInactive (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eAlreadyInferred (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eAmbiguousInput (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eAmbiguousOutput (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eAnonymousEntry (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eAtMaxReaders (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBackgroundPlotInProgress (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBadColor (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBadColorIndex (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBadDwgHeader (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBadDxfFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBadDxfSequence (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBadLayerName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBadLineWeightValue (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBadLinetypeName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBadLinetypeScale (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBadMaterialName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBadPaperspaceView (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBadPlotStyleName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBadPlotStyleNameHandle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBadPlotStyleType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBadUCS (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBadVisibilityValue (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBadlyNestedAppData (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBinaryDataSizeExceeded (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBlockDefInEntitySection (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBrokenHandle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eBufferTooSmall (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCannotBeErasedByCaller (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCannotBeResurrected (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCannotChangeActiveViewport (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCannotChangeColumnType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCannotExplodeEntity (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCannotNestBlockDefs (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCannotPlotToFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCannotRestoreFromAcisFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCannotScaleNonUniformly (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCantOpenFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eChangedAgainstAssociativity (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCloseFailObjectDamaged (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCloseModifyAborted (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eClosePartialFailure (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCloseWasNotifying (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCommandWasInProgress (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eContainerNotEmpty (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eConvertImageFormatFailed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCopyDoesNotExist (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCopyFailed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCopyInvalidName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCopyIsModelSpace (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCopyNameExists (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCreateFailed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCreateInvalidName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCustomSizeNotPossible (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eCyclicDependency (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDataLinkAdapterNotFound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDataLinkBadConnectionString (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDataLinkConnectionFailed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDataLinkExcelNotFound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDataLinkInvalidAdapterId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDataLinkNotFound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDataLinkNotUpdatedYet (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDataLinkOtherError (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDataLinkSourceIsWriteProtected (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDataLinkSourceNotFound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDataLinkSourceUpdateNotAllowed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDataTooLarge (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDatabaseObjectsOpen (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDegenerateGeometry (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDelDoesNotExist (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDelIsModelSpace (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDelLastLayout (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDelUnableToFind (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDelUnableToSetCurrent (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDelayMore (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDeleteEntity (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDeletedEntry (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDependentOnObjectErased (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDeviceNotFound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDocumentSwitchDisabled (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDuplicateBlockDefinition (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDuplicateBlockName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDuplicateDxfField (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDuplicateIndex (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDuplicateKey (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDuplicateLayerName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDuplicateRecordName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDwgCRCDoesNotMatch (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDwgNeedsAFullSave (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDwgNotRecoverable (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDwgObjectImproperlyRead (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDwgRecoveredOK (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDwgSentinelDoesNotMatch (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDwgShareDemandLoad (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDwgShareReadAccess (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDwgShareWriteAccess (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDwkLockFileFound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDxbPartiallyRead (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDxbReadAborted (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDxfPartiallyRead (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eDxfReadAborted (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eEmbeddedIntersections (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eEmptyOperand (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eEndOfFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eEndOfObject (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eEndPreview (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eEntityInInactiveLayout (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eEntityRestricedInDOF (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eExcessiveItemCount (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eExplodeBeforeTransform (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFSMError (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFailedCurveCheck (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFailedToBlend (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFailedToEvaluate (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFailedToEvaluateDependents (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFailedToSetEdgeChamfers (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFailedToSetEdgeRounds (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFailedToSetVertexRounds (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFileAccessErr (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFileExists (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFileInternalErr (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFileLockedByACAD (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFileMissingSections (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFileNotFound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFileNotInCloud (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFileSharingViolation (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFileSystemErr (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFileTooManyOpen (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFilerError (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eFixedAllErrors (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eGeneralModelingFailure (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eGetAdIntImgServicesFailed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eGetImageBytesFailed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eGetImageDIBFailed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eGetPreviewImageFailed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eGraphContainsProxies (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eGraphCyclesFound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eGraphEdgeAlreadyExists (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eGraphEdgeNotFound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eGraphNodeAlreadyExists (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eGraphNodeNotFound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eGraphicsNotGenerated (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eGuidNoAddress (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eHadMultipleReaders (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eHandleExists (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eHandleInUse (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eHatchTooDense (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eIgnoredLinetypeRedef (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eIllegalEntityType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eIllegalReplacement (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInProcessOfCommitting (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eIncompatiblePlotSettings (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eIncompleteBlockDefinition (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eIncompleteComplexObject (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInconsistentConstraint (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetBadPath (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetBase (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetCreateInternetSessionFailed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetDirectoryFull (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetDiskFull (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetFileAccessDenied (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetFileGenericError (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetFileNotFound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetFileOpenFailed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetGenericException (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHardwareError (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpAccessDenied (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpBadGateway (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpBadMethod (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpBadRequest (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpConflict (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpGatewayTimeout (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpLengthRequired (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpNoAcceptableResponse (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpNotSupported (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpObjectNotFound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpOpenRequestFailed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpPaymentRequired (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpPreconditionFailure (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpProxyAuthorizationRequired (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpRequestForbidden (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpRequestTooLarge (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpResourceGone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpServerError (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpServiceUnavailable (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpTimedOut (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpUnsupportedMedia (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpUriTooLong (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetHttpVersionNotSupported (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetInCache (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetInternetError (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetInternetSessionConnectFailed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetInternetSessionOpenFailed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetInvalidAccessType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetInvalidFileHandle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetNoAcadInet (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetNoWinInet (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetNotAnURL (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetNotImplemented (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetOk (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetOldWinInet (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetProtocolNotSupported (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetSharingViolation (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetTooManyOpenFiles (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetUnknownError (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetUserCancelledTransfer (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInetValidURL (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInsertAfter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidAdsName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidAxis (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidBlockName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidContext (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidDimStyle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidDwgVersion (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidDxf2dPoint (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidDxf3dPoint (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidDxfCode (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidDxfSectionName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidEngineState (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidExpression (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidExtents (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidFaceVertexIndex (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidFileExtension (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidFix (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidIdMap (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidIndex (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidInput (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidKey (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidLayer (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidMeshVertexIndex (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidNormal (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidObjectId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidOffset (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidOpenState  (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidOwnerObject (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidParameterName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidPlotArea (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidPlotInfo (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidPreviewImage (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidProfileName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidREFIID (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidResBuf (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidStyle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidSymTableFlag (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidSymbolTableName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidTextStyle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidView (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidWindowArea (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eInvalidXrefObjectId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eIsAnEntity (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eIsReading (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eIsWriteProtected (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eIsWriting (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eIsXRefObject (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eItemCountChanged (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eIteratorDone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eKeyNotFound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eLISPActive (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eLayerGroupCodeMissing (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eLayoutNotCurrent (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eLeftErrorsUnfixed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eLoadFailed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eLockChangeInProgress (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eLockConflict (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eLockViolation (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eLongTransReferenceError (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMakeMeProxy (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMakeMeProxyAndResurrect (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMaxLayouts (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMaxNodes (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMissingBlockName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMissingDxfField (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMissingDxfSection (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMissingSymbolTable (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMissingSymbolTableRec (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eModifyingAssociativeEntity (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eModifyingDimensionWithExpression (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMustBe0to2 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMustBe0to3 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMustBe0to4 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMustBe0to5 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMustBe0to8 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMustBe1to15 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMustBe1to6 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMustBe1to8 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMustBeInteger (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMustBeNonNegative (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMustBeNonZero (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMustBePositive (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMustBePositiveInteger (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMustFirstAddBlockToDb (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMustOpenThruOwner (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eMustPlotToFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNLSFileNotAvailable (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNearSizeLimit (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNegativeValueNotAllowed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoAcDbHostApplication (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoActiveTransactions (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoBlockBegin (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoClassId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoConnectedBlendSet (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoCurrentConfig (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoDatabase (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoDocument (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoEntitiesFromPersistentIds (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoErrorHandler (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoFileName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoInputFiler (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoInputPath (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoInternalSpace (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoIntersections (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoLabelBlock (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoLayout (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoMatchingMedia (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoNodeActive (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoOverride (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoPlotStyleTranslationTable (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoPreviewContext (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoRepresentation (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoStoredOverrides (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoStoredReconcileStatus (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoThumbnailBitmap (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoUnderlayHost (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoViewAssociation (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNoWorkSet (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNonCoplanarGeometry (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNonPlanarEntity (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNonePlotDevice (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotAllowedForThisProxy (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotAnEntity (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotApplicable (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotAssociative (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotClonedPrimaryProxy (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotConnected (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotCurrentDatabase (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotDxfHeaderGroupCode (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotFromThisDocument (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotG1Continuous (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotHandled (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotImplementedYet (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotInBlock (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotInDatabase (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotInGroup (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotInPaperspace (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotInitializedYet (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotMultiPageCapable (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotNewlyCreated (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotOnBoundary (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotOpenForRead (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotOpenForWrite (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotShownInPropertyPalette (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotSupportedInDwgApi (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotThatKindOfClass (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNotTopTransaction (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNullBlockName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNullEntityPointer (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNullExtents (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNullHandle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNullIterator (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNullNodeId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNullObjectId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNullObjectPointer (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNullPtr (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eNumberOfCopiesNotSupported (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eObjectIsReferenced (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eObjectToBeDeleted (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eObsoleteFileFormat (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eOk (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eOnLockedLayer (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eOpenFileCancelled (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eOtherObjectsBusy (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eOutOfDisk (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eOutOfMemory (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eOutOfPagerMemory (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eOutOfRange (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eOverDefinedConstraint (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eOwnerNotInDatabase (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eOwnerNotOpenForRead (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eOwnerNotOpenForWrite (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eOwnerNotSet (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eOwnerToBeTransformed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePCCoordSysAssignFail (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePCCoordSysReprojectFail (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePCDiskSpaceTooSmall (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePCFileDataSelectorInvalid (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePCFileNotClosed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePCFileNotCreated (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePCFileNotErased (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePCFileNotFound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePCFileNotOpened (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePCFileNotWritten (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePCFileWrongFormat (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePCInProgress (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePCLargeData (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePCLastImporterUnfinished (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePCNoEngineInfo (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePCThreadTerminated (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePCUnknown (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePCUnknownFileType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePageCancelled (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePagerError (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePagerWriteError (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePermanentlyErased (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePlotAlreadyStarted (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePlotCancelled (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePlotStyleInColorDependentMode (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePointNotOnEntity (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePolyWidthLost (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ePreviewFailed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eProfileDoesNotExist (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eProfileIsInUse (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eProperClassSeparatorExpected (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eReadImageBufferFailed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eRecordNotInTable (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eReferencedInEquation (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eRegappIdNotFound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eRegistryAccessError (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eRegistryCreateError (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eRenameDoesNotExist (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eRenameInvalidLayoutName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eRenameInvalidName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eRenameIsModelSpace (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eRenameLayoutAlreadyExists (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eRepeatEntity (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eRepeatedDwgRead (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eRowsMustMatchColumns (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eSecErrorCipherNotSupported (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eSecErrorComputingSignature (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eSecErrorDecryptingData (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eSecErrorEncryptingData (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eSecErrorGeneratingTimestamp (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eSecErrorReadingFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eSecErrorWritingFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eSecErrorWritingSignature (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eSecInitializationFailure (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eSecInvalidDigitalID (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eSelfIntersecting (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eSelfReference (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eSetFailed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eSilentOpenFileCancelled (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eSingularPoint (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eSomeInputDataLeftUnread (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eStringNotAllowedInExpression (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eStringTooLong (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eSubSelectionSetEmpty (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eSubentitiesStillOpen (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eTargetDocNotQuiescent (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eTooFewLineTypeElements (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eTooFewVertices (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eTooManyActiveCommands (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eTooManyLineTypeElements (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eTooManyVertices (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eTransactionOpenWhileCommandEnded (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUnableToGetLabelBlock (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUnableToGetViewAssociation (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUnableToRemoveAssociation  (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUnableToRemoveOverrides (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUnableToRetrieveOverrides (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUnableToSetLabelBlock (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUnableToSetViewAssociation (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUnableToStoreOverrides (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUnableToStoreReconcileStatus (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUnableToSyncModelView (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUnableToTrimLastPiece (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUnableToTrimSurface (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUndefineShapeName (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUndefinedDxfGroupCode (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUndefinedLineType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUndoNoGroupBegin (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUndoOperationNotAvailable (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUnknownDxfFileFormat (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUnknownHandle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUnrecoverableErrors (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUnsupportedFileFormat (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUserBreak (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eUserUnloaded (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eVSAPIOnlyValues (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eVSAlreadyExists (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eVSFalse (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eVSIsAcadDefault (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eVSIsInUse (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eVSNotFound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eVSOneOffCreated (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eVSTrue (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eVertexAfterFace (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eVetoed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eWasErased (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eWasNotErased (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eWasNotForwarding (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eWasNotOpenForWrite (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eWasNotifying (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eWasOpenForNotify (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eWasOpenForRead (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eWasOpenForUndo (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eWasOpenForWrite (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eWriteImageBufferFailed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eWrongCellType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eWrongDatabase (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eWrongObjectType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eWrongSubentityType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eXRefDependent (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eXdataSizeExceeded (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eXrefReloadImpossibleAtThisTime (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def eXrefReloaded (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class EvalVariant:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (float)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,double)

__init__( (object)arg1, (int)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,int)

__init__( (object)arg1, (str)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (Point2d)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint2d)

__init__( (object)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def clear (self, *args, **kwargs)-> None :
      '''clear( (EvalVariant)arg1) -> None :

    C++ signature :
        void clear(class PyDbEvalVariant {lvalue})'''
    ...
    def copyFrom (self, *args, **kwargs)-> ErrorStatus :
      '''copyFrom( (EvalVariant)arg1, (RxObject)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus copyFrom(class PyDbEvalVariant {lvalue},class PyRxObject)'''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def getDouble (self, *args, **kwargs)-> float :
      '''getDouble( (EvalVariant)arg1) -> float :

    C++ signature :
        double getDouble(class PyDbEvalVariant {lvalue})'''
    ...
    def getInt16 (self, *args, **kwargs)-> int :
      '''getInt16( (EvalVariant)arg1) -> int :

    C++ signature :
        short getInt16(class PyDbEvalVariant {lvalue})'''
    ...
    def getInt32 (self, *args, **kwargs)-> int :
      '''getInt32( (EvalVariant)arg1) -> int :

    C++ signature :
        int getInt32(class PyDbEvalVariant {lvalue})'''
    ...
    def getObjectId (self, *args, **kwargs)-> ObjectId :
      '''getObjectId( (EvalVariant)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getObjectId(class PyDbEvalVariant {lvalue})'''
    ...
    def getPoint2d (self, *args, **kwargs)-> Point2d :
      '''getPoint2d( (EvalVariant)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d getPoint2d(class PyDbEvalVariant {lvalue})'''
    ...
    def getPoint3d (self, *args, **kwargs)-> Point3d :
      '''getPoint3d( (EvalVariant)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getPoint3d(class PyDbEvalVariant {lvalue})'''
    ...
    def getString (self, *args, **kwargs)-> str :
      '''getString( (EvalVariant)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getString(class PyDbEvalVariant {lvalue})'''
    ...
    def getType (self, *args, **kwargs)-> DwgDataType :
      '''getType( (EvalVariant)arg1) -> DwgDataType :

    C++ signature :
        enum AcDb::DwgDataType getType(class PyDbEvalVariant {lvalue})'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (RxObject)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyRxObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def setDouble (self, *args, **kwargs)-> ErrorStatus :
      '''setDouble( (EvalVariant)arg1, (DxfCode)arg2, (float)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDouble(class PyDbEvalVariant {lvalue},short,double)'''
    ...
    def setInt16 (self, *args, **kwargs)-> ErrorStatus :
      '''setInt16( (EvalVariant)arg1, (DxfCode)arg2, (DxfCode)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInt16(class PyDbEvalVariant {lvalue},short,short)'''
    ...
    def setInt32 (self, *args, **kwargs)-> ErrorStatus :
      '''setInt32( (EvalVariant)arg1, (DxfCode)arg2, (int)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInt32(class PyDbEvalVariant {lvalue},short,int)'''
    ...
    def setObjectId (self, *args, **kwargs)-> ErrorStatus :
      '''setObjectId( (EvalVariant)arg1, (DxfCode)arg2, (ObjectId)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setObjectId(class PyDbEvalVariant {lvalue},short,class PyDbObjectId)'''
    ...
    def setPoint2d (self, *args, **kwargs)-> ErrorStatus :
      '''setPoint2d( (EvalVariant)arg1, (DxfCode)arg2, (Point2d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPoint2d(class PyDbEvalVariant {lvalue},short,class AcGePoint2d)'''
    ...
    def setPoint3d (self, *args, **kwargs)-> ErrorStatus :
      '''setPoint3d( (EvalVariant)arg1, (DxfCode)arg2, (Point3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPoint3d(class PyDbEvalVariant {lvalue},short,class AcGePoint3d)'''
    ...
    def setString (self, *args, **kwargs)-> ErrorStatus :
      '''setString( (EvalVariant)arg1, (DxfCode)arg2, (str)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setString(class PyDbEvalVariant {lvalue},short,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...

class Extents:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Extents)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcDbExtents)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d)'''
    ...
    def addExt (self, *args, **kwargs)-> None :
      '''addExt( (Extents)arg1, (Extents)arg2) -> None :

    C++ signature :
        void addExt(class AcDbExtents {lvalue},class AcDbExtents)'''
    ...
    def addPoint (self, *args, **kwargs)-> None :
      '''addPoint( (Extents)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void addPoint(class AcDbExtents {lvalue},class AcGePoint3d)'''
    ...
    def expandBy (self, *args, **kwargs)-> None :
      '''expandBy( (Extents)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void expandBy(class AcDbExtents {lvalue},class AcGeVector3d)'''
    ...
    def maxPoint (self, *args, **kwargs)-> Point3d :
      '''maxPoint( (Extents)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d maxPoint(class AcDbExtents {lvalue})'''
    ...
    def minPoint (self, *args, **kwargs)-> Point3d :
      '''minPoint( (Extents)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d minPoint(class AcDbExtents {lvalue})'''
    ...
    def set (self, *args, **kwargs)-> ErrorStatus :
      '''set( (Extents)arg1, (Point3d)arg2, (Point3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus set(class AcDbExtents {lvalue},class AcGePoint3d,class AcGePoint3d)'''
    ...
    def transformBy (self, *args, **kwargs)-> None :
      '''transformBy( (Extents)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void transformBy(class AcDbExtents {lvalue},class AcGeMatrix3d)'''
    ...

class Extents2d:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Extents2d)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcDbExtents2d)

__init__( (object)arg1, (Point2d)arg2, (Point2d)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint2d,class AcGePoint2d)'''
    ...
    def addExt (self, *args, **kwargs)-> None :
      '''addExt( (Extents2d)arg1, (Extents2d)arg2) -> None :

    C++ signature :
        void addExt(class AcDbExtents2d {lvalue},class AcDbExtents2d)'''
    ...
    def addPoint (self, *args, **kwargs)-> None :
      '''addPoint( (Extents2d)arg1, (Point2d)arg2) -> None :

    C++ signature :
        void addPoint(class AcDbExtents2d {lvalue},class AcGePoint2d)'''
    ...
    def expandBy (self, *args, **kwargs)-> None :
      '''expandBy( (Extents2d)arg1, (Vector2d)arg2) -> None :

    C++ signature :
        void expandBy(class AcDbExtents2d {lvalue},class AcGeVector2d)'''
    ...
    def maxPoint (self, *args, **kwargs)-> Point2d :
      '''maxPoint( (Extents2d)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d maxPoint(class AcDbExtents2d {lvalue})'''
    ...
    def minPoint (self, *args, **kwargs)-> Point2d :
      '''minPoint( (Extents2d)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d minPoint(class AcDbExtents2d {lvalue})'''
    ...
    def set (self, *args, **kwargs)-> ErrorStatus :
      '''set( (Extents2d)arg1, (Point2d)arg2, (Point2d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus set(class AcDbExtents2d {lvalue},class AcGePoint2d,class AcGePoint2d)'''
    ...
    def transformBy (self, *args, **kwargs)-> None :
      '''transformBy( (Extents2d)arg1, (Matrix2d)arg2) -> None :

    C++ signature :
        void transformBy(class AcDbExtents2d {lvalue},class AcGeMatrix2d)'''
    ...

class ExtrudedSurface:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> ExtrudedSurface :
      '''cast( (RxObject)arg1) -> ExtrudedSurface :

    C++ signature :
        class PyDbExtrudedSurface cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> ExtrudedSurface :
      '''cloneFrom( (RxObject)arg1) -> ExtrudedSurface :

    C++ signature :
        class PyDbExtrudedSurface cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class Face:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (bool)arg5, (bool)arg6, (bool)arg7, (bool)arg8) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,bool,bool,bool,bool)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (bool)arg6, (bool)arg7, (bool)arg8, (bool)arg9) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,bool,bool,bool,bool)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Face :
      '''cast( (RxObject)arg1) -> Face :

    C++ signature :
        class PyDbFace cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Face :
      '''cloneFrom( (RxObject)arg1) -> Face :

    C++ signature :
        class PyDbFace cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def getVertexAt (self, *args, **kwargs)-> Point3d :
      '''getVertexAt( (Face)arg1, (int)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getVertexAt(class PyDbFace {lvalue},unsigned short)'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEdgeVisibleAt (self, *args, **kwargs)-> bool :
      '''isEdgeVisibleAt( (Face)arg1, (int)arg2) -> bool :

    C++ signature :
        bool isEdgeVisibleAt(class PyDbFace {lvalue},unsigned short)'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def makeEdgeInvisibleAt (self, *args, **kwargs)-> ErrorStatus :
      '''makeEdgeInvisibleAt( (Face)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus makeEdgeInvisibleAt(class PyDbFace {lvalue},unsigned short)'''
    ...
    def makeEdgeVisibleAt (self, *args, **kwargs)-> ErrorStatus :
      '''makeEdgeVisibleAt( (Face)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus makeEdgeVisibleAt(class PyDbFace {lvalue},unsigned short)'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVertexAt (self, *args, **kwargs)-> ErrorStatus :
      '''setVertexAt( (Face)arg1, (int)arg2, (Point3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVertexAt(class PyDbFace {lvalue},unsigned short,class AcGePoint3d)

setVertexAt( (Face)arg1, (int)arg2, (Point3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVertexAt(class PyDbFace {lvalue},unsigned short,class AcGePoint3d)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class FaceRecord:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (DxfCode)arg2, (DxfCode)arg3, (DxfCode)arg4, (DxfCode)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,short,short,short,short)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> FaceRecord :
      '''cast( (RxObject)arg1) -> FaceRecord :

    C++ signature :
        class PyDbFaceRecord cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> FaceRecord :
      '''cloneFrom( (RxObject)arg1) -> FaceRecord :

    C++ signature :
        class PyDbFaceRecord cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def getVertexAt (self, *args, **kwargs)-> int :
      '''getVertexAt( (FaceRecord)arg1, (int)arg2) -> int :

    C++ signature :
        short getVertexAt(class PyDbFaceRecord {lvalue},unsigned short)'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEdgeVisibleAt (self, *args, **kwargs)-> bool :
      '''isEdgeVisibleAt( (FaceRecord)arg1, (int)arg2) -> bool :

    C++ signature :
        bool isEdgeVisibleAt(class PyDbFaceRecord {lvalue},unsigned short)'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def makeEdgeInvisibleAt (self, *args, **kwargs)-> ErrorStatus :
      '''makeEdgeInvisibleAt( (FaceRecord)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus makeEdgeInvisibleAt(class PyDbFaceRecord {lvalue},unsigned short)'''
    ...
    def makeEdgeVisibleAt (self, *args, **kwargs)-> ErrorStatus :
      '''makeEdgeVisibleAt( (FaceRecord)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus makeEdgeVisibleAt(class PyDbFaceRecord {lvalue},unsigned short)'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVertexAt (self, *args, **kwargs)-> ErrorStatus :
      '''setVertexAt( (FaceRecord)arg1, (int)arg2, (DxfCode)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVertexAt(class PyDbFaceRecord {lvalue},unsigned short,short)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class Fcf:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (str)arg2, (Point3d)arg3, (Vector3d)arg4, (Vector3d)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class AcGePoint3d,class AcGeVector3d,class AcGeVector3d)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Fcf :
      '''cast( (RxObject)arg1) -> Fcf :

    C++ signature :
        class PyDbFcf cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Fcf :
      '''cloneFrom( (RxObject)arg1) -> Fcf :

    C++ signature :
        class PyDbFcf cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimclrd (self, *args, **kwargs)-> Color :
      '''dimclrd( (Fcf)arg1) -> Color :

    C++ signature :
        class AcCmColor dimclrd(class PyDbFcf {lvalue})'''
    ...
    def dimclrt (self, *args, **kwargs)-> Color :
      '''dimclrt( (Fcf)arg1) -> Color :

    C++ signature :
        class AcCmColor dimclrt(class PyDbFcf {lvalue})'''
    ...
    def dimensionStyle (self, *args, **kwargs)-> object :
      '''dimensionStyle( (Fcf)arg1) -> object :

    C++ signature :
        class PyDbHardPointerId dimensionStyle(class PyDbFcf {lvalue})'''
    ...
    def dimgap (self, *args, **kwargs)-> float :
      '''dimgap( (Fcf)arg1) -> float :

    C++ signature :
        double dimgap(class PyDbFcf {lvalue})'''
    ...
    def dimscale (self, *args, **kwargs)-> float :
      '''dimscale( (Fcf)arg1) -> float :

    C++ signature :
        double dimscale(class PyDbFcf {lvalue})'''
    ...
    def dimtxsty (self, *args, **kwargs)-> ObjectId :
      '''dimtxsty( (Fcf)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimtxsty(class PyDbFcf {lvalue})'''
    ...
    def dimtxt (self, *args, **kwargs)-> float :
      '''dimtxt( (Fcf)arg1) -> float :

    C++ signature :
        double dimtxt(class PyDbFcf {lvalue})'''
    ...
    def direction (self, *args, **kwargs)-> Vector3d :
      '''direction( (Fcf)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d direction(class PyDbFcf {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getBoundingPline (self, *args, **kwargs)-> list :
      '''getBoundingPline( (Fcf)arg1) -> list :

    C++ signature :
        class boost::python::list getBoundingPline(class PyDbFcf {lvalue})'''
    ...
    def getBoundingPoints (self, *args, **kwargs)-> list :
      '''getBoundingPoints( (Fcf)arg1) -> list :

    C++ signature :
        class boost::python::list getBoundingPoints(class PyDbFcf {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDimstyleData (self, *args, **kwargs)-> DimStyleTableRecord :
      '''getDimstyleData( (Fcf)arg1) -> DimStyleTableRecord :

    C++ signature :
        class PyDbDimStyleTableRecord getDimstyleData(class PyDbFcf {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def location (self, *args, **kwargs)-> Point3d :
      '''location( (Fcf)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d location(class PyDbFcf {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Fcf)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbFcf {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDimVars (self, *args, **kwargs)-> None :
      '''setDimVars( (Fcf)arg1) -> None :

    C++ signature :
        void setDimVars(class PyDbFcf {lvalue})'''
    ...
    def setDimclrd (self, *args, **kwargs)-> ErrorStatus :
      '''setDimclrd( (Fcf)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimclrd(class PyDbFcf {lvalue},class AcCmColor {lvalue})'''
    ...
    def setDimclrt (self, *args, **kwargs)-> ErrorStatus :
      '''setDimclrt( (Fcf)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimclrt(class PyDbFcf {lvalue},class AcCmColor {lvalue})'''
    ...
    def setDimensionStyle (self, *args, **kwargs)-> None :
      '''setDimensionStyle( (Fcf)arg1, (object)arg2) -> None :

    C++ signature :
        void setDimensionStyle(class PyDbFcf {lvalue},class PyDbHardPointerId)'''
    ...
    def setDimgap (self, *args, **kwargs)-> ErrorStatus :
      '''setDimgap( (Fcf)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimgap(class PyDbFcf {lvalue},double)'''
    ...
    def setDimscale (self, *args, **kwargs)-> ErrorStatus :
      '''setDimscale( (Fcf)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimscale(class PyDbFcf {lvalue},double)'''
    ...
    def setDimstyleData (self, *args, **kwargs)-> ErrorStatus :
      '''setDimstyleData( (Fcf)arg1, (DimStyleTableRecord)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbFcf {lvalue},class PyDbDimStyleTableRecord)

setDimstyleData( (Fcf)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbFcf {lvalue},class PyDbObjectId)'''
    ...
    def setDimtxsty (self, *args, **kwargs)-> ErrorStatus :
      '''setDimtxsty( (Fcf)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimtxsty(class PyDbFcf {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def setDimtxt (self, *args, **kwargs)-> ErrorStatus :
      '''setDimtxt( (Fcf)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimtxt(class PyDbFcf {lvalue},double)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setLocation (self, *args, **kwargs)-> None :
      '''setLocation( (Fcf)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setLocation(class PyDbFcf {lvalue},class AcGePoint3d)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOrientation (self, *args, **kwargs)-> None :
      '''setOrientation( (Fcf)arg1, (Vector3d)arg2, (Vector3d)arg3) -> None :

    C++ signature :
        void setOrientation(class PyDbFcf {lvalue},class AcGeVector3d,class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setText (self, *args, **kwargs)-> None :
      '''setText( (Fcf)arg1, (str)arg2) -> None :

    C++ signature :
        void setText(class PyDbFcf {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def text (self, *args, **kwargs)-> str :
      '''text( (Fcf)arg1, (int)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > text(class PyDbFcf {lvalue},int)'''
    ...
    def textAll (self, *args, **kwargs)-> str :
      '''textAll( (Fcf)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > textAll(class PyDbFcf {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class Field:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (str)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (str)arg2, (bool)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Field :
      '''cast( (RxObject)arg1) -> Field :

    C++ signature :
        class PyDbField cast(class PyRxObject)'''
    ...
    def childCount (self, *args, **kwargs)-> int :
      '''childCount( (Field)arg1) -> int :

    C++ signature :
        int childCount(class PyDbField {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Field :
      '''cloneFrom( (RxObject)arg1) -> Field :

    C++ signature :
        class PyDbField cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def convertToTextField (self, *args, **kwargs)-> ErrorStatus :
      '''convertToTextField( (Field)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus convertToTextField(class PyDbField {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def evaluate (self, *args, **kwargs)-> ErrorStatus :
      '''evaluate( (Field)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus evaluate(class PyDbField {lvalue})

evaluate( (Field)arg1, (FieldEvalContext)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus evaluate(class PyDbField {lvalue},enum AcDbField::EvalContext)

evaluate( (Field)arg1, (FieldEvalContext)arg2, (Database)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus evaluate(class PyDbField {lvalue},enum AcDbField::EvalContext,class PyDbDatabase {lvalue})'''
    ...
    def evaluationOption (self, *args, **kwargs)-> FieldEvalOption :
      '''evaluationOption( (Field)arg1) -> FieldEvalOption :

    C++ signature :
        enum AcDbField::EvalOption evaluationOption(class PyDbField {lvalue})'''
    ...
    def evaluationStatus (self, *args, **kwargs)-> FieldEvalStatus :
      '''evaluationStatus( (Field)arg1) -> FieldEvalStatus :

    C++ signature :
        enum AcDbField::EvalStatus evaluationStatus(class PyDbField {lvalue})'''
    ...
    def evaluatorId (self, *args, **kwargs)-> str :
      '''evaluatorId( (Field)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > evaluatorId(class PyDbField {lvalue})'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFormat (self, *args, **kwargs)-> str :
      '''getFormat( (Field)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getFormat(class PyDbField {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getValue (self, *args, **kwargs)-> str :
      '''getValue( (Field)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getValue(class PyDbField {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTextField (self, *args, **kwargs)-> bool :
      '''isTextField( (Field)arg1) -> bool :

    C++ signature :
        bool isTextField(class PyDbField {lvalue})'''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def postInDatabase (self, *args, **kwargs)-> ErrorStatus :
      '''postInDatabase( (Field)arg1, (Database)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus postInDatabase(class PyDbField {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setEvaluationOption (self, *args, **kwargs)-> ErrorStatus :
      '''setEvaluationOption( (Field)arg1, (FieldEvalOption)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setEvaluationOption(class PyDbField {lvalue},enum AcDbField::EvalOption)'''
    ...
    def setEvaluatorId (self, *args, **kwargs)-> ErrorStatus :
      '''setEvaluatorId( (Field)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setEvaluatorId(class PyDbField {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFormat (self, *args, **kwargs)-> ErrorStatus :
      '''setFormat( (Field)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFormat(class PyDbField {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setInObject (self, *args, **kwargs)-> ErrorStatus :
      '''setInObject( (Field)arg1, (DbObject)arg2, (str)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInObject(class PyDbField {lvalue},class PyDbObject {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def state (self, *args, **kwargs)-> FieldState :
      '''state( (Field)arg1) -> FieldState :

    C++ signature :
        enum AcDbField::State state(class PyDbField {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class FieldCodeFlag:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kAddMarkers (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kChildObjectReference (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDetachChildren (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kEscapeBackslash (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kEvaluatedChildren (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kEvaluatedText (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kFieldCode (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kForExpression (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kObjectReference (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPreserveFields (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPreserveOptions (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kStripOptions (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextField (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class FieldEvalContext:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kDemand (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kEtransmit (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOpen (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPlot (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPlotPreview (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPreview (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kRegen (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kSave (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class FieldEvalOption:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kAutomatic (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDisable (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOnDemand (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOnEtransmit (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOnOpen (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOnPlot (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOnRegen (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOnSave (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class FieldEvalStatus:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kEvaluatorNotFound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kInvalidCode (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kInvalidContext (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kNotYetEvaluated (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOtherError (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kSuccess (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kSyntaxError (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class FieldState:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kCompiled (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kEvaluated (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kHasCache (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kHasFormattedString (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kInitialized (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kModified (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class FindFileHint:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kARXApplication (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCloudOrProjectFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCompiledShapeFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDataLinkFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDefault (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kEmbeddedImageFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kFontFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kFontMapFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMaterialMapFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPatternFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPhotometricWebFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTrueTypeFontFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnderlayFile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kXRefDrawing (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class GridLineStyle:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kGridLineStyleDouble (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kGridLineStyleSingle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class GridLineType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kAllGridLineTypes (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kHorzBottom (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kHorzGridLineTypes (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kHorzInside (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kHorzTop (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kInnerGridLineTypes (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kInvalidGridLine (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOuterGridLineTypes (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kVertGridLineTypes (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kVertInside (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kVertLeft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kVertRight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class GridProperty:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kGridPropAll (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kGridPropColor (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kGridPropDoubleLineSpacing (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kGridPropInvalid (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kGridPropLineStyle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kGridPropLineWeight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kGridPropLinetype (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kGridPropVisibility (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Handle:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (int)arg2, (int)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,int,int)

__init__( (object)arg1, (str)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (int)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,unsigned __int64)'''
    ...
    def high (self, *args, **kwargs)-> int :
      '''high( (Handle)arg1) -> int :

    C++ signature :
        unsigned int high(class PyDbHandle {lvalue})'''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (Handle)arg1) -> bool :

    C++ signature :
        bool isNull(class PyDbHandle {lvalue})'''
    ...
    def isOne (self, *args, **kwargs)-> bool :
      '''isOne( (Handle)arg1) -> bool :

    C++ signature :
        bool isOne(class PyDbHandle {lvalue})'''
    ...
    def low (self, *args, **kwargs)-> int :
      '''low( (Handle)arg1) -> int :

    C++ signature :
        unsigned int low(class PyDbHandle {lvalue})'''
    ...
    def setHigh (self, *args, **kwargs)-> None :
      '''setHigh( (Handle)arg1, (int)arg2) -> None :

    C++ signature :
        void setHigh(class PyDbHandle {lvalue},unsigned int)'''
    ...
    def setLow (self, *args, **kwargs)-> None :
      '''setLow( (Handle)arg1, (int)arg2) -> None :

    C++ signature :
        void setLow(class PyDbHandle {lvalue},unsigned int)'''
    ...
    def setNull (self, *args, **kwargs)-> None :
      '''setNull( (Handle)arg1) -> None :

    C++ signature :
        void setNull(class PyDbHandle {lvalue})'''
    ...
    def setValue (self, *args, **kwargs)-> None :
      '''setValue( (Handle)arg1, (int)arg2) -> None :

    C++ signature :
        void setValue(class PyDbHandle {lvalue},unsigned __int64)'''
    ...
    def toString (self, *args, **kwargs)-> str :
      '''toString( (Handle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > toString(class PyDbHandle {lvalue})'''
    ...
    def value (self, *args, **kwargs)-> int :
      '''value( (Handle)arg1) -> int :

    C++ signature :
        unsigned __int64 value(class PyDbHandle {lvalue})'''
    ...

class Hatch:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def appendLoop (self, *args, **kwargs)-> ErrorStatus :
      '''appendLoop( (Hatch)arg1, (int)arg2, (list)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus appendLoop(class PyDbHatch {lvalue},int,class boost::python::list)'''
    ...
    def appendLoopBulges (self, *args, **kwargs)-> ErrorStatus :
      '''appendLoopBulges( (Hatch)arg1, (int)arg2, (list)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus appendLoopBulges(class PyDbHatch {lvalue},int,class boost::python::list,class boost::python::list)'''
    ...
    def appendLoopEdges (self, *args, **kwargs)-> ErrorStatus :
      '''appendLoopEdges( (Hatch)arg1, (int)arg2, (list)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus appendLoopEdges(class PyDbHatch {lvalue},int,class boost::python::list,class boost::python::list)'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def associative (self, *args, **kwargs)-> bool :
      '''associative( (Hatch)arg1) -> bool :

    C++ signature :
        bool associative(class PyDbHatch {lvalue})'''
    ...
    def backgroundColor (self, *args, **kwargs)-> Color :
      '''backgroundColor( (Hatch)arg1) -> Color :

    C++ signature :
        class AcCmColor backgroundColor(class PyDbHatch {lvalue})'''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Hatch :
      '''cast( (RxObject)arg1) -> Hatch :

    C++ signature :
        class PyDbHatch cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Hatch :
      '''cloneFrom( (RxObject)arg1) -> Hatch :

    C++ signature :
        class PyDbHatch cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def elevation (self, *args, **kwargs)-> float :
      '''elevation( (Hatch)arg1) -> float :

    C++ signature :
        double elevation(class PyDbHatch {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def evaluateGradientColorAt (self, *args, **kwargs)-> Color :
      '''evaluateGradientColorAt( (Hatch)arg1, (float)arg2) -> Color :

    C++ signature :
        class AcCmColor evaluateGradientColorAt(class PyDbHatch {lvalue},float)'''
    ...
    def evaluateHatch (self, *args, **kwargs)-> ErrorStatus :
      '''evaluateHatch( (Hatch)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus evaluateHatch(class PyDbHatch {lvalue})

evaluateHatch( (Hatch)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus evaluateHatch(class PyDbHatch {lvalue},bool)'''
    ...
    def evaluateHatchAllScales1 (self, *args, **kwargs)-> ErrorStatus :
      '''evaluateHatchAllScales1( (Hatch)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus evaluateHatchAllScales1(class PyDbHatch {lvalue})'''
    ...
    def evaluateHatchAllScales2 (self, *args, **kwargs)-> ErrorStatus :
      '''evaluateHatchAllScales2( (Hatch)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus evaluateHatchAllScales2(class PyDbHatch {lvalue},bool)'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getArea (self, *args, **kwargs)-> float :
      '''getArea( (Hatch)arg1) -> float :

    C++ signature :
        double getArea(class PyDbHatch {lvalue})'''
    ...
    def getAssocObjIds (self, *args, **kwargs)-> list :
      '''getAssocObjIds( (Hatch)arg1) -> list :

    C++ signature :
        class boost::python::list getAssocObjIds(class PyDbHatch {lvalue})'''
    ...
    def getAssocObjIdsAt (self, *args, **kwargs)-> list :
      '''getAssocObjIdsAt( (Hatch)arg1, (int)arg2) -> list :

    C++ signature :
        class boost::python::list getAssocObjIdsAt(class PyDbHatch {lvalue},int)'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getGradientColors (self, *args, **kwargs)-> tuple :
      '''getGradientColors( (Hatch)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getGradientColors(class PyDbHatch {lvalue})'''
    ...
    def getGradientOneColorMode (self, *args, **kwargs)-> bool :
      '''getGradientOneColorMode( (Hatch)arg1) -> bool :

    C++ signature :
        bool getGradientOneColorMode(class PyDbHatch {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getHatchLineDataAt (self, *args, **kwargs)-> tuple :
      '''getHatchLineDataAt( (Hatch)arg1, (int)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple getHatchLineDataAt(class PyDbHatch {lvalue},int)'''
    ...
    def getHatchLinesData (self, *args, **kwargs)-> tuple :
      '''getHatchLinesData( (Hatch)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getHatchLinesData(class PyDbHatch {lvalue})'''
    ...
    def getLoopBulgesAt (self, *args, **kwargs)-> tuple :
      '''getLoopBulgesAt( (Hatch)arg1, (int)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple getLoopBulgesAt(class PyDbHatch {lvalue},int)'''
    ...
    def getLoopEdgesAt (self, *args, **kwargs)-> tuple :
      '''getLoopEdgesAt( (Hatch)arg1, (int)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple getLoopEdgesAt(class PyDbHatch {lvalue},int)'''
    ...
    def getPatternDefinitionAt (self, *args, **kwargs)-> tuple :
      '''getPatternDefinitionAt( (Hatch)arg1, (int)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple getPatternDefinitionAt(class PyDbHatch {lvalue},int)'''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def getRegionArea (self, *args, **kwargs)-> Region :
      '''getRegionArea( (Hatch)arg1) -> Region :

    C++ signature :
        class PyDbRegion getRegionArea(class PyDbHatch {lvalue})'''
    ...
    def getShadeTintValue (self, *args, **kwargs)-> float :
      '''getShadeTintValue( (Hatch)arg1) -> float :

    C++ signature :
        float getShadeTintValue(class PyDbHatch {lvalue})'''
    ...
    def gradientAngle (self, *args, **kwargs)-> float :
      '''gradientAngle( (Hatch)arg1) -> float :

    C++ signature :
        double gradientAngle(class PyDbHatch {lvalue})'''
    ...
    def gradientName (self, *args, **kwargs)-> str :
      '''gradientName( (Hatch)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > gradientName(class PyDbHatch {lvalue})'''
    ...
    def gradientShift (self, *args, **kwargs)-> float :
      '''gradientShift( (Hatch)arg1) -> float :

    C++ signature :
        float gradientShift(class PyDbHatch {lvalue})'''
    ...
    def gradientType (self, *args, **kwargs)-> HatchGradientPatternType :
      '''gradientType( (Hatch)arg1) -> HatchGradientPatternType :

    C++ signature :
        enum AcDbHatch::GradientPatternType gradientType(class PyDbHatch {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def hatchObjectType (self, *args, **kwargs)-> HatchObjectType :
      '''hatchObjectType( (Hatch)arg1) -> HatchObjectType :

    C++ signature :
        enum AcDbHatch::HatchObjectType hatchObjectType(class PyDbHatch {lvalue})'''
    ...
    def hatchStyle (self, *args, **kwargs)-> HatchStyle :
      '''hatchStyle( (Hatch)arg1) -> HatchStyle :

    C++ signature :
        enum AcDbHatch::HatchStyle hatchStyle(class PyDbHatch {lvalue})'''
    ...
    def insertLoopAt (self, *args, **kwargs)-> ErrorStatus :
      '''insertLoopAt( (Hatch)arg1, (int)arg2, (int)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus insertLoopAt(class PyDbHatch {lvalue},int,int,class boost::python::list)'''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isGradient (self, *args, **kwargs)-> bool :
      '''isGradient( (Hatch)arg1) -> bool :

    C++ signature :
        bool isGradient(class PyDbHatch {lvalue})'''
    ...
    def isHatch (self, *args, **kwargs)-> bool :
      '''isHatch( (Hatch)arg1) -> bool :

    C++ signature :
        bool isHatch(class PyDbHatch {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isSolidFill (self, *args, **kwargs)-> bool :
      '''isSolidFill( (Hatch)arg1) -> bool :

    C++ signature :
        bool isSolidFill(class PyDbHatch {lvalue})'''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineGenerationEnabled (self, *args, **kwargs)-> bool :
      '''lineGenerationEnabled( (Hatch)arg1) -> bool :

    C++ signature :
        bool lineGenerationEnabled(class PyDbHatch {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Hatch)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbHatch {lvalue})'''
    ...
    def numHatchLines (self, *args, **kwargs)-> int :
      '''numHatchLines( (Hatch)arg1) -> int :

    C++ signature :
        int numHatchLines(class PyDbHatch {lvalue})'''
    ...
    def numLoops (self, *args, **kwargs)-> int :
      '''numLoops( (Hatch)arg1) -> int :

    C++ signature :
        int numLoops(class PyDbHatch {lvalue})'''
    ...
    def numPatternDefinitions (self, *args, **kwargs)-> int :
      '''numPatternDefinitions( (Hatch)arg1) -> int :

    C++ signature :
        int numPatternDefinitions(class PyDbHatch {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def originPoint (self, *args, **kwargs)-> Point2d :
      '''originPoint( (Hatch)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d originPoint(class PyDbHatch {lvalue})'''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def patternAngle (self, *args, **kwargs)-> float :
      '''patternAngle( (Hatch)arg1) -> float :

    C++ signature :
        double patternAngle(class PyDbHatch {lvalue})'''
    ...
    def patternDouble (self, *args, **kwargs)-> bool :
      '''patternDouble( (Hatch)arg1) -> bool :

    C++ signature :
        bool patternDouble(class PyDbHatch {lvalue})'''
    ...
    def patternName (self, *args, **kwargs)-> str :
      '''patternName( (Hatch)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > patternName(class PyDbHatch {lvalue})'''
    ...
    def patternScale (self, *args, **kwargs)-> float :
      '''patternScale( (Hatch)arg1) -> float :

    C++ signature :
        double patternScale(class PyDbHatch {lvalue})'''
    ...
    def patternSpace (self, *args, **kwargs)-> float :
      '''patternSpace( (Hatch)arg1) -> float :

    C++ signature :
        double patternSpace(class PyDbHatch {lvalue})'''
    ...
    def patternType (self, *args, **kwargs)-> HatchPatternType :
      '''patternType( (Hatch)arg1) -> HatchPatternType :

    C++ signature :
        enum AcDbHatch::HatchPatternType patternType(class PyDbHatch {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeAssocObjIds (self, *args, **kwargs)-> ErrorStatus :
      '''removeAssocObjIds( (Hatch)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeAssocObjIds(class PyDbHatch {lvalue})'''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removeHatchLines (self, *args, **kwargs)-> None :
      '''removeHatchLines( (Hatch)arg1) -> None :

    C++ signature :
        void removeHatchLines(class PyDbHatch {lvalue})'''
    ...
    def removeLoopAt (self, *args, **kwargs)-> ErrorStatus :
      '''removeLoopAt( (Hatch)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeLoopAt(class PyDbHatch {lvalue},int)'''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setAssociative (self, *args, **kwargs)-> ErrorStatus :
      '''setAssociative( (Hatch)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAssociative(class PyDbHatch {lvalue},bool)'''
    ...
    def setBackgroundColor (self, *args, **kwargs)-> ErrorStatus :
      '''setBackgroundColor( (Hatch)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBackgroundColor(class PyDbHatch {lvalue},class AcCmColor)'''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setElevation (self, *args, **kwargs)-> ErrorStatus :
      '''setElevation( (Hatch)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setElevation(class PyDbHatch {lvalue},double)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setGradient (self, *args, **kwargs)-> ErrorStatus :
      '''setGradient( (Hatch)arg1, (HatchGradientPatternType)arg2, (str)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGradient(class PyDbHatch {lvalue},enum AcDbHatch::GradientPatternType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setGradientAngle (self, *args, **kwargs)-> ErrorStatus :
      '''setGradientAngle( (Hatch)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGradientAngle(class PyDbHatch {lvalue},double)'''
    ...
    def setGradientColors (self, *args, **kwargs)-> ErrorStatus :
      '''setGradientColors( (Hatch)arg1, (list)arg2, (list)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGradientColors(class PyDbHatch {lvalue},class boost::python::list,class boost::python::list)'''
    ...
    def setGradientOneColorMode (self, *args, **kwargs)-> ErrorStatus :
      '''setGradientOneColorMode( (Hatch)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGradientOneColorMode(class PyDbHatch {lvalue},bool)'''
    ...
    def setGradientShift (self, *args, **kwargs)-> ErrorStatus :
      '''setGradientShift( (Hatch)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGradientShift(class PyDbHatch {lvalue},float)'''
    ...
    def setHatchObjectType (self, *args, **kwargs)-> ErrorStatus :
      '''setHatchObjectType( (Hatch)arg1, (HatchObjectType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHatchObjectType(class PyDbHatch {lvalue},enum AcDbHatch::HatchObjectType)'''
    ...
    def setHatchStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setHatchStyle( (Hatch)arg1, (HatchStyle)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHatchStyle(class PyDbHatch {lvalue},enum AcDbHatch::HatchStyle)'''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineGenerationEnabled (self, *args, **kwargs)-> bool :
      '''setLineGenerationEnabled( (Hatch)arg1, (bool)arg2) -> bool :

    C++ signature :
        bool setLineGenerationEnabled(class PyDbHatch {lvalue},bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs)-> ErrorStatus :
      '''setNormal( (Hatch)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbHatch {lvalue},class AcGeVector3d)'''
    ...
    def setOriginPoint (self, *args, **kwargs)-> ErrorStatus :
      '''setOriginPoint( (Hatch)arg1, (Point2d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOriginPoint(class PyDbHatch {lvalue},class AcGePoint2d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPattern (self, *args, **kwargs)-> ErrorStatus :
      '''setPattern( (Hatch)arg1, (HatchPatternType)arg2, (str)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPattern(class PyDbHatch {lvalue},enum AcDbHatch::HatchPatternType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPatternAngle (self, *args, **kwargs)-> ErrorStatus :
      '''setPatternAngle( (Hatch)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPatternAngle(class PyDbHatch {lvalue},double)'''
    ...
    def setPatternDouble (self, *args, **kwargs)-> ErrorStatus :
      '''setPatternDouble( (Hatch)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPatternDouble(class PyDbHatch {lvalue},bool)'''
    ...
    def setPatternScale (self, *args, **kwargs)-> ErrorStatus :
      '''setPatternScale( (Hatch)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPatternScale(class PyDbHatch {lvalue},double)'''
    ...
    def setPatternSpace (self, *args, **kwargs)-> ErrorStatus :
      '''setPatternSpace( (Hatch)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPatternSpace(class PyDbHatch {lvalue},double)'''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setShadeTintValue (self, *args, **kwargs)-> ErrorStatus :
      '''setShadeTintValue( (Hatch)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setShadeTintValue(class PyDbHatch {lvalue},float)'''
    ...
    def setShadeTintValueAndColor2 (self, *args, **kwargs)-> ErrorStatus :
      '''setShadeTintValueAndColor2( (Hatch)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setShadeTintValueAndColor2(class PyDbHatch {lvalue},float)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class HatchEdgeType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kCirArc (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kEllArc (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLine (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kSpline (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class HatchGradientPatternType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kPreDefinedGradient (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUserDefinedGradient (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class HatchLoopType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kDefault (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDerived (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDoesNotSupportScale (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDuplicate (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kExternal (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kForceAnnoAllVisible (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kIsAnnotative (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kIsAnnotativeBlock (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kNotClosed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOrientToPaper (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOutermost (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPolyline (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kSelfIntersecting (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextIsland (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextbox (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class HatchObjectType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kGradientObject (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kHatchObject (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class HatchPatternType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kCustomDefined (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPreDefined (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUserDefined (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class HatchStyle:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kIgnore (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kNormal (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOuter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class HostApplicationServices:
    def LayoutManager (self, *args, **kwargs)-> LayoutManager :
      '''LayoutManager( (HostApplicationServices)arg1) -> LayoutManager :

    C++ signature :
        class PyDbLayoutManager LayoutManager(class PyDbHostApplicationServices {lvalue})'''
    ...
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def findFile (self, *args, **kwargs)-> str :
      '''findFile( (HostApplicationServices)arg1, (str)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > findFile(class PyDbHostApplicationServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

findFile( (HostApplicationServices)arg1, (str)arg2, (Database)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > findFile(class PyDbHostApplicationServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)

findFile( (HostApplicationServices)arg1, (str)arg2, (Database)arg3, (FindFileHint)arg4) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > findFile(class PyDbHostApplicationServices {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase,enum AcDbHostApplicationServices::FindFileHint)'''
    ...
    def product (self, *args, **kwargs)-> str :
      '''product( (HostApplicationServices)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > product(class PyDbHostApplicationServices {lvalue})'''
    ...
    def setWorkingDatabase (self, *args, **kwargs)-> None :
      '''setWorkingDatabase( (HostApplicationServices)arg1, (Database)arg2) -> None :

    C++ signature :
        void setWorkingDatabase(class PyDbHostApplicationServices {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def workingDatabase (self, *args, **kwargs)-> Database :
      '''workingDatabase( (HostApplicationServices)arg1) -> Database :

    C++ signature :
        class PyDbDatabase workingDatabase(class PyDbHostApplicationServices {lvalue})'''
    ...

class IdMapping:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...

class Image:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Image :
      '''cast( (RxObject)arg1) -> Image :

    C++ signature :
        class PyDbImage cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Image :
      '''cloneFrom( (RxObject)arg1) -> Image :

    C++ signature :
        class PyDbImage cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class ImageDisplayOpt:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kClip (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kShow (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kShowUnAligned (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTransparent (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class ImageUnits:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kAngstroms (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kAstronomical (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCentimeter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDecimeters (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDekameters (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kFoot (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kGigameters (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kHectometers (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kInch (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kKilometer (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLightYears (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMeter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMicroinches (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMicrons (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMillimeter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMils (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kNanometers (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kNone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kParsecs (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kYard (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Intersect:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kExtendArg (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kExtendBoth (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kExtendThis (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOnBothOperands (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class JoinStyle:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kJnStylAngle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kJnStylFlat (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kJnStylNone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kJnStylRound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class LayerTable:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def add (self, *args, **kwargs)-> ObjectId :
      '''add( (LayerTable)arg1, (LayerTableRecord)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId add(class PyDbLayerTable {lvalue},class PyDbLayerTableRecord)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> LayerTable :
      '''cast( (RxObject)arg1) -> LayerTable :

    C++ signature :
        class PyDbLayerTable cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> LayerTable :
      '''cloneFrom( (RxObject)arg1) -> LayerTable :

    C++ signature :
        class PyDbLayerTable cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getAt (self, *args, **kwargs)-> ObjectId :
      '''getAt( (SymbolTable)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getAt(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def has (self, *args, **kwargs)-> bool :
      '''has( (SymbolTable)arg1, (str)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

has( (SymbolTable)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class PyDbObjectId)'''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def recordIds (self, *args, **kwargs)-> list :
      '''recordIds( (SymbolTable)arg1) -> list :

    C++ signature :
        class boost::python::list recordIds(class PyDbSymbolTable {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def toDict (self, *args, **kwargs)-> dict :
      '''toDict( (SymbolTable)arg1) -> dict :

    C++ signature :
        class boost::python::dict toDict(class PyDbSymbolTable {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class LayerTableRecord:
    def VPDFLT (self, *args, **kwargs)-> bool :
      '''VPDFLT( (LayerTableRecord)arg1) -> bool :

    C++ signature :
        bool VPDFLT(class PyDbLayerTableRecord {lvalue})'''
    ...
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> LayerTableRecord :
      '''cast( (RxObject)arg1) -> LayerTableRecord :

    C++ signature :
        class PyDbLayerTableRecord cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> LayerTableRecord :
      '''cloneFrom( (RxObject)arg1) -> LayerTableRecord :

    C++ signature :
        class PyDbLayerTableRecord cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (LayerTableRecord)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbLayerTableRecord {lvalue})

color( (LayerTableRecord)arg1, (ObjectId)arg2) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def description (self, *args, **kwargs)-> str :
      '''description( (LayerTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > description(class PyDbLayerTableRecord {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (LayerTableRecord)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbLayerTableRecord {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getName (self, *args, **kwargs)-> str :
      '''getName( (SymbolTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getName(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasAnyOverrides (self, *args, **kwargs)-> bool :
      '''hasAnyOverrides( (LayerTableRecord)arg1) -> bool :

    C++ signature :
        bool hasAnyOverrides(class PyDbLayerTableRecord {lvalue})'''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasOverrides (self, *args, **kwargs)-> bool :
      '''hasOverrides( (LayerTableRecord)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool hasOverrides(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isDependent (self, *args, **kwargs)-> bool :
      '''isDependent( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isDependent(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isFrozen (self, *args, **kwargs)-> bool :
      '''isFrozen( (LayerTableRecord)arg1) -> bool :

    C++ signature :
        bool isFrozen(class PyDbLayerTableRecord {lvalue})'''
    ...
    def isHidden (self, *args, **kwargs)-> bool :
      '''isHidden( (LayerTableRecord)arg1) -> bool :

    C++ signature :
        bool isHidden(class PyDbLayerTableRecord {lvalue})

isHidden( (ObjectId)arg1) -> bool :

    C++ signature :
        bool isHidden(class PyDbObjectId)'''
    ...
    def isInUse (self, *args, **kwargs)-> bool :
      '''isInUse( (LayerTableRecord)arg1) -> bool :

    C++ signature :
        bool isInUse(class PyDbLayerTableRecord {lvalue})'''
    ...
    def isLocked (self, *args, **kwargs)-> bool :
      '''isLocked( (LayerTableRecord)arg1) -> bool :

    C++ signature :
        bool isLocked(class PyDbLayerTableRecord {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isOff (self, *args, **kwargs)-> bool :
      '''isOff( (LayerTableRecord)arg1) -> bool :

    C++ signature :
        bool isOff(class PyDbLayerTableRecord {lvalue})'''
    ...
    def isPlottable (self, *args, **kwargs)-> bool :
      '''isPlottable( (LayerTableRecord)arg1) -> bool :

    C++ signature :
        bool isPlottable(class PyDbLayerTableRecord {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReconciled (self, *args, **kwargs)-> bool :
      '''isReconciled( (LayerTableRecord)arg1) -> bool :

    C++ signature :
        bool isReconciled(class PyDbLayerTableRecord {lvalue})

isReconciled( (ObjectId)arg1) -> bool :

    C++ signature :
        bool isReconciled(class PyDbObjectId)'''
    ...
    def isRenamable (self, *args, **kwargs)-> bool :
      '''isRenamable( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isRenamable(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isResolved (self, *args, **kwargs)-> bool :
      '''isResolved( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isResolved(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (LayerTableRecord)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbLayerTableRecord {lvalue})

lineWeight( (LayerTableRecord)arg1, (ObjectId)arg2) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def linetypeObjectId (self, *args, **kwargs)-> ObjectId :
      '''linetypeObjectId( (LayerTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeObjectId(class PyDbLayerTableRecord {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (LayerTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbLayerTableRecord {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (LayerTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbLayerTableRecord {lvalue})

plotStyleName( (LayerTableRecord)arg1, (ObjectId)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def plotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''plotStyleNameId( (LayerTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId plotStyleNameId(class PyDbLayerTableRecord {lvalue})

plotStyleNameId( (LayerTableRecord)arg1, (ObjectId)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId plotStyleNameId(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeAllOverrides (self, *args, **kwargs)-> ErrorStatus :
      '''removeAllOverrides( (LayerTableRecord)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeAllOverrides(class PyDbLayerTableRecord {lvalue})

removeAllOverrides( (LayerTableRecord)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeAllOverrides(class PyDbLayerTableRecord {lvalue})'''
    ...
    def removeColorOverride (self, *args, **kwargs)-> ErrorStatus :
      '''removeColorOverride( (LayerTableRecord)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeColorOverride(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removeLineWeightOverride (self, *args, **kwargs)-> ErrorStatus :
      '''removeLineWeightOverride( (LayerTableRecord)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeLineWeightOverride(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def removeLinetypeOverride (self, *args, **kwargs)-> ErrorStatus :
      '''removeLinetypeOverride( (LayerTableRecord)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeLinetypeOverride(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePlotStyleOverride (self, *args, **kwargs)-> ErrorStatus :
      '''removePlotStyleOverride( (LayerTableRecord)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removePlotStyleOverride(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def removeTransparencyOverride (self, *args, **kwargs)-> ErrorStatus :
      '''removeTransparencyOverride( (LayerTableRecord)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeTransparencyOverride(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def removeViewportOverrides (self, *args, **kwargs)-> ErrorStatus :
      '''removeViewportOverrides( (LayerTableRecord)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeViewportOverrides(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setColor (self, *args, **kwargs)-> None :
      '''setColor( (LayerTableRecord)arg1, (Color)arg2) -> None :

    C++ signature :
        void setColor(class PyDbLayerTableRecord {lvalue},class AcCmColor)

setColor( (LayerTableRecord)arg1, (Color)arg2, (ObjectId)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbLayerTableRecord {lvalue},class AcCmColor,class PyDbObjectId)'''
    ...
    def setDescription (self, *args, **kwargs)-> ErrorStatus :
      '''setDescription( (LayerTableRecord)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDescription(class PyDbLayerTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setIsFrozen (self, *args, **kwargs)-> ErrorStatus :
      '''setIsFrozen( (LayerTableRecord)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setIsFrozen(class PyDbLayerTableRecord {lvalue},bool)'''
    ...
    def setIsHidden (self, *args, **kwargs)-> ErrorStatus :
      '''setIsHidden( (LayerTableRecord)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setIsHidden(class PyDbLayerTableRecord {lvalue},bool)'''
    ...
    def setIsLocked (self, *args, **kwargs)-> None :
      '''setIsLocked( (LayerTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsLocked(class PyDbLayerTableRecord {lvalue},bool)'''
    ...
    def setIsOff (self, *args, **kwargs)-> None :
      '''setIsOff( (LayerTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsOff(class PyDbLayerTableRecord {lvalue},bool)'''
    ...
    def setIsPlottable (self, *args, **kwargs)-> ErrorStatus :
      '''setIsPlottable( (LayerTableRecord)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setIsPlottable(class PyDbLayerTableRecord {lvalue},bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (LayerTableRecord)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbLayerTableRecord {lvalue},enum AcDb::LineWeight)

setLineWeight( (LayerTableRecord)arg1, (LineWeight)arg2, (ObjectId)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbLayerTableRecord {lvalue},enum AcDb::LineWeight,class PyDbObjectId)'''
    ...
    def setLinetypeObjectId (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeObjectId( (LayerTableRecord)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeObjectId(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setMaterialId (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterialId( (LayerTableRecord)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterialId(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setName (self, *args, **kwargs)-> ErrorStatus :
      '''setName( (SymbolTableRecord)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setName(class PyDbSymbolTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (LayerTableRecord)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbLayerTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setPlotStyleName( (LayerTableRecord)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)

setPlotStyleName( (LayerTableRecord)arg1, (ObjectId)arg2, (ObjectId)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbLayerTableRecord {lvalue},class PyDbObjectId,class PyDbObjectId)

setPlotStyleName( (LayerTableRecord)arg1, (str)arg2, (ObjectId)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbLayerTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def setTransparency (self, *args, **kwargs)-> ErrorStatus :
      '''setTransparency( (LayerTableRecord)arg1, (Transparency)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTransparency(class PyDbLayerTableRecord {lvalue},class AcCmTransparency)

setTransparency( (LayerTableRecord)arg1, (Transparency)arg2, (ObjectId)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTransparency(class PyDbLayerTableRecord {lvalue},class AcCmTransparency,class PyDbObjectId)'''
    ...
    def setVPDFLT (self, *args, **kwargs)-> None :
      '''setVPDFLT( (LayerTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVPDFLT(class PyDbLayerTableRecord {lvalue},bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def transparency (self, *args, **kwargs)-> Transparency :
      '''transparency( (LayerTableRecord)arg1) -> Transparency :

    C++ signature :
        class AcCmTransparency transparency(class PyDbLayerTableRecord {lvalue})

transparency( (LayerTableRecord)arg1, (ObjectId)arg2) -> Transparency :

    C++ signature :
        class AcCmTransparency transparency(class PyDbLayerTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class Layout:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def addToLayoutDict (self, *args, **kwargs)-> ErrorStatus :
      '''addToLayoutDict( (Layout)arg1, (Database)arg2, (ObjectId)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addToLayoutDict(class PyDbLayout {lvalue},class PyDbDatabase {lvalue},class PyDbObjectId)'''
    ...
    def addToPlotSettingsDict (self, *args, **kwargs)-> ErrorStatus :
      '''addToPlotSettingsDict( (PlotSettings)arg1, (Database)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addToPlotSettingsDict(class PyDbPlotSettings {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def annoAllVisible (self, *args, **kwargs)-> bool :
      '''annoAllVisible( (Layout)arg1) -> bool :

    C++ signature :
        bool annoAllVisible(class PyDbLayout {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Layout :
      '''cast( (RxObject)arg1) -> Layout :

    C++ signature :
        class PyDbLayout cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Layout :
      '''cloneFrom( (RxObject)arg1) -> Layout :

    C++ signature :
        class PyDbLayout cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def drawViewportsFirst (self, *args, **kwargs)-> bool :
      '''drawViewportsFirst( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool drawViewportsFirst(class PyDbPlotSettings {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getBlockTableRecordId (self, *args, **kwargs)-> ObjectId :
      '''getBlockTableRecordId( (Layout)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getBlockTableRecordId(class PyDbLayout {lvalue})'''
    ...
    def getCanonicalMediaName (self, *args, **kwargs)-> str :
      '''getCanonicalMediaName( (PlotSettings)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getCanonicalMediaName(class PyDbPlotSettings {lvalue})'''
    ...
    def getCurrentStyleSheet (self, *args, **kwargs)-> str :
      '''getCurrentStyleSheet( (PlotSettings)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getCurrentStyleSheet(class PyDbPlotSettings {lvalue})'''
    ...
    def getCustomPrintScale (self, *args, **kwargs)-> tuple :
      '''getCustomPrintScale( (PlotSettings)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getCustomPrintScale(class PyDbPlotSettings {lvalue})'''
    ...
    def getExtents (self, *args, **kwargs)-> tuple :
      '''getExtents( (Layout)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getExtents(class PyDbLayout {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getLayoutName (self, *args, **kwargs)-> str :
      '''getLayoutName( (Layout)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getLayoutName(class PyDbLayout {lvalue})'''
    ...
    def getLimits (self, *args, **kwargs)-> tuple :
      '''getLimits( (Layout)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getLimits(class PyDbLayout {lvalue})'''
    ...
    def getPlotCfgName (self, *args, **kwargs)-> str :
      '''getPlotCfgName( (PlotSettings)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getPlotCfgName(class PyDbPlotSettings {lvalue})'''
    ...
    def getPlotOrigin (self, *args, **kwargs)-> tuple :
      '''getPlotOrigin( (PlotSettings)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getPlotOrigin(class PyDbPlotSettings {lvalue})'''
    ...
    def getPlotPaperMargins (self, *args, **kwargs)-> tuple :
      '''getPlotPaperMargins( (PlotSettings)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getPlotPaperMargins(class PyDbPlotSettings {lvalue})'''
    ...
    def getPlotPaperSize (self, *args, **kwargs)-> tuple :
      '''getPlotPaperSize( (PlotSettings)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getPlotPaperSize(class PyDbPlotSettings {lvalue})'''
    ...
    def getPlotSettingsName (self, *args, **kwargs)-> str :
      '''getPlotSettingsName( (PlotSettings)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getPlotSettingsName(class PyDbPlotSettings {lvalue})'''
    ...
    def getPlotViewName (self, *args, **kwargs)-> str :
      '''getPlotViewName( (PlotSettings)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getPlotViewName(class PyDbPlotSettings {lvalue})'''
    ...
    def getPlotWindowArea (self, *args, **kwargs)-> tuple :
      '''getPlotWindowArea( (PlotSettings)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getPlotWindowArea(class PyDbPlotSettings {lvalue})'''
    ...
    def getStdScale (self, *args, **kwargs)-> float :
      '''getStdScale( (PlotSettings)arg1) -> float :

    C++ signature :
        double getStdScale(class PyDbPlotSettings {lvalue})'''
    ...
    def getTabOrder (self, *args, **kwargs)-> int :
      '''getTabOrder( (Layout)arg1) -> int :

    C++ signature :
        int getTabOrder(class PyDbLayout {lvalue})'''
    ...
    def getTabSelected (self, *args, **kwargs)-> bool :
      '''getTabSelected( (Layout)arg1) -> bool :

    C++ signature :
        bool getTabSelected(class PyDbLayout {lvalue})'''
    ...
    def getViewportArray (self, *args, **kwargs)-> list :
      '''getViewportArray( (Layout)arg1) -> list :

    C++ signature :
        class boost::python::list getViewportArray(class PyDbLayout {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def initialize (self, *args, **kwargs)-> ErrorStatus :
      '''initialize( (Layout)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus initialize(class PyDbLayout {lvalue})

initialize( (Layout)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus initialize(class PyDbLayout {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def modelType (self, *args, **kwargs)-> bool :
      '''modelType( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool modelType(class PyDbPlotSettings {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotAsRaster (self, *args, **kwargs)-> bool :
      '''plotAsRaster( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotAsRaster(class PyDbPlotSettings {lvalue})'''
    ...
    def plotCentered (self, *args, **kwargs)-> bool :
      '''plotCentered( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotCentered(class PyDbPlotSettings {lvalue})'''
    ...
    def plotHidden (self, *args, **kwargs)-> bool :
      '''plotHidden( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotHidden(class PyDbPlotSettings {lvalue})'''
    ...
    def plotPaperUnits (self, *args, **kwargs)-> PlotPaperUnits :
      '''plotPaperUnits( (PlotSettings)arg1) -> PlotPaperUnits :

    C++ signature :
        enum AcDbPlotSettings::PlotPaperUnits plotPaperUnits(class PyDbPlotSettings {lvalue})'''
    ...
    def plotPlotStyles (self, *args, **kwargs)-> bool :
      '''plotPlotStyles( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotPlotStyles(class PyDbPlotSettings {lvalue})'''
    ...
    def plotRotation (self, *args, **kwargs)-> PlotRotation :
      '''plotRotation( (PlotSettings)arg1) -> PlotRotation :

    C++ signature :
        enum AcDbPlotSettings::PlotRotation plotRotation(class PyDbPlotSettings {lvalue})'''
    ...
    def plotTransparency (self, *args, **kwargs)-> bool :
      '''plotTransparency( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotTransparency(class PyDbPlotSettings {lvalue})'''
    ...
    def plotType (self, *args, **kwargs)-> PlotType :
      '''plotType( (PlotSettings)arg1) -> PlotType :

    C++ signature :
        enum AcDbPlotSettings::PlotType plotType(class PyDbPlotSettings {lvalue})'''
    ...
    def plotViewportBorders (self, *args, **kwargs)-> bool :
      '''plotViewportBorders( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotViewportBorders(class PyDbPlotSettings {lvalue})'''
    ...
    def plotWireframe (self, *args, **kwargs)-> bool :
      '''plotWireframe( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotWireframe(class PyDbPlotSettings {lvalue})'''
    ...
    def printLineweights (self, *args, **kwargs)-> bool :
      '''printLineweights( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool printLineweights(class PyDbPlotSettings {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def scaleLineweights (self, *args, **kwargs)-> bool :
      '''scaleLineweights( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool scaleLineweights(class PyDbPlotSettings {lvalue})'''
    ...
    def setAnnoAllVisible (self, *args, **kwargs)-> ErrorStatus :
      '''setAnnoAllVisible( (Layout)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAnnoAllVisible(class PyDbLayout {lvalue},bool)'''
    ...
    def setBlockTableRecordId (self, *args, **kwargs)-> ErrorStatus :
      '''setBlockTableRecordId( (Layout)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockTableRecordId(class PyDbLayout {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def setDrawViewportsFirst (self, *args, **kwargs)-> None :
      '''setDrawViewportsFirst( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setDrawViewportsFirst(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayoutName (self, *args, **kwargs)-> ErrorStatus :
      '''setLayoutName( (Layout)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayoutName(class PyDbLayout {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotHidden (self, *args, **kwargs)-> None :
      '''setPlotHidden( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPlotHidden(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setPlotPlotStyles (self, *args, **kwargs)-> None :
      '''setPlotPlotStyles( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPlotPlotStyles(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setPlotSettingsName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotSettingsName( (PlotSettings)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotSettingsName(class PyDbPlotSettings {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPlotTransparency (self, *args, **kwargs)-> None :
      '''setPlotTransparency( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPlotTransparency(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setPlotViewportBorders (self, *args, **kwargs)-> None :
      '''setPlotViewportBorders( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPlotViewportBorders(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setPrintLineweights (self, *args, **kwargs)-> None :
      '''setPrintLineweights( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPrintLineweights(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setScaleLineweights (self, *args, **kwargs)-> None :
      '''setScaleLineweights( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setScaleLineweights(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setShadePlot (self, *args, **kwargs)-> ErrorStatus :
      '''setShadePlot( (PlotSettings)arg1, (ShadePlotType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setShadePlot(class PyDbPlotSettings {lvalue},enum AcDbPlotSettings::ShadePlotType)

setShadePlot( (PlotSettings)arg1, (ShadePlotType)arg2, (ObjectId)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setShadePlot(class PyDbPlotSettings {lvalue},enum AcDbPlotSettings::ShadePlotType,class PyDbObjectId)'''
    ...
    def setShadePlotCustomDPI (self, *args, **kwargs)-> ErrorStatus :
      '''setShadePlotCustomDPI( (PlotSettings)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setShadePlotCustomDPI(class PyDbPlotSettings {lvalue},short)'''
    ...
    def setShadePlotResLevel (self, *args, **kwargs)-> ErrorStatus :
      '''setShadePlotResLevel( (PlotSettings)arg1, (ShadePlotResLevel)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setShadePlotResLevel(class PyDbPlotSettings {lvalue},enum AcDbPlotSettings::ShadePlotResLevel)'''
    ...
    def setShowPlotStyles (self, *args, **kwargs)-> None :
      '''setShowPlotStyles( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShowPlotStyles(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setTabOrder (self, *args, **kwargs)-> None :
      '''setTabOrder( (Layout)arg1, (int)arg2) -> None :

    C++ signature :
        void setTabOrder(class PyDbLayout {lvalue},int)'''
    ...
    def setTabSelected (self, *args, **kwargs)-> None :
      '''setTabSelected( (Layout)arg1, (bool)arg2) -> None :

    C++ signature :
        void setTabSelected(class PyDbLayout {lvalue},bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def shadePlot (self, *args, **kwargs)-> ShadePlotType :
      '''shadePlot( (PlotSettings)arg1) -> ShadePlotType :

    C++ signature :
        enum AcDbPlotSettings::ShadePlotType shadePlot(class PyDbPlotSettings {lvalue})'''
    ...
    def shadePlotCustomDPI (self, *args, **kwargs)-> int :
      '''shadePlotCustomDPI( (PlotSettings)arg1) -> int :

    C++ signature :
        short shadePlotCustomDPI(class PyDbPlotSettings {lvalue})'''
    ...
    def shadePlotId (self, *args, **kwargs)-> ObjectId :
      '''shadePlotId( (PlotSettings)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId shadePlotId(class PyDbPlotSettings {lvalue})'''
    ...
    def shadePlotResLevel (self, *args, **kwargs)-> ShadePlotResLevel :
      '''shadePlotResLevel( (PlotSettings)arg1) -> ShadePlotResLevel :

    C++ signature :
        enum AcDbPlotSettings::ShadePlotResLevel shadePlotResLevel(class PyDbPlotSettings {lvalue})'''
    ...
    def showPlotStyles (self, *args, **kwargs)-> bool :
      '''showPlotStyles( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool showPlotStyles(class PyDbPlotSettings {lvalue})'''
    ...
    def stdScaleType (self, *args, **kwargs)-> StdScaleType :
      '''stdScaleType( (PlotSettings)arg1) -> StdScaleType :

    C++ signature :
        enum AcDbPlotSettings::StdScaleType stdScaleType(class PyDbPlotSettings {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def useStandardScale (self, *args, **kwargs)-> bool :
      '''useStandardScale( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool useStandardScale(class PyDbPlotSettings {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class LayoutManager:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def clearSetupForLayouts (self, *args, **kwargs)-> ErrorStatus :
      '''clearSetupForLayouts( (int)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus clearSetupForLayouts(unsigned __int64)'''
    ...
    def cloneLayout (self, *args, **kwargs)-> ErrorStatus :
      '''cloneLayout( (LayoutManager)arg1, (Layout)arg2, (str)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cloneLayout(class PyDbLayoutManager {lvalue},class PyDbLayout {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

cloneLayout( (LayoutManager)arg1, (Layout)arg2, (str)arg3, (int)arg4, (Database)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus cloneLayout(class PyDbLayoutManager {lvalue},class PyDbLayout {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,int,class PyDbDatabase {lvalue})'''
    ...
    def copyLayout (self, *args, **kwargs)-> ErrorStatus :
      '''copyLayout( (LayoutManager)arg1, (str)arg2, (str)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus copyLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

copyLayout( (LayoutManager)arg1, (str)arg2, (str)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus copyLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def countLayouts (self, *args, **kwargs)-> int :
      '''countLayouts( (LayoutManager)arg1) -> int :

    C++ signature :
        int countLayouts(class PyDbLayoutManager {lvalue})

countLayouts( (LayoutManager)arg1, (Database)arg2) -> int :

    C++ signature :
        int countLayouts(class PyDbLayoutManager {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def createLayout (self, *args, **kwargs)-> ErrorStatus :
      '''createLayout( (LayoutManager)arg1, (str)arg2, (ObjectId)arg3, (ObjectId)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId {lvalue},class PyDbObjectId {lvalue})

createLayout( (LayoutManager)arg1, (str)arg2, (ObjectId)arg3, (ObjectId)arg4, (Database)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId {lvalue},class PyDbObjectId {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def deleteLayout (self, *args, **kwargs)-> ErrorStatus :
      '''deleteLayout( (LayoutManager)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus deleteLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

deleteLayout( (LayoutManager)arg1, (str)arg2, (Database)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus deleteLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase {lvalue})'''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def findLayoutNamed (self, *args, **kwargs)-> ObjectId :
      '''findLayoutNamed( (LayoutManager)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId findLayoutNamed(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

findLayoutNamed( (LayoutManager)arg1, (str)arg2, (Database)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId findLayoutNamed(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def getActiveLayoutBTRId (self, *args, **kwargs)-> ObjectId :
      '''getActiveLayoutBTRId( (LayoutManager)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getActiveLayoutBTRId(class PyDbLayoutManager {lvalue})

getActiveLayoutBTRId( (LayoutManager)arg1, (Database)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getActiveLayoutBTRId(class PyDbLayoutManager {lvalue},class PyDbDatabase)'''
    ...
    def getActiveLayoutName (self, *args, **kwargs)-> str :
      '''getActiveLayoutName( (LayoutManager)arg1, (bool)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getActiveLayoutName(class PyDbLayoutManager {lvalue},bool)

getActiveLayoutName( (LayoutManager)arg1, (bool)arg2, (Database)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getActiveLayoutName(class PyDbLayoutManager {lvalue},bool,class PyDbDatabase {lvalue})'''
    ...
    def getNonRectVPIdFromClipId (self, *args, **kwargs)-> ObjectId :
      '''getNonRectVPIdFromClipId( (LayoutManager)arg1, (ObjectId)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getNonRectVPIdFromClipId(class PyDbLayoutManager {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (RxObject)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyRxObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isVpnumClipped (self, *args, **kwargs)-> bool :
      '''isVpnumClipped( (LayoutManager)arg1, (int)arg2) -> bool :

    C++ signature :
        bool isVpnumClipped(class PyDbLayoutManager {lvalue},int)

isVpnumClipped( (LayoutManager)arg1, (int)arg2, (Database)arg3) -> bool :

    C++ signature :
        bool isVpnumClipped(class PyDbLayoutManager {lvalue},int,class PyDbDatabase)'''
    ...
    def layoutExists (self, *args, **kwargs)-> bool :
      '''layoutExists( (LayoutManager)arg1, (str)arg2) -> bool :

    C++ signature :
        bool layoutExists(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

layoutExists( (LayoutManager)arg1, (str)arg2, (Database)arg3) -> bool :

    C++ signature :
        bool layoutExists(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase)'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def renameLayout (self, *args, **kwargs)-> ErrorStatus :
      '''renameLayout( (LayoutManager)arg1, (str)arg2, (str)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus renameLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

renameLayout( (LayoutManager)arg1, (str)arg2, (str)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus renameLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase {lvalue})'''
    ...
    def setCurrentLayout (self, *args, **kwargs)-> ErrorStatus :
      '''setCurrentLayout( (LayoutManager)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCurrentLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setCurrentLayout( (LayoutManager)arg1, (str)arg2, (Database)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCurrentLayout(class PyDbLayoutManager {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbDatabase {lvalue})'''
    ...
    def setCurrentLayoutId (self, *args, **kwargs)-> ErrorStatus :
      '''setCurrentLayoutId( (LayoutManager)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCurrentLayoutId(class PyDbLayoutManager {lvalue},class PyDbObjectId)'''
    ...
    def setupForLayouts (self, *args, **kwargs)-> int :
      '''setupForLayouts( (Database)arg1) -> int :

    C++ signature :
        unsigned __int64 setupForLayouts(class PyDbDatabase {lvalue})'''
    ...

class Leader:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def annoHeight (self, *args, **kwargs)-> float :
      '''annoHeight( (Leader)arg1) -> float :

    C++ signature :
        double annoHeight(class PyDbLeader {lvalue})'''
    ...
    def annoType (self, *args, **kwargs)-> AnnoType :
      '''annoType( (Leader)arg1) -> AnnoType :

    C++ signature :
        enum AcDbLeader::AnnoType annoType(class PyDbLeader {lvalue})'''
    ...
    def annoWidth (self, *args, **kwargs)-> float :
      '''annoWidth( (Leader)arg1) -> float :

    C++ signature :
        double annoWidth(class PyDbLeader {lvalue})'''
    ...
    def annotationObjId (self, *args, **kwargs)-> ObjectId :
      '''annotationObjId( (Leader)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId annotationObjId(class PyDbLeader {lvalue})'''
    ...
    def annotationOffset (self, *args, **kwargs)-> Vector3d :
      '''annotationOffset( (Leader)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d annotationOffset(class PyDbLeader {lvalue})'''
    ...
    def appendVertex (self, *args, **kwargs)-> bool :
      '''appendVertex( (Leader)arg1, (Point3d)arg2) -> bool :

    C++ signature :
        bool appendVertex(class PyDbLeader {lvalue},class AcGePoint3d)'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def attachAnnotation (self, *args, **kwargs)-> ErrorStatus :
      '''attachAnnotation( (Leader)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus attachAnnotation(class PyDbLeader {lvalue},class PyDbObjectId)'''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Leader :
      '''cast( (RxObject)arg1) -> Leader :

    C++ signature :
        class PyDbLeader cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Leader :
      '''cloneFrom( (RxObject)arg1) -> Leader :

    C++ signature :
        class PyDbLeader cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def copied (self, *args, **kwargs)-> None :
      '''copied( (Leader)arg1, (DbObject)arg2, (DbObject)arg3) -> None :

    C++ signature :
        void copied(class PyDbLeader {lvalue},class PyDbObject,class PyDbObject)'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def detachAnnotation (self, *args, **kwargs)-> ErrorStatus :
      '''detachAnnotation( (Leader)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus detachAnnotation(class PyDbLeader {lvalue})'''
    ...
    def dimasz (self, *args, **kwargs)-> float :
      '''dimasz( (Leader)arg1) -> float :

    C++ signature :
        double dimasz(class PyDbLeader {lvalue})'''
    ...
    def dimclrd (self, *args, **kwargs)-> Color :
      '''dimclrd( (Leader)arg1) -> Color :

    C++ signature :
        class AcCmColor dimclrd(class PyDbLeader {lvalue})'''
    ...
    def dimensionStyle (self, *args, **kwargs)-> object :
      '''dimensionStyle( (Leader)arg1) -> object :

    C++ signature :
        class PyDbHardPointerId dimensionStyle(class PyDbLeader {lvalue})'''
    ...
    def dimgap (self, *args, **kwargs)-> float :
      '''dimgap( (Leader)arg1) -> float :

    C++ signature :
        double dimgap(class PyDbLeader {lvalue})'''
    ...
    def dimlwd (self, *args, **kwargs)-> LineWeight :
      '''dimlwd( (Leader)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight dimlwd(class PyDbLeader {lvalue})'''
    ...
    def dimsah (self, *args, **kwargs)-> bool :
      '''dimsah( (Leader)arg1) -> bool :

    C++ signature :
        bool dimsah(class PyDbLeader {lvalue})'''
    ...
    def dimscale (self, *args, **kwargs)-> float :
      '''dimscale( (Leader)arg1) -> float :

    C++ signature :
        double dimscale(class PyDbLeader {lvalue})'''
    ...
    def dimtad (self, *args, **kwargs)-> int :
      '''dimtad( (Leader)arg1) -> int :

    C++ signature :
        int dimtad(class PyDbLeader {lvalue})'''
    ...
    def dimtxsty (self, *args, **kwargs)-> ObjectId :
      '''dimtxsty( (Leader)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimtxsty(class PyDbLeader {lvalue})'''
    ...
    def dimtxt (self, *args, **kwargs)-> float :
      '''dimtxt( (Leader)arg1) -> float :

    C++ signature :
        double dimtxt(class PyDbLeader {lvalue})'''
    ...
    def disableArrowHead (self, *args, **kwargs)-> None :
      '''disableArrowHead( (Leader)arg1) -> None :

    C++ signature :
        void disableArrowHead(class PyDbLeader {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def erased (self, *args, **kwargs)-> None :
      '''erased( (Leader)arg1, (DbObject)arg2) -> None :

    C++ signature :
        void erased(class PyDbLeader {lvalue},class PyDbObject)

erased( (Leader)arg1, (DbObject)arg2, (bool)arg3) -> None :

    C++ signature :
        void erased(class PyDbLeader {lvalue},class PyDbObject,bool)'''
    ...
    def evaluateLeader (self, *args, **kwargs)-> ErrorStatus :
      '''evaluateLeader( (Leader)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus evaluateLeader(class PyDbLeader {lvalue})'''
    ...
    def extend (self, *args, **kwargs)-> ErrorStatus :
      '''extend( (Curve)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def firstVertex (self, *args, **kwargs)-> Point3d :
      '''firstVertex( (Leader)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d firstVertex(class PyDbLeader {lvalue})'''
    ...
    def getArea (self, *args, **kwargs)-> float :
      '''getArea( (Curve)arg1) -> float :

    C++ signature :
        double getArea(class PyDbCurve {lvalue})'''
    ...
    def getClosestPointTo (self, *args, **kwargs)-> Point3d :
      '''getClosestPointTo( (Curve)arg1, (Point3d)arg2, (bool)arg3) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbCurve {lvalue},class AcGePoint3d,bool)

getClosestPointTo( (Curve)arg1, (Point3d)arg2, (Vector3d)arg3, (bool)arg4) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbCurve {lvalue},class AcGePoint3d,class AcGeVector3d,bool)'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDistAtParam (self, *args, **kwargs)-> float :
      '''getDistAtParam( (Curve)arg1, (float)arg2) -> float :

    C++ signature :
        double getDistAtParam(class PyDbCurve {lvalue},double)'''
    ...
    def getDistAtPoint (self, *args, **kwargs)-> float :
      '''getDistAtPoint( (Curve)arg1, (Point3d)arg2) -> float :

    C++ signature :
        double getDistAtPoint(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEndParam (self, *args, **kwargs)-> float :
      '''getEndParam( (Curve)arg1) -> float :

    C++ signature :
        double getEndParam(class PyDbCurve {lvalue})'''
    ...
    def getEndPoint (self, *args, **kwargs)-> Point3d :
      '''getEndPoint( (Curve)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getEndPoint(class PyDbCurve {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self, *args, **kwargs)-> Vector3d :
      '''getFirstDeriv( (Curve)arg1, (float)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getFirstDeriv(class PyDbCurve {lvalue},double)

getFirstDeriv( (Curve)arg1, (Point3d)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getFirstDeriv(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getOffsetCurves (self, *args, **kwargs)-> list :
      '''getOffsetCurves( (Curve)arg1, (float)arg2) -> list :

    C++ signature :
        class boost::python::list getOffsetCurves(class PyDbCurve {lvalue},double)'''
    ...
    def getOffsetCurvesGivenPlaneNormal (self, *args, **kwargs)-> list :
      '''getOffsetCurvesGivenPlaneNormal( (Curve)arg1, (Vector3d)arg2, (float)arg3) -> list :

    C++ signature :
        class boost::python::list getOffsetCurvesGivenPlaneNormal(class PyDbCurve {lvalue},class AcGeVector3d,double)'''
    ...
    def getParamAtDist (self, *args, **kwargs)-> float :
      '''getParamAtDist( (Curve)arg1, (float)arg2) -> float :

    C++ signature :
        double getParamAtDist(class PyDbCurve {lvalue},double)'''
    ...
    def getParamAtPoint (self, *args, **kwargs)-> float :
      '''getParamAtPoint( (Curve)arg1, (Point3d)arg2) -> float :

    C++ signature :
        double getParamAtPoint(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def getPointAtDist (self, *args, **kwargs)-> Point3d :
      '''getPointAtDist( (Curve)arg1, (float)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getPointAtDist(class PyDbCurve {lvalue},double)'''
    ...
    def getPointAtParam (self, *args, **kwargs)-> Point3d :
      '''getPointAtParam( (Curve)arg1, (float)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getPointAtParam(class PyDbCurve {lvalue},double)'''
    ...
    def getSecondDeriv (self, *args, **kwargs)-> Vector3d :
      '''getSecondDeriv( (Curve)arg1, (float)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getSecondDeriv(class PyDbCurve {lvalue},double)

getSecondDeriv( (Curve)arg1, (Point3d)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getSecondDeriv(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getSplitCurves (self, *args, **kwargs)-> list :
      '''getSplitCurves( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurves(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getSplitCurvesAtParams (self, *args, **kwargs)-> list :
      '''getSplitCurvesAtParams( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurvesAtParams(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getSplitCurvesAtPoints (self, *args, **kwargs)-> list :
      '''getSplitCurvesAtPoints( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurvesAtPoints(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getStartParam (self, *args, **kwargs)-> float :
      '''getStartParam( (Curve)arg1) -> float :

    C++ signature :
        double getStartParam(class PyDbCurve {lvalue})'''
    ...
    def getStartPoint (self, *args, **kwargs)-> Point3d :
      '''getStartPoint( (Curve)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getStartPoint(class PyDbCurve {lvalue})'''
    ...
    def goodbye (self, *args, **kwargs)-> None :
      '''goodbye( (Leader)arg1, (DbObject)arg2) -> None :

    C++ signature :
        void goodbye(class PyDbLeader {lvalue},class PyDbObject)'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasArrowHead (self, *args, **kwargs)-> bool :
      '''hasArrowHead( (Leader)arg1) -> bool :

    C++ signature :
        bool hasArrowHead(class PyDbLeader {lvalue})'''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasHookLine (self, *args, **kwargs)-> bool :
      '''hasHookLine( (Leader)arg1) -> bool :

    C++ signature :
        bool hasHookLine(class PyDbLeader {lvalue})'''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isClosed (self, *args, **kwargs)-> bool :
      '''isClosed( (Curve)arg1) -> bool :

    C++ signature :
        bool isClosed(class PyDbCurve {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPeriodic (self, *args, **kwargs)-> bool :
      '''isPeriodic( (Curve)arg1) -> bool :

    C++ signature :
        bool isPeriodic(class PyDbCurve {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isSplined (self, *args, **kwargs)-> bool :
      '''isSplined( (Leader)arg1) -> bool :

    C++ signature :
        bool isSplined(class PyDbLeader {lvalue})'''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def lastVertex (self, *args, **kwargs)-> Point3d :
      '''lastVertex( (Leader)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d lastVertex(class PyDbLeader {lvalue})'''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def modified (self, *args, **kwargs)-> None :
      '''modified( (Leader)arg1, (DbObject)arg2) -> None :

    C++ signature :
        void modified(class PyDbLeader {lvalue},class PyDbObject)'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Leader)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbLeader {lvalue})'''
    ...
    def numVertices (self, *args, **kwargs)-> int :
      '''numVertices( (Leader)arg1) -> int :

    C++ signature :
        int numVertices(class PyDbLeader {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removeLastVertex (self, *args, **kwargs)-> None :
      '''removeLastVertex( (Leader)arg1) -> None :

    C++ signature :
        void removeLastVertex(class PyDbLeader {lvalue})'''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def reverseCurve (self, *args, **kwargs)-> ErrorStatus :
      '''reverseCurve( (Curve)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus reverseCurve(class PyDbCurve {lvalue})'''
    ...
    def setAnnotationObjId (self, *args, **kwargs)-> ErrorStatus :
      '''setAnnotationObjId( (Leader)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAnnotationObjId(class PyDbLeader {lvalue},class PyDbObjectId)'''
    ...
    def setAnnotationOffset (self, *args, **kwargs)-> ErrorStatus :
      '''setAnnotationOffset( (Leader)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAnnotationOffset(class PyDbLeader {lvalue},class AcGeVector3d)'''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Leader)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbLeader {lvalue},unsigned short)

setColorIndex( (Leader)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbLeader {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDimasz (self, *args, **kwargs)-> ErrorStatus :
      '''setDimasz( (Leader)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimasz(class PyDbLeader {lvalue},double)'''
    ...
    def setDimclrd (self, *args, **kwargs)-> ErrorStatus :
      '''setDimclrd( (Leader)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimclrd(class PyDbLeader {lvalue},class AcCmColor {lvalue})'''
    ...
    def setDimensionStyle (self, *args, **kwargs)-> None :
      '''setDimensionStyle( (Leader)arg1, (object)arg2) -> None :

    C++ signature :
        void setDimensionStyle(class PyDbLeader {lvalue},class PyDbHardPointerId)'''
    ...
    def setDimgap (self, *args, **kwargs)-> ErrorStatus :
      '''setDimgap( (Leader)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimgap(class PyDbLeader {lvalue},double)'''
    ...
    def setDimldrblk (self, *args, **kwargs)-> ErrorStatus :
      '''setDimldrblk( (Leader)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimldrblk(class PyDbLeader {lvalue},class PyDbObjectId)

setDimldrblk( (Leader)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimldrblk(class PyDbLeader {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDimlwd (self, *args, **kwargs)-> ErrorStatus :
      '''setDimlwd( (Leader)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimlwd(class PyDbLeader {lvalue},enum AcDb::LineWeight)'''
    ...
    def setDimsah (self, *args, **kwargs)-> ErrorStatus :
      '''setDimsah( (Leader)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimsah(class PyDbLeader {lvalue},bool)'''
    ...
    def setDimscale (self, *args, **kwargs)-> ErrorStatus :
      '''setDimscale( (Leader)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimscale(class PyDbLeader {lvalue},double)'''
    ...
    def setDimstyleData (self, *args, **kwargs)-> ErrorStatus :
      '''setDimstyleData( (Leader)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbLeader {lvalue},class PyDbObjectId)'''
    ...
    def setDimtad (self, *args, **kwargs)-> ErrorStatus :
      '''setDimtad( (Leader)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimtad(class PyDbLeader {lvalue},int)'''
    ...
    def setDimtxsty (self, *args, **kwargs)-> ErrorStatus :
      '''setDimtxsty( (Leader)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimtxsty(class PyDbLeader {lvalue},class PyDbObjectId)'''
    ...
    def setDimtxt (self, *args, **kwargs)-> ErrorStatus :
      '''setDimtxt( (Leader)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimtxt(class PyDbLeader {lvalue},double)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setHasArrowHead (self, *args, **kwargs)-> None :
      '''setHasArrowHead( (Leader)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHasArrowHead(class PyDbLeader {lvalue},bool)'''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlane (self, *args, **kwargs)-> None :
      '''setPlane( (Leader)arg1, (Plane)arg2) -> None :

    C++ signature :
        void setPlane(class PyDbLeader {lvalue},class PyGePlane)'''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setSplined (self, *args, **kwargs)-> None :
      '''setSplined( (Leader)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSplined(class PyDbLeader {lvalue},bool)'''
    ...
    def setToSplineLeader (self, *args, **kwargs)-> None :
      '''setToSplineLeader( (Leader)arg1) -> None :

    C++ signature :
        void setToSplineLeader(class PyDbLeader {lvalue})'''
    ...
    def setToStraightLeader (self, *args, **kwargs)-> None :
      '''setToStraightLeader( (Leader)arg1) -> None :

    C++ signature :
        void setToStraightLeader(class PyDbLeader {lvalue})'''
    ...
    def setVertexAt (self, *args, **kwargs)-> bool :
      '''setVertexAt( (Leader)arg1, (int)arg2, (Point3d)arg3) -> bool :

    C++ signature :
        bool setVertexAt(class PyDbLeader {lvalue},int,class AcGePoint3d)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def vertexAt (self, *args, **kwargs)-> Point3d :
      '''vertexAt( (Leader)arg1, (int)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d vertexAt(class PyDbLeader {lvalue},int)'''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class Line:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Line :
      '''cast( (RxObject)arg1) -> Line :

    C++ signature :
        class PyDbLine cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Line :
      '''cloneFrom( (RxObject)arg1) -> Line :

    C++ signature :
        class PyDbLine cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def endPoint (self, *args, **kwargs)-> Point3d :
      '''endPoint( (Line)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d endPoint(class PyDbLine {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> ErrorStatus :
      '''extend( (Curve)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getArea (self, *args, **kwargs)-> float :
      '''getArea( (Curve)arg1) -> float :

    C++ signature :
        double getArea(class PyDbCurve {lvalue})'''
    ...
    def getClosestPointTo (self, *args, **kwargs)-> Point3d :
      '''getClosestPointTo( (Curve)arg1, (Point3d)arg2, (bool)arg3) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbCurve {lvalue},class AcGePoint3d,bool)

getClosestPointTo( (Curve)arg1, (Point3d)arg2, (Vector3d)arg3, (bool)arg4) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbCurve {lvalue},class AcGePoint3d,class AcGeVector3d,bool)'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDistAtParam (self, *args, **kwargs)-> float :
      '''getDistAtParam( (Curve)arg1, (float)arg2) -> float :

    C++ signature :
        double getDistAtParam(class PyDbCurve {lvalue},double)'''
    ...
    def getDistAtPoint (self, *args, **kwargs)-> float :
      '''getDistAtPoint( (Curve)arg1, (Point3d)arg2) -> float :

    C++ signature :
        double getDistAtPoint(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEndParam (self, *args, **kwargs)-> float :
      '''getEndParam( (Curve)arg1) -> float :

    C++ signature :
        double getEndParam(class PyDbCurve {lvalue})'''
    ...
    def getEndPoint (self, *args, **kwargs)-> Point3d :
      '''getEndPoint( (Curve)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getEndPoint(class PyDbCurve {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self, *args, **kwargs)-> Vector3d :
      '''getFirstDeriv( (Curve)arg1, (float)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getFirstDeriv(class PyDbCurve {lvalue},double)

getFirstDeriv( (Curve)arg1, (Point3d)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getFirstDeriv(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getOffsetCurves (self, *args, **kwargs)-> list :
      '''getOffsetCurves( (Curve)arg1, (float)arg2) -> list :

    C++ signature :
        class boost::python::list getOffsetCurves(class PyDbCurve {lvalue},double)'''
    ...
    def getOffsetCurvesGivenPlaneNormal (self, *args, **kwargs)-> list :
      '''getOffsetCurvesGivenPlaneNormal( (Line)arg1, (Vector3d)arg2, (float)arg3) -> list :

    C++ signature :
        class boost::python::list getOffsetCurvesGivenPlaneNormal(class PyDbLine {lvalue},class AcGeVector3d,double)'''
    ...
    def getParamAtDist (self, *args, **kwargs)-> float :
      '''getParamAtDist( (Curve)arg1, (float)arg2) -> float :

    C++ signature :
        double getParamAtDist(class PyDbCurve {lvalue},double)'''
    ...
    def getParamAtPoint (self, *args, **kwargs)-> float :
      '''getParamAtPoint( (Curve)arg1, (Point3d)arg2) -> float :

    C++ signature :
        double getParamAtPoint(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def getPointAtDist (self, *args, **kwargs)-> Point3d :
      '''getPointAtDist( (Curve)arg1, (float)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getPointAtDist(class PyDbCurve {lvalue},double)'''
    ...
    def getPointAtParam (self, *args, **kwargs)-> Point3d :
      '''getPointAtParam( (Curve)arg1, (float)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getPointAtParam(class PyDbCurve {lvalue},double)'''
    ...
    def getSecondDeriv (self, *args, **kwargs)-> Vector3d :
      '''getSecondDeriv( (Curve)arg1, (float)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getSecondDeriv(class PyDbCurve {lvalue},double)

getSecondDeriv( (Curve)arg1, (Point3d)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getSecondDeriv(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getSplitCurves (self, *args, **kwargs)-> list :
      '''getSplitCurves( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurves(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getSplitCurvesAtParams (self, *args, **kwargs)-> list :
      '''getSplitCurvesAtParams( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurvesAtParams(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getSplitCurvesAtPoints (self, *args, **kwargs)-> list :
      '''getSplitCurvesAtPoints( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurvesAtPoints(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getStartParam (self, *args, **kwargs)-> float :
      '''getStartParam( (Curve)arg1) -> float :

    C++ signature :
        double getStartParam(class PyDbCurve {lvalue})'''
    ...
    def getStartPoint (self, *args, **kwargs)-> Point3d :
      '''getStartPoint( (Curve)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getStartPoint(class PyDbCurve {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isClosed (self, *args, **kwargs)-> bool :
      '''isClosed( (Curve)arg1) -> bool :

    C++ signature :
        bool isClosed(class PyDbCurve {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPeriodic (self, *args, **kwargs)-> bool :
      '''isPeriodic( (Curve)arg1) -> bool :

    C++ signature :
        bool isPeriodic(class PyDbCurve {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Line)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbLine {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def reverseCurve (self, *args, **kwargs)-> ErrorStatus :
      '''reverseCurve( (Curve)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus reverseCurve(class PyDbCurve {lvalue})'''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setEndPoint (self, *args, **kwargs)-> ErrorStatus :
      '''setEndPoint( (Line)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setEndPoint(class PyDbLine {lvalue},class AcGePoint3d)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs)-> ErrorStatus :
      '''setNormal( (Line)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbLine {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setStartPoint (self, *args, **kwargs)-> ErrorStatus :
      '''setStartPoint( (Line)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setStartPoint(class PyDbLine {lvalue},class AcGePoint3d)'''
    ...
    def setThickness (self, *args, **kwargs)-> ErrorStatus :
      '''setThickness( (Line)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setThickness(class PyDbLine {lvalue},double)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def startPoint (self, *args, **kwargs)-> Point3d :
      '''startPoint( (Line)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d startPoint(class PyDbLine {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def thickness (self, *args, **kwargs)-> float :
      '''thickness( (Line)arg1) -> float :

    C++ signature :
        double thickness(class PyDbLine {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class LineAngularDimension2:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (Point3d)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (Point3d)arg6, (str)arg7) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (Point3d)arg6, (str)arg7, (ObjectId)arg8) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def altSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def alternatePrefix (self, *args, **kwargs)-> str :
      '''alternatePrefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternatePrefix(class PyDbDimension {lvalue})'''
    ...
    def alternateSuffix (self, *args, **kwargs)-> str :
      '''alternateSuffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternateSuffix(class PyDbDimension {lvalue})'''
    ...
    def arcPoint (self, *args, **kwargs)-> Point3d :
      '''arcPoint( (LineAngularDimension2)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d arcPoint(class PyDb2LineAngularDimension {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def blockTransform (self, *args, **kwargs)-> Matrix3d :
      '''blockTransform( (Dimension)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbDimension {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> LineAngularDimension2 :
      '''cast( (RxObject)arg1) -> LineAngularDimension2 :

    C++ signature :
        class PyDb2LineAngularDimension cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def centerMarkSize (self, *args, **kwargs)-> float :
      '''centerMarkSize( (Dimension)arg1) -> float :

    C++ signature :
        double centerMarkSize(class PyDbDimension {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> LineAngularDimension2 :
      '''cloneFrom( (RxObject)arg1) -> LineAngularDimension2 :

    C++ signature :
        class PyDb2LineAngularDimension cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self, *args, **kwargs)-> ObjectId :
      '''dimBlockId( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimBlockId(class PyDbDimension {lvalue})'''
    ...
    def dimBlockPosition (self, *args, **kwargs)-> Point3d :
      '''dimBlockPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimBlockPosition(class PyDbDimension {lvalue})'''
    ...
    def dimExt1Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt1Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt1Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimExt2Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt2Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt2Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimLineLinetype (self, *args, **kwargs)-> ObjectId :
      '''dimLineLinetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimLineLinetype(class PyDbDimension {lvalue})'''
    ...
    def dimensionStyle (self, *args, **kwargs)-> ObjectId :
      '''dimensionStyle( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimensionStyle(class PyDbDimension {lvalue})'''
    ...
    def dimensionText (self, *args, **kwargs)-> str :
      '''dimensionText( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dimensionText(class PyDbDimension {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def elevation (self, *args, **kwargs)-> float :
      '''elevation( (Dimension)arg1) -> float :

    C++ signature :
        double elevation(class PyDbDimension {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extArcOn (self, *args, **kwargs)-> bool :
      '''extArcOn( (LineAngularDimension2)arg1) -> bool :

    C++ signature :
        bool extArcOn(class PyDb2LineAngularDimension {lvalue})'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fieldFromMText (self, *args, **kwargs)-> ErrorStatus :
      '''fieldFromMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldFromMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def fieldToMText (self, *args, **kwargs)-> ErrorStatus :
      '''fieldToMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldToMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self, *args, **kwargs)-> ErrorStatus :
      '''generateLayout( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus generateLayout(class PyDbDimension {lvalue})'''
    ...
    def getArrowFirstIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowFirstIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowFirstIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getArrowSecondIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowSecondIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowSecondIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDimstyleData (self, *args, **kwargs)-> DimStyleTableRecord :
      '''getDimstyleData( (Dimension)arg1) -> DimStyleTableRecord :

    C++ signature :
        class PyDbDimStyleTableRecord getDimstyleData(class PyDbDimension {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def horizontalRotation (self, *args, **kwargs)-> float :
      '''horizontalRotation( (Dimension)arg1) -> float :

    C++ signature :
        double horizontalRotation(class PyDbDimension {lvalue})'''
    ...
    def inspection (self, *args, **kwargs)-> bool :
      '''inspection( (Dimension)arg1) -> bool :

    C++ signature :
        bool inspection(class PyDbDimension {lvalue})'''
    ...
    def inspectionFrame (self, *args, **kwargs)-> int :
      '''inspectionFrame( (Dimension)arg1) -> int :

    C++ signature :
        int inspectionFrame(class PyDbDimension {lvalue})'''
    ...
    def inspectionLabel (self, *args, **kwargs)-> str :
      '''inspectionLabel( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > inspectionLabel(class PyDbDimension {lvalue})'''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self, *args, **kwargs)-> bool :
      '''isConstraintDynamic( (Dimension)arg1) -> bool :

    C++ signature :
        bool isConstraintDynamic(class PyDbDimension {lvalue})'''
    ...
    def isConstraintObject (self, *args, **kwargs)-> tuple :
      '''isConstraintObject( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isConstraintObject(class PyDbDimension {lvalue})'''
    ...
    def isDynamicDimension (self, *args, **kwargs)-> bool :
      '''isDynamicDimension( (Dimension)arg1) -> bool :

    C++ signature :
        bool isDynamicDimension(class PyDbDimension {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self, *args, **kwargs)-> bool :
      '''isHorizontalRefTextRotation( (Dimension)arg1) -> bool :

    C++ signature :
        bool isHorizontalRefTextRotation(class PyDbDimension {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self, *args, **kwargs)-> bool :
      '''isUsingDefaultTextPosition( (Dimension)arg1) -> bool :

    C++ signature :
        bool isUsingDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def measurement (self, *args, **kwargs)-> float :
      '''measurement( (Dimension)arg1) -> float :

    C++ signature :
        double measurement(class PyDbDimension {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Dimension)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbDimension {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def prefix (self, *args, **kwargs)-> str :
      '''prefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > prefix(class PyDbDimension {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recomputeDimBlock (self, *args, **kwargs)-> ErrorStatus :
      '''recomputeDimBlock( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue})

recomputeDimBlock( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue},bool)'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removeTextField (self, *args, **kwargs)-> ErrorStatus :
      '''removeTextField( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeTextField(class PyDbDimension {lvalue})'''
    ...
    def resetTextDefinedSize (self, *args, **kwargs)-> None :
      '''resetTextDefinedSize( (Dimension)arg1) -> None :

    C++ signature :
        void resetTextDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def setAltSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAlternatePrefix (self, *args, **kwargs)-> ErrorStatus :
      '''setAlternatePrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternatePrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAlternateSuffix (self, *args, **kwargs)-> ErrorStatus :
      '''setAlternateSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternateSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setArcPoint (self, *args, **kwargs)-> ErrorStatus :
      '''setArcPoint( (LineAngularDimension2)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArcPoint(class PyDb2LineAngularDimension {lvalue},class AcGePoint3d)'''
    ...
    def setArrowFirstIsFlipped (self, *args, **kwargs)-> ErrorStatus :
      '''setArrowFirstIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowFirstIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setArrowSecondIsFlipped (self, *args, **kwargs)-> ErrorStatus :
      '''setArrowSecondIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowSecondIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setConstraintDynamic (self, *args, **kwargs)-> ErrorStatus :
      '''setConstraintDynamic( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setConstraintDynamic(class PyDbDimension {lvalue},bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDimBlockId (self, *args, **kwargs)-> ErrorStatus :
      '''setDimBlockId( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockId(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimBlockPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setDimBlockPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimExt1Linetype (self, *args, **kwargs)-> ErrorStatus :
      '''setDimExt1Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt1Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimExt2Linetype (self, *args, **kwargs)-> ErrorStatus :
      '''setDimExt2Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt2Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimLineLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setDimLineLinetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimLineLinetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setDimensionStyle( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionStyle(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionText (self, *args, **kwargs)-> ErrorStatus :
      '''setDimensionText( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionText(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDimstyleData (self, *args, **kwargs)-> ErrorStatus :
      '''setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self, *args, **kwargs)-> ErrorStatus :
      '''setDynamicDimension( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDynamicDimension(class PyDbDimension {lvalue},bool)'''
    ...
    def setElevation (self, *args, **kwargs)-> ErrorStatus :
      '''setElevation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setElevation(class PyDbDimension {lvalue},double)'''
    ...
    def setExtArcOn (self, *args, **kwargs)-> ErrorStatus :
      '''setExtArcOn( (LineAngularDimension2)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setExtArcOn(class PyDb2LineAngularDimension {lvalue},bool)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setHorizontalRefTextRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setHorizontalRefTextRotation( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRefTextRotation(class PyDbDimension {lvalue},bool)'''
    ...
    def setHorizontalRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setHorizontalRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setInspection (self, *args, **kwargs)-> ErrorStatus :
      '''setInspection( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspection(class PyDbDimension {lvalue},bool)'''
    ...
    def setInspectionFrame (self, *args, **kwargs)-> ErrorStatus :
      '''setInspectionFrame( (Dimension)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionFrame(class PyDbDimension {lvalue},int)'''
    ...
    def setInspectionLabel (self, *args, **kwargs)-> ErrorStatus :
      '''setInspectionLabel( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionLabel(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs)-> ErrorStatus :
      '''setNormal( (Dimension)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbDimension {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, *args, **kwargs)-> ErrorStatus :
      '''setPrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setShouldParticipateInOPM (self, *args, **kwargs)-> None :
      '''setShouldParticipateInOPM( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShouldParticipateInOPM(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuffix (self, *args, **kwargs)-> ErrorStatus :
      '''setSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setSuppressAngularTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressAngularTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressAngularTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setTextAttachment (self, *args, **kwargs)-> ErrorStatus :
      '''setTextAttachment( (Dimension)arg1, (MTextAttachmentPoint)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAttachment(class PyDbDimension {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setTextDefinedSize (self, *args, **kwargs)-> None :
      '''setTextDefinedSize( (Dimension)arg1, (float)arg2, (float)arg3) -> None :

    C++ signature :
        void setTextDefinedSize(class PyDbDimension {lvalue},double,double)'''
    ...
    def setTextLineSpacingFactor (self, *args, **kwargs)-> ErrorStatus :
      '''setTextLineSpacingFactor( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingFactor(class PyDbDimension {lvalue},double)'''
    ...
    def setTextLineSpacingStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setTextLineSpacingStyle( (Dimension)arg1, (LineSpacingStyle)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingStyle(class PyDbDimension {lvalue},enum AcDb::LineSpacingStyle)'''
    ...
    def setTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setTextPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setTextRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setTextRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setToleranceSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setUsingDefaultTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setUsingDefaultTextPosition( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUsingDefaultTextPosition(class PyDbDimension {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def setXLine1End (self, *args, **kwargs)-> ErrorStatus :
      '''setXLine1End( (LineAngularDimension2)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXLine1End(class PyDb2LineAngularDimension {lvalue},class AcGePoint3d)'''
    ...
    def setXLine1Start (self, *args, **kwargs)-> ErrorStatus :
      '''setXLine1Start( (LineAngularDimension2)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXLine1Start(class PyDb2LineAngularDimension {lvalue},class AcGePoint3d)'''
    ...
    def setXLine2End (self, *args, **kwargs)-> ErrorStatus :
      '''setXLine2End( (LineAngularDimension2)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXLine2End(class PyDb2LineAngularDimension {lvalue},class AcGePoint3d)'''
    ...
    def setXLine2Start (self, *args, **kwargs)-> ErrorStatus :
      '''setXLine2Start( (LineAngularDimension2)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXLine2Start(class PyDb2LineAngularDimension {lvalue},class AcGePoint3d)'''
    ...
    def shouldParticipateInOPM (self, *args, **kwargs)-> bool :
      '''shouldParticipateInOPM( (Dimension)arg1) -> bool :

    C++ signature :
        bool shouldParticipateInOPM(class PyDbDimension {lvalue})'''
    ...
    def suffix (self, *args, **kwargs)-> str :
      '''suffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > suffix(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroFeet (self, *args, **kwargs)-> bool :
      '''suppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroInches (self, *args, **kwargs)-> bool :
      '''suppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def textAttachment (self, *args, **kwargs)-> MTextAttachmentPoint :
      '''textAttachment( (Dimension)arg1) -> MTextAttachmentPoint :

    C++ signature :
        enum AcDbMText::AttachmentPoint textAttachment(class PyDbDimension {lvalue})'''
    ...
    def textDefinedSize (self, *args, **kwargs)-> tuple :
      '''textDefinedSize( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple textDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingFactor (self, *args, **kwargs)-> float :
      '''textLineSpacingFactor( (Dimension)arg1) -> float :

    C++ signature :
        double textLineSpacingFactor(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingStyle (self, *args, **kwargs)-> LineSpacingStyle :
      '''textLineSpacingStyle( (Dimension)arg1) -> LineSpacingStyle :

    C++ signature :
        enum AcDb::LineSpacingStyle textLineSpacingStyle(class PyDbDimension {lvalue})'''
    ...
    def textPosition (self, *args, **kwargs)-> Point3d :
      '''textPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d textPosition(class PyDbDimension {lvalue})'''
    ...
    def textRotation (self, *args, **kwargs)-> float :
      '''textRotation( (Dimension)arg1) -> float :

    C++ signature :
        double textRotation(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def useDefaultTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''useDefaultTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def useSetTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''useSetTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useSetTextPosition(class PyDbDimension {lvalue})'''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...
    def xLine1End (self, *args, **kwargs)-> Point3d :
      '''xLine1End( (LineAngularDimension2)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine1End(class PyDb2LineAngularDimension {lvalue})'''
    ...
    def xLine1Start (self, *args, **kwargs)-> Point3d :
      '''xLine1Start( (LineAngularDimension2)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine1Start(class PyDb2LineAngularDimension {lvalue})'''
    ...
    def xLine2End (self, *args, **kwargs)-> Point3d :
      '''xLine2End( (LineAngularDimension2)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine2End(class PyDb2LineAngularDimension {lvalue})'''
    ...
    def xLine2Start (self, *args, **kwargs)-> Point3d :
      '''xLine2Start( (LineAngularDimension2)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine2Start(class PyDb2LineAngularDimension {lvalue})'''
    ...

class LineSpacingStyle:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kAtLeast (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kExactly (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class LineWeight:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kLnWt000 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt005 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt009 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt013 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt015 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt018 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt020 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt025 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt030 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt035 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt040 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt050 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt053 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt060 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt070 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt080 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt090 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt100 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt106 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt120 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt140 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt158 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt200 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWt211 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWtByBlock (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWtByLayer (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLnWtByLwDefault (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class LinetypeTable:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def add (self, *args, **kwargs)-> ObjectId :
      '''add( (LinetypeTable)arg1, (LinetypeTableRecord)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId add(class PyDbLinetypeTable {lvalue},class PyDbLinetypeTableRecord)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> LinetypeTable :
      '''cast( (RxObject)arg1) -> LinetypeTable :

    C++ signature :
        class PyDbLinetypeTable cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> LinetypeTable :
      '''cloneFrom( (RxObject)arg1) -> LinetypeTable :

    C++ signature :
        class PyDbLinetypeTable cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getAt (self, *args, **kwargs)-> ObjectId :
      '''getAt( (SymbolTable)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getAt(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def has (self, *args, **kwargs)-> bool :
      '''has( (SymbolTable)arg1, (str)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

has( (SymbolTable)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class PyDbObjectId)'''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def recordIds (self, *args, **kwargs)-> list :
      '''recordIds( (SymbolTable)arg1) -> list :

    C++ signature :
        class boost::python::list recordIds(class PyDbSymbolTable {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def toDict (self, *args, **kwargs)-> dict :
      '''toDict( (SymbolTable)arg1) -> dict :

    C++ signature :
        class boost::python::dict toDict(class PyDbSymbolTable {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class LinetypeTableRecord:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> LinetypeTableRecord :
      '''cast( (RxObject)arg1) -> LinetypeTableRecord :

    C++ signature :
        class PyDbLinetypeTableRecord cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> LinetypeTableRecord :
      '''cloneFrom( (RxObject)arg1) -> LinetypeTableRecord :

    C++ signature :
        class PyDbLinetypeTableRecord cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def comments (self, *args, **kwargs)-> str :
      '''comments( (LinetypeTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > comments(class PyDbLinetypeTableRecord {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def dashLengthAt (self, *args, **kwargs)-> float :
      '''dashLengthAt( (LinetypeTableRecord)arg1, (int)arg2) -> float :

    C++ signature :
        double dashLengthAt(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getName (self, *args, **kwargs)-> str :
      '''getName( (SymbolTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getName(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isDependent (self, *args, **kwargs)-> bool :
      '''isDependent( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isDependent(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isRenamable (self, *args, **kwargs)-> bool :
      '''isRenamable( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isRenamable(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isResolved (self, *args, **kwargs)-> bool :
      '''isResolved( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isResolved(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isScaledToFit (self, *args, **kwargs)-> bool :
      '''isScaledToFit( (LinetypeTableRecord)arg1) -> bool :

    C++ signature :
        bool isScaledToFit(class PyDbLinetypeTableRecord {lvalue})'''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def numDashes (self, *args, **kwargs)-> int :
      '''numDashes( (LinetypeTableRecord)arg1) -> int :

    C++ signature :
        int numDashes(class PyDbLinetypeTableRecord {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def patternLength (self, *args, **kwargs)-> float :
      '''patternLength( (LinetypeTableRecord)arg1) -> float :

    C++ signature :
        double patternLength(class PyDbLinetypeTableRecord {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setComments (self, *args, **kwargs)-> ErrorStatus :
      '''setComments( (LinetypeTableRecord)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setComments(class PyDbLinetypeTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDashLengthAt (self, *args, **kwargs)-> ErrorStatus :
      '''setDashLengthAt( (LinetypeTableRecord)arg1, (int)arg2, (float)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDashLengthAt(class PyDbLinetypeTableRecord {lvalue},int,double)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setIsScaledToFit (self, *args, **kwargs)-> None :
      '''setIsScaledToFit( (LinetypeTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsScaledToFit(class PyDbLinetypeTableRecord {lvalue},bool)'''
    ...
    def setName (self, *args, **kwargs)-> ErrorStatus :
      '''setName( (SymbolTableRecord)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setName(class PyDbSymbolTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setNumDashes (self, *args, **kwargs)-> ErrorStatus :
      '''setNumDashes( (LinetypeTableRecord)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNumDashes(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPatternLength (self, *args, **kwargs)-> ErrorStatus :
      '''setPatternLength( (LinetypeTableRecord)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPatternLength(class PyDbLinetypeTableRecord {lvalue},double)'''
    ...
    def setShapeIsUcsOrientedAt (self, *args, **kwargs)-> ErrorStatus :
      '''setShapeIsUcsOrientedAt( (LinetypeTableRecord)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setShapeIsUcsOrientedAt(class PyDbLinetypeTableRecord {lvalue},int,bool)'''
    ...
    def setShapeIsUprightAt (self, *args, **kwargs)-> ErrorStatus :
      '''setShapeIsUprightAt( (LinetypeTableRecord)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setShapeIsUprightAt(class PyDbLinetypeTableRecord {lvalue},int,bool)'''
    ...
    def setShapeNumberAt (self, *args, **kwargs)-> ErrorStatus :
      '''setShapeNumberAt( (LinetypeTableRecord)arg1, (int)arg2, (int)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setShapeNumberAt(class PyDbLinetypeTableRecord {lvalue},int,int)'''
    ...
    def setShapeOffsetAt (self, *args, **kwargs)-> ErrorStatus :
      '''setShapeOffsetAt( (LinetypeTableRecord)arg1, (int)arg2, (Vector2d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setShapeOffsetAt(class PyDbLinetypeTableRecord {lvalue},int,class AcGeVector2d)'''
    ...
    def setShapeRotationAt (self, *args, **kwargs)-> ErrorStatus :
      '''setShapeRotationAt( (LinetypeTableRecord)arg1, (int)arg2, (float)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setShapeRotationAt(class PyDbLinetypeTableRecord {lvalue},int,double)'''
    ...
    def setShapeScaleAt (self, *args, **kwargs)-> ErrorStatus :
      '''setShapeScaleAt( (LinetypeTableRecord)arg1, (int)arg2, (float)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setShapeScaleAt(class PyDbLinetypeTableRecord {lvalue},int,double)'''
    ...
    def setShapeStyleAt (self, *args, **kwargs)-> ErrorStatus :
      '''setShapeStyleAt( (LinetypeTableRecord)arg1, (int)arg2, (ObjectId)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setShapeStyleAt(class PyDbLinetypeTableRecord {lvalue},int,class PyDbObjectId {lvalue})'''
    ...
    def setTextAt (self, *args, **kwargs)-> ErrorStatus :
      '''setTextAt( (LinetypeTableRecord)arg1, (int)arg2, (str)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAt(class PyDbLinetypeTableRecord {lvalue},int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def shapeIsUcsOrientedAt (self, *args, **kwargs)-> bool :
      '''shapeIsUcsOrientedAt( (LinetypeTableRecord)arg1, (int)arg2) -> bool :

    C++ signature :
        bool shapeIsUcsOrientedAt(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def shapeIsUprightAt (self, *args, **kwargs)-> bool :
      '''shapeIsUprightAt( (LinetypeTableRecord)arg1, (int)arg2) -> bool :

    C++ signature :
        bool shapeIsUprightAt(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def shapeNumberAt (self, *args, **kwargs)-> int :
      '''shapeNumberAt( (LinetypeTableRecord)arg1, (int)arg2) -> int :

    C++ signature :
        int shapeNumberAt(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def shapeOffsetAt (self, *args, **kwargs)-> Vector2d :
      '''shapeOffsetAt( (LinetypeTableRecord)arg1, (int)arg2) -> Vector2d :

    C++ signature :
        class AcGeVector2d shapeOffsetAt(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def shapeRotationAt (self, *args, **kwargs)-> float :
      '''shapeRotationAt( (LinetypeTableRecord)arg1, (int)arg2) -> float :

    C++ signature :
        double shapeRotationAt(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def shapeScaleAt (self, *args, **kwargs)-> float :
      '''shapeScaleAt( (LinetypeTableRecord)arg1, (int)arg2) -> float :

    C++ signature :
        double shapeScaleAt(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def shapeStyleAt (self, *args, **kwargs)-> ObjectId :
      '''shapeStyleAt( (LinetypeTableRecord)arg1, (int)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId shapeStyleAt(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def textAt (self, *args, **kwargs)-> str :
      '''textAt( (LinetypeTableRecord)arg1, (int)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > textAt(class PyDbLinetypeTableRecord {lvalue},int)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class LoftedSurface:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> LoftedSurface :
      '''cast( (RxObject)arg1) -> LoftedSurface :

    C++ signature :
        class PyDbLoftedSurface cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> LoftedSurface :
      '''cloneFrom( (RxObject)arg1) -> LoftedSurface :

    C++ signature :
        class PyDbLoftedSurface cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class MInsertBlock:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2, (ObjectId)arg3, (int)arg4, (int)arg5, (float)arg6, (float)arg7) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d {lvalue},class PyDbObjectId,unsigned short,unsigned short,double,double)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def appendAttribute (self, *args, **kwargs)-> ObjectId :
      '''appendAttribute( (BlockReference)arg1, (AttributeReference)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId appendAttribute(class PyDbBlockReference {lvalue},class PyDbAttribute {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def attributeIds (self, *args, **kwargs)-> list :
      '''attributeIds( (BlockReference)arg1) -> list :

    C++ signature :
        class boost::python::list attributeIds(class PyDbBlockReference {lvalue})'''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def blockTableRecord (self, *args, **kwargs)-> ObjectId :
      '''blockTableRecord( (BlockReference)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockTableRecord(class PyDbBlockReference {lvalue})'''
    ...
    def blockTransform (self, *args, **kwargs)-> Matrix3d :
      '''blockTransform( (BlockReference)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbBlockReference {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> MInsertBlock :
      '''cast( (RxObject)arg1) -> MInsertBlock :

    C++ signature :
        class PyDbMInsertBlock cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> MInsertBlock :
      '''cloneFrom( (RxObject)arg1) -> MInsertBlock :

    C++ signature :
        class PyDbMInsertBlock cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def columnSpacing (self, *args, **kwargs)-> float :
      '''columnSpacing( (MInsertBlock)arg1) -> float :

    C++ signature :
        double columnSpacing(class PyDbMInsertBlock {lvalue})'''
    ...
    def columns (self, *args, **kwargs)-> int :
      '''columns( (MInsertBlock)arg1) -> int :

    C++ signature :
        unsigned short columns(class PyDbMInsertBlock {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def explodeToOwnerSpace (self, *args, **kwargs)-> ErrorStatus :
      '''explodeToOwnerSpace( (BlockReference)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus explodeToOwnerSpace(class PyDbBlockReference {lvalue})'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def geomExtentsBestFit (self, *args, **kwargs)-> Extents :
      '''geomExtentsBestFit( (BlockReference)arg1) -> Extents :

    C++ signature :
        class AcDbExtents geomExtentsBestFit(class PyDbBlockReference {lvalue})

geomExtentsBestFit( (BlockReference)arg1, (Matrix3d)arg2) -> Extents :

    C++ signature :
        class AcDbExtents geomExtentsBestFit(class PyDbBlockReference {lvalue},class AcGeMatrix3d)'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def nonAnnotationBlockTransform (self, *args, **kwargs)-> Matrix3d :
      '''nonAnnotationBlockTransform( (BlockReference)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d nonAnnotationBlockTransform(class PyDbBlockReference {lvalue})'''
    ...
    def nonAnnotationScaleFactors (self, *args, **kwargs)-> Scale3d :
      '''nonAnnotationScaleFactors( (BlockReference)arg1) -> Scale3d :

    C++ signature :
        class AcGeScale3d nonAnnotationScaleFactors(class PyDbBlockReference {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (BlockReference)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbBlockReference {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def position (self, *args, **kwargs)-> Point3d :
      '''position( (BlockReference)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDbBlockReference {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def rotation (self, *args, **kwargs)-> float :
      '''rotation( (BlockReference)arg1) -> float :

    C++ signature :
        double rotation(class PyDbBlockReference {lvalue})'''
    ...
    def rowSpacing (self, *args, **kwargs)-> float :
      '''rowSpacing( (MInsertBlock)arg1) -> float :

    C++ signature :
        double rowSpacing(class PyDbMInsertBlock {lvalue})'''
    ...
    def rows (self, *args, **kwargs)-> int :
      '''rows( (MInsertBlock)arg1) -> int :

    C++ signature :
        unsigned short rows(class PyDbMInsertBlock {lvalue})'''
    ...
    def scaleFactors (self, *args, **kwargs)-> Scale3d :
      '''scaleFactors( (BlockReference)arg1) -> Scale3d :

    C++ signature :
        class AcGeScale3d scaleFactors(class PyDbBlockReference {lvalue})'''
    ...
    def setBlockTableRecord (self, *args, **kwargs)-> ErrorStatus :
      '''setBlockTableRecord( (BlockReference)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockTableRecord(class PyDbBlockReference {lvalue},class PyDbObjectId)'''
    ...
    def setBlockTransform (self, *args, **kwargs)-> ErrorStatus :
      '''setBlockTransform( (BlockReference)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockTransform(class PyDbBlockReference {lvalue},class AcGeMatrix3d)'''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setColumnSpacing (self, *args, **kwargs)-> ErrorStatus :
      '''setColumnSpacing( (MInsertBlock)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColumnSpacing(class PyDbMInsertBlock {lvalue},double)'''
    ...
    def setColumns (self, *args, **kwargs)-> ErrorStatus :
      '''setColumns( (MInsertBlock)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColumns(class PyDbMInsertBlock {lvalue},unsigned short)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs)-> ErrorStatus :
      '''setNormal( (BlockReference)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbBlockReference {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setPosition( (BlockReference)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPosition(class PyDbBlockReference {lvalue},class AcGePoint3d)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setRotation( (BlockReference)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRotation(class PyDbBlockReference {lvalue},double)'''
    ...
    def setRowSpacing (self, *args, **kwargs)-> ErrorStatus :
      '''setRowSpacing( (MInsertBlock)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRowSpacing(class PyDbMInsertBlock {lvalue},double)'''
    ...
    def setRows (self, *args, **kwargs)-> ErrorStatus :
      '''setRows( (MInsertBlock)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRows(class PyDbMInsertBlock {lvalue},unsigned short)'''
    ...
    def setScaleFactors (self, *args, **kwargs)-> ErrorStatus :
      '''setScaleFactors( (BlockReference)arg1, (Scale3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setScaleFactors(class PyDbBlockReference {lvalue},class AcGeScale3d)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def treatAsAcDbBlockRefForExplode (self, *args, **kwargs)-> bool :
      '''treatAsAcDbBlockRefForExplode( (BlockReference)arg1) -> bool :

    C++ signature :
        bool treatAsAcDbBlockRefForExplode(class PyDbBlockReference {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class MLeader:
    def MLeaderStyle (self, *args, **kwargs)-> ObjectId :
      '''MLeaderStyle( (MLeader)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId MLeaderStyle(class PyDbMLeader {lvalue})'''
    ...
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addFirstVertex (self, *args, **kwargs)-> ErrorStatus :
      '''addFirstVertex( (MLeader)arg1, (int)arg2, (Point3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addFirstVertex(class PyDbMLeader {lvalue},int,class AcGePoint3d)'''
    ...
    def addLastVertex (self, *args, **kwargs)-> ErrorStatus :
      '''addLastVertex( (MLeader)arg1, (int)arg2, (Point3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addLastVertex(class PyDbMLeader {lvalue},int,class AcGePoint3d)'''
    ...
    def addLeader (self, *args, **kwargs)-> int :
      '''addLeader( (MLeader)arg1) -> int :

    C++ signature :
        int addLeader(class PyDbMLeader {lvalue})'''
    ...
    def addLeaderLine (self, *args, **kwargs)-> int :
      '''addLeaderLine( (MLeader)arg1, (int)arg2) -> int :

    C++ signature :
        int addLeaderLine(class PyDbMLeader {lvalue},int)

addLeaderLine( (MLeader)arg1, (Point3d)arg2) -> int :

    C++ signature :
        int addLeaderLine(class PyDbMLeader {lvalue},class AcGePoint3d)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def arrowSize (self, *args, **kwargs)-> float :
      '''arrowSize( (MLeader)arg1) -> float :

    C++ signature :
        double arrowSize(class PyDbMLeader {lvalue})'''
    ...
    def arrowSymbolId (self, *args, **kwargs)-> ObjectId :
      '''arrowSymbolId( (MLeader)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId arrowSymbolId(class PyDbMLeader {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockColor (self, *args, **kwargs)-> Color :
      '''blockColor( (MLeader)arg1) -> Color :

    C++ signature :
        class AcCmColor blockColor(class PyDbMLeader {lvalue})'''
    ...
    def blockConnectionType (self, *args, **kwargs)-> MLeaderBlockConnectionType :
      '''blockConnectionType( (MLeader)arg1) -> MLeaderBlockConnectionType :

    C++ signature :
        enum AcDbMLeaderStyle::BlockConnectionType blockConnectionType(class PyDbMLeader {lvalue})'''
    ...
    def blockContentId (self, *args, **kwargs)-> ObjectId :
      '''blockContentId( (MLeader)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockContentId(class PyDbMLeader {lvalue})'''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def blockRotation (self, *args, **kwargs)-> float :
      '''blockRotation( (MLeader)arg1) -> float :

    C++ signature :
        double blockRotation(class PyDbMLeader {lvalue})'''
    ...
    def blockScale (self, *args, **kwargs)-> Scale3d :
      '''blockScale( (MLeader)arg1) -> Scale3d :

    C++ signature :
        class AcGeScale3d blockScale(class PyDbMLeader {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> MLeader :
      '''cast( (RxObject)arg1) -> MLeader :

    C++ signature :
        class PyDbMLeader cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> MLeader :
      '''cloneFrom( (RxObject)arg1) -> MLeader :

    C++ signature :
        class PyDbMLeader cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def connectionPoint (self, *args, **kwargs)-> Point3d :
      '''connectionPoint( (MLeader)arg1, (Vector3d)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d connectionPoint(class PyDbMLeader {lvalue},class AcGeVector3d)

connectionPoint( (MLeader)arg1, (Vector3d)arg2, (MLeaderTextAttachmentDirection)arg3) -> Point3d :

    C++ signature :
        class AcGePoint3d connectionPoint(class PyDbMLeader {lvalue},class AcGeVector3d,enum AcDbMLeaderStyle::TextAttachmentDirection)'''
    ...
    def contentType (self, *args, **kwargs)-> MLeaderContentType :
      '''contentType( (MLeader)arg1) -> MLeaderContentType :

    C++ signature :
        enum AcDbMLeaderStyle::ContentType contentType(class PyDbMLeader {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def doglegLength (self, *args, **kwargs)-> float :
      '''doglegLength( (MLeader)arg1) -> float :

    C++ signature :
        double doglegLength(class PyDbMLeader {lvalue})'''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def enableAnnotationScale (self, *args, **kwargs)-> bool :
      '''enableAnnotationScale( (MLeader)arg1) -> bool :

    C++ signature :
        bool enableAnnotationScale(class PyDbMLeader {lvalue})'''
    ...
    def enableDogleg (self, *args, **kwargs)-> bool :
      '''enableDogleg( (MLeader)arg1) -> bool :

    C++ signature :
        bool enableDogleg(class PyDbMLeader {lvalue})'''
    ...
    def enableFrameText (self, *args, **kwargs)-> bool :
      '''enableFrameText( (MLeader)arg1) -> bool :

    C++ signature :
        bool enableFrameText(class PyDbMLeader {lvalue})'''
    ...
    def enableLanding (self, *args, **kwargs)-> bool :
      '''enableLanding( (MLeader)arg1) -> bool :

    C++ signature :
        bool enableLanding(class PyDbMLeader {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extendLeaderToText (self, *args, **kwargs)-> bool :
      '''extendLeaderToText( (MLeader)arg1) -> bool :

    C++ signature :
        bool extendLeaderToText(class PyDbMLeader {lvalue})'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getArrowSize (self, *args, **kwargs)-> float :
      '''getArrowSize( (MLeader)arg1, (int)arg2) -> float :

    C++ signature :
        double getArrowSize(class PyDbMLeader {lvalue},int)'''
    ...
    def getArrowSymbolId (self, *args, **kwargs)-> ObjectId :
      '''getArrowSymbolId( (MLeader)arg1, (int)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getArrowSymbolId(class PyDbMLeader {lvalue},int)'''
    ...
    def getBlockAttributeValue (self, *args, **kwargs)-> AttributeReference :
      '''getBlockAttributeValue( (MLeader)arg1, (ObjectId)arg2) -> AttributeReference :

    C++ signature :
        class PyDbAttribute getBlockAttributeValue(class PyDbMLeader {lvalue},class PyDbObjectId)

getBlockAttributeValue( (MLeader)arg1, (ObjectId)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getBlockAttributeValue(class PyDbMLeader {lvalue},class PyDbObjectId)'''
    ...
    def getBlockPosition (self, *args, **kwargs)-> Point3d :
      '''getBlockPosition( (MLeader)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getBlockPosition(class PyDbMLeader {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getContentGeomExtents (self, *args, **kwargs)-> Extents :
      '''getContentGeomExtents( (MLeader)arg1) -> Extents :

    C++ signature :
        class AcDbExtents getContentGeomExtents(class PyDbMLeader {lvalue})'''
    ...
    def getDoglegDirection (self, *args, **kwargs)-> Vector3d :
      '''getDoglegDirection( (MLeader)arg1, (int)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getDoglegDirection(class PyDbMLeader {lvalue},int)'''
    ...
    def getDoglegLength (self, *args, **kwargs)-> float :
      '''getDoglegLength( (MLeader)arg1, (int)arg2) -> float :

    C++ signature :
        double getDoglegLength(class PyDbMLeader {lvalue},int)'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFirstVertex (self, *args, **kwargs)-> Point3d :
      '''getFirstVertex( (MLeader)arg1, (int)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getFirstVertex(class PyDbMLeader {lvalue},int)'''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getLastVertex (self, *args, **kwargs)-> Point3d :
      '''getLastVertex( (MLeader)arg1, (int)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getLastVertex(class PyDbMLeader {lvalue},int)'''
    ...
    def getLeaderIndex (self, *args, **kwargs)-> int :
      '''getLeaderIndex( (MLeader)arg1, (int)arg2) -> int :

    C++ signature :
        int getLeaderIndex(class PyDbMLeader {lvalue},int)'''
    ...
    def getLeaderIndexes (self, *args, **kwargs)-> list :
      '''getLeaderIndexes( (MLeader)arg1) -> list :

    C++ signature :
        class boost::python::list getLeaderIndexes(class PyDbMLeader {lvalue})'''
    ...
    def getLeaderLineColor (self, *args, **kwargs)-> Color :
      '''getLeaderLineColor( (MLeader)arg1, (int)arg2) -> Color :

    C++ signature :
        class AcCmColor getLeaderLineColor(class PyDbMLeader {lvalue},int)'''
    ...
    def getLeaderLineIndexes (self, *args, **kwargs)-> list :
      '''getLeaderLineIndexes( (MLeader)arg1) -> list :

    C++ signature :
        class boost::python::list getLeaderLineIndexes(class PyDbMLeader {lvalue})

getLeaderLineIndexes( (MLeader)arg1, (int)arg2) -> list :

    C++ signature :
        class boost::python::list getLeaderLineIndexes(class PyDbMLeader {lvalue},int)'''
    ...
    def getLeaderLineType (self, *args, **kwargs)-> MLeaderLeaderType :
      '''getLeaderLineType( (MLeader)arg1, (int)arg2) -> MLeaderLeaderType :

    C++ signature :
        enum AcDbMLeaderStyle::LeaderType getLeaderLineType(class PyDbMLeader {lvalue},int)'''
    ...
    def getLeaderLineTypeId (self, *args, **kwargs)-> ObjectId :
      '''getLeaderLineTypeId( (MLeader)arg1, (int)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getLeaderLineTypeId(class PyDbMLeader {lvalue},int)'''
    ...
    def getLeaderLineWeight (self, *args, **kwargs)-> LineWeight :
      '''getLeaderLineWeight( (MLeader)arg1, (int)arg2) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight getLeaderLineWeight(class PyDbMLeader {lvalue},int)'''
    ...
    def getOverridedMLeaderStyle (self, *args, **kwargs)-> ErrorStatus :
      '''getOverridedMLeaderStyle( (MLeader)arg1, (MLeaderStyle)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getOverridedMLeaderStyle(class PyDbMLeader {lvalue},class PyDbMLeaderStyle {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def getTextLocation (self, *args, **kwargs)-> Point3d :
      '''getTextLocation( (MLeader)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getTextLocation(class PyDbMLeader {lvalue})'''
    ...
    def getToleranceLocation (self, *args, **kwargs)-> Point3d :
      '''getToleranceLocation( (MLeader)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getToleranceLocation(class PyDbMLeader {lvalue})'''
    ...
    def getVertex (self, *args, **kwargs)-> Point3d :
      '''getVertex( (MLeader)arg1, (int)arg2, (int)arg3) -> Point3d :

    C++ signature :
        class AcGePoint3d getVertex(class PyDbMLeader {lvalue},int,int)'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasContent (self, *args, **kwargs)-> bool :
      '''hasContent( (MLeader)arg1) -> bool :

    C++ signature :
        bool hasContent(class PyDbMLeader {lvalue})'''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isOverride (self, *args, **kwargs)-> bool :
      '''isOverride( (MLeader)arg1, (MLeaderPropertyOverrideType)arg2) -> bool :

    C++ signature :
        bool isOverride(class PyDbMLeader {lvalue},enum AcDbMLeader::PropertyOverrideType)'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def landingGap (self, *args, **kwargs)-> float :
      '''landingGap( (MLeader)arg1) -> float :

    C++ signature :
        double landingGap(class PyDbMLeader {lvalue})'''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def leaderLineColor (self, *args, **kwargs)-> Color :
      '''leaderLineColor( (MLeader)arg1) -> Color :

    C++ signature :
        class AcCmColor leaderLineColor(class PyDbMLeader {lvalue})'''
    ...
    def leaderLineType (self, *args, **kwargs)-> MLeaderLeaderType :
      '''leaderLineType( (MLeader)arg1) -> MLeaderLeaderType :

    C++ signature :
        enum AcDbMLeaderStyle::LeaderType leaderLineType(class PyDbMLeader {lvalue})'''
    ...
    def leaderLineTypeId (self, *args, **kwargs)-> ObjectId :
      '''leaderLineTypeId( (MLeader)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId leaderLineTypeId(class PyDbMLeader {lvalue})'''
    ...
    def leaderLineWeight (self, *args, **kwargs)-> LineWeight :
      '''leaderLineWeight( (MLeader)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight leaderLineWeight(class PyDbMLeader {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def modified (self, *args, **kwargs)-> None :
      '''modified( (MLeader)arg1, (DbObject)arg2) -> None :

    C++ signature :
        void modified(class PyDbMLeader {lvalue},class PyDbObject)'''
    ...
    def moveMLeader (self, *args, **kwargs)-> ErrorStatus :
      '''moveMLeader( (MLeader)arg1, (Vector3d)arg2, (MLeaderMoveType)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus moveMLeader(class PyDbMLeader {lvalue},class AcGeVector3d,enum AcDbMLeader::MoveType)

moveMLeader( (MLeader)arg1, (Vector3d)arg2, (MLeaderMoveType)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus moveMLeader(class PyDbMLeader {lvalue},class AcGeVector3d,enum AcDbMLeader::MoveType,bool)'''
    ...
    def mtext (self, *args, **kwargs)-> MText :
      '''mtext( (MLeader)arg1) -> MText :

    C++ signature :
        class PyDbMText mtext(class PyDbMLeader {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (MLeader)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbMLeader {lvalue})'''
    ...
    def numLeaderLines (self, *args, **kwargs)-> int :
      '''numLeaderLines( (MLeader)arg1) -> int :

    C++ signature :
        int numLeaderLines(class PyDbMLeader {lvalue})'''
    ...
    def numLeaders (self, *args, **kwargs)-> int :
      '''numLeaders( (MLeader)arg1) -> int :

    C++ signature :
        int numLeaders(class PyDbMLeader {lvalue})'''
    ...
    def numVertices (self, *args, **kwargs)-> int :
      '''numVertices( (MLeader)arg1, (int)arg2) -> int :

    C++ signature :
        int numVertices(class PyDbMLeader {lvalue},int)'''
    ...
    def objectClosed (self, *args, **kwargs)-> None :
      '''objectClosed( (MLeader)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void objectClosed(class PyDbMLeader {lvalue},class PyDbObjectId)'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plane (self, *args, **kwargs)-> Plane :
      '''plane( (MLeader)arg1) -> Plane :

    C++ signature :
        class PyGePlane plane(class PyDbMLeader {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def postMLeaderToDb (self, *args, **kwargs)-> ErrorStatus :
      '''postMLeaderToDb( (MLeader)arg1, (Database)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus postMLeaderToDb(class PyDbMLeader {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recomputeBreakPoints (self, *args, **kwargs)-> ErrorStatus :
      '''recomputeBreakPoints( (MLeader)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeBreakPoints(class PyDbMLeader {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removeFirstVertex (self, *args, **kwargs)-> ErrorStatus :
      '''removeFirstVertex( (MLeader)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeFirstVertex(class PyDbMLeader {lvalue},int)'''
    ...
    def removeLastVertex (self, *args, **kwargs)-> ErrorStatus :
      '''removeLastVertex( (MLeader)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeLastVertex(class PyDbMLeader {lvalue},int)'''
    ...
    def removeLeader (self, *args, **kwargs)-> ErrorStatus :
      '''removeLeader( (MLeader)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeLeader(class PyDbMLeader {lvalue},int)'''
    ...
    def removeLeaderLine (self, *args, **kwargs)-> ErrorStatus :
      '''removeLeaderLine( (MLeader)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeLeaderLine(class PyDbMLeader {lvalue},int)'''
    ...
    def removeLeaderLineRefAssoc (self, *args, **kwargs)-> ErrorStatus :
      '''removeLeaderLineRefAssoc( (MLeader)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeLeaderLineRefAssoc(class PyDbMLeader {lvalue},int)'''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def scale (self, *args, **kwargs)-> float :
      '''scale( (MLeader)arg1) -> float :

    C++ signature :
        double scale(class PyDbMLeader {lvalue})'''
    ...
    def setArrowSize (self, *args, **kwargs)-> ErrorStatus :
      '''setArrowSize( (MLeader)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowSize(class PyDbMLeader {lvalue},double)

setArrowSize( (MLeader)arg1, (int)arg2, (float)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowSize(class PyDbMLeader {lvalue},int,double)'''
    ...
    def setArrowSymbolId (self, *args, **kwargs)-> ErrorStatus :
      '''setArrowSymbolId( (MLeader)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowSymbolId(class PyDbMLeader {lvalue},class PyDbObjectId)

setArrowSymbolId( (MLeader)arg1, (int)arg2, (ObjectId)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowSymbolId(class PyDbMLeader {lvalue},int,class PyDbObjectId)'''
    ...
    def setBlockAttributeValue (self, *args, **kwargs)-> ErrorStatus :
      '''setBlockAttributeValue( (MLeader)arg1, (ObjectId)arg2, (AttributeReference)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockAttributeValue(class PyDbMLeader {lvalue},class PyDbObjectId,class PyDbAttribute)

setBlockAttributeValue( (MLeader)arg1, (ObjectId)arg2, (str)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockAttributeValue(class PyDbMLeader {lvalue},class PyDbObjectId,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setBlockColor (self, *args, **kwargs)-> ErrorStatus :
      '''setBlockColor( (MLeader)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockColor(class PyDbMLeader {lvalue},class AcCmColor)'''
    ...
    def setBlockConnectionType (self, *args, **kwargs)-> ErrorStatus :
      '''setBlockConnectionType( (MLeader)arg1, (MLeaderBlockConnectionType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockConnectionType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::BlockConnectionType)'''
    ...
    def setBlockContentId (self, *args, **kwargs)-> ErrorStatus :
      '''setBlockContentId( (MLeader)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockContentId(class PyDbMLeader {lvalue},class PyDbObjectId)'''
    ...
    def setBlockPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setBlockPosition( (MLeader)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockPosition(class PyDbMLeader {lvalue},class AcGePoint3d)'''
    ...
    def setBlockRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setBlockRotation( (MLeader)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockRotation(class PyDbMLeader {lvalue},double)'''
    ...
    def setBlockScale (self, *args, **kwargs)-> ErrorStatus :
      '''setBlockScale( (MLeader)arg1, (Scale3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockScale(class PyDbMLeader {lvalue},class AcGeScale3d)'''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setContentType (self, *args, **kwargs)-> ErrorStatus :
      '''setContentType( (MLeader)arg1, (MLeaderContentType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setContentType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::ContentType)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDoglegDirection (self, *args, **kwargs)-> ErrorStatus :
      '''setDoglegDirection( (MLeader)arg1, (int)arg2, (Vector3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDoglegDirection(class PyDbMLeader {lvalue},int,class AcGeVector3d)'''
    ...
    def setDoglegLength (self, *args, **kwargs)-> ErrorStatus :
      '''setDoglegLength( (MLeader)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDoglegLength(class PyDbMLeader {lvalue},double)

setDoglegLength( (MLeader)arg1, (int)arg2, (float)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDoglegLength(class PyDbMLeader {lvalue},int,double)'''
    ...
    def setEnableAnnotationScale (self, *args, **kwargs)-> ErrorStatus :
      '''setEnableAnnotationScale( (MLeader)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setEnableAnnotationScale(class PyDbMLeader {lvalue},bool)'''
    ...
    def setEnableDogleg (self, *args, **kwargs)-> ErrorStatus :
      '''setEnableDogleg( (MLeader)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setEnableDogleg(class PyDbMLeader {lvalue},bool)'''
    ...
    def setEnableFrameText (self, *args, **kwargs)-> ErrorStatus :
      '''setEnableFrameText( (MLeader)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setEnableFrameText(class PyDbMLeader {lvalue},bool)'''
    ...
    def setEnableLanding (self, *args, **kwargs)-> ErrorStatus :
      '''setEnableLanding( (MLeader)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setEnableLanding(class PyDbMLeader {lvalue},bool)'''
    ...
    def setExtendLeaderToText (self, *args, **kwargs)-> ErrorStatus :
      '''setExtendLeaderToText( (MLeader)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setExtendLeaderToText(class PyDbMLeader {lvalue},bool)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFirstVertex (self, *args, **kwargs)-> ErrorStatus :
      '''setFirstVertex( (MLeader)arg1, (int)arg2, (Point3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFirstVertex(class PyDbMLeader {lvalue},int,class AcGePoint3d)'''
    ...
    def setLandingGap (self, *args, **kwargs)-> ErrorStatus :
      '''setLandingGap( (MLeader)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLandingGap(class PyDbMLeader {lvalue},double)'''
    ...
    def setLastVertex (self, *args, **kwargs)-> ErrorStatus :
      '''setLastVertex( (MLeader)arg1, (int)arg2, (Point3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLastVertex(class PyDbMLeader {lvalue},int,class AcGePoint3d)'''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLeaderLineColor1 (self, *args, **kwargs)-> ErrorStatus :
      '''setLeaderLineColor1( (MLeader)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLeaderLineColor1(class PyDbMLeader {lvalue},class AcCmColor)

setLeaderLineColor1( (MLeader)arg1, (int)arg2, (Color)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLeaderLineColor1(class PyDbMLeader {lvalue},int,class AcCmColor)'''
    ...
    def setLeaderLineType (self, *args, **kwargs)-> ErrorStatus :
      '''setLeaderLineType( (MLeader)arg1, (MLeaderLeaderType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLeaderLineType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::LeaderType)

setLeaderLineType( (MLeader)arg1, (int)arg2, (MLeaderLeaderType)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLeaderLineType(class PyDbMLeader {lvalue},int,enum AcDbMLeaderStyle::LeaderType)'''
    ...
    def setLeaderLineTypeId (self, *args, **kwargs)-> ErrorStatus :
      '''setLeaderLineTypeId( (MLeader)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLeaderLineTypeId(class PyDbMLeader {lvalue},class PyDbObjectId)

setLeaderLineTypeId( (MLeader)arg1, (int)arg2, (ObjectId)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLeaderLineTypeId(class PyDbMLeader {lvalue},int,class PyDbObjectId)'''
    ...
    def setLeaderLineWeight1 (self, *args, **kwargs)-> ErrorStatus :
      '''setLeaderLineWeight1( (MLeader)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLeaderLineWeight1(class PyDbMLeader {lvalue},enum AcDb::LineWeight)

setLeaderLineWeight1( (MLeader)arg1, (int)arg2, (LineWeight)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLeaderLineWeight1(class PyDbMLeader {lvalue},int,enum AcDb::LineWeight)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMLeaderStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setMLeaderStyle( (MLeader)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMLeaderStyle(class PyDbMLeader {lvalue},class PyDbObjectId)'''
    ...
    def setMText (self, *args, **kwargs)-> ErrorStatus :
      '''setMText( (MLeader)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMText(class PyDbMLeader {lvalue},class PyDbMText)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOverride (self, *args, **kwargs)-> ErrorStatus :
      '''setOverride( (MLeader)arg1, (MLeaderPropertyOverrideType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOverride(class PyDbMLeader {lvalue},enum AcDbMLeader::PropertyOverrideType)

setOverride( (MLeader)arg1, (MLeaderPropertyOverrideType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOverride(class PyDbMLeader {lvalue},enum AcDbMLeader::PropertyOverrideType,bool)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlane (self, *args, **kwargs)-> None :
      '''setPlane( (MLeader)arg1, (Plane)arg2) -> None :

    C++ signature :
        void setPlane(class PyDbMLeader {lvalue},class PyGePlane)'''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setScale (self, *args, **kwargs)-> ErrorStatus :
      '''setScale( (MLeader)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setScale(class PyDbMLeader {lvalue},double)'''
    ...
    def setTextAlignmentType (self, *args, **kwargs)-> ErrorStatus :
      '''setTextAlignmentType( (MLeader)arg1, (MLeaderTextAlignmentType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAlignmentType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::TextAlignmentType)'''
    ...
    def setTextAngleType (self, *args, **kwargs)-> ErrorStatus :
      '''setTextAngleType( (MLeader)arg1, (MLeaderTextAngleType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAngleType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::TextAngleType)'''
    ...
    def setTextAttachmentDirection (self, *args, **kwargs)-> ErrorStatus :
      '''setTextAttachmentDirection( (MLeader)arg1, (MLeaderTextAttachmentDirection)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAttachmentDirection(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::TextAttachmentDirection)'''
    ...
    def setTextAttachmentType (self, *args, **kwargs)-> ErrorStatus :
      '''setTextAttachmentType( (MLeader)arg1, (MLeaderTextAttachmentType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAttachmentType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::TextAttachmentType)

setTextAttachmentType( (MLeader)arg1, (MLeaderTextAttachmentType)arg2, (MLeaderLeaderDirectionType)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAttachmentType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::TextAttachmentType,enum AcDbMLeaderStyle::LeaderDirectionType)'''
    ...
    def setTextColor (self, *args, **kwargs)-> ErrorStatus :
      '''setTextColor( (MLeader)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextColor(class PyDbMLeader {lvalue},class AcCmColor)'''
    ...
    def setTextHeight (self, *args, **kwargs)-> ErrorStatus :
      '''setTextHeight( (MLeader)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextHeight(class PyDbMLeader {lvalue},double)'''
    ...
    def setTextLocation (self, *args, **kwargs)-> ErrorStatus :
      '''setTextLocation( (MLeader)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLocation(class PyDbMLeader {lvalue},class AcGePoint3d)'''
    ...
    def setTextStyleId (self, *args, **kwargs)-> ErrorStatus :
      '''setTextStyleId( (MLeader)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextStyleId(class PyDbMLeader {lvalue},class PyDbObjectId)'''
    ...
    def setToleranceLocation (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceLocation( (MLeader)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceLocation(class PyDbMLeader {lvalue},class AcGePoint3d)'''
    ...
    def setVertex (self, *args, **kwargs)-> ErrorStatus :
      '''setVertex( (MLeader)arg1, (int)arg2, (int)arg3, (Point3d)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVertex(class PyDbMLeader {lvalue},int,int,class AcGePoint3d)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def textAlignmentType (self, *args, **kwargs)-> MLeaderTextAlignmentType :
      '''textAlignmentType( (MLeader)arg1) -> MLeaderTextAlignmentType :

    C++ signature :
        enum AcDbMLeaderStyle::TextAlignmentType textAlignmentType(class PyDbMLeader {lvalue})'''
    ...
    def textAngleType (self, *args, **kwargs)-> MLeaderTextAngleType :
      '''textAngleType( (MLeader)arg1) -> MLeaderTextAngleType :

    C++ signature :
        enum AcDbMLeaderStyle::TextAngleType textAngleType(class PyDbMLeader {lvalue})'''
    ...
    def textAttachmentDirection (self, *args, **kwargs)-> MLeaderTextAttachmentDirection :
      '''textAttachmentDirection( (MLeader)arg1) -> MLeaderTextAttachmentDirection :

    C++ signature :
        enum AcDbMLeaderStyle::TextAttachmentDirection textAttachmentDirection(class PyDbMLeader {lvalue})'''
    ...
    def textAttachmentType (self, *args, **kwargs)-> MLeaderTextAttachmentType :
      '''textAttachmentType( (MLeader)arg1) -> MLeaderTextAttachmentType :

    C++ signature :
        enum AcDbMLeaderStyle::TextAttachmentType textAttachmentType(class PyDbMLeader {lvalue})

textAttachmentType( (MLeader)arg1, (MLeaderLeaderDirectionType)arg2) -> MLeaderTextAttachmentType :

    C++ signature :
        enum AcDbMLeaderStyle::TextAttachmentType textAttachmentType(class PyDbMLeader {lvalue},enum AcDbMLeaderStyle::LeaderDirectionType)'''
    ...
    def textColor (self, *args, **kwargs)-> Color :
      '''textColor( (MLeader)arg1) -> Color :

    C++ signature :
        class AcCmColor textColor(class PyDbMLeader {lvalue})'''
    ...
    def textHeight (self, *args, **kwargs)-> float :
      '''textHeight( (MLeader)arg1) -> float :

    C++ signature :
        double textHeight(class PyDbMLeader {lvalue})'''
    ...
    def textStyleId (self, *args, **kwargs)-> ObjectId :
      '''textStyleId( (MLeader)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyleId(class PyDbMLeader {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def updateLeaderLinePosition (self, *args, **kwargs)-> ErrorStatus :
      '''updateLeaderLinePosition( (MLeader)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus updateLeaderLinePosition(class PyDbMLeader {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class MLeaderBlockConnectionType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kConnectBase (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kConnectExtents (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MLeaderContentType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kBlockContent (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMTextContent (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kNoneContent (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kToleranceContent (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MLeaderGsMarkType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kArrowMark (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBlockAttribute (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBlockMark (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDoglegMark (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLeaderLineMark (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMTextMark (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMTextUnderLineMark (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kNone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kToleranceMark (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MLeaderLeaderDirectionType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kBottomLeader (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLeftLeader (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kRightLeader (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTopLeader (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnknownLeader (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MLeaderLeaderType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kInVisibleLeader (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kSplineLeader (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kStraightLeader (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MLeaderMoveType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kMoveAllExceptArrowHeaderPoints (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMoveAllPoints (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMoveContentAndDoglegPoints (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MLeaderPropertyOverrideType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kArrowSize (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kArrowSymbolId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBlockColor (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBlockConnectionType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBlockId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBlockRotation (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBlockScale (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kContentType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDefaultMText (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDoglegLength (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kEnableDogleg (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kEnableFrameText (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kEnableLanding (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kExtendLeaderToText (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLandingGap (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLeaderLineColor (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLeaderLineType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLeaderLineTypeId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLeaderLineWeight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kScale (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kSize (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextAlignmentType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextAngleType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextAttachmentDirection (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextBottomAttachmentType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextColor (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextHeight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextLeftAttachmentType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextRightAttachmentType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextStyleId (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextSwitchAlignmentType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextTopAttachmentType (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MLeaderSegmentAngleType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def k15 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k30 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k45 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k60 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k90 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kAny (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kHorz (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MLeaderStyle:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def alignSpace (self, *args, **kwargs)-> float :
      '''alignSpace( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double alignSpace(class PyDbMLeaderStyle {lvalue})'''
    ...
    def annotative (self, *args, **kwargs)-> bool :
      '''annotative( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool annotative(class PyDbMLeaderStyle {lvalue})'''
    ...
    def arrowSize (self, *args, **kwargs)-> float :
      '''arrowSize( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double arrowSize(class PyDbMLeaderStyle {lvalue})'''
    ...
    def arrowSymbolId (self, *args, **kwargs)-> ObjectId :
      '''arrowSymbolId( (MLeaderStyle)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId arrowSymbolId(class PyDbMLeaderStyle {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def bitFlags (self, *args, **kwargs)-> int :
      '''bitFlags( (MLeaderStyle)arg1) -> int :

    C++ signature :
        unsigned int bitFlags(class PyDbMLeaderStyle {lvalue})'''
    ...
    def blockColor (self, *args, **kwargs)-> Color :
      '''blockColor( (MLeaderStyle)arg1) -> Color :

    C++ signature :
        class AcCmColor blockColor(class PyDbMLeaderStyle {lvalue})'''
    ...
    def blockConnectionType (self, *args, **kwargs)-> MLeaderBlockConnectionType :
      '''blockConnectionType( (MLeaderStyle)arg1) -> MLeaderBlockConnectionType :

    C++ signature :
        enum AcDbMLeaderStyle::BlockConnectionType blockConnectionType(class PyDbMLeaderStyle {lvalue})'''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (MLeaderStyle)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbMLeaderStyle {lvalue})'''
    ...
    def blockRotation (self, *args, **kwargs)-> float :
      '''blockRotation( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double blockRotation(class PyDbMLeaderStyle {lvalue})'''
    ...
    def blockScale (self, *args, **kwargs)-> Scale3d :
      '''blockScale( (MLeaderStyle)arg1) -> Scale3d :

    C++ signature :
        class AcGeScale3d blockScale(class PyDbMLeaderStyle {lvalue})'''
    ...
    def breakSize (self, *args, **kwargs)-> float :
      '''breakSize( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double breakSize(class PyDbMLeaderStyle {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast ()-> DbObject :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom ()-> DbObject :
      '''                             '''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def contentType (self, *args, **kwargs)-> MLeaderContentType :
      '''contentType( (MLeaderStyle)arg1) -> MLeaderContentType :

    C++ signature :
        enum AcDbMLeaderStyle::ContentType contentType(class PyDbMLeaderStyle {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def defaultMText (self, *args, **kwargs)-> MText :
      '''defaultMText( (MLeaderStyle)arg1) -> MText :

    C++ signature :
        class PyDbMText defaultMText(class PyDbMLeaderStyle {lvalue})'''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def description (self, *args, **kwargs)-> str :
      '''description( (MLeaderStyle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > description(class PyDbMLeaderStyle {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def doglegLength (self, *args, **kwargs)-> float :
      '''doglegLength( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double doglegLength(class PyDbMLeaderStyle {lvalue})'''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def drawLeaderOrderType (self, *args, **kwargs)-> DrawLeaderOrderType :
      '''drawLeaderOrderType( (MLeaderStyle)arg1) -> DrawLeaderOrderType :

    C++ signature :
        enum AcDbMLeaderStyle::DrawLeaderOrderType drawLeaderOrderType(class PyDbMLeaderStyle {lvalue})

drawLeaderOrderType( (MLeaderStyle)arg1) -> DrawLeaderOrderType :

    C++ signature :
        enum AcDbMLeaderStyle::DrawLeaderOrderType drawLeaderOrderType(class PyDbMLeaderStyle {lvalue})'''
    ...
    def drawMLeaderOrderType (self, *args, **kwargs)-> DrawMLeaderOrderType :
      '''drawMLeaderOrderType( (MLeaderStyle)arg1) -> DrawMLeaderOrderType :

    C++ signature :
        enum AcDbMLeaderStyle::DrawMLeaderOrderType drawMLeaderOrderType(class PyDbMLeaderStyle {lvalue})'''
    ...
    def enableBlockRotation (self, *args, **kwargs)-> bool :
      '''enableBlockRotation( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool enableBlockRotation(class PyDbMLeaderStyle {lvalue})'''
    ...
    def enableBlockScale (self, *args, **kwargs)-> bool :
      '''enableBlockScale( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool enableBlockScale(class PyDbMLeaderStyle {lvalue})'''
    ...
    def enableDogleg (self, *args, **kwargs)-> bool :
      '''enableDogleg( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool enableDogleg(class PyDbMLeaderStyle {lvalue})'''
    ...
    def enableFrameText (self, *args, **kwargs)-> bool :
      '''enableFrameText( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool enableFrameText(class PyDbMLeaderStyle {lvalue})'''
    ...
    def enableLanding (self, *args, **kwargs)-> bool :
      '''enableLanding( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool enableLanding(class PyDbMLeaderStyle {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extendLeaderToText (self, *args, **kwargs)-> bool :
      '''extendLeaderToText( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool extendLeaderToText(class PyDbMLeaderStyle {lvalue})'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def firstSegmentAngleConstraint (self, *args, **kwargs)-> MLeaderSegmentAngleType :
      '''firstSegmentAngleConstraint( (MLeaderStyle)arg1) -> MLeaderSegmentAngleType :

    C++ signature :
        enum AcDbMLeaderStyle::SegmentAngleType firstSegmentAngleConstraint(class PyDbMLeaderStyle {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getName (self, *args, **kwargs)-> str :
      '''getName( (MLeaderStyle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getName(class PyDbMLeaderStyle {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isRenamable (self, *args, **kwargs)-> bool :
      '''isRenamable( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool isRenamable(class PyDbMLeaderStyle {lvalue})'''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def landingGap (self, *args, **kwargs)-> float :
      '''landingGap( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double landingGap(class PyDbMLeaderStyle {lvalue})'''
    ...
    def leaderLineColor (self, *args, **kwargs)-> Color :
      '''leaderLineColor( (MLeaderStyle)arg1) -> Color :

    C++ signature :
        class AcCmColor leaderLineColor(class PyDbMLeaderStyle {lvalue})'''
    ...
    def leaderLineType (self, *args, **kwargs)-> MLeaderLeaderType :
      '''leaderLineType( (MLeaderStyle)arg1) -> MLeaderLeaderType :

    C++ signature :
        enum AcDbMLeaderStyle::LeaderType leaderLineType(class PyDbMLeaderStyle {lvalue})'''
    ...
    def leaderLineTypeId (self, *args, **kwargs)-> ObjectId :
      '''leaderLineTypeId( (MLeaderStyle)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId leaderLineTypeId(class PyDbMLeaderStyle {lvalue})'''
    ...
    def leaderLineWeight (self, *args, **kwargs)-> LineWeight :
      '''leaderLineWeight( (MLeaderStyle)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight leaderLineWeight(class PyDbMLeaderStyle {lvalue})'''
    ...
    def maxLeaderSegmentsPoints (self, *args, **kwargs)-> int :
      '''maxLeaderSegmentsPoints( (MLeaderStyle)arg1) -> int :

    C++ signature :
        int maxLeaderSegmentsPoints(class PyDbMLeaderStyle {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def overwritePropChanged (self, *args, **kwargs)-> bool :
      '''overwritePropChanged( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool overwritePropChanged(class PyDbMLeaderStyle {lvalue})'''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def postMLeaderStyleToDb (self, *args, **kwargs)-> ObjectId :
      '''postMLeaderStyleToDb( (MLeaderStyle)arg1, (Database)arg2, (str)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId postMLeaderStyleToDb(class PyDbMLeaderStyle {lvalue},class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def scale (self, *args, **kwargs)-> float :
      '''scale( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double scale(class PyDbMLeaderStyle {lvalue})'''
    ...
    def secondSegmentAngleConstraint (self, *args, **kwargs)-> MLeaderSegmentAngleType :
      '''secondSegmentAngleConstraint( (MLeaderStyle)arg1) -> MLeaderSegmentAngleType :

    C++ signature :
        enum AcDbMLeaderStyle::SegmentAngleType secondSegmentAngleConstraint(class PyDbMLeaderStyle {lvalue})'''
    ...
    def setAlignSpace (self, *args, **kwargs)-> ErrorStatus :
      '''setAlignSpace( (MLeaderStyle)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlignSpace(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setAnnotative (self, *args, **kwargs)-> ErrorStatus :
      '''setAnnotative( (MLeaderStyle)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAnnotative(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setArrowSize (self, *args, **kwargs)-> ErrorStatus :
      '''setArrowSize( (MLeaderStyle)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowSize(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setArrowSymbolId (self, *args, **kwargs)-> ErrorStatus :
      '''setArrowSymbolId( (MLeaderStyle)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowSymbolId(class PyDbMLeaderStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setArrowSymbolId( (MLeaderStyle)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowSymbolId(class PyDbMLeaderStyle {lvalue},class PyDbObjectId)'''
    ...
    def setBitFlags (self, *args, **kwargs)-> ErrorStatus :
      '''setBitFlags( (MLeaderStyle)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBitFlags(class PyDbMLeaderStyle {lvalue},unsigned int)'''
    ...
    def setBlockColor (self, *args, **kwargs)-> ErrorStatus :
      '''setBlockColor( (MLeaderStyle)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockColor(class PyDbMLeaderStyle {lvalue},class AcCmColor)'''
    ...
    def setBlockConnectionType (self, *args, **kwargs)-> ErrorStatus :
      '''setBlockConnectionType( (MLeaderStyle)arg1, (MLeaderBlockConnectionType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockConnectionType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::BlockConnectionType)'''
    ...
    def setBlockId (self, *args, **kwargs)-> ErrorStatus :
      '''setBlockId( (MLeaderStyle)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockId(class PyDbMLeaderStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setBlockId( (MLeaderStyle)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockId(class PyDbMLeaderStyle {lvalue},class PyDbObjectId)'''
    ...
    def setBlockRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setBlockRotation( (MLeaderStyle)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockRotation(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setBlockScale (self, *args, **kwargs)-> ErrorStatus :
      '''setBlockScale( (MLeaderStyle)arg1, (Scale3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockScale(class PyDbMLeaderStyle {lvalue},class AcGeScale3d)'''
    ...
    def setBreakSize (self, *args, **kwargs)-> ErrorStatus :
      '''setBreakSize( (MLeaderStyle)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBreakSize(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setContentType (self, *args, **kwargs)-> ErrorStatus :
      '''setContentType( (MLeaderStyle)arg1, (MLeaderContentType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setContentType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::ContentType)'''
    ...
    def setDefaultMText (self, *args, **kwargs)-> ErrorStatus :
      '''setDefaultMText( (MLeaderStyle)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDefaultMText(class PyDbMLeaderStyle {lvalue},class PyDbMText)'''
    ...
    def setDescription (self, *args, **kwargs)-> ErrorStatus :
      '''setDescription( (MLeaderStyle)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDescription(class PyDbMLeaderStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDoglegLength (self, *args, **kwargs)-> ErrorStatus :
      '''setDoglegLength( (MLeaderStyle)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDoglegLength(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setDrawLeaderOrderType (self, *args, **kwargs)-> ErrorStatus :
      '''setDrawLeaderOrderType( (MLeaderStyle)arg1, (DrawLeaderOrderType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDrawLeaderOrderType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::DrawLeaderOrderType)

setDrawLeaderOrderType( (MLeaderStyle)arg1, (DrawLeaderOrderType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDrawLeaderOrderType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::DrawLeaderOrderType)'''
    ...
    def setDrawMLeaderOrderType (self, *args, **kwargs)-> ErrorStatus :
      '''setDrawMLeaderOrderType( (MLeaderStyle)arg1, (DrawMLeaderOrderType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDrawMLeaderOrderType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::DrawMLeaderOrderType)'''
    ...
    def setEnableBlockRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setEnableBlockRotation( (MLeaderStyle)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setEnableBlockRotation(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setEnableBlockScale (self, *args, **kwargs)-> ErrorStatus :
      '''setEnableBlockScale( (MLeaderStyle)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setEnableBlockScale(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setEnableDogleg (self, *args, **kwargs)-> ErrorStatus :
      '''setEnableDogleg( (MLeaderStyle)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setEnableDogleg(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setEnableFrameText (self, *args, **kwargs)-> ErrorStatus :
      '''setEnableFrameText( (MLeaderStyle)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setEnableFrameText(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setEnableLanding (self, *args, **kwargs)-> ErrorStatus :
      '''setEnableLanding( (MLeaderStyle)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setEnableLanding(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setExtendLeaderToText (self, *args, **kwargs)-> ErrorStatus :
      '''setExtendLeaderToText( (MLeaderStyle)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setExtendLeaderToText(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFirstSegmentAngleConstraint (self, *args, **kwargs)-> ErrorStatus :
      '''setFirstSegmentAngleConstraint( (MLeaderStyle)arg1, (MLeaderSegmentAngleType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFirstSegmentAngleConstraint(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::SegmentAngleType)'''
    ...
    def setLandingGap (self, *args, **kwargs)-> ErrorStatus :
      '''setLandingGap( (MLeaderStyle)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLandingGap(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setLeaderLineColor (self, *args, **kwargs)-> ErrorStatus :
      '''setLeaderLineColor( (MLeaderStyle)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLeaderLineColor(class PyDbMLeaderStyle {lvalue},class AcCmColor)'''
    ...
    def setLeaderLineType (self, *args, **kwargs)-> ErrorStatus :
      '''setLeaderLineType( (MLeaderStyle)arg1, (MLeaderLeaderType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLeaderLineType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::LeaderType)'''
    ...
    def setLeaderLineTypeId (self, *args, **kwargs)-> ErrorStatus :
      '''setLeaderLineTypeId( (MLeaderStyle)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLeaderLineTypeId(class PyDbMLeaderStyle {lvalue},class PyDbObjectId)'''
    ...
    def setLeaderLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLeaderLineWeight( (MLeaderStyle)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLeaderLineWeight(class PyDbMLeaderStyle {lvalue},enum AcDb::LineWeight)'''
    ...
    def setMaxLeaderSegmentsPoints (self, *args, **kwargs)-> ErrorStatus :
      '''setMaxLeaderSegmentsPoints( (MLeaderStyle)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaxLeaderSegmentsPoints(class PyDbMLeaderStyle {lvalue},int)'''
    ...
    def setName (self, *args, **kwargs)-> ErrorStatus :
      '''setName( (MLeaderStyle)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setName(class PyDbMLeaderStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setScale (self, *args, **kwargs)-> ErrorStatus :
      '''setScale( (MLeaderStyle)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setScale(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setSecondSegmentAngleConstraint (self, *args, **kwargs)-> ErrorStatus :
      '''setSecondSegmentAngleConstraint( (MLeaderStyle)arg1, (MLeaderSegmentAngleType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSecondSegmentAngleConstraint(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::SegmentAngleType)'''
    ...
    def setTextAlignAlwaysLeft (self, *args, **kwargs)-> ErrorStatus :
      '''setTextAlignAlwaysLeft( (MLeaderStyle)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAlignAlwaysLeft(class PyDbMLeaderStyle {lvalue},bool)'''
    ...
    def setTextAlignmentType (self, *args, **kwargs)-> ErrorStatus :
      '''setTextAlignmentType( (MLeaderStyle)arg1, (MLeaderTextAlignmentType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAlignmentType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::TextAlignmentType)'''
    ...
    def setTextAngleType (self, *args, **kwargs)-> ErrorStatus :
      '''setTextAngleType( (MLeaderStyle)arg1, (MLeaderTextAngleType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAngleType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::TextAngleType)'''
    ...
    def setTextAttachmentDirection (self, *args, **kwargs)-> ErrorStatus :
      '''setTextAttachmentDirection( (MLeaderStyle)arg1, (MLeaderTextAttachmentDirection)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAttachmentDirection(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::TextAttachmentDirection)'''
    ...
    def setTextAttachmentType (self, *args, **kwargs)-> ErrorStatus :
      '''setTextAttachmentType( (MLeaderStyle)arg1, (MLeaderTextAttachmentType)arg2 [, (MLeaderLeaderDirectionType)arg3]) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAttachmentType(class PyDbMLeaderStyle {lvalue},enum AcDbMLeaderStyle::TextAttachmentType [,enum AcDbMLeaderStyle::LeaderDirectionType])'''
    ...
    def setTextColor (self, *args, **kwargs)-> ErrorStatus :
      '''setTextColor( (MLeaderStyle)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextColor(class PyDbMLeaderStyle {lvalue},class AcCmColor)'''
    ...
    def setTextHeight (self, *args, **kwargs)-> ErrorStatus :
      '''setTextHeight( (MLeaderStyle)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextHeight(class PyDbMLeaderStyle {lvalue},double)'''
    ...
    def setTextStyleId (self, *args, **kwargs)-> ErrorStatus :
      '''setTextStyleId( (MLeaderStyle)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextStyleId(class PyDbMLeaderStyle {lvalue},class PyDbObjectId)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def textAlignAlwaysLeft (self, *args, **kwargs)-> bool :
      '''textAlignAlwaysLeft( (MLeaderStyle)arg1) -> bool :

    C++ signature :
        bool textAlignAlwaysLeft(class PyDbMLeaderStyle {lvalue})'''
    ...
    def textAlignmentType (self, *args, **kwargs)-> MLeaderTextAlignmentType :
      '''textAlignmentType( (MLeaderStyle)arg1) -> MLeaderTextAlignmentType :

    C++ signature :
        enum AcDbMLeaderStyle::TextAlignmentType textAlignmentType(class PyDbMLeaderStyle {lvalue})'''
    ...
    def textAngleType (self, *args, **kwargs)-> MLeaderTextAngleType :
      '''textAngleType( (MLeaderStyle)arg1) -> MLeaderTextAngleType :

    C++ signature :
        enum AcDbMLeaderStyle::TextAngleType textAngleType(class PyDbMLeaderStyle {lvalue})'''
    ...
    def textAttachmentDirection (self, *args, **kwargs)-> MLeaderTextAttachmentDirection :
      '''textAttachmentDirection( (MLeaderStyle)arg1) -> MLeaderTextAttachmentDirection :

    C++ signature :
        enum AcDbMLeaderStyle::TextAttachmentDirection textAttachmentDirection(class PyDbMLeaderStyle {lvalue})'''
    ...
    def textAttachmentType (self, *args, **kwargs)-> MLeaderTextAttachmentType :
      '''textAttachmentType( (MLeaderStyle)arg1 [, (MLeaderLeaderDirectionType)arg2]) -> MLeaderTextAttachmentType :

    C++ signature :
        enum AcDbMLeaderStyle::TextAttachmentType textAttachmentType(class PyDbMLeaderStyle {lvalue} [,enum AcDbMLeaderStyle::LeaderDirectionType])'''
    ...
    def textColor (self, *args, **kwargs)-> Color :
      '''textColor( (MLeaderStyle)arg1) -> Color :

    C++ signature :
        class AcCmColor textColor(class PyDbMLeaderStyle {lvalue})'''
    ...
    def textHeight (self, *args, **kwargs)-> float :
      '''textHeight( (MLeaderStyle)arg1) -> float :

    C++ signature :
        double textHeight(class PyDbMLeaderStyle {lvalue})'''
    ...
    def textStyleId (self, *args, **kwargs)-> ObjectId :
      '''textStyleId( (MLeaderStyle)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyleId(class PyDbMLeaderStyle {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class MLeaderTextAlignmentType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kCenterAlignment (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLeftAlignment (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kRightAlignment (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MLeaderTextAngleType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kAlwaysRightReadingAngle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kHorizontalAngle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kInsertAngle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MLeaderTextAttachmentDirection:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kAttachmentHorizontal (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kAttachmentVertical (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MLeaderTextAttachmentType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kAttachmentAllLine (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kAttachmentBottomLine (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kAttachmentBottomOfBottom (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kAttachmentBottomOfTop (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kAttachmentBottomOfTopLine (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kAttachmentCenter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kAttachmentLinedCenter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kAttachmentMiddle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kAttachmentMiddleOfBottom (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kAttachmentMiddleOfTop (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kAttachmentTopOfTop (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MText:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def actualHeight (self, *args, **kwargs)-> float :
      '''actualHeight( (MText)arg1) -> float :

    C++ signature :
        double actualHeight(class PyDbMText {lvalue})'''
    ...
    def actualWidth (self, *args, **kwargs)-> float :
      '''actualWidth( (MText)arg1) -> float :

    C++ signature :
        double actualWidth(class PyDbMText {lvalue})'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def ascent (self, *args, **kwargs)-> float :
      '''ascent( (MText)arg1) -> float :

    C++ signature :
        double ascent(class PyDbMText {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def attachment (self, *args, **kwargs)-> MTextAttachmentPoint :
      '''attachment( (MText)arg1) -> MTextAttachmentPoint :

    C++ signature :
        enum AcDbMText::AttachmentPoint attachment(class PyDbMText {lvalue})'''
    ...
    def backgroundFillOn (self, *args, **kwargs)-> bool :
      '''backgroundFillOn( (MText)arg1) -> bool :

    C++ signature :
        bool backgroundFillOn(class PyDbMText {lvalue})'''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> MText :
      '''cast( (RxObject)arg1) -> MText :

    C++ signature :
        class PyDbMText cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> MText :
      '''cloneFrom( (RxObject)arg1) -> MText :

    C++ signature :
        class PyDbMText cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def contents (self, *args, **kwargs)-> str :
      '''contents( (MText)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > contents(class PyDbMText {lvalue})'''
    ...
    def contentsRTF (self, *args, **kwargs)-> str :
      '''contentsRTF( (MText)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > contentsRTF(class PyDbMText {lvalue})'''
    ...
    def convertFieldToText (self, *args, **kwargs)-> ErrorStatus :
      '''convertFieldToText( (MText)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus convertFieldToText(class PyDbMText {lvalue})'''
    ...
    def correctSpelling (self, *args, **kwargs)-> int :
      '''correctSpelling( (MText)arg1) -> int :

    C++ signature :
        int correctSpelling(class PyDbMText {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def descent (self, *args, **kwargs)-> float :
      '''descent( (MText)arg1) -> float :

    C++ signature :
        double descent(class PyDbMText {lvalue})'''
    ...
    def direction (self, *args, **kwargs)-> Vector3d :
      '''direction( (MText)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d direction(class PyDbMText {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def flowDirection (self, *args, **kwargs)-> MTextFlowDirection :
      '''flowDirection( (MText)arg1) -> MTextFlowDirection :

    C++ signature :
        enum AcDbMText::FlowDirection flowDirection(class PyDbMText {lvalue})'''
    ...
    def getBackgroundFillColor (self, *args, **kwargs)-> Color :
      '''getBackgroundFillColor( (MText)arg1) -> Color :

    C++ signature :
        class AcCmColor getBackgroundFillColor(class PyDbMText {lvalue})'''
    ...
    def getBackgroundScaleFactor (self, *args, **kwargs)-> float :
      '''getBackgroundScaleFactor( (MText)arg1) -> float :

    C++ signature :
        double getBackgroundScaleFactor(class PyDbMText {lvalue})'''
    ...
    def getBackgroundTransparency (self, *args, **kwargs)-> Transparency :
      '''getBackgroundTransparency( (MText)arg1) -> Transparency :

    C++ signature :
        class AcCmTransparency getBackgroundTransparency(class PyDbMText {lvalue})'''
    ...
    def getBoundingPoints (self, *args, **kwargs)-> list :
      '''getBoundingPoints( (MText)arg1) -> list :

    C++ signature :
        class boost::python::list getBoundingPoints(class PyDbMText {lvalue})'''
    ...
    def getColumnAutoHeight (self, *args, **kwargs)-> bool :
      '''getColumnAutoHeight( (MText)arg1) -> bool :

    C++ signature :
        bool getColumnAutoHeight(class PyDbMText {lvalue})'''
    ...
    def getColumnCount (self, *args, **kwargs)-> int :
      '''getColumnCount( (MText)arg1) -> int :

    C++ signature :
        int getColumnCount(class PyDbMText {lvalue})'''
    ...
    def getColumnFlowReversed (self, *args, **kwargs)-> bool :
      '''getColumnFlowReversed( (MText)arg1) -> bool :

    C++ signature :
        bool getColumnFlowReversed(class PyDbMText {lvalue})'''
    ...
    def getColumnGutterWidth (self, *args, **kwargs)-> float :
      '''getColumnGutterWidth( (MText)arg1) -> float :

    C++ signature :
        double getColumnGutterWidth(class PyDbMText {lvalue})'''
    ...
    def getColumnHeight (self, *args, **kwargs)-> float :
      '''getColumnHeight( (MText)arg1, (int)arg2) -> float :

    C++ signature :
        double getColumnHeight(class PyDbMText {lvalue},int)'''
    ...
    def getColumnType (self, *args, **kwargs)-> MTextColumnType :
      '''getColumnType( (MText)arg1) -> MTextColumnType :

    C++ signature :
        enum AcDbMText::ColumnType getColumnType(class PyDbMText {lvalue})'''
    ...
    def getColumnWidth (self, *args, **kwargs)-> float :
      '''getColumnWidth( (MText)arg1) -> float :

    C++ signature :
        double getColumnWidth(class PyDbMText {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def height (self, *args, **kwargs)-> float :
      '''height( (MText)arg1) -> float :

    C++ signature :
        double height(class PyDbMText {lvalue})'''
    ...
    def hitTest (self, *args, **kwargs)-> bool :
      '''hitTest( (MText)arg1, (Point3d)arg2) -> bool :

    C++ signature :
        bool hitTest(class PyDbMText {lvalue},class AcGePoint3d)'''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineSpacingFactor (self, *args, **kwargs)-> float :
      '''lineSpacingFactor( (MText)arg1) -> float :

    C++ signature :
        double lineSpacingFactor(class PyDbMText {lvalue})'''
    ...
    def lineSpacingStyle (self, *args, **kwargs)-> LineSpacingStyle :
      '''lineSpacingStyle( (MText)arg1) -> LineSpacingStyle :

    C++ signature :
        enum AcDb::LineSpacingStyle lineSpacingStyle(class PyDbMText {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def location (self, *args, **kwargs)-> Point3d :
      '''location( (MText)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d location(class PyDbMText {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (MText)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbMText {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def rotation (self, *args, **kwargs)-> float :
      '''rotation( (MText)arg1) -> float :

    C++ signature :
        double rotation(class PyDbMText {lvalue})'''
    ...
    def setAttachment (self, *args, **kwargs)-> ErrorStatus :
      '''setAttachment( (MText)arg1, (MTextAttachmentPoint)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAttachment(class PyDbMText {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setAttachmentMovingLocation (self, *args, **kwargs)-> ErrorStatus :
      '''setAttachmentMovingLocation( (MText)arg1, (MTextAttachmentPoint)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAttachmentMovingLocation(class PyDbMText {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setBackgroundFill (self, *args, **kwargs)-> ErrorStatus :
      '''setBackgroundFill( (MText)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBackgroundFill(class PyDbMText {lvalue},bool)'''
    ...
    def setBackgroundFillColor (self, *args, **kwargs)-> ErrorStatus :
      '''setBackgroundFillColor( (MText)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBackgroundFillColor(class PyDbMText {lvalue},class AcCmColor)'''
    ...
    def setBackgroundScaleFactor (self, *args, **kwargs)-> ErrorStatus :
      '''setBackgroundScaleFactor( (MText)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBackgroundScaleFactor(class PyDbMText {lvalue},double)'''
    ...
    def setBackgroundTransparency (self, *args, **kwargs)-> ErrorStatus :
      '''setBackgroundTransparency( (MText)arg1, (Transparency)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBackgroundTransparency(class PyDbMText {lvalue},class AcCmTransparency)'''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setColumnAutoHeight (self, *args, **kwargs)-> ErrorStatus :
      '''setColumnAutoHeight( (MText)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColumnAutoHeight(class PyDbMText {lvalue},bool)'''
    ...
    def setColumnCount (self, *args, **kwargs)-> ErrorStatus :
      '''setColumnCount( (MText)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColumnCount(class PyDbMText {lvalue},int)'''
    ...
    def setColumnFlowReversed (self, *args, **kwargs)-> ErrorStatus :
      '''setColumnFlowReversed( (MText)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColumnFlowReversed(class PyDbMText {lvalue},bool)'''
    ...
    def setColumnGutterWidth (self, *args, **kwargs)-> ErrorStatus :
      '''setColumnGutterWidth( (MText)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColumnGutterWidth(class PyDbMText {lvalue},double)'''
    ...
    def setColumnHeight (self, *args, **kwargs)-> ErrorStatus :
      '''setColumnHeight( (MText)arg1, (int)arg2, (float)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColumnHeight(class PyDbMText {lvalue},int,double)'''
    ...
    def setColumnType (self, *args, **kwargs)-> ErrorStatus :
      '''setColumnType( (MText)arg1, (MTextColumnType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColumnType(class PyDbMText {lvalue},enum AcDbMText::ColumnType)'''
    ...
    def setColumnWidth (self, *args, **kwargs)-> ErrorStatus :
      '''setColumnWidth( (MText)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColumnWidth(class PyDbMText {lvalue},double)'''
    ...
    def setContents (self, *args, **kwargs)-> int :
      '''setContents( (MText)arg1, (str)arg2) -> int :

    C++ signature :
        int setContents(class PyDbMText {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setContentsRTF (self, *args, **kwargs)-> int :
      '''setContentsRTF( (MText)arg1, (str)arg2) -> int :

    C++ signature :
        int setContentsRTF(class PyDbMText {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDirection (self, *args, **kwargs)-> ErrorStatus :
      '''setDirection( (MText)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDirection(class PyDbMText {lvalue},class AcGeVector3d)'''
    ...
    def setDynamicColumns (self, *args, **kwargs)-> ErrorStatus :
      '''setDynamicColumns( (MText)arg1, (float)arg2, (float)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDynamicColumns(class PyDbMText {lvalue},double,double,bool)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFlowDirection (self, *args, **kwargs)-> ErrorStatus :
      '''setFlowDirection( (MText)arg1, (MTextFlowDirection)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFlowDirection(class PyDbMText {lvalue},enum AcDbMText::FlowDirection)'''
    ...
    def setHeight (self, *args, **kwargs)-> ErrorStatus :
      '''setHeight( (MText)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHeight(class PyDbMText {lvalue},double)'''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineSpacingFactor (self, *args, **kwargs)-> ErrorStatus :
      '''setLineSpacingFactor( (MText)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineSpacingFactor(class PyDbMText {lvalue},double)'''
    ...
    def setLineSpacingStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setLineSpacingStyle( (MText)arg1, (LineSpacingStyle)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineSpacingStyle(class PyDbMText {lvalue},enum AcDb::LineSpacingStyle)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setLocation (self, *args, **kwargs)-> ErrorStatus :
      '''setLocation( (MText)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLocation(class PyDbMText {lvalue},class AcGePoint3d)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs)-> ErrorStatus :
      '''setNormal( (MText)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbMText {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setRotation( (MText)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRotation(class PyDbMText {lvalue},double)'''
    ...
    def setStaticColumns (self, *args, **kwargs)-> ErrorStatus :
      '''setStaticColumns( (MText)arg1, (float)arg2, (float)arg3, (int)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setStaticColumns(class PyDbMText {lvalue},double,double,int)'''
    ...
    def setTextHeight (self, *args, **kwargs)-> ErrorStatus :
      '''setTextHeight( (MText)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextHeight(class PyDbMText {lvalue},double)'''
    ...
    def setTextStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setTextStyle( (MText)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextStyle(class PyDbMText {lvalue},class PyDbObjectId)'''
    ...
    def setUseBackgroundColor (self, *args, **kwargs)-> ErrorStatus :
      '''setUseBackgroundColor( (MText)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUseBackgroundColor(class PyDbMText {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setWidth (self, *args, **kwargs)-> ErrorStatus :
      '''setWidth( (MText)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setWidth(class PyDbMText {lvalue},double)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def text (self, *args, **kwargs)-> str :
      '''text( (MText)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > text(class PyDbMText {lvalue})'''
    ...
    def textHeight (self, *args, **kwargs)-> float :
      '''textHeight( (MText)arg1) -> float :

    C++ signature :
        double textHeight(class PyDbMText {lvalue})'''
    ...
    def textStyle (self, *args, **kwargs)-> ObjectId :
      '''textStyle( (MText)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyle(class PyDbMText {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def useBackgroundColorOn (self, *args, **kwargs)-> bool :
      '''useBackgroundColorOn( (MText)arg1) -> bool :

    C++ signature :
        bool useBackgroundColorOn(class PyDbMText {lvalue})'''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def width (self, *args, **kwargs)-> float :
      '''width( (MText)arg1) -> float :

    C++ signature :
        double width(class PyDbMText {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class MTextAttachmentPoint:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kBaseAlign (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBaseCenter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBaseFit (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBaseLeft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBaseMid (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBaseRight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBottomAlign (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBottomCenter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBottomFit (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBottomLeft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBottomMid (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBottomRight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMiddleAlign (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMiddleCenter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMiddleFit (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMiddleLeft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMiddleMid (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMiddleRight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTopAlign (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTopCenter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTopFit (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTopLeft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTopMid (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTopRight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MTextColumnType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kDynamicColumns (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kNoColumns (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kStaticColumns (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MTextFlowDirection:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kBtoT (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kByStyle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLtoR (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kRtoL (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTtoB (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MeasurementValue:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kEnglish (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMetric (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MergeCellStyleOption:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kMergeCellStyleConvertDuplicatesToOverrides (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMergeCellStyleCopyDuplicates (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMergeCellStyleIgnoreNewStyles (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMergeCellStyleNone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMergeCellStyleOverwriteDuplicates (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Mline:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def appendSeg (self, *args, **kwargs)-> ErrorStatus :
      '''appendSeg( (Mline)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus appendSeg(class PyDbMline {lvalue},class AcGePoint3d)'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def axisAt (self, *args, **kwargs)-> Vector3d :
      '''axisAt( (Mline)arg1, (int)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d axisAt(class PyDbMline {lvalue},int)'''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Mline :
      '''cast( (RxObject)arg1) -> Mline :

    C++ signature :
        class PyDbMline cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Mline :
      '''cloneFrom( (RxObject)arg1) -> Mline :

    C++ signature :
        class PyDbMline cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def closedMline (self, *args, **kwargs)-> bool :
      '''closedMline( (Mline)arg1) -> bool :

    C++ signature :
        bool closedMline(class PyDbMline {lvalue})'''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def element (self, *args, **kwargs)-> int :
      '''element( (Mline)arg1, (Point3d)arg2) -> int :

    C++ signature :
        int element(class PyDbMline {lvalue},class AcGePoint3d)'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getClosestPointTo (self, *args, **kwargs)-> Point3d :
      '''getClosestPointTo( (Mline)arg1, (Point3d)arg2, (bool)arg3) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbMline {lvalue},class AcGePoint3d,bool)

getClosestPointTo( (Mline)arg1, (Point3d)arg2, (bool)arg3, (bool)arg4) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbMline {lvalue},class AcGePoint3d,bool,bool)

getClosestPointTo( (Mline)arg1, (Point3d)arg2, (Vector3d)arg3, (bool)arg4) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbMline {lvalue},class AcGePoint3d,class AcGeVector3d,bool)

getClosestPointTo( (Mline)arg1, (Point3d)arg2, (Vector3d)arg3, (bool)arg4, (bool)arg5) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbMline {lvalue},class AcGePoint3d,class AcGeVector3d,bool,bool)'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Mline)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbMline {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def justification (self, *args, **kwargs)-> int :
      '''justification( (Mline)arg1) -> int :

    C++ signature :
        signed char justification(class PyDbMline {lvalue})'''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def miterAt (self, *args, **kwargs)-> Vector3d :
      '''miterAt( (Mline)arg1, (int)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d miterAt(class PyDbMline {lvalue},int)'''
    ...
    def moveVertexAt (self, *args, **kwargs)-> ErrorStatus :
      '''moveVertexAt( (Mline)arg1, (int)arg2, (Point3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus moveVertexAt(class PyDbMline {lvalue},int,class AcGePoint3d)'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Mline)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbMline {lvalue})'''
    ...
    def numVertices (self, *args, **kwargs)-> int :
      '''numVertices( (Mline)arg1) -> int :

    C++ signature :
        int numVertices(class PyDbMline {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removeLastSeg (self, *args, **kwargs)-> ErrorStatus :
      '''removeLastSeg( (Mline)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeLastSeg(class PyDbMline {lvalue},class AcGePoint3d {lvalue})'''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def scale (self, *args, **kwargs)-> float :
      '''scale( (Mline)arg1) -> float :

    C++ signature :
        double scale(class PyDbMline {lvalue})'''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setClosedMline (self, *args, **kwargs)-> ErrorStatus :
      '''setClosedMline( (Mline)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setClosedMline(class PyDbMline {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setJustification (self, *args, **kwargs)-> ErrorStatus :
      '''setJustification( (Mline)arg1, (MlineJustification)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setJustification(class PyDbMline {lvalue},signed char)'''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs)-> ErrorStatus :
      '''setNormal( (Mline)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbMline {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setScale (self, *args, **kwargs)-> ErrorStatus :
      '''setScale( (Mline)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setScale(class PyDbMline {lvalue},double)'''
    ...
    def setStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setStyle( (Mline)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setStyle(class PyDbMline {lvalue},class PyDbObjectId)'''
    ...
    def setSupressEndCaps (self, *args, **kwargs)-> None :
      '''setSupressEndCaps( (Mline)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSupressEndCaps(class PyDbMline {lvalue},bool)'''
    ...
    def setSupressStartCaps (self, *args, **kwargs)-> None :
      '''setSupressStartCaps( (Mline)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSupressStartCaps(class PyDbMline {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def style (self, *args, **kwargs)-> ObjectId :
      '''style( (Mline)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId style(class PyDbMline {lvalue})'''
    ...
    def supressEndCaps (self, *args, **kwargs)-> bool :
      '''supressEndCaps( (Mline)arg1) -> bool :

    C++ signature :
        bool supressEndCaps(class PyDbMline {lvalue})'''
    ...
    def supressStartCaps (self, *args, **kwargs)-> bool :
      '''supressStartCaps( (Mline)arg1) -> bool :

    C++ signature :
        bool supressStartCaps(class PyDbMline {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def vertexAt (self, *args, **kwargs)-> Point3d :
      '''vertexAt( (Mline)arg1, (int)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d vertexAt(class PyDbMline {lvalue},int)'''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class MlineJustification:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kBottom (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kClosed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMerged (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kOpen (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTop (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kZero (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class MlineStyle:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addElement (self, *args, **kwargs)-> int :
      '''addElement( (MlineStyle)arg1, (float)arg2, (Color)arg3, (ObjectId)arg4) -> int :

    C++ signature :
        int addElement(class PyDbMlineStyle {lvalue},double,class AcCmColor,class PyDbObjectId {lvalue})

addElement( (MlineStyle)arg1, (float)arg2, (Color)arg3, (ObjectId)arg4, (bool)arg5) -> int :

    C++ signature :
        int addElement(class PyDbMlineStyle {lvalue},double,class AcCmColor,class PyDbObjectId {lvalue},bool)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> MlineStyle :
      '''cast( (RxObject)arg1) -> MlineStyle :

    C++ signature :
        class PyDbMlineStyle cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> MlineStyle :
      '''cloneFrom( (RxObject)arg1) -> MlineStyle :

    C++ signature :
        class PyDbMlineStyle cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def description (self, *args, **kwargs)-> str :
      '''description( (MlineStyle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > description(class PyDbMlineStyle {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def endAngle (self, *args, **kwargs)-> float :
      '''endAngle( (MlineStyle)arg1) -> float :

    C++ signature :
        double endAngle(class PyDbMlineStyle {lvalue})'''
    ...
    def endInnerArcs (self, *args, **kwargs)-> bool :
      '''endInnerArcs( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool endInnerArcs(class PyDbMlineStyle {lvalue})'''
    ...
    def endRoundCap (self, *args, **kwargs)-> bool :
      '''endRoundCap( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool endRoundCap(class PyDbMlineStyle {lvalue})'''
    ...
    def endSquareCap (self, *args, **kwargs)-> bool :
      '''endSquareCap( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool endSquareCap(class PyDbMlineStyle {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fillColor (self, *args, **kwargs)-> Color :
      '''fillColor( (MlineStyle)arg1) -> Color :

    C++ signature :
        class AcCmColor fillColor(class PyDbMlineStyle {lvalue})'''
    ...
    def filled (self, *args, **kwargs)-> bool :
      '''filled( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool filled(class PyDbMlineStyle {lvalue})'''
    ...
    def getElementAt (self, *args, **kwargs)-> tuple :
      '''getElementAt( (MlineStyle)arg1, (int)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple getElementAt(class PyDbMlineStyle {lvalue},int)'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def initMlineStyle (self, *args, **kwargs)-> None :
      '''initMlineStyle( (MlineStyle)arg1) -> None :

    C++ signature :
        void initMlineStyle(class PyDbMlineStyle {lvalue})'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def name (self, *args, **kwargs)-> str :
      '''name( (MlineStyle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > name(class PyDbMlineStyle {lvalue})'''
    ...
    def numElements (self, *args, **kwargs)-> int :
      '''numElements( (MlineStyle)arg1) -> int :

    C++ signature :
        int numElements(class PyDbMlineStyle {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeElementAt (self, *args, **kwargs)-> ErrorStatus :
      '''removeElementAt( (MlineStyle)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeElementAt(class PyDbMlineStyle {lvalue},int)'''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def set (self, *args, **kwargs)-> None :
      '''set( (MlineStyle)arg1, (MlineStyle)arg2) -> None :

    C++ signature :
        void set(class PyDbMlineStyle {lvalue},class PyDbMlineStyle)

set( (MlineStyle)arg1, (MlineStyle)arg2, (bool)arg3) -> None :

    C++ signature :
        void set(class PyDbMlineStyle {lvalue},class PyDbMlineStyle,bool)'''
    ...
    def setDescription (self, *args, **kwargs)-> ErrorStatus :
      '''setDescription( (MlineStyle)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDescription(class PyDbMlineStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setElement (self, *args, **kwargs)-> int :
      '''setElement( (MlineStyle)arg1, (float)arg2, (Color)arg3, (ObjectId)arg4) -> int :

    C++ signature :
        int setElement(class PyDbMlineStyle {lvalue},double,class AcCmColor,class PyDbObjectId {lvalue})'''
    ...
    def setEndAngle (self, *args, **kwargs)-> ErrorStatus :
      '''setEndAngle( (MlineStyle)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setEndAngle(class PyDbMlineStyle {lvalue},double)'''
    ...
    def setEndInnerArcs (self, *args, **kwargs)-> None :
      '''setEndInnerArcs( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEndInnerArcs(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setEndRoundCap (self, *args, **kwargs)-> None :
      '''setEndRoundCap( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEndRoundCap(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setEndSquareCap (self, *args, **kwargs)-> None :
      '''setEndSquareCap( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEndSquareCap(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFillColor (self, *args, **kwargs)-> ErrorStatus :
      '''setFillColor( (MlineStyle)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFillColor(class PyDbMlineStyle {lvalue},class AcCmColor)'''
    ...
    def setFilled (self, *args, **kwargs)-> None :
      '''setFilled( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setFilled(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setName (self, *args, **kwargs)-> ErrorStatus :
      '''setName( (MlineStyle)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setName(class PyDbMlineStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setShowMiters (self, *args, **kwargs)-> None :
      '''setShowMiters( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShowMiters(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setStartAngle (self, *args, **kwargs)-> ErrorStatus :
      '''setStartAngle( (MlineStyle)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setStartAngle(class PyDbMlineStyle {lvalue},double)'''
    ...
    def setStartInnerArcs (self, *args, **kwargs)-> None :
      '''setStartInnerArcs( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setStartInnerArcs(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setStartRoundCap (self, *args, **kwargs)-> None :
      '''setStartRoundCap( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setStartRoundCap(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setStartSquareCap (self, *args, **kwargs)-> None :
      '''setStartSquareCap( (MlineStyle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setStartSquareCap(class PyDbMlineStyle {lvalue},bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def showMiters (self, *args, **kwargs)-> bool :
      '''showMiters( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool showMiters(class PyDbMlineStyle {lvalue})'''
    ...
    def startAngle (self, *args, **kwargs)-> float :
      '''startAngle( (MlineStyle)arg1) -> float :

    C++ signature :
        double startAngle(class PyDbMlineStyle {lvalue})'''
    ...
    def startInnerArcs (self, *args, **kwargs)-> bool :
      '''startInnerArcs( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool startInnerArcs(class PyDbMlineStyle {lvalue})'''
    ...
    def startRoundCap (self, *args, **kwargs)-> bool :
      '''startRoundCap( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool startRoundCap(class PyDbMlineStyle {lvalue})'''
    ...
    def startSquareCap (self, *args, **kwargs)-> bool :
      '''startSquareCap( (MlineStyle)arg1) -> bool :

    C++ signature :
        bool startSquareCap(class PyDbMlineStyle {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class NurbSurface:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> NurbSurface :
      '''cast( (RxObject)arg1) -> NurbSurface :

    C++ signature :
        class PyDbNurbSurface cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> NurbSurface :
      '''cloneFrom( (RxObject)arg1) -> NurbSurface :

    C++ signature :
        class PyDbNurbSurface cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class ObjectContext:
    def __init__ (self, *args, **kwargs)-> None:
      '''Raises an exception
This class cannot be instantiated from Python'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def collectionName (self, *args, **kwargs)-> str :
      '''collectionName( (ObjectContext)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > collectionName(class PyDbObjectContext {lvalue})'''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def getName (self, *args, **kwargs)-> str :
      '''getName( (ObjectContext)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getName(class PyDbObjectContext {lvalue})'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (RxObject)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyRxObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def setName (self, *args, **kwargs)-> ErrorStatus :
      '''setName( (ObjectContext)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setName(class PyDbObjectContext {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def uniqueIdentifier (self, *args, **kwargs)-> int :
      '''uniqueIdentifier( (ObjectContext)arg1) -> int :

    C++ signature :
        __int64 uniqueIdentifier(class PyDbObjectContext {lvalue})'''
    ...

class ObjectId:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def asOldId (self, *args, **kwargs)-> int :
      '''asOldId( (ObjectId)arg1) -> int :

    C++ signature :
        __int64 asOldId(class PyDbObjectId {lvalue})'''
    ...
    def convertToRedirectedId (self, *args, **kwargs)-> bool :
      '''convertToRedirectedId( (ObjectId)arg1) -> bool :

    C++ signature :
        bool convertToRedirectedId(class PyDbObjectId {lvalue})'''
    ...
    def database (self, *args, **kwargs)-> Database :
      '''database( (ObjectId)arg1) -> Database :

    C++ signature :
        class PyDbDatabase database(class PyDbObjectId {lvalue})'''
    ...
    def isDerivedFrom (self, *args, **kwargs)-> bool :
      '''isDerivedFrom( (ObjectId)arg1, (RxClass)arg2) -> bool :

    C++ signature :
        bool isDerivedFrom(class PyDbObjectId {lvalue},class PyRxClass)'''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (ObjectId)arg1) -> bool :

    C++ signature :
        bool isNull(class PyDbObjectId {lvalue})'''
    ...
    def isResident (self, *args, **kwargs)-> bool :
      '''isResident( (ObjectId)arg1) -> bool :

    C++ signature :
        bool isResident(class PyDbObjectId {lvalue})'''
    ...
    def isValid (self, *args, **kwargs)-> bool :
      '''isValid( (ObjectId)arg1) -> bool :

    C++ signature :
        bool isValid(class PyDbObjectId {lvalue})'''
    ...
    def isWellBehaved (self, *args, **kwargs)-> bool :
      '''isWellBehaved( (ObjectId)arg1) -> bool :

    C++ signature :
        bool isWellBehaved(class PyDbObjectId {lvalue})'''
    ...
    def objectClass (self, *args, **kwargs)-> RxClass :
      '''objectClass( (ObjectId)arg1) -> RxClass :

    C++ signature :
        class PyRxClass objectClass(class PyDbObjectId {lvalue})'''
    ...
    def originalDatabase (self, *args, **kwargs)-> Database :
      '''originalDatabase( (ObjectId)arg1) -> Database :

    C++ signature :
        class PyDbDatabase originalDatabase(class PyDbObjectId {lvalue})'''
    ...
    def setFromOldId (self, *args, **kwargs)-> ObjectId :
      '''setFromOldId( (ObjectId)arg1, (int)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId {lvalue} setFromOldId(class PyDbObjectId {lvalue},__int64)'''
    ...

class OpenMode:
    def ForNotify (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ForRead (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def ForWrite (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kForNotify (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kForRead (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kForWrite (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class OrdinateDimension:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (bool)arg2, (Point3d)arg3, (Point3d)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,bool,class AcGePoint3d,class AcGePoint3d)

__init__( (object)arg1, (bool)arg2, (Point3d)arg3, (Point3d)arg4, (str)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,bool,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (bool)arg2, (Point3d)arg3, (Point3d)arg4, (str)arg5, (ObjectId)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,bool,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def altSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def alternatePrefix (self, *args, **kwargs)-> str :
      '''alternatePrefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternatePrefix(class PyDbDimension {lvalue})'''
    ...
    def alternateSuffix (self, *args, **kwargs)-> str :
      '''alternateSuffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternateSuffix(class PyDbDimension {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def blockTransform (self, *args, **kwargs)-> Matrix3d :
      '''blockTransform( (Dimension)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbDimension {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> OrdinateDimension :
      '''cast( (RxObject)arg1) -> OrdinateDimension :

    C++ signature :
        class PyDbOrdinateDimension cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def centerMarkSize (self, *args, **kwargs)-> float :
      '''centerMarkSize( (Dimension)arg1) -> float :

    C++ signature :
        double centerMarkSize(class PyDbDimension {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> OrdinateDimension :
      '''cloneFrom( (RxObject)arg1) -> OrdinateDimension :

    C++ signature :
        class PyDbOrdinateDimension cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def definingPoint (self, *args, **kwargs)-> Point3d :
      '''definingPoint( (OrdinateDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d definingPoint(class PyDbOrdinateDimension {lvalue})'''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self, *args, **kwargs)-> ObjectId :
      '''dimBlockId( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimBlockId(class PyDbDimension {lvalue})'''
    ...
    def dimBlockPosition (self, *args, **kwargs)-> Point3d :
      '''dimBlockPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimBlockPosition(class PyDbDimension {lvalue})'''
    ...
    def dimExt1Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt1Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt1Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimExt2Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt2Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt2Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimLineLinetype (self, *args, **kwargs)-> ObjectId :
      '''dimLineLinetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimLineLinetype(class PyDbDimension {lvalue})'''
    ...
    def dimensionStyle (self, *args, **kwargs)-> ObjectId :
      '''dimensionStyle( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimensionStyle(class PyDbDimension {lvalue})'''
    ...
    def dimensionText (self, *args, **kwargs)-> str :
      '''dimensionText( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dimensionText(class PyDbDimension {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def elevation (self, *args, **kwargs)-> float :
      '''elevation( (Dimension)arg1) -> float :

    C++ signature :
        double elevation(class PyDbDimension {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fieldFromMText (self, *args, **kwargs)-> ErrorStatus :
      '''fieldFromMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldFromMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def fieldToMText (self, *args, **kwargs)-> ErrorStatus :
      '''fieldToMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldToMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self, *args, **kwargs)-> ErrorStatus :
      '''generateLayout( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus generateLayout(class PyDbDimension {lvalue})'''
    ...
    def getArrowFirstIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowFirstIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowFirstIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getArrowSecondIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowSecondIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowSecondIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDimstyleData (self, *args, **kwargs)-> DimStyleTableRecord :
      '''getDimstyleData( (Dimension)arg1) -> DimStyleTableRecord :

    C++ signature :
        class PyDbDimStyleTableRecord getDimstyleData(class PyDbDimension {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def horizontalRotation (self, *args, **kwargs)-> float :
      '''horizontalRotation( (Dimension)arg1) -> float :

    C++ signature :
        double horizontalRotation(class PyDbDimension {lvalue})'''
    ...
    def inspection (self, *args, **kwargs)-> bool :
      '''inspection( (Dimension)arg1) -> bool :

    C++ signature :
        bool inspection(class PyDbDimension {lvalue})'''
    ...
    def inspectionFrame (self, *args, **kwargs)-> int :
      '''inspectionFrame( (Dimension)arg1) -> int :

    C++ signature :
        int inspectionFrame(class PyDbDimension {lvalue})'''
    ...
    def inspectionLabel (self, *args, **kwargs)-> str :
      '''inspectionLabel( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > inspectionLabel(class PyDbDimension {lvalue})'''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self, *args, **kwargs)-> bool :
      '''isConstraintDynamic( (Dimension)arg1) -> bool :

    C++ signature :
        bool isConstraintDynamic(class PyDbDimension {lvalue})'''
    ...
    def isConstraintObject (self, *args, **kwargs)-> tuple :
      '''isConstraintObject( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isConstraintObject(class PyDbDimension {lvalue})'''
    ...
    def isDynamicDimension (self, *args, **kwargs)-> bool :
      '''isDynamicDimension( (Dimension)arg1) -> bool :

    C++ signature :
        bool isDynamicDimension(class PyDbDimension {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self, *args, **kwargs)-> bool :
      '''isHorizontalRefTextRotation( (Dimension)arg1) -> bool :

    C++ signature :
        bool isHorizontalRefTextRotation(class PyDbDimension {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self, *args, **kwargs)-> bool :
      '''isUsingDefaultTextPosition( (Dimension)arg1) -> bool :

    C++ signature :
        bool isUsingDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def isUsingXAxis (self, *args, **kwargs)-> bool :
      '''isUsingXAxis( (OrdinateDimension)arg1) -> bool :

    C++ signature :
        bool isUsingXAxis(class PyDbOrdinateDimension {lvalue})'''
    ...
    def isUsingYAxis (self, *args, **kwargs)-> bool :
      '''isUsingYAxis( (OrdinateDimension)arg1) -> bool :

    C++ signature :
        bool isUsingYAxis(class PyDbOrdinateDimension {lvalue})'''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def leaderEndPoint (self, *args, **kwargs)-> Point3d :
      '''leaderEndPoint( (OrdinateDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d leaderEndPoint(class PyDbOrdinateDimension {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def measurement (self, *args, **kwargs)-> float :
      '''measurement( (Dimension)arg1) -> float :

    C++ signature :
        double measurement(class PyDbDimension {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Dimension)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbDimension {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def origin (self, *args, **kwargs)-> Point3d :
      '''origin( (OrdinateDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d origin(class PyDbOrdinateDimension {lvalue})'''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def prefix (self, *args, **kwargs)-> str :
      '''prefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > prefix(class PyDbDimension {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recomputeDimBlock (self, *args, **kwargs)-> ErrorStatus :
      '''recomputeDimBlock( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue})

recomputeDimBlock( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue},bool)'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removeTextField (self, *args, **kwargs)-> ErrorStatus :
      '''removeTextField( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeTextField(class PyDbDimension {lvalue})'''
    ...
    def resetTextDefinedSize (self, *args, **kwargs)-> None :
      '''resetTextDefinedSize( (Dimension)arg1) -> None :

    C++ signature :
        void resetTextDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def setAltSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAlternatePrefix (self, *args, **kwargs)-> ErrorStatus :
      '''setAlternatePrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternatePrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAlternateSuffix (self, *args, **kwargs)-> ErrorStatus :
      '''setAlternateSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternateSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setArrowFirstIsFlipped (self, *args, **kwargs)-> ErrorStatus :
      '''setArrowFirstIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowFirstIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setArrowSecondIsFlipped (self, *args, **kwargs)-> ErrorStatus :
      '''setArrowSecondIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowSecondIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setConstraintDynamic (self, *args, **kwargs)-> ErrorStatus :
      '''setConstraintDynamic( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setConstraintDynamic(class PyDbDimension {lvalue},bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDefiningPoint (self, *args, **kwargs)-> ErrorStatus :
      '''setDefiningPoint( (OrdinateDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDefiningPoint(class PyDbOrdinateDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimBlockId (self, *args, **kwargs)-> ErrorStatus :
      '''setDimBlockId( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockId(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimBlockPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setDimBlockPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimExt1Linetype (self, *args, **kwargs)-> ErrorStatus :
      '''setDimExt1Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt1Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimExt2Linetype (self, *args, **kwargs)-> ErrorStatus :
      '''setDimExt2Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt2Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimLineLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setDimLineLinetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimLineLinetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setDimensionStyle( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionStyle(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionText (self, *args, **kwargs)-> ErrorStatus :
      '''setDimensionText( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionText(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDimstyleData (self, *args, **kwargs)-> ErrorStatus :
      '''setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self, *args, **kwargs)-> ErrorStatus :
      '''setDynamicDimension( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDynamicDimension(class PyDbDimension {lvalue},bool)'''
    ...
    def setElevation (self, *args, **kwargs)-> ErrorStatus :
      '''setElevation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setElevation(class PyDbDimension {lvalue},double)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setHorizontalRefTextRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setHorizontalRefTextRotation( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRefTextRotation(class PyDbDimension {lvalue},bool)'''
    ...
    def setHorizontalRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setHorizontalRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setInspection (self, *args, **kwargs)-> ErrorStatus :
      '''setInspection( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspection(class PyDbDimension {lvalue},bool)'''
    ...
    def setInspectionFrame (self, *args, **kwargs)-> ErrorStatus :
      '''setInspectionFrame( (Dimension)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionFrame(class PyDbDimension {lvalue},int)'''
    ...
    def setInspectionLabel (self, *args, **kwargs)-> ErrorStatus :
      '''setInspectionLabel( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionLabel(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLeaderEndPoint (self, *args, **kwargs)-> ErrorStatus :
      '''setLeaderEndPoint( (OrdinateDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLeaderEndPoint(class PyDbOrdinateDimension {lvalue},class AcGePoint3d)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs)-> ErrorStatus :
      '''setNormal( (Dimension)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbDimension {lvalue},class AcGeVector3d)'''
    ...
    def setOrigin (self, *args, **kwargs)-> ErrorStatus :
      '''setOrigin( (OrdinateDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOrigin(class PyDbOrdinateDimension {lvalue},class AcGePoint3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, *args, **kwargs)-> ErrorStatus :
      '''setPrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setShouldParticipateInOPM (self, *args, **kwargs)-> None :
      '''setShouldParticipateInOPM( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShouldParticipateInOPM(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuffix (self, *args, **kwargs)-> ErrorStatus :
      '''setSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setSuppressAngularTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressAngularTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressAngularTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setTextAttachment (self, *args, **kwargs)-> ErrorStatus :
      '''setTextAttachment( (Dimension)arg1, (MTextAttachmentPoint)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAttachment(class PyDbDimension {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setTextDefinedSize (self, *args, **kwargs)-> None :
      '''setTextDefinedSize( (Dimension)arg1, (float)arg2, (float)arg3) -> None :

    C++ signature :
        void setTextDefinedSize(class PyDbDimension {lvalue},double,double)'''
    ...
    def setTextLineSpacingFactor (self, *args, **kwargs)-> ErrorStatus :
      '''setTextLineSpacingFactor( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingFactor(class PyDbDimension {lvalue},double)'''
    ...
    def setTextLineSpacingStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setTextLineSpacingStyle( (Dimension)arg1, (LineSpacingStyle)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingStyle(class PyDbDimension {lvalue},enum AcDb::LineSpacingStyle)'''
    ...
    def setTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setTextPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setTextRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setTextRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setToleranceSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setUsingDefaultTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setUsingDefaultTextPosition( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUsingDefaultTextPosition(class PyDbDimension {lvalue},bool)'''
    ...
    def setUsingXAxis (self, *args, **kwargs)-> ErrorStatus :
      '''setUsingXAxis( (OrdinateDimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUsingXAxis(class PyDbOrdinateDimension {lvalue},bool)'''
    ...
    def setUsingYAxis (self, *args, **kwargs)-> ErrorStatus :
      '''setUsingYAxis( (OrdinateDimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUsingYAxis(class PyDbOrdinateDimension {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def shouldParticipateInOPM (self, *args, **kwargs)-> bool :
      '''shouldParticipateInOPM( (Dimension)arg1) -> bool :

    C++ signature :
        bool shouldParticipateInOPM(class PyDbDimension {lvalue})'''
    ...
    def suffix (self, *args, **kwargs)-> str :
      '''suffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > suffix(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroFeet (self, *args, **kwargs)-> bool :
      '''suppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroInches (self, *args, **kwargs)-> bool :
      '''suppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def textAttachment (self, *args, **kwargs)-> MTextAttachmentPoint :
      '''textAttachment( (Dimension)arg1) -> MTextAttachmentPoint :

    C++ signature :
        enum AcDbMText::AttachmentPoint textAttachment(class PyDbDimension {lvalue})'''
    ...
    def textDefinedSize (self, *args, **kwargs)-> tuple :
      '''textDefinedSize( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple textDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingFactor (self, *args, **kwargs)-> float :
      '''textLineSpacingFactor( (Dimension)arg1) -> float :

    C++ signature :
        double textLineSpacingFactor(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingStyle (self, *args, **kwargs)-> LineSpacingStyle :
      '''textLineSpacingStyle( (Dimension)arg1) -> LineSpacingStyle :

    C++ signature :
        enum AcDb::LineSpacingStyle textLineSpacingStyle(class PyDbDimension {lvalue})'''
    ...
    def textPosition (self, *args, **kwargs)-> Point3d :
      '''textPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d textPosition(class PyDbDimension {lvalue})'''
    ...
    def textRotation (self, *args, **kwargs)-> float :
      '''textRotation( (Dimension)arg1) -> float :

    C++ signature :
        double textRotation(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def useDefaultTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''useDefaultTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def useSetTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''useSetTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useSetTextPosition(class PyDbDimension {lvalue})'''
    ...
    def useXAxis (self, *args, **kwargs)-> ErrorStatus :
      '''useXAxis( (OrdinateDimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useXAxis(class PyDbOrdinateDimension {lvalue})'''
    ...
    def useYAxis (self, *args, **kwargs)-> ErrorStatus :
      '''useYAxis( (OrdinateDimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useYAxis(class PyDbOrdinateDimension {lvalue})'''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class OrthographicView:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kBackView (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kBottomView (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kFrontView (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLeftView (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kNonOrthoView (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kRightView (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTopView (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class PdfDefinition:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> UnderlayDefinition :
      '''cast( (RxObject)arg1) -> UnderlayDefinition :

    C++ signature :
        class PyDbUnderlayDefinition cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> UnderlayDefinition :
      '''cloneFrom( (RxObject)arg1) -> UnderlayDefinition :

    C++ signature :
        class PyDbUnderlayDefinition cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dictionaryKey (self, *args, **kwargs)-> str :
      '''dictionaryKey( (RxClass)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dictionaryKey(class PyRxClass)'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getActiveFileName (self, *args, **kwargs)-> str :
      '''getActiveFileName( (UnderlayDefinition)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getActiveFileName(class PyDbUnderlayDefinition {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getItemName (self, *args, **kwargs)-> str :
      '''getItemName( (UnderlayDefinition)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getItemName(class PyDbUnderlayDefinition {lvalue})'''
    ...
    def getSourceFileName (self, *args, **kwargs)-> str :
      '''getSourceFileName( (UnderlayDefinition)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getSourceFileName(class PyDbUnderlayDefinition {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isLoaded (self, *args, **kwargs)-> bool :
      '''isLoaded( (UnderlayDefinition)arg1) -> bool :

    C++ signature :
        bool isLoaded(class PyDbUnderlayDefinition {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def load (self, *args, **kwargs)-> ErrorStatus :
      '''load( (UnderlayDefinition)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus load(class PyDbUnderlayDefinition {lvalue})

load( (UnderlayDefinition)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus load(class PyDbUnderlayDefinition {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setItemName (self, *args, **kwargs)-> ErrorStatus :
      '''setItemName( (UnderlayDefinition)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setItemName(class PyDbUnderlayDefinition {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setSourceFileName (self, *args, **kwargs)-> ErrorStatus :
      '''setSourceFileName( (UnderlayDefinition)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSourceFileName(class PyDbUnderlayDefinition {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def unload (self, *args, **kwargs)-> None :
      '''unload( (UnderlayDefinition)arg1) -> None :

    C++ signature :
        void unload(class PyDbUnderlayDefinition {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class PdfReference:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PdfReference :
      '''cast( (RxObject)arg1) -> PdfReference :

    C++ signature :
        class PyDbPdfReference cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def clipBoundary (self, *args, **kwargs)-> list :
      '''clipBoundary( (UnderlayReference)arg1) -> list :

    C++ signature :
        class boost::python::list clipBoundary(class PyDbUnderlayReference {lvalue})'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PdfReference :
      '''cloneFrom( (RxObject)arg1) -> PdfReference :

    C++ signature :
        class PyDbPdfReference cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def contrast (self, *args, **kwargs)-> int :
      '''contrast( (UnderlayReference)arg1) -> int :

    C++ signature :
        unsigned char contrast(class PyDbUnderlayReference {lvalue})'''
    ...
    def contrastDefault (self, *args, **kwargs)-> int :
      '''contrastDefault() -> int :

    C++ signature :
        unsigned char contrastDefault()'''
    ...
    def contrastLowerLimit (self, *args, **kwargs)-> int :
      '''contrastLowerLimit() -> int :

    C++ signature :
        unsigned char contrastLowerLimit()'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def definitionId (self, *args, **kwargs)-> ObjectId :
      '''definitionId( (UnderlayReference)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId definitionId(class PyDbUnderlayReference {lvalue})'''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fade (self, *args, **kwargs)-> int :
      '''fade( (UnderlayReference)arg1) -> int :

    C++ signature :
        unsigned char fade(class PyDbUnderlayReference {lvalue})'''
    ...
    def fadeDefault (self, *args, **kwargs)-> int :
      '''fadeDefault() -> int :

    C++ signature :
        unsigned char fadeDefault()'''
    ...
    def fadeLowerLimit (self, *args, **kwargs)-> int :
      '''fadeLowerLimit() -> int :

    C++ signature :
        unsigned char fadeLowerLimit()'''
    ...
    def fadeUpperLimit (self, *args, **kwargs)-> int :
      '''fadeUpperLimit() -> int :

    C++ signature :
        unsigned char fadeUpperLimit()'''
    ...
    def generateClipBoundaryFromPline (self, *args, **kwargs)-> ErrorStatus :
      '''generateClipBoundaryFromPline( (UnderlayReference)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus generateClipBoundaryFromPline(class PyDbUnderlayReference {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def getUnderlayLayer (self, *args, **kwargs)-> UnderlayLayer :
      '''getUnderlayLayer( (UnderlayReference)arg1, (int)arg2) -> UnderlayLayer :

    C++ signature :
        class PyUnderlayLayer getUnderlayLayer(class PyDbUnderlayReference {lvalue},int)'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def height (self, *args, **kwargs)-> float :
      '''height( (UnderlayReference)arg1) -> float :

    C++ signature :
        double height(class PyDbUnderlayReference {lvalue})'''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isAdjustedForBackground (self, *args, **kwargs)-> bool :
      '''isAdjustedForBackground( (UnderlayReference)arg1) -> bool :

    C++ signature :
        bool isAdjustedForBackground(class PyDbUnderlayReference {lvalue})'''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isClipInverted (self, *args, **kwargs)-> bool :
      '''isClipInverted( (UnderlayReference)arg1) -> bool :

    C++ signature :
        bool isClipInverted(class PyDbUnderlayReference {lvalue})'''
    ...
    def isClipped (self, *args, **kwargs)-> bool :
      '''isClipped( (UnderlayReference)arg1) -> bool :

    C++ signature :
        bool isClipped(class PyDbUnderlayReference {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isFramePlottable (self, *args, **kwargs)-> bool :
      '''isFramePlottable( (UnderlayReference)arg1) -> bool :

    C++ signature :
        bool isFramePlottable(class PyDbUnderlayReference {lvalue})'''
    ...
    def isFrameVisible (self, *args, **kwargs)-> bool :
      '''isFrameVisible( (UnderlayReference)arg1) -> bool :

    C++ signature :
        bool isFrameVisible(class PyDbUnderlayReference {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isMonochrome (self, *args, **kwargs)-> bool :
      '''isMonochrome( (UnderlayReference)arg1) -> bool :

    C++ signature :
        bool isMonochrome(class PyDbUnderlayReference {lvalue})'''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isOn (self, *args, **kwargs)-> bool :
      '''isOn( (UnderlayReference)arg1) -> bool :

    C++ signature :
        bool isOn(class PyDbUnderlayReference {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (UnderlayReference)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbUnderlayReference {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def position (self, *args, **kwargs)-> Point3d :
      '''position( (UnderlayReference)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDbUnderlayReference {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def rotation (self, *args, **kwargs)-> float :
      '''rotation( (UnderlayReference)arg1) -> float :

    C++ signature :
        double rotation(class PyDbUnderlayReference {lvalue})'''
    ...
    def scaleFactors (self, *args, **kwargs)-> Scale3d :
      '''scaleFactors( (UnderlayReference)arg1) -> Scale3d :

    C++ signature :
        class AcGeScale3d scaleFactors(class PyDbUnderlayReference {lvalue})'''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setClipBoundary (self, *args, **kwargs)-> ErrorStatus :
      '''setClipBoundary( (UnderlayReference)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setClipBoundary(class PyDbUnderlayReference {lvalue},class boost::python::list)'''
    ...
    def setClipInverted (self, *args, **kwargs)-> ErrorStatus :
      '''setClipInverted( (UnderlayReference)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setClipInverted(class PyDbUnderlayReference {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setContrast (self, *args, **kwargs)-> ErrorStatus :
      '''setContrast( (UnderlayReference)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setContrast(class PyDbUnderlayReference {lvalue},unsigned char)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDefinitionId (self, *args, **kwargs)-> ErrorStatus :
      '''setDefinitionId( (UnderlayReference)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDefinitionId(class PyDbUnderlayReference {lvalue},class PyDbObjectId)'''
    ...
    def setFade (self, *args, **kwargs)-> ErrorStatus :
      '''setFade( (UnderlayReference)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFade(class PyDbUnderlayReference {lvalue},unsigned char)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setHeight (self, *args, **kwargs)-> ErrorStatus :
      '''setHeight( (UnderlayReference)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHeight(class PyDbUnderlayReference {lvalue},double)'''
    ...
    def setIsAdjustedForBackground (self, *args, **kwargs)-> ErrorStatus :
      '''setIsAdjustedForBackground( (UnderlayReference)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setIsAdjustedForBackground(class PyDbUnderlayReference {lvalue},bool)'''
    ...
    def setIsClipped (self, *args, **kwargs)-> ErrorStatus :
      '''setIsClipped( (UnderlayReference)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setIsClipped(class PyDbUnderlayReference {lvalue},bool)'''
    ...
    def setIsMonochrome (self, *args, **kwargs)-> ErrorStatus :
      '''setIsMonochrome( (UnderlayReference)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setIsMonochrome(class PyDbUnderlayReference {lvalue},bool)'''
    ...
    def setIsOn (self, *args, **kwargs)-> ErrorStatus :
      '''setIsOn( (UnderlayReference)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setIsOn(class PyDbUnderlayReference {lvalue},bool)'''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs)-> ErrorStatus :
      '''setNormal( (UnderlayReference)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbUnderlayReference {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setPosition( (UnderlayReference)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPosition(class PyDbUnderlayReference {lvalue},class AcGePoint3d)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setRotation( (UnderlayReference)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRotation(class PyDbUnderlayReference {lvalue},double)'''
    ...
    def setScaleFactors (self, *args, **kwargs)-> ErrorStatus :
      '''setScaleFactors( (UnderlayReference)arg1, (Scale3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setScaleFactors(class PyDbUnderlayReference {lvalue},class AcGeScale3d)'''
    ...
    def setTransform (self, *args, **kwargs)-> ErrorStatus :
      '''setTransform( (UnderlayReference)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTransform(class PyDbUnderlayReference {lvalue},class AcGeMatrix3d)'''
    ...
    def setUnderlayLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setUnderlayLayer( (UnderlayReference)arg1, (int)arg2, (UnderlayLayer)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUnderlayLayer(class PyDbUnderlayReference {lvalue},int,class PyUnderlayLayer)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setWidth (self, *args, **kwargs)-> ErrorStatus :
      '''setWidth( (UnderlayReference)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setWidth(class PyDbUnderlayReference {lvalue},double)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def transform (self, *args, **kwargs)-> Matrix3d :
      '''transform( (UnderlayReference)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d transform(class PyDbUnderlayReference {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def underlayLayerCount (self, *args, **kwargs)-> int :
      '''underlayLayerCount( (UnderlayReference)arg1) -> int :

    C++ signature :
        unsigned int underlayLayerCount(class PyDbUnderlayReference {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def width (self, *args, **kwargs)-> float :
      '''width( (UnderlayReference)arg1) -> float :

    C++ signature :
        double width(class PyDbUnderlayReference {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class Planarity:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kLinear (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kNonPlanar (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPlanar (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class PlaneSurface:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PlaneSurface :
      '''cast( (RxObject)arg1) -> PlaneSurface :

    C++ signature :
        class PyDbPlaneSurface cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PlaneSurface :
      '''cloneFrom( (RxObject)arg1) -> PlaneSurface :

    C++ signature :
        class PyDbPlaneSurface cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class PlotPaperUnits:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kInches (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMillimeters (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPixels (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class PlotRotation:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def k0degrees (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k180degrees (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k270degrees (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k90degrees (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class PlotSettings:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (bool)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,bool)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def addToPlotSettingsDict (self, *args, **kwargs)-> ErrorStatus :
      '''addToPlotSettingsDict( (PlotSettings)arg1, (Database)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addToPlotSettingsDict(class PyDbPlotSettings {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PlotSettings :
      '''cast( (RxObject)arg1) -> PlotSettings :

    C++ signature :
        class PyDbPlotSettings cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PlotSettings :
      '''cloneFrom( (RxObject)arg1) -> PlotSettings :

    C++ signature :
        class PyDbPlotSettings cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def drawViewportsFirst (self, *args, **kwargs)-> bool :
      '''drawViewportsFirst( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool drawViewportsFirst(class PyDbPlotSettings {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCanonicalMediaName (self, *args, **kwargs)-> str :
      '''getCanonicalMediaName( (PlotSettings)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getCanonicalMediaName(class PyDbPlotSettings {lvalue})'''
    ...
    def getCurrentStyleSheet (self, *args, **kwargs)-> str :
      '''getCurrentStyleSheet( (PlotSettings)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getCurrentStyleSheet(class PyDbPlotSettings {lvalue})'''
    ...
    def getCustomPrintScale (self, *args, **kwargs)-> tuple :
      '''getCustomPrintScale( (PlotSettings)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getCustomPrintScale(class PyDbPlotSettings {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlotCfgName (self, *args, **kwargs)-> str :
      '''getPlotCfgName( (PlotSettings)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getPlotCfgName(class PyDbPlotSettings {lvalue})'''
    ...
    def getPlotOrigin (self, *args, **kwargs)-> tuple :
      '''getPlotOrigin( (PlotSettings)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getPlotOrigin(class PyDbPlotSettings {lvalue})'''
    ...
    def getPlotPaperMargins (self, *args, **kwargs)-> tuple :
      '''getPlotPaperMargins( (PlotSettings)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getPlotPaperMargins(class PyDbPlotSettings {lvalue})'''
    ...
    def getPlotPaperSize (self, *args, **kwargs)-> tuple :
      '''getPlotPaperSize( (PlotSettings)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getPlotPaperSize(class PyDbPlotSettings {lvalue})'''
    ...
    def getPlotSettingsName (self, *args, **kwargs)-> str :
      '''getPlotSettingsName( (PlotSettings)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getPlotSettingsName(class PyDbPlotSettings {lvalue})'''
    ...
    def getPlotViewName (self, *args, **kwargs)-> str :
      '''getPlotViewName( (PlotSettings)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getPlotViewName(class PyDbPlotSettings {lvalue})'''
    ...
    def getPlotWindowArea (self, *args, **kwargs)-> tuple :
      '''getPlotWindowArea( (PlotSettings)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple getPlotWindowArea(class PyDbPlotSettings {lvalue})'''
    ...
    def getStdScale (self, *args, **kwargs)-> float :
      '''getStdScale( (PlotSettings)arg1) -> float :

    C++ signature :
        double getStdScale(class PyDbPlotSettings {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def modelType (self, *args, **kwargs)-> bool :
      '''modelType( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool modelType(class PyDbPlotSettings {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotAsRaster (self, *args, **kwargs)-> bool :
      '''plotAsRaster( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotAsRaster(class PyDbPlotSettings {lvalue})'''
    ...
    def plotCentered (self, *args, **kwargs)-> bool :
      '''plotCentered( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotCentered(class PyDbPlotSettings {lvalue})'''
    ...
    def plotHidden (self, *args, **kwargs)-> bool :
      '''plotHidden( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotHidden(class PyDbPlotSettings {lvalue})'''
    ...
    def plotPaperUnits (self, *args, **kwargs)-> PlotPaperUnits :
      '''plotPaperUnits( (PlotSettings)arg1) -> PlotPaperUnits :

    C++ signature :
        enum AcDbPlotSettings::PlotPaperUnits plotPaperUnits(class PyDbPlotSettings {lvalue})'''
    ...
    def plotPlotStyles (self, *args, **kwargs)-> bool :
      '''plotPlotStyles( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotPlotStyles(class PyDbPlotSettings {lvalue})'''
    ...
    def plotRotation (self, *args, **kwargs)-> PlotRotation :
      '''plotRotation( (PlotSettings)arg1) -> PlotRotation :

    C++ signature :
        enum AcDbPlotSettings::PlotRotation plotRotation(class PyDbPlotSettings {lvalue})'''
    ...
    def plotTransparency (self, *args, **kwargs)-> bool :
      '''plotTransparency( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotTransparency(class PyDbPlotSettings {lvalue})'''
    ...
    def plotType (self, *args, **kwargs)-> PlotType :
      '''plotType( (PlotSettings)arg1) -> PlotType :

    C++ signature :
        enum AcDbPlotSettings::PlotType plotType(class PyDbPlotSettings {lvalue})'''
    ...
    def plotViewportBorders (self, *args, **kwargs)-> bool :
      '''plotViewportBorders( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotViewportBorders(class PyDbPlotSettings {lvalue})'''
    ...
    def plotWireframe (self, *args, **kwargs)-> bool :
      '''plotWireframe( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool plotWireframe(class PyDbPlotSettings {lvalue})'''
    ...
    def printLineweights (self, *args, **kwargs)-> bool :
      '''printLineweights( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool printLineweights(class PyDbPlotSettings {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def scaleLineweights (self, *args, **kwargs)-> bool :
      '''scaleLineweights( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool scaleLineweights(class PyDbPlotSettings {lvalue})'''
    ...
    def setDrawViewportsFirst (self, *args, **kwargs)-> None :
      '''setDrawViewportsFirst( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setDrawViewportsFirst(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotHidden (self, *args, **kwargs)-> None :
      '''setPlotHidden( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPlotHidden(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setPlotPlotStyles (self, *args, **kwargs)-> None :
      '''setPlotPlotStyles( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPlotPlotStyles(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setPlotSettingsName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotSettingsName( (PlotSettings)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotSettingsName(class PyDbPlotSettings {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPlotTransparency (self, *args, **kwargs)-> None :
      '''setPlotTransparency( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPlotTransparency(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setPlotViewportBorders (self, *args, **kwargs)-> None :
      '''setPlotViewportBorders( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPlotViewportBorders(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setPrintLineweights (self, *args, **kwargs)-> None :
      '''setPrintLineweights( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPrintLineweights(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setScaleLineweights (self, *args, **kwargs)-> None :
      '''setScaleLineweights( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setScaleLineweights(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setShadePlot (self, *args, **kwargs)-> ErrorStatus :
      '''setShadePlot( (PlotSettings)arg1, (ShadePlotType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setShadePlot(class PyDbPlotSettings {lvalue},enum AcDbPlotSettings::ShadePlotType)

setShadePlot( (PlotSettings)arg1, (ShadePlotType)arg2, (ObjectId)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setShadePlot(class PyDbPlotSettings {lvalue},enum AcDbPlotSettings::ShadePlotType,class PyDbObjectId)'''
    ...
    def setShadePlotCustomDPI (self, *args, **kwargs)-> ErrorStatus :
      '''setShadePlotCustomDPI( (PlotSettings)arg1, (DxfCode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setShadePlotCustomDPI(class PyDbPlotSettings {lvalue},short)'''
    ...
    def setShadePlotResLevel (self, *args, **kwargs)-> ErrorStatus :
      '''setShadePlotResLevel( (PlotSettings)arg1, (ShadePlotResLevel)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setShadePlotResLevel(class PyDbPlotSettings {lvalue},enum AcDbPlotSettings::ShadePlotResLevel)'''
    ...
    def setShowPlotStyles (self, *args, **kwargs)-> None :
      '''setShowPlotStyles( (PlotSettings)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShowPlotStyles(class PyDbPlotSettings {lvalue},bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def shadePlot (self, *args, **kwargs)-> ShadePlotType :
      '''shadePlot( (PlotSettings)arg1) -> ShadePlotType :

    C++ signature :
        enum AcDbPlotSettings::ShadePlotType shadePlot(class PyDbPlotSettings {lvalue})'''
    ...
    def shadePlotCustomDPI (self, *args, **kwargs)-> int :
      '''shadePlotCustomDPI( (PlotSettings)arg1) -> int :

    C++ signature :
        short shadePlotCustomDPI(class PyDbPlotSettings {lvalue})'''
    ...
    def shadePlotId (self, *args, **kwargs)-> ObjectId :
      '''shadePlotId( (PlotSettings)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId shadePlotId(class PyDbPlotSettings {lvalue})'''
    ...
    def shadePlotResLevel (self, *args, **kwargs)-> ShadePlotResLevel :
      '''shadePlotResLevel( (PlotSettings)arg1) -> ShadePlotResLevel :

    C++ signature :
        enum AcDbPlotSettings::ShadePlotResLevel shadePlotResLevel(class PyDbPlotSettings {lvalue})'''
    ...
    def showPlotStyles (self, *args, **kwargs)-> bool :
      '''showPlotStyles( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool showPlotStyles(class PyDbPlotSettings {lvalue})'''
    ...
    def stdScaleType (self, *args, **kwargs)-> StdScaleType :
      '''stdScaleType( (PlotSettings)arg1) -> StdScaleType :

    C++ signature :
        enum AcDbPlotSettings::StdScaleType stdScaleType(class PyDbPlotSettings {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def useStandardScale (self, *args, **kwargs)-> bool :
      '''useStandardScale( (PlotSettings)arg1) -> bool :

    C++ signature :
        bool useStandardScale(class PyDbPlotSettings {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class PlotStyleNameType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kPlotStyleNameByBlock (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPlotStyleNameById (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPlotStyleNameByLayer (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPlotStyleNameIsDictDefault (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class PlotType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kDisplay (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kExtents (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLayout (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLimits (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kView (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kWindow (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Point:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d {lvalue})

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Point :
      '''cast( (RxObject)arg1) -> Point :

    C++ signature :
        class PyDbPoint cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Point :
      '''cloneFrom( (RxObject)arg1) -> Point :

    C++ signature :
        class PyDbPoint cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def ecsRotation (self, *args, **kwargs)-> float :
      '''ecsRotation( (Point)arg1) -> float :

    C++ signature :
        double ecsRotation(class PyDbPoint {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Point)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbPoint {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def position (self, *args, **kwargs)-> Point3d :
      '''position( (Point)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDbPoint {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setEcsRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setEcsRotation( (Point)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setEcsRotation(class PyDbPoint {lvalue},double)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs)-> ErrorStatus :
      '''setNormal( (Point)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbPoint {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setPosition( (Point)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPosition(class PyDbPoint {lvalue},class AcGePoint3d)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setThickness (self, *args, **kwargs)-> ErrorStatus :
      '''setThickness( (Point)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setThickness(class PyDbPoint {lvalue},double)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def thickness (self, *args, **kwargs)-> float :
      '''thickness( (Point)arg1) -> float :

    C++ signature :
        double thickness(class PyDbPoint {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class Point3AngularDimension:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (str)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (str)arg6, (ObjectId)arg7) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def altSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def alternatePrefix (self, *args, **kwargs)-> str :
      '''alternatePrefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternatePrefix(class PyDbDimension {lvalue})'''
    ...
    def alternateSuffix (self, *args, **kwargs)-> str :
      '''alternateSuffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternateSuffix(class PyDbDimension {lvalue})'''
    ...
    def arcPoint (self, *args, **kwargs)-> Point3d :
      '''arcPoint( (Point3AngularDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d arcPoint(class PyDb3PointAngularDimension {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def blockTransform (self, *args, **kwargs)-> Matrix3d :
      '''blockTransform( (Dimension)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbDimension {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Point3AngularDimension :
      '''cast( (RxObject)arg1) -> Point3AngularDimension :

    C++ signature :
        class PyDb3PointAngularDimension cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def centerMarkSize (self, *args, **kwargs)-> float :
      '''centerMarkSize( (Dimension)arg1) -> float :

    C++ signature :
        double centerMarkSize(class PyDbDimension {lvalue})'''
    ...
    def centerPoint (self, *args, **kwargs)-> Point3d :
      '''centerPoint( (Point3AngularDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d centerPoint(class PyDb3PointAngularDimension {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Point3AngularDimension :
      '''cloneFrom( (RxObject)arg1) -> Point3AngularDimension :

    C++ signature :
        class PyDb3PointAngularDimension cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self, *args, **kwargs)-> ObjectId :
      '''dimBlockId( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimBlockId(class PyDbDimension {lvalue})'''
    ...
    def dimBlockPosition (self, *args, **kwargs)-> Point3d :
      '''dimBlockPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimBlockPosition(class PyDbDimension {lvalue})'''
    ...
    def dimExt1Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt1Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt1Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimExt2Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt2Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt2Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimLineLinetype (self, *args, **kwargs)-> ObjectId :
      '''dimLineLinetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimLineLinetype(class PyDbDimension {lvalue})'''
    ...
    def dimensionStyle (self, *args, **kwargs)-> ObjectId :
      '''dimensionStyle( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimensionStyle(class PyDbDimension {lvalue})'''
    ...
    def dimensionText (self, *args, **kwargs)-> str :
      '''dimensionText( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dimensionText(class PyDbDimension {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def elevation (self, *args, **kwargs)-> float :
      '''elevation( (Dimension)arg1) -> float :

    C++ signature :
        double elevation(class PyDbDimension {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extArcOn (self, *args, **kwargs)-> bool :
      '''extArcOn( (Point3AngularDimension)arg1) -> bool :

    C++ signature :
        bool extArcOn(class PyDb3PointAngularDimension {lvalue})'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fieldFromMText (self, *args, **kwargs)-> ErrorStatus :
      '''fieldFromMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldFromMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def fieldToMText (self, *args, **kwargs)-> ErrorStatus :
      '''fieldToMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldToMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self, *args, **kwargs)-> ErrorStatus :
      '''generateLayout( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus generateLayout(class PyDbDimension {lvalue})'''
    ...
    def getArrowFirstIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowFirstIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowFirstIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getArrowSecondIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowSecondIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowSecondIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDimstyleData (self, *args, **kwargs)-> DimStyleTableRecord :
      '''getDimstyleData( (Dimension)arg1) -> DimStyleTableRecord :

    C++ signature :
        class PyDbDimStyleTableRecord getDimstyleData(class PyDbDimension {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def horizontalRotation (self, *args, **kwargs)-> float :
      '''horizontalRotation( (Dimension)arg1) -> float :

    C++ signature :
        double horizontalRotation(class PyDbDimension {lvalue})'''
    ...
    def inspection (self, *args, **kwargs)-> bool :
      '''inspection( (Dimension)arg1) -> bool :

    C++ signature :
        bool inspection(class PyDbDimension {lvalue})'''
    ...
    def inspectionFrame (self, *args, **kwargs)-> int :
      '''inspectionFrame( (Dimension)arg1) -> int :

    C++ signature :
        int inspectionFrame(class PyDbDimension {lvalue})'''
    ...
    def inspectionLabel (self, *args, **kwargs)-> str :
      '''inspectionLabel( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > inspectionLabel(class PyDbDimension {lvalue})'''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self, *args, **kwargs)-> bool :
      '''isConstraintDynamic( (Dimension)arg1) -> bool :

    C++ signature :
        bool isConstraintDynamic(class PyDbDimension {lvalue})'''
    ...
    def isConstraintObject (self, *args, **kwargs)-> tuple :
      '''isConstraintObject( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isConstraintObject(class PyDbDimension {lvalue})'''
    ...
    def isDynamicDimension (self, *args, **kwargs)-> bool :
      '''isDynamicDimension( (Dimension)arg1) -> bool :

    C++ signature :
        bool isDynamicDimension(class PyDbDimension {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self, *args, **kwargs)-> bool :
      '''isHorizontalRefTextRotation( (Dimension)arg1) -> bool :

    C++ signature :
        bool isHorizontalRefTextRotation(class PyDbDimension {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self, *args, **kwargs)-> bool :
      '''isUsingDefaultTextPosition( (Dimension)arg1) -> bool :

    C++ signature :
        bool isUsingDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def measurement (self, *args, **kwargs)-> float :
      '''measurement( (Dimension)arg1) -> float :

    C++ signature :
        double measurement(class PyDbDimension {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Dimension)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbDimension {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def prefix (self, *args, **kwargs)-> str :
      '''prefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > prefix(class PyDbDimension {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recomputeDimBlock (self, *args, **kwargs)-> ErrorStatus :
      '''recomputeDimBlock( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue})

recomputeDimBlock( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue},bool)'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removeTextField (self, *args, **kwargs)-> ErrorStatus :
      '''removeTextField( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeTextField(class PyDbDimension {lvalue})'''
    ...
    def resetTextDefinedSize (self, *args, **kwargs)-> None :
      '''resetTextDefinedSize( (Dimension)arg1) -> None :

    C++ signature :
        void resetTextDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def setAltSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAlternatePrefix (self, *args, **kwargs)-> ErrorStatus :
      '''setAlternatePrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternatePrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAlternateSuffix (self, *args, **kwargs)-> ErrorStatus :
      '''setAlternateSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternateSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setArcPoint (self, *args, **kwargs)-> ErrorStatus :
      '''setArcPoint( (Point3AngularDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArcPoint(class PyDb3PointAngularDimension {lvalue},class AcGePoint3d)'''
    ...
    def setArrowFirstIsFlipped (self, *args, **kwargs)-> ErrorStatus :
      '''setArrowFirstIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowFirstIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setArrowSecondIsFlipped (self, *args, **kwargs)-> ErrorStatus :
      '''setArrowSecondIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowSecondIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setCenterPoint (self, *args, **kwargs)-> ErrorStatus :
      '''setCenterPoint( (Point3AngularDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCenterPoint(class PyDb3PointAngularDimension {lvalue},class AcGePoint3d)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setConstraintDynamic (self, *args, **kwargs)-> ErrorStatus :
      '''setConstraintDynamic( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setConstraintDynamic(class PyDbDimension {lvalue},bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDimBlockId (self, *args, **kwargs)-> ErrorStatus :
      '''setDimBlockId( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockId(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimBlockPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setDimBlockPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimExt1Linetype (self, *args, **kwargs)-> ErrorStatus :
      '''setDimExt1Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt1Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimExt2Linetype (self, *args, **kwargs)-> ErrorStatus :
      '''setDimExt2Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt2Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimLineLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setDimLineLinetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimLineLinetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setDimensionStyle( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionStyle(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionText (self, *args, **kwargs)-> ErrorStatus :
      '''setDimensionText( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionText(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDimstyleData (self, *args, **kwargs)-> ErrorStatus :
      '''setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self, *args, **kwargs)-> ErrorStatus :
      '''setDynamicDimension( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDynamicDimension(class PyDbDimension {lvalue},bool)'''
    ...
    def setElevation (self, *args, **kwargs)-> ErrorStatus :
      '''setElevation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setElevation(class PyDbDimension {lvalue},double)'''
    ...
    def setExtArcOn (self, *args, **kwargs)-> ErrorStatus :
      '''setExtArcOn( (Point3AngularDimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setExtArcOn(class PyDb3PointAngularDimension {lvalue},bool)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setHorizontalRefTextRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setHorizontalRefTextRotation( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRefTextRotation(class PyDbDimension {lvalue},bool)'''
    ...
    def setHorizontalRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setHorizontalRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setInspection (self, *args, **kwargs)-> ErrorStatus :
      '''setInspection( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspection(class PyDbDimension {lvalue},bool)'''
    ...
    def setInspectionFrame (self, *args, **kwargs)-> ErrorStatus :
      '''setInspectionFrame( (Dimension)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionFrame(class PyDbDimension {lvalue},int)'''
    ...
    def setInspectionLabel (self, *args, **kwargs)-> ErrorStatus :
      '''setInspectionLabel( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionLabel(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs)-> ErrorStatus :
      '''setNormal( (Dimension)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbDimension {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, *args, **kwargs)-> ErrorStatus :
      '''setPrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setShouldParticipateInOPM (self, *args, **kwargs)-> None :
      '''setShouldParticipateInOPM( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShouldParticipateInOPM(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuffix (self, *args, **kwargs)-> ErrorStatus :
      '''setSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setSuppressAngularTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressAngularTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressAngularTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setTextAttachment (self, *args, **kwargs)-> ErrorStatus :
      '''setTextAttachment( (Dimension)arg1, (MTextAttachmentPoint)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAttachment(class PyDbDimension {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setTextDefinedSize (self, *args, **kwargs)-> None :
      '''setTextDefinedSize( (Dimension)arg1, (float)arg2, (float)arg3) -> None :

    C++ signature :
        void setTextDefinedSize(class PyDbDimension {lvalue},double,double)'''
    ...
    def setTextLineSpacingFactor (self, *args, **kwargs)-> ErrorStatus :
      '''setTextLineSpacingFactor( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingFactor(class PyDbDimension {lvalue},double)'''
    ...
    def setTextLineSpacingStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setTextLineSpacingStyle( (Dimension)arg1, (LineSpacingStyle)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingStyle(class PyDbDimension {lvalue},enum AcDb::LineSpacingStyle)'''
    ...
    def setTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setTextPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setTextRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setTextRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setToleranceSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setUsingDefaultTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setUsingDefaultTextPosition( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUsingDefaultTextPosition(class PyDbDimension {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def setXLine1Point (self, *args, **kwargs)-> ErrorStatus :
      '''setXLine1Point( (Point3AngularDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXLine1Point(class PyDb3PointAngularDimension {lvalue},class AcGePoint3d)'''
    ...
    def setXLine2Point (self, *args, **kwargs)-> ErrorStatus :
      '''setXLine2Point( (Point3AngularDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXLine2Point(class PyDb3PointAngularDimension {lvalue},class AcGePoint3d)'''
    ...
    def shouldParticipateInOPM (self, *args, **kwargs)-> bool :
      '''shouldParticipateInOPM( (Dimension)arg1) -> bool :

    C++ signature :
        bool shouldParticipateInOPM(class PyDbDimension {lvalue})'''
    ...
    def suffix (self, *args, **kwargs)-> str :
      '''suffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > suffix(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroFeet (self, *args, **kwargs)-> bool :
      '''suppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroInches (self, *args, **kwargs)-> bool :
      '''suppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def textAttachment (self, *args, **kwargs)-> MTextAttachmentPoint :
      '''textAttachment( (Dimension)arg1) -> MTextAttachmentPoint :

    C++ signature :
        enum AcDbMText::AttachmentPoint textAttachment(class PyDbDimension {lvalue})'''
    ...
    def textDefinedSize (self, *args, **kwargs)-> tuple :
      '''textDefinedSize( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple textDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingFactor (self, *args, **kwargs)-> float :
      '''textLineSpacingFactor( (Dimension)arg1) -> float :

    C++ signature :
        double textLineSpacingFactor(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingStyle (self, *args, **kwargs)-> LineSpacingStyle :
      '''textLineSpacingStyle( (Dimension)arg1) -> LineSpacingStyle :

    C++ signature :
        enum AcDb::LineSpacingStyle textLineSpacingStyle(class PyDbDimension {lvalue})'''
    ...
    def textPosition (self, *args, **kwargs)-> Point3d :
      '''textPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d textPosition(class PyDbDimension {lvalue})'''
    ...
    def textRotation (self, *args, **kwargs)-> float :
      '''textRotation( (Dimension)arg1) -> float :

    C++ signature :
        double textRotation(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def useDefaultTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''useDefaultTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def useSetTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''useSetTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useSetTextPosition(class PyDbDimension {lvalue})'''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...
    def xLine1Point (self, *args, **kwargs)-> Point3d :
      '''xLine1Point( (Point3AngularDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine1Point(class PyDb3PointAngularDimension {lvalue})'''
    ...
    def xLine2Point (self, *args, **kwargs)-> Point3d :
      '''xLine2Point( (Point3AngularDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine2Point(class PyDb3PointAngularDimension {lvalue})'''
    ...

class Poly2dType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def k2dCubicSplinePoly (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k2dFitCurvePoly (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k2dQuadSplinePoly (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k2dSimplePoly (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Poly3dType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def k3dCubicSplinePoly (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k3dQuadSplinePoly (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k3dSimplePoly (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class PolyFaceMeshVertex:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PolyFaceMeshVertex :
      '''cast( (RxObject)arg1) -> PolyFaceMeshVertex :

    C++ signature :
        class PyDbPolyFaceMeshVertex cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PolyFaceMeshVertex :
      '''cloneFrom( (RxObject)arg1) -> PolyFaceMeshVertex :

    C++ signature :
        class PyDbPolyFaceMeshVertex cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def position (self, *args, **kwargs)-> Point3d :
      '''position( (PolyFaceMeshVertex)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDbPolyFaceMeshVertex {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setPosition( (PolyFaceMeshVertex)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPosition(class PyDbPolyFaceMeshVertex {lvalue},class AcGePoint3d)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class PolygonMeshVertex:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> PolygonMeshVertex :
      '''cast( (RxObject)arg1) -> PolygonMeshVertex :

    C++ signature :
        class PyDbPolygonMeshVertex cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> PolygonMeshVertex :
      '''cloneFrom( (RxObject)arg1) -> PolygonMeshVertex :

    C++ signature :
        class PyDbPolygonMeshVertex cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def position (self, *args, **kwargs)-> Point3d :
      '''position( (PolygonMeshVertex)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDbPolygonMeshVertex {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setPosition( (PolygonMeshVertex)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPosition(class PyDbPolygonMeshVertex {lvalue},class AcGePoint3d)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def vertexType (self, *args, **kwargs)-> object :
      '''vertexType( (PolygonMeshVertex)arg1) -> object :

    C++ signature :
        enum AcDb::Vertex3dType vertexType(class PyDbPolygonMeshVertex {lvalue})'''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class Polyline:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (int)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,unsigned int)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def addVertexAt (self, *args, **kwargs)-> ErrorStatus :
      '''addVertexAt( (Polyline)arg1, (int)arg2, (Point2d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addVertexAt(class PyDbPolyline {lvalue},unsigned int,class AcGePoint2d)

addVertexAt( (Polyline)arg1, (int)arg2, (Point2d)arg3, (float)arg4, (float)arg5, (float)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus addVertexAt(class PyDbPolyline {lvalue},unsigned int,class AcGePoint2d,double,double,double)'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Polyline :
      '''cast( (RxObject)arg1) -> Polyline :

    C++ signature :
        class PyDbPolyline cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Polyline :
      '''cloneFrom( (RxObject)arg1) -> Polyline :

    C++ signature :
        class PyDbPolyline cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def elevation (self, *args, **kwargs)-> float :
      '''elevation( (Polyline)arg1) -> float :

    C++ signature :
        double elevation(class PyDbPolyline {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> ErrorStatus :
      '''extend( (Curve)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getArcSeg2dAt (self, *args, **kwargs)-> CircArc2d :
      '''getArcSeg2dAt( (Polyline)arg1, (int)arg2) -> CircArc2d :

    C++ signature :
        class PyGeCircArc2d getArcSeg2dAt(class PyDbPolyline {lvalue},unsigned int)'''
    ...
    def getArcSeg3dAt (self, *args, **kwargs)-> CircArc3d :
      '''getArcSeg3dAt( (Polyline)arg1, (int)arg2) -> CircArc3d :

    C++ signature :
        class PyGeCircArc3d getArcSeg3dAt(class PyDbPolyline {lvalue},unsigned int)'''
    ...
    def getArea (self, *args, **kwargs)-> float :
      '''getArea( (Curve)arg1) -> float :

    C++ signature :
        double getArea(class PyDbCurve {lvalue})'''
    ...
    def getBulgeAt (self, *args, **kwargs)-> float :
      '''getBulgeAt( (Polyline)arg1, (int)arg2) -> float :

    C++ signature :
        double getBulgeAt(class PyDbPolyline {lvalue},unsigned int)'''
    ...
    def getClosestPointTo (self, *args, **kwargs)-> Point3d :
      '''getClosestPointTo( (Curve)arg1, (Point3d)arg2, (bool)arg3) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbCurve {lvalue},class AcGePoint3d,bool)

getClosestPointTo( (Curve)arg1, (Point3d)arg2, (Vector3d)arg3, (bool)arg4) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbCurve {lvalue},class AcGePoint3d,class AcGeVector3d,bool)'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getConstantWidth (self, *args, **kwargs)-> float :
      '''getConstantWidth( (Polyline)arg1) -> float :

    C++ signature :
        double getConstantWidth(class PyDbPolyline {lvalue})'''
    ...
    def getDistAtParam (self, *args, **kwargs)-> float :
      '''getDistAtParam( (Curve)arg1, (float)arg2) -> float :

    C++ signature :
        double getDistAtParam(class PyDbCurve {lvalue},double)'''
    ...
    def getDistAtPoint (self, *args, **kwargs)-> float :
      '''getDistAtPoint( (Curve)arg1, (Point3d)arg2) -> float :

    C++ signature :
        double getDistAtPoint(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Polyline)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbPolyline {lvalue},class AcGeMatrix3d {lvalue})

getEcs( (Polyline)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbPolyline {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEndParam (self, *args, **kwargs)-> float :
      '''getEndParam( (Curve)arg1) -> float :

    C++ signature :
        double getEndParam(class PyDbCurve {lvalue})'''
    ...
    def getEndPoint (self, *args, **kwargs)-> Point3d :
      '''getEndPoint( (Curve)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getEndPoint(class PyDbCurve {lvalue})'''
    ...
    def getEndWidthAt (self, *args, **kwargs)-> float :
      '''getEndWidthAt( (Polyline)arg1, (int)arg2) -> float :

    C++ signature :
        double getEndWidthAt(class PyDbPolyline {lvalue},unsigned int)'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self, *args, **kwargs)-> Vector3d :
      '''getFirstDeriv( (Curve)arg1, (float)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getFirstDeriv(class PyDbCurve {lvalue},double)

getFirstDeriv( (Curve)arg1, (Point3d)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getFirstDeriv(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getLineSeg2dAt (self, *args, **kwargs)-> LineSeg2d :
      '''getLineSeg2dAt( (Polyline)arg1, (int)arg2) -> LineSeg2d :

    C++ signature :
        class PyGeLineSeg2d getLineSeg2dAt(class PyDbPolyline {lvalue},unsigned int)'''
    ...
    def getLineSeg3dAt (self, *args, **kwargs)-> LineSeg3d :
      '''getLineSeg3dAt( (Polyline)arg1, (int)arg2) -> LineSeg3d :

    C++ signature :
        class PyGeLineSeg3d getLineSeg3dAt(class PyDbPolyline {lvalue},unsigned int)'''
    ...
    def getOffsetCurves (self, *args, **kwargs)-> list :
      '''getOffsetCurves( (Curve)arg1, (float)arg2) -> list :

    C++ signature :
        class boost::python::list getOffsetCurves(class PyDbCurve {lvalue},double)'''
    ...
    def getOffsetCurvesGivenPlaneNormal (self, *args, **kwargs)-> list :
      '''getOffsetCurvesGivenPlaneNormal( (Curve)arg1, (Vector3d)arg2, (float)arg3) -> list :

    C++ signature :
        class boost::python::list getOffsetCurvesGivenPlaneNormal(class PyDbCurve {lvalue},class AcGeVector3d,double)'''
    ...
    def getParamAtDist (self, *args, **kwargs)-> float :
      '''getParamAtDist( (Curve)arg1, (float)arg2) -> float :

    C++ signature :
        double getParamAtDist(class PyDbCurve {lvalue},double)'''
    ...
    def getParamAtPoint (self, *args, **kwargs)-> float :
      '''getParamAtPoint( (Curve)arg1, (Point3d)arg2) -> float :

    C++ signature :
        double getParamAtPoint(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def getPoint2dAt (self, *args, **kwargs)-> Point2d :
      '''getPoint2dAt( (Polyline)arg1, (int)arg2) -> Point2d :

    C++ signature :
        class AcGePoint2d getPoint2dAt(class PyDbPolyline {lvalue},unsigned int)'''
    ...
    def getPoint3dAt (self, *args, **kwargs)-> Point3d :
      '''getPoint3dAt( (Polyline)arg1, (int)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getPoint3dAt(class PyDbPolyline {lvalue},unsigned int)'''
    ...
    def getPointAtDist (self, *args, **kwargs)-> Point3d :
      '''getPointAtDist( (Curve)arg1, (float)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getPointAtDist(class PyDbCurve {lvalue},double)'''
    ...
    def getPointAtParam (self, *args, **kwargs)-> Point3d :
      '''getPointAtParam( (Curve)arg1, (float)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getPointAtParam(class PyDbCurve {lvalue},double)'''
    ...
    def getSecondDeriv (self, *args, **kwargs)-> Vector3d :
      '''getSecondDeriv( (Curve)arg1, (float)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getSecondDeriv(class PyDbCurve {lvalue},double)

getSecondDeriv( (Curve)arg1, (Point3d)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getSecondDeriv(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getSplitCurves (self, *args, **kwargs)-> list :
      '''getSplitCurves( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurves(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getSplitCurvesAtParams (self, *args, **kwargs)-> list :
      '''getSplitCurvesAtParams( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurvesAtParams(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getSplitCurvesAtPoints (self, *args, **kwargs)-> list :
      '''getSplitCurvesAtPoints( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurvesAtPoints(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getStartParam (self, *args, **kwargs)-> float :
      '''getStartParam( (Curve)arg1) -> float :

    C++ signature :
        double getStartParam(class PyDbCurve {lvalue})'''
    ...
    def getStartPoint (self, *args, **kwargs)-> Point3d :
      '''getStartPoint( (Curve)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getStartPoint(class PyDbCurve {lvalue})'''
    ...
    def getStartWidthAt (self, *args, **kwargs)-> float :
      '''getStartWidthAt( (Polyline)arg1, (int)arg2) -> float :

    C++ signature :
        double getStartWidthAt(class PyDbPolyline {lvalue},unsigned int)'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasBulges (self, *args, **kwargs)-> bool :
      '''hasBulges( (Polyline)arg1) -> bool :

    C++ signature :
        bool hasBulges(class PyDbPolyline {lvalue})'''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def hasPlinegen (self, *args, **kwargs)-> bool :
      '''hasPlinegen( (Polyline)arg1) -> bool :

    C++ signature :
        bool hasPlinegen(class PyDbPolyline {lvalue})'''
    ...
    def hasVertexIdentifiers (self, *args, **kwargs)-> bool :
      '''hasVertexIdentifiers( (Polyline)arg1) -> bool :

    C++ signature :
        bool hasVertexIdentifiers(class PyDbPolyline {lvalue})'''
    ...
    def hasWidth (self, *args, **kwargs)-> bool :
      '''hasWidth( (Polyline)arg1) -> bool :

    C++ signature :
        bool hasWidth(class PyDbPolyline {lvalue})'''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isClosed (self, *args, **kwargs)-> bool :
      '''isClosed( (Curve)arg1) -> bool :

    C++ signature :
        bool isClosed(class PyDbCurve {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isOnlyLines (self, *args, **kwargs)-> bool :
      '''isOnlyLines( (Polyline)arg1) -> bool :

    C++ signature :
        bool isOnlyLines(class PyDbPolyline {lvalue})'''
    ...
    def isPeriodic (self, *args, **kwargs)-> bool :
      '''isPeriodic( (Curve)arg1) -> bool :

    C++ signature :
        bool isPeriodic(class PyDbCurve {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def makeClosedIfStartAndEndVertexCoincide (self, *args, **kwargs)-> ErrorStatus :
      '''makeClosedIfStartAndEndVertexCoincide( (Polyline)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus makeClosedIfStartAndEndVertexCoincide(class PyDbPolyline {lvalue},double)'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def maximizeMemory (self, *args, **kwargs)-> ErrorStatus :
      '''maximizeMemory( (Polyline)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus maximizeMemory(class PyDbPolyline {lvalue})'''
    ...
    def minimizeMemory (self, *args, **kwargs)-> ErrorStatus :
      '''minimizeMemory( (Polyline)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus minimizeMemory(class PyDbPolyline {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Polyline)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbPolyline {lvalue})'''
    ...
    def numVerts (self, *args, **kwargs)-> int :
      '''numVerts( (Polyline)arg1) -> int :

    C++ signature :
        unsigned int numVerts(class PyDbPolyline {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def onSegAt (self, *args, **kwargs)-> bool :
      '''onSegAt( (Polyline)arg1, (int)arg2, (Point2d)arg3, (float)arg4) -> bool :

    C++ signature :
        bool onSegAt(class PyDbPolyline {lvalue},unsigned int,class AcGePoint2d,double)'''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removeVertexAt (self, *args, **kwargs)-> ErrorStatus :
      '''removeVertexAt( (Polyline)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeVertexAt(class PyDbPolyline {lvalue},unsigned int)'''
    ...
    def reset (self, *args, **kwargs)-> None :
      '''reset( (Polyline)arg1, (bool)arg2, (int)arg3) -> None :

    C++ signature :
        void reset(class PyDbPolyline {lvalue},bool,unsigned int)'''
    ...
    def reverseCurve (self, *args, **kwargs)-> ErrorStatus :
      '''reverseCurve( (Curve)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus reverseCurve(class PyDbCurve {lvalue})'''
    ...
    def segType (self, *args, **kwargs)-> SegType :
      '''segType( (Polyline)arg1, (int)arg2) -> SegType :

    C++ signature :
        enum AcDbPolyline::SegType segType(class PyDbPolyline {lvalue},unsigned int)'''
    ...
    def setBulgeAt (self, *args, **kwargs)-> ErrorStatus :
      '''setBulgeAt( (Polyline)arg1, (int)arg2, (float)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBulgeAt(class PyDbPolyline {lvalue},unsigned int,double)'''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setClosed (self, *args, **kwargs)-> None :
      '''setClosed( (Polyline)arg1, (bool)arg2) -> None :

    C++ signature :
        void setClosed(class PyDbPolyline {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setConstantWidth (self, *args, **kwargs)-> ErrorStatus :
      '''setConstantWidth( (Polyline)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setConstantWidth(class PyDbPolyline {lvalue},double)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setElevation (self, *args, **kwargs)-> None :
      '''setElevation( (Polyline)arg1, (float)arg2) -> None :

    C++ signature :
        void setElevation(class PyDbPolyline {lvalue},double)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs)-> ErrorStatus :
      '''setNormal( (Polyline)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbPolyline {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlinegen (self, *args, **kwargs)-> None :
      '''setPlinegen( (Polyline)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPlinegen(class PyDbPolyline {lvalue},bool)'''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPointAt (self, *args, **kwargs)-> ErrorStatus :
      '''setPointAt( (Polyline)arg1, (int)arg2, (Point2d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPointAt(class PyDbPolyline {lvalue},unsigned int,class AcGePoint2d)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setThickness (self, *args, **kwargs)-> ErrorStatus :
      '''setThickness( (Polyline)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setThickness(class PyDbPolyline {lvalue},double)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setWidthsAt (self, *args, **kwargs)-> ErrorStatus :
      '''setWidthsAt( (Polyline)arg1, (int)arg2, (float)arg3, (float)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setWidthsAt(class PyDbPolyline {lvalue},unsigned int,double,double)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def thickness (self, *args, **kwargs)-> float :
      '''thickness( (Polyline)arg1) -> float :

    C++ signature :
        double thickness(class PyDbPolyline {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class Polyline2d:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Poly2dType)arg2, (list)arg3, (bool)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,enum AcDb::Poly2dType,class boost::python::list,bool)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def appendVertex (self, *args, **kwargs)-> ErrorStatus :
      '''appendVertex( (Polyline2d)arg1, (Vertex2d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus appendVertex(class PyDb2dPolyline {lvalue},class PyDb2dVertex)

appendVertex( (Polyline2d)arg1, (ObjectId)arg2, (Vertex2d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus appendVertex(class PyDb2dPolyline {lvalue},class PyDbObjectId {lvalue},class PyDb2dVertex)'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Polyline2d :
      '''cast( (RxObject)arg1) -> Polyline2d :

    C++ signature :
        class PyDb2dPolyline cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Polyline2d :
      '''cloneFrom( (RxObject)arg1) -> Polyline2d :

    C++ signature :
        class PyDb2dPolyline cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def constantWidth (self, *args, **kwargs)-> float :
      '''constantWidth( (Polyline2d)arg1) -> float :

    C++ signature :
        double constantWidth(class PyDb2dPolyline {lvalue})'''
    ...
    def convertToPolyType (self, *args, **kwargs)-> ErrorStatus :
      '''convertToPolyType( (Polyline2d)arg1, (Poly2dType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus convertToPolyType(class PyDb2dPolyline {lvalue},enum AcDb::Poly2dType)'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def defaultEndWidth (self, *args, **kwargs)-> float :
      '''defaultEndWidth( (Polyline2d)arg1) -> float :

    C++ signature :
        double defaultEndWidth(class PyDb2dPolyline {lvalue})'''
    ...
    def defaultStartWidth (self, *args, **kwargs)-> float :
      '''defaultStartWidth( (Polyline2d)arg1) -> float :

    C++ signature :
        double defaultStartWidth(class PyDb2dPolyline {lvalue})'''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def elevation (self, *args, **kwargs)-> float :
      '''elevation( (Polyline2d)arg1) -> float :

    C++ signature :
        double elevation(class PyDb2dPolyline {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> ErrorStatus :
      '''extend( (Curve)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getArea (self, *args, **kwargs)-> float :
      '''getArea( (Curve)arg1) -> float :

    C++ signature :
        double getArea(class PyDbCurve {lvalue})'''
    ...
    def getClosestPointTo (self, *args, **kwargs)-> Point3d :
      '''getClosestPointTo( (Curve)arg1, (Point3d)arg2, (bool)arg3) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbCurve {lvalue},class AcGePoint3d,bool)

getClosestPointTo( (Curve)arg1, (Point3d)arg2, (Vector3d)arg3, (bool)arg4) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbCurve {lvalue},class AcGePoint3d,class AcGeVector3d,bool)'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDistAtParam (self, *args, **kwargs)-> float :
      '''getDistAtParam( (Curve)arg1, (float)arg2) -> float :

    C++ signature :
        double getDistAtParam(class PyDbCurve {lvalue},double)'''
    ...
    def getDistAtPoint (self, *args, **kwargs)-> float :
      '''getDistAtPoint( (Curve)arg1, (Point3d)arg2) -> float :

    C++ signature :
        double getDistAtPoint(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEndParam (self, *args, **kwargs)-> float :
      '''getEndParam( (Curve)arg1) -> float :

    C++ signature :
        double getEndParam(class PyDbCurve {lvalue})'''
    ...
    def getEndPoint (self, *args, **kwargs)-> Point3d :
      '''getEndPoint( (Curve)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getEndPoint(class PyDbCurve {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self, *args, **kwargs)-> Vector3d :
      '''getFirstDeriv( (Curve)arg1, (float)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getFirstDeriv(class PyDbCurve {lvalue},double)

getFirstDeriv( (Curve)arg1, (Point3d)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getFirstDeriv(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getOffsetCurves (self, *args, **kwargs)-> list :
      '''getOffsetCurves( (Curve)arg1, (float)arg2) -> list :

    C++ signature :
        class boost::python::list getOffsetCurves(class PyDbCurve {lvalue},double)'''
    ...
    def getOffsetCurvesGivenPlaneNormal (self, *args, **kwargs)-> list :
      '''getOffsetCurvesGivenPlaneNormal( (Curve)arg1, (Vector3d)arg2, (float)arg3) -> list :

    C++ signature :
        class boost::python::list getOffsetCurvesGivenPlaneNormal(class PyDbCurve {lvalue},class AcGeVector3d,double)'''
    ...
    def getParamAtDist (self, *args, **kwargs)-> float :
      '''getParamAtDist( (Curve)arg1, (float)arg2) -> float :

    C++ signature :
        double getParamAtDist(class PyDbCurve {lvalue},double)'''
    ...
    def getParamAtPoint (self, *args, **kwargs)-> float :
      '''getParamAtPoint( (Curve)arg1, (Point3d)arg2) -> float :

    C++ signature :
        double getParamAtPoint(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def getPointAtDist (self, *args, **kwargs)-> Point3d :
      '''getPointAtDist( (Curve)arg1, (float)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getPointAtDist(class PyDbCurve {lvalue},double)'''
    ...
    def getPointAtParam (self, *args, **kwargs)-> Point3d :
      '''getPointAtParam( (Curve)arg1, (float)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getPointAtParam(class PyDbCurve {lvalue},double)'''
    ...
    def getSecondDeriv (self, *args, **kwargs)-> Vector3d :
      '''getSecondDeriv( (Curve)arg1, (float)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getSecondDeriv(class PyDbCurve {lvalue},double)

getSecondDeriv( (Curve)arg1, (Point3d)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getSecondDeriv(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getSplitCurves (self, *args, **kwargs)-> list :
      '''getSplitCurves( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurves(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getSplitCurvesAtParams (self, *args, **kwargs)-> list :
      '''getSplitCurvesAtParams( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurvesAtParams(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getSplitCurvesAtPoints (self, *args, **kwargs)-> list :
      '''getSplitCurvesAtPoints( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurvesAtPoints(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getStartParam (self, *args, **kwargs)-> float :
      '''getStartParam( (Curve)arg1) -> float :

    C++ signature :
        double getStartParam(class PyDbCurve {lvalue})'''
    ...
    def getStartPoint (self, *args, **kwargs)-> Point3d :
      '''getStartPoint( (Curve)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getStartPoint(class PyDbCurve {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def insertVertexAt (self, *args, **kwargs)-> ErrorStatus :
      '''insertVertexAt( (Polyline2d)arg1, (Vertex2d)arg2, (Vertex2d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus insertVertexAt(class PyDb2dPolyline {lvalue},class PyDb2dVertex,class PyDb2dVertex {lvalue})

insertVertexAt( (Polyline2d)arg1, (ObjectId)arg2, (ObjectId)arg3, (Vertex2d)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus insertVertexAt(class PyDb2dPolyline {lvalue},class PyDbObjectId {lvalue},class PyDbObjectId,class PyDb2dVertex {lvalue})'''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isClosed (self, *args, **kwargs)-> bool :
      '''isClosed( (Curve)arg1) -> bool :

    C++ signature :
        bool isClosed(class PyDbCurve {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isLinetypeGenerationOn (self, *args, **kwargs)-> bool :
      '''isLinetypeGenerationOn( (Polyline2d)arg1) -> bool :

    C++ signature :
        bool isLinetypeGenerationOn(class PyDb2dPolyline {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPeriodic (self, *args, **kwargs)-> bool :
      '''isPeriodic( (Curve)arg1) -> bool :

    C++ signature :
        bool isPeriodic(class PyDbCurve {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def length (self, *args, **kwargs)-> float :
      '''length( (Polyline2d)arg1) -> float :

    C++ signature :
        double length(class PyDb2dPolyline {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def makeClosed (self, *args, **kwargs)-> ErrorStatus :
      '''makeClosed( (Polyline2d)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus makeClosed(class PyDb2dPolyline {lvalue})'''
    ...
    def makeClosedIfStartAndEndVertexCoincide (self, *args, **kwargs)-> ErrorStatus :
      '''makeClosedIfStartAndEndVertexCoincide( (Polyline2d)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus makeClosedIfStartAndEndVertexCoincide(class PyDb2dPolyline {lvalue},double)'''
    ...
    def makeOpen (self, *args, **kwargs)-> ErrorStatus :
      '''makeOpen( (Polyline2d)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus makeOpen(class PyDb2dPolyline {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Polyline2d)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDb2dPolyline {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def openSequenceEnd (self, *args, **kwargs)-> ErrorStatus :
      '''openSequenceEnd( (Polyline2d)arg1, (SequenceEnd)arg2, (OpenMode)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus openSequenceEnd(class PyDb2dPolyline {lvalue},class PyDbSequenceEnd {lvalue},enum AcDb::OpenMode)'''
    ...
    def openVertex (self, *args, **kwargs)-> ErrorStatus :
      '''openVertex( (Polyline2d)arg1, (Vertex2d)arg2, (ObjectId)arg3, (OpenMode)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus openVertex(class PyDb2dPolyline {lvalue},class PyDb2dVertex {lvalue},class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def polyType (self, *args, **kwargs)-> Poly2dType :
      '''polyType( (Polyline2d)arg1) -> Poly2dType :

    C++ signature :
        enum AcDb::Poly2dType polyType(class PyDb2dPolyline {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def reverseCurve (self, *args, **kwargs)-> ErrorStatus :
      '''reverseCurve( (Curve)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus reverseCurve(class PyDbCurve {lvalue})'''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setClosed (self, *args, **kwargs)-> ErrorStatus :
      '''setClosed( (Polyline2d)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setClosed(class PyDb2dPolyline {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setConstantWidth (self, *args, **kwargs)-> ErrorStatus :
      '''setConstantWidth( (Polyline2d)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setConstantWidth(class PyDb2dPolyline {lvalue},double)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDefaultEndWidth (self, *args, **kwargs)-> ErrorStatus :
      '''setDefaultEndWidth( (Polyline2d)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDefaultEndWidth(class PyDb2dPolyline {lvalue},double)'''
    ...
    def setDefaultStartWidth (self, *args, **kwargs)-> ErrorStatus :
      '''setDefaultStartWidth( (Polyline2d)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDefaultStartWidth(class PyDb2dPolyline {lvalue},double)'''
    ...
    def setElevation (self, *args, **kwargs)-> ErrorStatus :
      '''setElevation( (Polyline2d)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setElevation(class PyDb2dPolyline {lvalue},double)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeGenerationOff (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeGenerationOff( (Polyline2d)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeGenerationOff(class PyDb2dPolyline {lvalue})'''
    ...
    def setLinetypeGenerationOn (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeGenerationOn( (Polyline2d)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeGenerationOn(class PyDb2dPolyline {lvalue})'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs)-> ErrorStatus :
      '''setNormal( (Polyline2d)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDb2dPolyline {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPolyType (self, *args, **kwargs)-> ErrorStatus :
      '''setPolyType( (Polyline2d)arg1, (Poly2dType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPolyType(class PyDb2dPolyline {lvalue},enum AcDb::Poly2dType)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setThickness (self, *args, **kwargs)-> ErrorStatus :
      '''setThickness( (Polyline2d)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setThickness(class PyDb2dPolyline {lvalue},double)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def splineFit (self, *args, **kwargs)-> ErrorStatus :
      '''splineFit( (Polyline2d)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus splineFit(class PyDb2dPolyline {lvalue})

splineFit( (Polyline2d)arg1, (Poly2dType)arg2, (DxfCode)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus splineFit(class PyDb2dPolyline {lvalue},enum AcDb::Poly2dType,short)'''
    ...
    def straighten (self, *args, **kwargs)-> ErrorStatus :
      '''straighten( (Polyline2d)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus straighten(class PyDb2dPolyline {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def thickness (self, *args, **kwargs)-> float :
      '''thickness( (Polyline2d)arg1) -> float :

    C++ signature :
        double thickness(class PyDb2dPolyline {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def vertexIds (self, *args, **kwargs)-> list :
      '''vertexIds( (Polyline2d)arg1) -> list :

    C++ signature :
        class boost::python::list vertexIds(class PyDb2dPolyline {lvalue})'''
    ...
    def vertexPosition (self, *args, **kwargs)-> Point3d :
      '''vertexPosition( (Polyline2d)arg1, (object)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d vertexPosition(class PyDb2dPolyline {lvalue},class AcDb2dVertex)'''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class Polyline3d:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Poly3dType)arg2, (list)arg3, (bool)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,enum AcDb::Poly3dType,class boost::python::list,bool)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def appendVertex (self, *args, **kwargs)-> ErrorStatus :
      '''appendVertex( (Polyline3d)arg1, (Polyline3dVertex)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus appendVertex(class PyDb3dPolyline {lvalue},class PyDb3dPolylineVertex)

appendVertex( (Polyline3d)arg1, (ObjectId)arg2, (Polyline3dVertex)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus appendVertex(class PyDb3dPolyline {lvalue},class PyDbObjectId {lvalue},class PyDb3dPolylineVertex)'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Polyline3d :
      '''cast( (RxObject)arg1) -> Polyline3d :

    C++ signature :
        class PyDb3dPolyline cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Polyline3d :
      '''cloneFrom( (RxObject)arg1) -> Polyline3d :

    C++ signature :
        class PyDb3dPolyline cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def convertToPolyType (self, *args, **kwargs)-> ErrorStatus :
      '''convertToPolyType( (Polyline3d)arg1, (Poly3dType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus convertToPolyType(class PyDb3dPolyline {lvalue},enum AcDb::Poly3dType)'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extend (self, *args, **kwargs)-> ErrorStatus :
      '''extend( (Curve)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus extend(class PyDbCurve {lvalue},double)

extend( (Curve)arg1, (bool)arg2, (Point3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus extend(class PyDbCurve {lvalue},bool,class AcGePoint3d)'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getArea (self, *args, **kwargs)-> float :
      '''getArea( (Curve)arg1) -> float :

    C++ signature :
        double getArea(class PyDbCurve {lvalue})'''
    ...
    def getClosestPointTo (self, *args, **kwargs)-> Point3d :
      '''getClosestPointTo( (Curve)arg1, (Point3d)arg2, (bool)arg3) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbCurve {lvalue},class AcGePoint3d,bool)

getClosestPointTo( (Curve)arg1, (Point3d)arg2, (Vector3d)arg3, (bool)arg4) -> Point3d :

    C++ signature :
        class AcGePoint3d getClosestPointTo(class PyDbCurve {lvalue},class AcGePoint3d,class AcGeVector3d,bool)'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDistAtParam (self, *args, **kwargs)-> float :
      '''getDistAtParam( (Curve)arg1, (float)arg2) -> float :

    C++ signature :
        double getDistAtParam(class PyDbCurve {lvalue},double)'''
    ...
    def getDistAtPoint (self, *args, **kwargs)-> float :
      '''getDistAtPoint( (Curve)arg1, (Point3d)arg2) -> float :

    C++ signature :
        double getDistAtPoint(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEndParam (self, *args, **kwargs)-> float :
      '''getEndParam( (Curve)arg1) -> float :

    C++ signature :
        double getEndParam(class PyDbCurve {lvalue})'''
    ...
    def getEndPoint (self, *args, **kwargs)-> Point3d :
      '''getEndPoint( (Curve)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getEndPoint(class PyDbCurve {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFirstDeriv (self, *args, **kwargs)-> Vector3d :
      '''getFirstDeriv( (Curve)arg1, (float)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getFirstDeriv(class PyDbCurve {lvalue},double)

getFirstDeriv( (Curve)arg1, (Point3d)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getFirstDeriv(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getOffsetCurves (self, *args, **kwargs)-> list :
      '''getOffsetCurves( (Curve)arg1, (float)arg2) -> list :

    C++ signature :
        class boost::python::list getOffsetCurves(class PyDbCurve {lvalue},double)'''
    ...
    def getOffsetCurvesGivenPlaneNormal (self, *args, **kwargs)-> list :
      '''getOffsetCurvesGivenPlaneNormal( (Curve)arg1, (Vector3d)arg2, (float)arg3) -> list :

    C++ signature :
        class boost::python::list getOffsetCurvesGivenPlaneNormal(class PyDbCurve {lvalue},class AcGeVector3d,double)'''
    ...
    def getParamAtDist (self, *args, **kwargs)-> float :
      '''getParamAtDist( (Curve)arg1, (float)arg2) -> float :

    C++ signature :
        double getParamAtDist(class PyDbCurve {lvalue},double)'''
    ...
    def getParamAtPoint (self, *args, **kwargs)-> float :
      '''getParamAtPoint( (Curve)arg1, (Point3d)arg2) -> float :

    C++ signature :
        double getParamAtPoint(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def getPointAtDist (self, *args, **kwargs)-> Point3d :
      '''getPointAtDist( (Curve)arg1, (float)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getPointAtDist(class PyDbCurve {lvalue},double)'''
    ...
    def getPointAtParam (self, *args, **kwargs)-> Point3d :
      '''getPointAtParam( (Curve)arg1, (float)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d getPointAtParam(class PyDbCurve {lvalue},double)'''
    ...
    def getSecondDeriv (self, *args, **kwargs)-> Vector3d :
      '''getSecondDeriv( (Curve)arg1, (float)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getSecondDeriv(class PyDbCurve {lvalue},double)

getSecondDeriv( (Curve)arg1, (Point3d)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d getSecondDeriv(class PyDbCurve {lvalue},class AcGePoint3d)'''
    ...
    def getSplitCurves (self, *args, **kwargs)-> list :
      '''getSplitCurves( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurves(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getSplitCurvesAtParams (self, *args, **kwargs)-> list :
      '''getSplitCurvesAtParams( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurvesAtParams(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getSplitCurvesAtPoints (self, *args, **kwargs)-> list :
      '''getSplitCurvesAtPoints( (Curve)arg1, (list)arg2) -> list :

    C++ signature :
        class boost::python::list getSplitCurvesAtPoints(class PyDbCurve {lvalue},class boost::python::list)'''
    ...
    def getStartParam (self, *args, **kwargs)-> float :
      '''getStartParam( (Curve)arg1) -> float :

    C++ signature :
        double getStartParam(class PyDbCurve {lvalue})'''
    ...
    def getStartPoint (self, *args, **kwargs)-> Point3d :
      '''getStartPoint( (Curve)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d getStartPoint(class PyDbCurve {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def insertVertexAt (self, *args, **kwargs)-> ErrorStatus :
      '''insertVertexAt( (Polyline3d)arg1, (Polyline3dVertex)arg2, (Polyline3dVertex)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus insertVertexAt(class PyDb3dPolyline {lvalue},class PyDb3dPolylineVertex,class PyDb3dPolylineVertex {lvalue})

insertVertexAt( (Polyline3d)arg1, (ObjectId)arg2, (ObjectId)arg3, (Polyline3dVertex)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus insertVertexAt(class PyDb3dPolyline {lvalue},class PyDbObjectId {lvalue},class PyDbObjectId,class PyDb3dPolylineVertex {lvalue})'''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isClosed (self, *args, **kwargs)-> bool :
      '''isClosed( (Curve)arg1) -> bool :

    C++ signature :
        bool isClosed(class PyDbCurve {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPeriodic (self, *args, **kwargs)-> bool :
      '''isPeriodic( (Curve)arg1) -> bool :

    C++ signature :
        bool isPeriodic(class PyDbCurve {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def length (self, *args, **kwargs)-> float :
      '''length( (Polyline3d)arg1) -> float :

    C++ signature :
        double length(class PyDb3dPolyline {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def makeClosed (self, *args, **kwargs)-> ErrorStatus :
      '''makeClosed( (Polyline3d)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus makeClosed(class PyDb3dPolyline {lvalue})'''
    ...
    def makeOpen (self, *args, **kwargs)-> ErrorStatus :
      '''makeOpen( (Polyline3d)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus makeOpen(class PyDb3dPolyline {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def openSequenceEnd (self, *args, **kwargs)-> ErrorStatus :
      '''openSequenceEnd( (Polyline3d)arg1, (SequenceEnd)arg2, (OpenMode)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus openSequenceEnd(class PyDb3dPolyline {lvalue},class PyDbSequenceEnd {lvalue},enum AcDb::OpenMode)'''
    ...
    def openVertex (self, *args, **kwargs)-> ErrorStatus :
      '''openVertex( (Polyline3d)arg1, (Polyline3dVertex)arg2, (ObjectId)arg3, (OpenMode)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus openVertex(class PyDb3dPolyline {lvalue},class PyDb3dPolylineVertex {lvalue},class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def polyType (self, *args, **kwargs)-> Poly3dType :
      '''polyType( (Polyline3d)arg1) -> Poly3dType :

    C++ signature :
        enum AcDb::Poly3dType polyType(class PyDb3dPolyline {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def reverseCurve (self, *args, **kwargs)-> ErrorStatus :
      '''reverseCurve( (Curve)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus reverseCurve(class PyDbCurve {lvalue})'''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setClosed (self, *args, **kwargs)-> ErrorStatus :
      '''setClosed( (Polyline3d)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setClosed(class PyDb3dPolyline {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPolyType (self, *args, **kwargs)-> ErrorStatus :
      '''setPolyType( (Polyline3d)arg1, (Poly3dType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPolyType(class PyDb3dPolyline {lvalue},enum AcDb::Poly3dType)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def splineFit (self, *args, **kwargs)-> ErrorStatus :
      '''splineFit( (Polyline3d)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus splineFit(class PyDb3dPolyline {lvalue})

splineFit( (Polyline3d)arg1, (Poly3dType)arg2, (DxfCode)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus splineFit(class PyDb3dPolyline {lvalue},enum AcDb::Poly3dType,short)'''
    ...
    def straighten (self, *args, **kwargs)-> ErrorStatus :
      '''straighten( (Polyline3d)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus straighten(class PyDb3dPolyline {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def vertexIds (self, *args, **kwargs)-> list :
      '''vertexIds( (Polyline3d)arg1) -> list :

    C++ signature :
        class boost::python::list vertexIds(class PyDb3dPolyline {lvalue})'''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class Polyline3dVertex:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Polyline3dVertex :
      '''cast( (RxObject)arg1) -> Polyline3dVertex :

    C++ signature :
        class PyDb3dPolylineVertex cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Polyline3dVertex :
      '''cloneFrom( (RxObject)arg1) -> Polyline3dVertex :

    C++ signature :
        class PyDb3dPolylineVertex cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def position (self, *args, **kwargs)-> Point3d :
      '''position( (Polyline3dVertex)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDb3dPolylineVertex {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setPosition( (Polyline3dVertex)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPosition(class PyDb3dPolylineVertex {lvalue},class AcGePoint3d)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def vertexType (self, *args, **kwargs)-> object :
      '''vertexType( (Polyline3dVertex)arg1) -> object :

    C++ signature :
        enum AcDb::Vertex3dType vertexType(class PyDb3dPolylineVertex {lvalue})'''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class RadialDimension:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (float)arg4) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,double)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (float)arg4, (str)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (float)arg4, (str)arg5, (ObjectId)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def altSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def alternatePrefix (self, *args, **kwargs)-> str :
      '''alternatePrefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternatePrefix(class PyDbDimension {lvalue})'''
    ...
    def alternateSuffix (self, *args, **kwargs)-> str :
      '''alternateSuffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternateSuffix(class PyDbDimension {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def blockTransform (self, *args, **kwargs)-> Matrix3d :
      '''blockTransform( (Dimension)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbDimension {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> RadialDimension :
      '''cast( (RxObject)arg1) -> RadialDimension :

    C++ signature :
        class PyDbRadialDimension cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def center (self, *args, **kwargs)-> Point3d :
      '''center( (RadialDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d center(class PyDbRadialDimension {lvalue})'''
    ...
    def centerMarkSize (self, *args, **kwargs)-> float :
      '''centerMarkSize( (Dimension)arg1) -> float :

    C++ signature :
        double centerMarkSize(class PyDbDimension {lvalue})'''
    ...
    def chordPoint (self, *args, **kwargs)-> Point3d :
      '''chordPoint( (RadialDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d chordPoint(class PyDbRadialDimension {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> RadialDimension :
      '''cloneFrom( (RxObject)arg1) -> RadialDimension :

    C++ signature :
        class PyDbRadialDimension cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self, *args, **kwargs)-> ObjectId :
      '''dimBlockId( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimBlockId(class PyDbDimension {lvalue})'''
    ...
    def dimBlockPosition (self, *args, **kwargs)-> Point3d :
      '''dimBlockPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimBlockPosition(class PyDbDimension {lvalue})'''
    ...
    def dimExt1Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt1Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt1Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimExt2Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt2Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt2Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimLineLinetype (self, *args, **kwargs)-> ObjectId :
      '''dimLineLinetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimLineLinetype(class PyDbDimension {lvalue})'''
    ...
    def dimensionStyle (self, *args, **kwargs)-> ObjectId :
      '''dimensionStyle( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimensionStyle(class PyDbDimension {lvalue})'''
    ...
    def dimensionText (self, *args, **kwargs)-> str :
      '''dimensionText( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dimensionText(class PyDbDimension {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def elevation (self, *args, **kwargs)-> float :
      '''elevation( (Dimension)arg1) -> float :

    C++ signature :
        double elevation(class PyDbDimension {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extArcEndAngle (self, *args, **kwargs)-> float :
      '''extArcEndAngle( (RadialDimension)arg1) -> float :

    C++ signature :
        double extArcEndAngle(class PyDbRadialDimension {lvalue})'''
    ...
    def extArcStartAngle (self, *args, **kwargs)-> float :
      '''extArcStartAngle( (RadialDimension)arg1) -> float :

    C++ signature :
        double extArcStartAngle(class PyDbRadialDimension {lvalue})'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fieldFromMText (self, *args, **kwargs)-> ErrorStatus :
      '''fieldFromMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldFromMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def fieldToMText (self, *args, **kwargs)-> ErrorStatus :
      '''fieldToMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldToMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self, *args, **kwargs)-> ErrorStatus :
      '''generateLayout( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus generateLayout(class PyDbDimension {lvalue})'''
    ...
    def getArrowFirstIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowFirstIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowFirstIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getArrowSecondIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowSecondIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowSecondIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDimstyleData (self, *args, **kwargs)-> DimStyleTableRecord :
      '''getDimstyleData( (Dimension)arg1) -> DimStyleTableRecord :

    C++ signature :
        class PyDbDimStyleTableRecord getDimstyleData(class PyDbDimension {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def horizontalRotation (self, *args, **kwargs)-> float :
      '''horizontalRotation( (Dimension)arg1) -> float :

    C++ signature :
        double horizontalRotation(class PyDbDimension {lvalue})'''
    ...
    def inspection (self, *args, **kwargs)-> bool :
      '''inspection( (Dimension)arg1) -> bool :

    C++ signature :
        bool inspection(class PyDbDimension {lvalue})'''
    ...
    def inspectionFrame (self, *args, **kwargs)-> int :
      '''inspectionFrame( (Dimension)arg1) -> int :

    C++ signature :
        int inspectionFrame(class PyDbDimension {lvalue})'''
    ...
    def inspectionLabel (self, *args, **kwargs)-> str :
      '''inspectionLabel( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > inspectionLabel(class PyDbDimension {lvalue})'''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self, *args, **kwargs)-> bool :
      '''isConstraintDynamic( (Dimension)arg1) -> bool :

    C++ signature :
        bool isConstraintDynamic(class PyDbDimension {lvalue})'''
    ...
    def isConstraintObject (self, *args, **kwargs)-> tuple :
      '''isConstraintObject( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isConstraintObject(class PyDbDimension {lvalue})'''
    ...
    def isDynamicDimension (self, *args, **kwargs)-> bool :
      '''isDynamicDimension( (Dimension)arg1) -> bool :

    C++ signature :
        bool isDynamicDimension(class PyDbDimension {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self, *args, **kwargs)-> bool :
      '''isHorizontalRefTextRotation( (Dimension)arg1) -> bool :

    C++ signature :
        bool isHorizontalRefTextRotation(class PyDbDimension {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self, *args, **kwargs)-> bool :
      '''isUsingDefaultTextPosition( (Dimension)arg1) -> bool :

    C++ signature :
        bool isUsingDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def leaderLength (self, *args, **kwargs)-> float :
      '''leaderLength( (RadialDimension)arg1) -> float :

    C++ signature :
        double leaderLength(class PyDbRadialDimension {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def measurement (self, *args, **kwargs)-> float :
      '''measurement( (Dimension)arg1) -> float :

    C++ signature :
        double measurement(class PyDbDimension {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Dimension)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbDimension {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def prefix (self, *args, **kwargs)-> str :
      '''prefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > prefix(class PyDbDimension {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recomputeDimBlock (self, *args, **kwargs)-> ErrorStatus :
      '''recomputeDimBlock( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue})

recomputeDimBlock( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue},bool)'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removeTextField (self, *args, **kwargs)-> ErrorStatus :
      '''removeTextField( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeTextField(class PyDbDimension {lvalue})'''
    ...
    def resetTextDefinedSize (self, *args, **kwargs)-> None :
      '''resetTextDefinedSize( (Dimension)arg1) -> None :

    C++ signature :
        void resetTextDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def setAltSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAlternatePrefix (self, *args, **kwargs)-> ErrorStatus :
      '''setAlternatePrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternatePrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAlternateSuffix (self, *args, **kwargs)-> ErrorStatus :
      '''setAlternateSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternateSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setArrowFirstIsFlipped (self, *args, **kwargs)-> ErrorStatus :
      '''setArrowFirstIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowFirstIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setArrowSecondIsFlipped (self, *args, **kwargs)-> ErrorStatus :
      '''setArrowSecondIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowSecondIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setCenter (self, *args, **kwargs)-> ErrorStatus :
      '''setCenter( (RadialDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCenter(class PyDbRadialDimension {lvalue},class AcGePoint3d)'''
    ...
    def setChordPoint (self, *args, **kwargs)-> ErrorStatus :
      '''setChordPoint( (RadialDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setChordPoint(class PyDbRadialDimension {lvalue},class AcGePoint3d)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setConstraintDynamic (self, *args, **kwargs)-> ErrorStatus :
      '''setConstraintDynamic( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setConstraintDynamic(class PyDbDimension {lvalue},bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDimBlockId (self, *args, **kwargs)-> ErrorStatus :
      '''setDimBlockId( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockId(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimBlockPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setDimBlockPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimExt1Linetype (self, *args, **kwargs)-> ErrorStatus :
      '''setDimExt1Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt1Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimExt2Linetype (self, *args, **kwargs)-> ErrorStatus :
      '''setDimExt2Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt2Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimLineLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setDimLineLinetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimLineLinetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setDimensionStyle( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionStyle(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionText (self, *args, **kwargs)-> ErrorStatus :
      '''setDimensionText( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionText(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDimstyleData (self, *args, **kwargs)-> ErrorStatus :
      '''setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self, *args, **kwargs)-> ErrorStatus :
      '''setDynamicDimension( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDynamicDimension(class PyDbDimension {lvalue},bool)'''
    ...
    def setElevation (self, *args, **kwargs)-> ErrorStatus :
      '''setElevation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setElevation(class PyDbDimension {lvalue},double)'''
    ...
    def setExtArcEndAngle (self, *args, **kwargs)-> ErrorStatus :
      '''setExtArcEndAngle( (RadialDimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setExtArcEndAngle(class PyDbRadialDimension {lvalue},double)'''
    ...
    def setExtArcStartAngle (self, *args, **kwargs)-> ErrorStatus :
      '''setExtArcStartAngle( (RadialDimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setExtArcStartAngle(class PyDbRadialDimension {lvalue},double)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setHorizontalRefTextRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setHorizontalRefTextRotation( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRefTextRotation(class PyDbDimension {lvalue},bool)'''
    ...
    def setHorizontalRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setHorizontalRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setInspection (self, *args, **kwargs)-> ErrorStatus :
      '''setInspection( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspection(class PyDbDimension {lvalue},bool)'''
    ...
    def setInspectionFrame (self, *args, **kwargs)-> ErrorStatus :
      '''setInspectionFrame( (Dimension)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionFrame(class PyDbDimension {lvalue},int)'''
    ...
    def setInspectionLabel (self, *args, **kwargs)-> ErrorStatus :
      '''setInspectionLabel( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionLabel(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLeaderLength (self, *args, **kwargs)-> ErrorStatus :
      '''setLeaderLength( (RadialDimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLeaderLength(class PyDbRadialDimension {lvalue},double)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs)-> ErrorStatus :
      '''setNormal( (Dimension)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbDimension {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, *args, **kwargs)-> ErrorStatus :
      '''setPrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setShouldParticipateInOPM (self, *args, **kwargs)-> None :
      '''setShouldParticipateInOPM( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShouldParticipateInOPM(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuffix (self, *args, **kwargs)-> ErrorStatus :
      '''setSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setSuppressAngularTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressAngularTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressAngularTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setTextAttachment (self, *args, **kwargs)-> ErrorStatus :
      '''setTextAttachment( (Dimension)arg1, (MTextAttachmentPoint)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAttachment(class PyDbDimension {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setTextDefinedSize (self, *args, **kwargs)-> None :
      '''setTextDefinedSize( (Dimension)arg1, (float)arg2, (float)arg3) -> None :

    C++ signature :
        void setTextDefinedSize(class PyDbDimension {lvalue},double,double)'''
    ...
    def setTextLineSpacingFactor (self, *args, **kwargs)-> ErrorStatus :
      '''setTextLineSpacingFactor( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingFactor(class PyDbDimension {lvalue},double)'''
    ...
    def setTextLineSpacingStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setTextLineSpacingStyle( (Dimension)arg1, (LineSpacingStyle)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingStyle(class PyDbDimension {lvalue},enum AcDb::LineSpacingStyle)'''
    ...
    def setTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setTextPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setTextRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setTextRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setToleranceSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setUsingDefaultTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setUsingDefaultTextPosition( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUsingDefaultTextPosition(class PyDbDimension {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def shouldParticipateInOPM (self, *args, **kwargs)-> bool :
      '''shouldParticipateInOPM( (Dimension)arg1) -> bool :

    C++ signature :
        bool shouldParticipateInOPM(class PyDbDimension {lvalue})'''
    ...
    def suffix (self, *args, **kwargs)-> str :
      '''suffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > suffix(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroFeet (self, *args, **kwargs)-> bool :
      '''suppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroInches (self, *args, **kwargs)-> bool :
      '''suppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def textAttachment (self, *args, **kwargs)-> MTextAttachmentPoint :
      '''textAttachment( (Dimension)arg1) -> MTextAttachmentPoint :

    C++ signature :
        enum AcDbMText::AttachmentPoint textAttachment(class PyDbDimension {lvalue})'''
    ...
    def textDefinedSize (self, *args, **kwargs)-> tuple :
      '''textDefinedSize( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple textDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingFactor (self, *args, **kwargs)-> float :
      '''textLineSpacingFactor( (Dimension)arg1) -> float :

    C++ signature :
        double textLineSpacingFactor(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingStyle (self, *args, **kwargs)-> LineSpacingStyle :
      '''textLineSpacingStyle( (Dimension)arg1) -> LineSpacingStyle :

    C++ signature :
        enum AcDb::LineSpacingStyle textLineSpacingStyle(class PyDbDimension {lvalue})'''
    ...
    def textPosition (self, *args, **kwargs)-> Point3d :
      '''textPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d textPosition(class PyDbDimension {lvalue})'''
    ...
    def textRotation (self, *args, **kwargs)-> float :
      '''textRotation( (Dimension)arg1) -> float :

    C++ signature :
        double textRotation(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def useDefaultTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''useDefaultTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def useSetTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''useSetTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useSetTextPosition(class PyDbDimension {lvalue})'''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class RadialDimensionLarge:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (float)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,double)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (float)arg6, (str)arg7) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (Point3d)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (float)arg6, (str)arg7, (ObjectId)arg8) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def altSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def alternatePrefix (self, *args, **kwargs)-> str :
      '''alternatePrefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternatePrefix(class PyDbDimension {lvalue})'''
    ...
    def alternateSuffix (self, *args, **kwargs)-> str :
      '''alternateSuffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternateSuffix(class PyDbDimension {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def blockTransform (self, *args, **kwargs)-> Matrix3d :
      '''blockTransform( (Dimension)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbDimension {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> RadialDimensionLarge :
      '''cast( (RxObject)arg1) -> RadialDimensionLarge :

    C++ signature :
        class PyDbRadialDimensionLarge cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def center (self, *args, **kwargs)-> Point3d :
      '''center( (RadialDimensionLarge)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d center(class PyDbRadialDimensionLarge {lvalue})'''
    ...
    def centerMarkSize (self, *args, **kwargs)-> float :
      '''centerMarkSize( (Dimension)arg1) -> float :

    C++ signature :
        double centerMarkSize(class PyDbDimension {lvalue})'''
    ...
    def chordPoint (self, *args, **kwargs)-> Point3d :
      '''chordPoint( (RadialDimensionLarge)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d chordPoint(class PyDbRadialDimensionLarge {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> RadialDimensionLarge :
      '''cloneFrom( (RxObject)arg1) -> RadialDimensionLarge :

    C++ signature :
        class PyDbRadialDimensionLarge cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self, *args, **kwargs)-> ObjectId :
      '''dimBlockId( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimBlockId(class PyDbDimension {lvalue})'''
    ...
    def dimBlockPosition (self, *args, **kwargs)-> Point3d :
      '''dimBlockPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimBlockPosition(class PyDbDimension {lvalue})'''
    ...
    def dimExt1Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt1Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt1Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimExt2Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt2Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt2Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimLineLinetype (self, *args, **kwargs)-> ObjectId :
      '''dimLineLinetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimLineLinetype(class PyDbDimension {lvalue})'''
    ...
    def dimensionStyle (self, *args, **kwargs)-> ObjectId :
      '''dimensionStyle( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimensionStyle(class PyDbDimension {lvalue})'''
    ...
    def dimensionText (self, *args, **kwargs)-> str :
      '''dimensionText( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dimensionText(class PyDbDimension {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def elevation (self, *args, **kwargs)-> float :
      '''elevation( (Dimension)arg1) -> float :

    C++ signature :
        double elevation(class PyDbDimension {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extArcEndAngle (self, *args, **kwargs)-> float :
      '''extArcEndAngle( (RadialDimensionLarge)arg1) -> float :

    C++ signature :
        double extArcEndAngle(class PyDbRadialDimensionLarge {lvalue})'''
    ...
    def extArcStartAngle (self, *args, **kwargs)-> float :
      '''extArcStartAngle( (RadialDimensionLarge)arg1) -> float :

    C++ signature :
        double extArcStartAngle(class PyDbRadialDimensionLarge {lvalue})'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fieldFromMText (self, *args, **kwargs)-> ErrorStatus :
      '''fieldFromMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldFromMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def fieldToMText (self, *args, **kwargs)-> ErrorStatus :
      '''fieldToMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldToMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self, *args, **kwargs)-> ErrorStatus :
      '''generateLayout( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus generateLayout(class PyDbDimension {lvalue})'''
    ...
    def getArrowFirstIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowFirstIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowFirstIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getArrowSecondIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowSecondIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowSecondIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDimstyleData (self, *args, **kwargs)-> DimStyleTableRecord :
      '''getDimstyleData( (Dimension)arg1) -> DimStyleTableRecord :

    C++ signature :
        class PyDbDimStyleTableRecord getDimstyleData(class PyDbDimension {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def horizontalRotation (self, *args, **kwargs)-> float :
      '''horizontalRotation( (Dimension)arg1) -> float :

    C++ signature :
        double horizontalRotation(class PyDbDimension {lvalue})'''
    ...
    def inspection (self, *args, **kwargs)-> bool :
      '''inspection( (Dimension)arg1) -> bool :

    C++ signature :
        bool inspection(class PyDbDimension {lvalue})'''
    ...
    def inspectionFrame (self, *args, **kwargs)-> int :
      '''inspectionFrame( (Dimension)arg1) -> int :

    C++ signature :
        int inspectionFrame(class PyDbDimension {lvalue})'''
    ...
    def inspectionLabel (self, *args, **kwargs)-> str :
      '''inspectionLabel( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > inspectionLabel(class PyDbDimension {lvalue})'''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self, *args, **kwargs)-> bool :
      '''isConstraintDynamic( (Dimension)arg1) -> bool :

    C++ signature :
        bool isConstraintDynamic(class PyDbDimension {lvalue})'''
    ...
    def isConstraintObject (self, *args, **kwargs)-> tuple :
      '''isConstraintObject( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isConstraintObject(class PyDbDimension {lvalue})'''
    ...
    def isDynamicDimension (self, *args, **kwargs)-> bool :
      '''isDynamicDimension( (Dimension)arg1) -> bool :

    C++ signature :
        bool isDynamicDimension(class PyDbDimension {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self, *args, **kwargs)-> bool :
      '''isHorizontalRefTextRotation( (Dimension)arg1) -> bool :

    C++ signature :
        bool isHorizontalRefTextRotation(class PyDbDimension {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self, *args, **kwargs)-> bool :
      '''isUsingDefaultTextPosition( (Dimension)arg1) -> bool :

    C++ signature :
        bool isUsingDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def jogAngle (self, *args, **kwargs)-> float :
      '''jogAngle( (RadialDimensionLarge)arg1) -> float :

    C++ signature :
        double jogAngle(class PyDbRadialDimensionLarge {lvalue})'''
    ...
    def jogPoint (self, *args, **kwargs)-> Point3d :
      '''jogPoint( (RadialDimensionLarge)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d jogPoint(class PyDbRadialDimensionLarge {lvalue})'''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def measurement (self, *args, **kwargs)-> float :
      '''measurement( (Dimension)arg1) -> float :

    C++ signature :
        double measurement(class PyDbDimension {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Dimension)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbDimension {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def overrideCenter (self, *args, **kwargs)-> Point3d :
      '''overrideCenter( (RadialDimensionLarge)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d overrideCenter(class PyDbRadialDimensionLarge {lvalue})'''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def prefix (self, *args, **kwargs)-> str :
      '''prefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > prefix(class PyDbDimension {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recomputeDimBlock (self, *args, **kwargs)-> ErrorStatus :
      '''recomputeDimBlock( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue})

recomputeDimBlock( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue},bool)'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removeTextField (self, *args, **kwargs)-> ErrorStatus :
      '''removeTextField( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeTextField(class PyDbDimension {lvalue})'''
    ...
    def resetTextDefinedSize (self, *args, **kwargs)-> None :
      '''resetTextDefinedSize( (Dimension)arg1) -> None :

    C++ signature :
        void resetTextDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def setAltSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAlternatePrefix (self, *args, **kwargs)-> ErrorStatus :
      '''setAlternatePrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternatePrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAlternateSuffix (self, *args, **kwargs)-> ErrorStatus :
      '''setAlternateSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternateSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setArrowFirstIsFlipped (self, *args, **kwargs)-> ErrorStatus :
      '''setArrowFirstIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowFirstIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setArrowSecondIsFlipped (self, *args, **kwargs)-> ErrorStatus :
      '''setArrowSecondIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowSecondIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setCenter (self, *args, **kwargs)-> ErrorStatus :
      '''setCenter( (RadialDimensionLarge)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCenter(class PyDbRadialDimensionLarge {lvalue},class AcGePoint3d)'''
    ...
    def setChordPoint (self, *args, **kwargs)-> ErrorStatus :
      '''setChordPoint( (RadialDimensionLarge)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setChordPoint(class PyDbRadialDimensionLarge {lvalue},class AcGePoint3d)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setConstraintDynamic (self, *args, **kwargs)-> ErrorStatus :
      '''setConstraintDynamic( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setConstraintDynamic(class PyDbDimension {lvalue},bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDimBlockId (self, *args, **kwargs)-> ErrorStatus :
      '''setDimBlockId( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockId(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimBlockPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setDimBlockPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimExt1Linetype (self, *args, **kwargs)-> ErrorStatus :
      '''setDimExt1Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt1Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimExt2Linetype (self, *args, **kwargs)-> ErrorStatus :
      '''setDimExt2Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt2Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimLineLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setDimLineLinetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimLineLinetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setDimensionStyle( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionStyle(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionText (self, *args, **kwargs)-> ErrorStatus :
      '''setDimensionText( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionText(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDimstyleData (self, *args, **kwargs)-> ErrorStatus :
      '''setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self, *args, **kwargs)-> ErrorStatus :
      '''setDynamicDimension( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDynamicDimension(class PyDbDimension {lvalue},bool)'''
    ...
    def setElevation (self, *args, **kwargs)-> ErrorStatus :
      '''setElevation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setElevation(class PyDbDimension {lvalue},double)'''
    ...
    def setExtArcEndAngle (self, *args, **kwargs)-> ErrorStatus :
      '''setExtArcEndAngle( (RadialDimensionLarge)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setExtArcEndAngle(class PyDbRadialDimensionLarge {lvalue},double)'''
    ...
    def setExtArcStartAngle (self, *args, **kwargs)-> ErrorStatus :
      '''setExtArcStartAngle( (RadialDimensionLarge)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setExtArcStartAngle(class PyDbRadialDimensionLarge {lvalue},double)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setHorizontalRefTextRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setHorizontalRefTextRotation( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRefTextRotation(class PyDbDimension {lvalue},bool)'''
    ...
    def setHorizontalRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setHorizontalRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setInspection (self, *args, **kwargs)-> ErrorStatus :
      '''setInspection( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspection(class PyDbDimension {lvalue},bool)'''
    ...
    def setInspectionFrame (self, *args, **kwargs)-> ErrorStatus :
      '''setInspectionFrame( (Dimension)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionFrame(class PyDbDimension {lvalue},int)'''
    ...
    def setInspectionLabel (self, *args, **kwargs)-> ErrorStatus :
      '''setInspectionLabel( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionLabel(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setJogAngle (self, *args, **kwargs)-> ErrorStatus :
      '''setJogAngle( (RadialDimensionLarge)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setJogAngle(class PyDbRadialDimensionLarge {lvalue},double)'''
    ...
    def setJogPoint (self, *args, **kwargs)-> ErrorStatus :
      '''setJogPoint( (RadialDimensionLarge)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setJogPoint(class PyDbRadialDimensionLarge {lvalue},class AcGePoint3d)'''
    ...
    def setJogPointPP (self, *args, **kwargs)-> ErrorStatus :
      '''setJogPointPP( (RadialDimensionLarge)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setJogPointPP(class PyDbRadialDimensionLarge {lvalue},class AcGePoint3d)'''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs)-> ErrorStatus :
      '''setNormal( (Dimension)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbDimension {lvalue},class AcGeVector3d)'''
    ...
    def setOverrideCenter (self, *args, **kwargs)-> ErrorStatus :
      '''setOverrideCenter( (RadialDimensionLarge)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOverrideCenter(class PyDbRadialDimensionLarge {lvalue},class AcGePoint3d)'''
    ...
    def setOverrideCenterPP (self, *args, **kwargs)-> ErrorStatus :
      '''setOverrideCenterPP( (RadialDimensionLarge)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOverrideCenterPP(class PyDbRadialDimensionLarge {lvalue},class AcGePoint3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, *args, **kwargs)-> ErrorStatus :
      '''setPrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setShouldParticipateInOPM (self, *args, **kwargs)-> None :
      '''setShouldParticipateInOPM( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShouldParticipateInOPM(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuffix (self, *args, **kwargs)-> ErrorStatus :
      '''setSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setSuppressAngularTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressAngularTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressAngularTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setTextAttachment (self, *args, **kwargs)-> ErrorStatus :
      '''setTextAttachment( (Dimension)arg1, (MTextAttachmentPoint)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAttachment(class PyDbDimension {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setTextDefinedSize (self, *args, **kwargs)-> None :
      '''setTextDefinedSize( (Dimension)arg1, (float)arg2, (float)arg3) -> None :

    C++ signature :
        void setTextDefinedSize(class PyDbDimension {lvalue},double,double)'''
    ...
    def setTextLineSpacingFactor (self, *args, **kwargs)-> ErrorStatus :
      '''setTextLineSpacingFactor( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingFactor(class PyDbDimension {lvalue},double)'''
    ...
    def setTextLineSpacingStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setTextLineSpacingStyle( (Dimension)arg1, (LineSpacingStyle)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingStyle(class PyDbDimension {lvalue},enum AcDb::LineSpacingStyle)'''
    ...
    def setTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setTextPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setTextPositionPP (self, *args, **kwargs)-> ErrorStatus :
      '''setTextPositionPP( (RadialDimensionLarge)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextPositionPP(class PyDbRadialDimensionLarge {lvalue},class AcGePoint3d)'''
    ...
    def setTextRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setTextRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setToleranceSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setUsingDefaultTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setUsingDefaultTextPosition( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUsingDefaultTextPosition(class PyDbDimension {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def shouldParticipateInOPM (self, *args, **kwargs)-> bool :
      '''shouldParticipateInOPM( (Dimension)arg1) -> bool :

    C++ signature :
        bool shouldParticipateInOPM(class PyDbDimension {lvalue})'''
    ...
    def suffix (self, *args, **kwargs)-> str :
      '''suffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > suffix(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroFeet (self, *args, **kwargs)-> bool :
      '''suppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroInches (self, *args, **kwargs)-> bool :
      '''suppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def textAttachment (self, *args, **kwargs)-> MTextAttachmentPoint :
      '''textAttachment( (Dimension)arg1) -> MTextAttachmentPoint :

    C++ signature :
        enum AcDbMText::AttachmentPoint textAttachment(class PyDbDimension {lvalue})'''
    ...
    def textDefinedSize (self, *args, **kwargs)-> tuple :
      '''textDefinedSize( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple textDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingFactor (self, *args, **kwargs)-> float :
      '''textLineSpacingFactor( (Dimension)arg1) -> float :

    C++ signature :
        double textLineSpacingFactor(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingStyle (self, *args, **kwargs)-> LineSpacingStyle :
      '''textLineSpacingStyle( (Dimension)arg1) -> LineSpacingStyle :

    C++ signature :
        enum AcDb::LineSpacingStyle textLineSpacingStyle(class PyDbDimension {lvalue})'''
    ...
    def textPosition (self, *args, **kwargs)-> Point3d :
      '''textPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d textPosition(class PyDbDimension {lvalue})'''
    ...
    def textRotation (self, *args, **kwargs)-> float :
      '''textRotation( (Dimension)arg1) -> float :

    C++ signature :
        double textRotation(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def useDefaultTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''useDefaultTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def useSetTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''useSetTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useSetTextPosition(class PyDbDimension {lvalue})'''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class RasterImage:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def brightness (self, *args, **kwargs)-> int :
      '''brightness( (RasterImage)arg1) -> int :

    C++ signature :
        signed char brightness(class PyDbRasterImage {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> RasterImage :
      '''cast( (RxObject)arg1) -> RasterImage :

    C++ signature :
        class PyDbRasterImage cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def clipBoundary (self, *args, **kwargs)-> list :
      '''clipBoundary( (RasterImage)arg1) -> list :

    C++ signature :
        class boost::python::list clipBoundary(class PyDbRasterImage {lvalue})'''
    ...
    def clipBoundaryType (self, *args, **kwargs)-> ClipBoundaryType :
      '''clipBoundaryType( (RasterImage)arg1) -> ClipBoundaryType :

    C++ signature :
        enum AcDbRasterImage::ClipBoundaryType clipBoundaryType(class PyDbRasterImage {lvalue})'''
    ...
    def cloneFrom (self, *args, **kwargs)-> RasterImage :
      '''cloneFrom( (RxObject)arg1) -> RasterImage :

    C++ signature :
        class PyDbRasterImage cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def contrast (self, *args, **kwargs)-> int :
      '''contrast( (RasterImage)arg1) -> int :

    C++ signature :
        signed char contrast(class PyDbRasterImage {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fade (self, *args, **kwargs)-> int :
      '''fade( (RasterImage)arg1) -> int :

    C++ signature :
        signed char fade(class PyDbRasterImage {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getOrientation (self, *args, **kwargs)-> None :
      '''getOrientation( (RasterImage)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> None :

    C++ signature :
        void getOrientation(class PyDbRasterImage {lvalue},class AcGePoint3d {lvalue},class AcGeVector3d {lvalue},class AcGeVector3d {lvalue})'''
    ...
    def getPixelToModelTransform (self, *args, **kwargs)-> Matrix3d :
      '''getPixelToModelTransform( (RasterImage)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d getPixelToModelTransform(class PyDbRasterImage {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def getVertices (self, *args, **kwargs)-> list :
      '''getVertices( (RasterImage)arg1) -> list :

    C++ signature :
        class boost::python::list getVertices(class PyDbRasterImage {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def height (self, *args, **kwargs)-> float :
      '''height( (RasterImage)arg1) -> float :

    C++ signature :
        double height(class PyDbRasterImage {lvalue})'''
    ...
    def imageDefId (self, *args, **kwargs)-> ObjectId :
      '''imageDefId( (RasterImage)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId imageDefId(class PyDbRasterImage {lvalue})'''
    ...
    def imageHeight (self, *args, **kwargs)-> float :
      '''imageHeight( (RasterImage)arg1) -> float :

    C++ signature :
        double imageHeight(class PyDbRasterImage {lvalue})'''
    ...
    def imageSize (self, *args, **kwargs)-> Vector2d :
      '''imageSize( (RasterImage)arg1) -> Vector2d :

    C++ signature :
        class AcGeVector2d imageSize(class PyDbRasterImage {lvalue})

imageSize( (RasterImage)arg1, (bool)arg2) -> Vector2d :

    C++ signature :
        class AcGeVector2d imageSize(class PyDbRasterImage {lvalue},bool)'''
    ...
    def imageWidth (self, *args, **kwargs)-> float :
      '''imageWidth( (RasterImage)arg1) -> float :

    C++ signature :
        double imageWidth(class PyDbRasterImage {lvalue})'''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isClipInverted (self, *args, **kwargs)-> bool :
      '''isClipInverted( (RasterImage)arg1) -> bool :

    C++ signature :
        bool isClipInverted(class PyDbRasterImage {lvalue})'''
    ...
    def isClipped (self, *args, **kwargs)-> bool :
      '''isClipped( (RasterImage)arg1) -> bool :

    C++ signature :
        bool isClipped(class PyDbRasterImage {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isImageShown (self, *args, **kwargs)-> bool :
      '''isImageShown( (RasterImage)arg1) -> bool :

    C++ signature :
        bool isImageShown(class PyDbRasterImage {lvalue})'''
    ...
    def isImageTransparent (self, *args, **kwargs)-> bool :
      '''isImageTransparent( (RasterImage)arg1) -> bool :

    C++ signature :
        bool isImageTransparent(class PyDbRasterImage {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isSetDisplayOpt (self, *args, **kwargs)-> bool :
      '''isSetDisplayOpt( (RasterImage)arg1, (ImageDisplayOpt)arg2) -> bool :

    C++ signature :
        bool isSetDisplayOpt(class PyDbRasterImage {lvalue},enum AcDbRasterImage::ImageDisplayOpt)'''
    ...
    def isShownClipped (self, *args, **kwargs)-> bool :
      '''isShownClipped( (RasterImage)arg1) -> bool :

    C++ signature :
        bool isShownClipped(class PyDbRasterImage {lvalue})'''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def position (self, *args, **kwargs)-> Point3d :
      '''position( (RasterImage)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDbRasterImage {lvalue})'''
    ...
    def reactorId (self, *args, **kwargs)-> ObjectId :
      '''reactorId( (RasterImage)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId reactorId(class PyDbRasterImage {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def rotation (self, *args, **kwargs)-> float :
      '''rotation( (RasterImage)arg1) -> float :

    C++ signature :
        double rotation(class PyDbRasterImage {lvalue})'''
    ...
    def scale (self, *args, **kwargs)-> Vector2d :
      '''scale( (RasterImage)arg1) -> Vector2d :

    C++ signature :
        class AcGeVector2d scale(class PyDbRasterImage {lvalue})'''
    ...
    def setBrightness (self, *args, **kwargs)-> ErrorStatus :
      '''setBrightness( (RasterImage)arg1, (MlineJustification)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBrightness(class PyDbRasterImage {lvalue},signed char)'''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setClipBoundaryToWholeImage (self, *args, **kwargs)-> ErrorStatus :
      '''setClipBoundaryToWholeImage( (RasterImage)arg1, (Vector2d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setClipBoundaryToWholeImage(class PyDbRasterImage {lvalue},class AcGeVector2d {lvalue})'''
    ...
    def setClipInverted (self, *args, **kwargs)-> None :
      '''setClipInverted( (RasterImage)arg1, (bool)arg2) -> None :

    C++ signature :
        void setClipInverted(class PyDbRasterImage {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setContrast (self, *args, **kwargs)-> ErrorStatus :
      '''setContrast( (RasterImage)arg1, (MlineJustification)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setContrast(class PyDbRasterImage {lvalue},signed char)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDisplayOpt (self, *args, **kwargs)-> None :
      '''setDisplayOpt( (RasterImage)arg1, (ImageDisplayOpt)arg2, (bool)arg3) -> None :

    C++ signature :
        void setDisplayOpt(class PyDbRasterImage {lvalue},enum AcDbRasterImage::ImageDisplayOpt,bool)'''
    ...
    def setFade (self, *args, **kwargs)-> ErrorStatus :
      '''setFade( (RasterImage)arg1, (MlineJustification)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFade(class PyDbRasterImage {lvalue},signed char)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setHeight (self, *args, **kwargs)-> ErrorStatus :
      '''setHeight( (RasterImage)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHeight(class PyDbRasterImage {lvalue},double)'''
    ...
    def setImageDefId (self, *args, **kwargs)-> ErrorStatus :
      '''setImageDefId( (RasterImage)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setImageDefId(class PyDbRasterImage {lvalue},class PyDbObjectId)'''
    ...
    def setImageTransparency (self, *args, **kwargs)-> None :
      '''setImageTransparency( (RasterImage)arg1, (bool)arg2) -> None :

    C++ signature :
        void setImageTransparency(class PyDbRasterImage {lvalue},bool)'''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOrientation (self, *args, **kwargs)-> bool :
      '''setOrientation( (RasterImage)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> bool :

    C++ signature :
        bool setOrientation(class PyDbRasterImage {lvalue},class AcGePoint3d,class AcGeVector3d,class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReactorId (self, *args, **kwargs)-> None :
      '''setReactorId( (RasterImage)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void setReactorId(class PyDbRasterImage {lvalue},class PyDbObjectId)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setRotation( (RasterImage)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRotation(class PyDbRasterImage {lvalue},double)'''
    ...
    def setShowClipped (self, *args, **kwargs)-> None :
      '''setShowClipped( (RasterImage)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShowClipped(class PyDbRasterImage {lvalue},bool)'''
    ...
    def setShowImage (self, *args, **kwargs)-> None :
      '''setShowImage( (RasterImage)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShowImage(class PyDbRasterImage {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setWidth (self, *args, **kwargs)-> ErrorStatus :
      '''setWidth( (RasterImage)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setWidth(class PyDbRasterImage {lvalue},double)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def width (self, *args, **kwargs)-> float :
      '''width( (RasterImage)arg1) -> float :

    C++ signature :
        double width(class PyDbRasterImage {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class RasterImageDef:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def activeFileName (self, *args, **kwargs)-> str :
      '''activeFileName( (RasterImageDef)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > activeFileName(class PyDbRasterImageDef {lvalue})'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> RasterImageDef :
      '''cast( (RxObject)arg1) -> RasterImageDef :

    C++ signature :
        class PyDbRasterImageDef cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> RasterImageDef :
      '''cloneFrom( (RxObject)arg1) -> RasterImageDef :

    C++ signature :
        class PyDbRasterImageDef cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def createImageDictionary (self, *args, **kwargs)-> ObjectId :
      '''createImageDictionary( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId createImageDictionary(class PyDbDatabase {lvalue})'''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def embed (self, *args, **kwargs)-> ErrorStatus :
      '''embed( (RasterImageDef)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus embed(class PyDbRasterImageDef {lvalue})'''
    ...
    def entityCount (self, *args, **kwargs)-> int :
      '''entityCount( (RasterImageDef)arg1) -> int :

    C++ signature :
        int entityCount(class PyDbRasterImageDef {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fileType (self, *args, **kwargs)-> str :
      '''fileType( (RasterImageDef)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > fileType(class PyDbRasterImageDef {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def imageDictionary (self, *args, **kwargs)-> ObjectId :
      '''imageDictionary( (Database)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId imageDictionary(class PyDbDatabase {lvalue})'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEmbedded (self, *args, **kwargs)-> bool :
      '''isEmbedded( (RasterImageDef)arg1) -> bool :

    C++ signature :
        bool isEmbedded(class PyDbRasterImageDef {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isLoaded (self, *args, **kwargs)-> bool :
      '''isLoaded( (RasterImageDef)arg1) -> bool :

    C++ signature :
        bool isLoaded(class PyDbRasterImageDef {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def load (self, *args, **kwargs)-> ErrorStatus :
      '''load( (RasterImageDef)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus load(class PyDbRasterImageDef {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def resolutionMMPerPixel (self, *args, **kwargs)-> Vector2d :
      '''resolutionMMPerPixel( (RasterImageDef)arg1) -> Vector2d :

    C++ signature :
        class AcGeVector2d resolutionMMPerPixel(class PyDbRasterImageDef {lvalue})'''
    ...
    def resolutionUnits (self, *args, **kwargs)-> ImageUnits :
      '''resolutionUnits( (RasterImageDef)arg1) -> ImageUnits :

    C++ signature :
        enum AcDbRasterImageDef::Units resolutionUnits(class PyDbRasterImageDef {lvalue})'''
    ...
    def searchForActivePath (self, *args, **kwargs)-> str :
      '''searchForActivePath( (RasterImageDef)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > searchForActivePath(class PyDbRasterImageDef {lvalue})'''
    ...
    def setActiveFileName (self, *args, **kwargs)-> ErrorStatus :
      '''setActiveFileName( (RasterImageDef)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setActiveFileName(class PyDbRasterImageDef {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setResolutionMMPerPixel (self, *args, **kwargs)-> ErrorStatus :
      '''setResolutionMMPerPixel( (RasterImageDef)arg1, (Vector2d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setResolutionMMPerPixel(class PyDbRasterImageDef {lvalue},class AcGeVector2d)'''
    ...
    def setResolutionUnits (self, *args, **kwargs)-> None :
      '''setResolutionUnits( (RasterImageDef)arg1, (ImageUnits)arg2) -> None :

    C++ signature :
        void setResolutionUnits(class PyDbRasterImageDef {lvalue},enum AcDbRasterImageDef::Units)'''
    ...
    def setSourceFileName (self, *args, **kwargs)-> ErrorStatus :
      '''setSourceFileName( (RasterImageDef)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSourceFileName(class PyDbRasterImageDef {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def size (self, *args, **kwargs)-> Vector2d :
      '''size( (RasterImageDef)arg1) -> Vector2d :

    C++ signature :
        class AcGeVector2d size(class PyDbRasterImageDef {lvalue})'''
    ...
    def sourceFileName (self, *args, **kwargs)-> str :
      '''sourceFileName( (RasterImageDef)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > sourceFileName(class PyDbRasterImageDef {lvalue})'''
    ...
    def suggestName (self, *args, **kwargs)-> str :
      '''suggestName( (Dictionary)arg1, (str)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > suggestName(class PyDbDictionary {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def unload (self, *args, **kwargs)-> ErrorStatus :
      '''unload( (RasterImageDef)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus unload(class PyDbRasterImageDef {lvalue})

unload( (RasterImageDef)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus unload(class PyDbRasterImageDef {lvalue},bool)'''
    ...
    def updateEntities (self, *args, **kwargs)-> None :
      '''updateEntities( (RasterImageDef)arg1) -> None :

    C++ signature :
        void updateEntities(class PyDbRasterImageDef {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class RasterImageDefReactor:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> RasterImageDefReactor :
      '''cast( (RxObject)arg1) -> RasterImageDefReactor :

    C++ signature :
        class PyDbRasterImageDefReactor cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> RasterImageDefReactor :
      '''cloneFrom( (RxObject)arg1) -> RasterImageDefReactor :

    C++ signature :
        class PyDbRasterImageDefReactor cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setEnable (self, *args, **kwargs)-> None :
      '''setEnable( (bool)arg1) -> None :

    C++ signature :
        void setEnable(bool)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class RegAppTable:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def add (self, *args, **kwargs)-> ObjectId :
      '''add( (RegAppTable)arg1, (RegAppTableRecord)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId add(class PyDbRegAppTable {lvalue},class PyDbRegAppTableRecord)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> RegAppTable :
      '''cast( (RxObject)arg1) -> RegAppTable :

    C++ signature :
        class PyDbRegAppTable cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> RegAppTable :
      '''cloneFrom( (RxObject)arg1) -> RegAppTable :

    C++ signature :
        class PyDbRegAppTable cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getAt (self, *args, **kwargs)-> ObjectId :
      '''getAt( (SymbolTable)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getAt(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def has (self, *args, **kwargs)-> bool :
      '''has( (SymbolTable)arg1, (str)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

has( (SymbolTable)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class PyDbObjectId)'''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def recordIds (self, *args, **kwargs)-> list :
      '''recordIds( (SymbolTable)arg1) -> list :

    C++ signature :
        class boost::python::list recordIds(class PyDbSymbolTable {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def toDict (self, *args, **kwargs)-> dict :
      '''toDict( (SymbolTable)arg1) -> dict :

    C++ signature :
        class boost::python::dict toDict(class PyDbSymbolTable {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class RegAppTableRecord:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> RegAppTableRecord :
      '''cast( (RxObject)arg1) -> RegAppTableRecord :

    C++ signature :
        class PyDbRegAppTableRecord cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> RegAppTableRecord :
      '''cloneFrom( (RxObject)arg1) -> RegAppTableRecord :

    C++ signature :
        class PyDbRegAppTableRecord cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getName (self, *args, **kwargs)-> str :
      '''getName( (SymbolTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getName(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isDependent (self, *args, **kwargs)-> bool :
      '''isDependent( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isDependent(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isRenamable (self, *args, **kwargs)-> bool :
      '''isRenamable( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isRenamable(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isResolved (self, *args, **kwargs)-> bool :
      '''isResolved( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isResolved(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setName (self, *args, **kwargs)-> ErrorStatus :
      '''setName( (SymbolTableRecord)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setName(class PyDbSymbolTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class Region:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Region :
      '''cast( (RxObject)arg1) -> Region :

    C++ signature :
        class PyDbRegion cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Region :
      '''cloneFrom( (RxObject)arg1) -> Region :

    C++ signature :
        class PyDbRegion cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class RemapFileContext:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kAfterXrefResolution (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDrawingOpen (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kRasterResolution (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kXrefResolution (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class RevolvedSurface:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> RevolvedSurface :
      '''cast( (RxObject)arg1) -> RevolvedSurface :

    C++ signature :
        class PyDbRevolvedSurface cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> RevolvedSurface :
      '''cloneFrom( (RxObject)arg1) -> RevolvedSurface :

    C++ signature :
        class PyDbRevolvedSurface cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class RotatedDimension:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)

__init__( (object)arg1, (float)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,double,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d)

__init__( (object)arg1, (float)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (str)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,double,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (float)arg2, (Point3d)arg3, (Point3d)arg4, (Point3d)arg5, (str)arg6, (ObjectId)arg7) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,double,class AcGePoint3d,class AcGePoint3d,class AcGePoint3d,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def altSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def altToleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''altToleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool altToleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def alternatePrefix (self, *args, **kwargs)-> str :
      '''alternatePrefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternatePrefix(class PyDbDimension {lvalue})'''
    ...
    def alternateSuffix (self, *args, **kwargs)-> str :
      '''alternateSuffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > alternateSuffix(class PyDbDimension {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def blockTransform (self, *args, **kwargs)-> Matrix3d :
      '''blockTransform( (Dimension)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbDimension {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> RotatedDimension :
      '''cast( (RxObject)arg1) -> RotatedDimension :

    C++ signature :
        class PyDbRotatedDimension cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def centerMarkSize (self, *args, **kwargs)-> float :
      '''centerMarkSize( (Dimension)arg1) -> float :

    C++ signature :
        double centerMarkSize(class PyDbDimension {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> RotatedDimension :
      '''cloneFrom( (RxObject)arg1) -> RotatedDimension :

    C++ signature :
        class PyDbRotatedDimension cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dimBlockId (self, *args, **kwargs)-> ObjectId :
      '''dimBlockId( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimBlockId(class PyDbDimension {lvalue})'''
    ...
    def dimBlockPosition (self, *args, **kwargs)-> Point3d :
      '''dimBlockPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimBlockPosition(class PyDbDimension {lvalue})'''
    ...
    def dimExt1Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt1Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt1Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimExt2Linetype (self, *args, **kwargs)-> ObjectId :
      '''dimExt2Linetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimExt2Linetype(class PyDbDimension {lvalue})'''
    ...
    def dimLineLinetype (self, *args, **kwargs)-> ObjectId :
      '''dimLineLinetype( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimLineLinetype(class PyDbDimension {lvalue})'''
    ...
    def dimLinePoint (self, *args, **kwargs)-> Point3d :
      '''dimLinePoint( (RotatedDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d dimLinePoint(class PyDbRotatedDimension {lvalue})'''
    ...
    def dimensionStyle (self, *args, **kwargs)-> ObjectId :
      '''dimensionStyle( (Dimension)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId dimensionStyle(class PyDbDimension {lvalue})'''
    ...
    def dimensionText (self, *args, **kwargs)-> str :
      '''dimensionText( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dimensionText(class PyDbDimension {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def elevation (self, *args, **kwargs)-> float :
      '''elevation( (Dimension)arg1) -> float :

    C++ signature :
        double elevation(class PyDbDimension {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fieldFromMText (self, *args, **kwargs)-> ErrorStatus :
      '''fieldFromMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldFromMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def fieldToMText (self, *args, **kwargs)-> ErrorStatus :
      '''fieldToMText( (Dimension)arg1, (MText)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus fieldToMText(class PyDbDimension {lvalue},class PyDbMText {lvalue})'''
    ...
    def formatMeasurement (self, *args, **kwargs)-> str :
      '''formatMeasurement( (Dimension)arg1, (float)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double)

formatMeasurement( (Dimension)arg1, (float)arg2, (str)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > formatMeasurement(class PyDbDimension {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def generateLayout (self, *args, **kwargs)-> ErrorStatus :
      '''generateLayout( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus generateLayout(class PyDbDimension {lvalue})'''
    ...
    def getArrowFirstIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowFirstIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowFirstIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getArrowSecondIsFlipped (self, *args, **kwargs)-> bool :
      '''getArrowSecondIsFlipped( (Dimension)arg1) -> bool :

    C++ signature :
        bool getArrowSecondIsFlipped(class PyDbDimension {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDimstyleData (self, *args, **kwargs)-> DimStyleTableRecord :
      '''getDimstyleData( (Dimension)arg1) -> DimStyleTableRecord :

    C++ signature :
        class PyDbDimStyleTableRecord getDimstyleData(class PyDbDimension {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def horizontalRotation (self, *args, **kwargs)-> float :
      '''horizontalRotation( (Dimension)arg1) -> float :

    C++ signature :
        double horizontalRotation(class PyDbDimension {lvalue})'''
    ...
    def inspection (self, *args, **kwargs)-> bool :
      '''inspection( (Dimension)arg1) -> bool :

    C++ signature :
        bool inspection(class PyDbDimension {lvalue})'''
    ...
    def inspectionFrame (self, *args, **kwargs)-> int :
      '''inspectionFrame( (Dimension)arg1) -> int :

    C++ signature :
        int inspectionFrame(class PyDbDimension {lvalue})'''
    ...
    def inspectionLabel (self, *args, **kwargs)-> str :
      '''inspectionLabel( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > inspectionLabel(class PyDbDimension {lvalue})'''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isConstraintDynamic (self, *args, **kwargs)-> bool :
      '''isConstraintDynamic( (Dimension)arg1) -> bool :

    C++ signature :
        bool isConstraintDynamic(class PyDbDimension {lvalue})'''
    ...
    def isConstraintObject (self, *args, **kwargs)-> tuple :
      '''isConstraintObject( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isConstraintObject(class PyDbDimension {lvalue})'''
    ...
    def isDynamicDimension (self, *args, **kwargs)-> bool :
      '''isDynamicDimension( (Dimension)arg1) -> bool :

    C++ signature :
        bool isDynamicDimension(class PyDbDimension {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isHorizontalRefTextRotation (self, *args, **kwargs)-> bool :
      '''isHorizontalRefTextRotation( (Dimension)arg1) -> bool :

    C++ signature :
        bool isHorizontalRefTextRotation(class PyDbDimension {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUsingDefaultTextPosition (self, *args, **kwargs)-> bool :
      '''isUsingDefaultTextPosition( (Dimension)arg1) -> bool :

    C++ signature :
        bool isUsingDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def jogSymbolOn (self, *args, **kwargs)-> bool :
      '''jogSymbolOn( (RotatedDimension)arg1) -> bool :

    C++ signature :
        bool jogSymbolOn(class PyDbRotatedDimension {lvalue})'''
    ...
    def jogSymbolPosition (self, *args, **kwargs)-> Point3d :
      '''jogSymbolPosition( (RotatedDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d jogSymbolPosition(class PyDbRotatedDimension {lvalue})'''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def measurement (self, *args, **kwargs)-> float :
      '''measurement( (Dimension)arg1) -> float :

    C++ signature :
        double measurement(class PyDbDimension {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Dimension)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbDimension {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def oblique (self, *args, **kwargs)-> float :
      '''oblique( (RotatedDimension)arg1) -> float :

    C++ signature :
        double oblique(class PyDbRotatedDimension {lvalue})'''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def prefix (self, *args, **kwargs)-> str :
      '''prefix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > prefix(class PyDbDimension {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recomputeDimBlock (self, *args, **kwargs)-> ErrorStatus :
      '''recomputeDimBlock( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue})

recomputeDimBlock( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeDimBlock(class PyDbDimension {lvalue},bool)'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removeTextField (self, *args, **kwargs)-> ErrorStatus :
      '''removeTextField( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeTextField(class PyDbDimension {lvalue})'''
    ...
    def resetTextDefinedSize (self, *args, **kwargs)-> None :
      '''resetTextDefinedSize( (Dimension)arg1) -> None :

    C++ signature :
        void resetTextDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def rotation (self, *args, **kwargs)-> float :
      '''rotation( (RotatedDimension)arg1) -> float :

    C++ signature :
        double rotation(class PyDbRotatedDimension {lvalue})'''
    ...
    def setAltSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setAltSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setAltToleranceSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setAltToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAltToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setAlternatePrefix (self, *args, **kwargs)-> ErrorStatus :
      '''setAlternatePrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternatePrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAlternateSuffix (self, *args, **kwargs)-> ErrorStatus :
      '''setAlternateSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlternateSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setArrowFirstIsFlipped (self, *args, **kwargs)-> ErrorStatus :
      '''setArrowFirstIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowFirstIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setArrowSecondIsFlipped (self, *args, **kwargs)-> ErrorStatus :
      '''setArrowSecondIsFlipped( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setArrowSecondIsFlipped(class PyDbDimension {lvalue},bool)'''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setConstraintDynamic (self, *args, **kwargs)-> ErrorStatus :
      '''setConstraintDynamic( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setConstraintDynamic(class PyDbDimension {lvalue},bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDimBlockId (self, *args, **kwargs)-> ErrorStatus :
      '''setDimBlockId( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockId(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimBlockPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setDimBlockPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimBlockPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimExt1Linetype (self, *args, **kwargs)-> ErrorStatus :
      '''setDimExt1Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt1Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimExt2Linetype (self, *args, **kwargs)-> ErrorStatus :
      '''setDimExt2Linetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimExt2Linetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimLineLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setDimLineLinetype( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimLineLinetype(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimLinePoint (self, *args, **kwargs)-> ErrorStatus :
      '''setDimLinePoint( (RotatedDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimLinePoint(class PyDbRotatedDimension {lvalue},class AcGePoint3d)'''
    ...
    def setDimensionStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setDimensionStyle( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionStyle(class PyDbDimension {lvalue},class PyDbObjectId)'''
    ...
    def setDimensionText (self, *args, **kwargs)-> ErrorStatus :
      '''setDimensionText( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimensionText(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDimstyleData (self, *args, **kwargs)-> ErrorStatus :
      '''setDimstyleData( (Dimension)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbObjectId)

setDimstyleData( (Dimension)arg1, (DimStyleTableRecord)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDimstyleData(class PyDbDimension {lvalue},class PyDbDimStyleTableRecord)'''
    ...
    def setDynamicDimension (self, *args, **kwargs)-> ErrorStatus :
      '''setDynamicDimension( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDynamicDimension(class PyDbDimension {lvalue},bool)'''
    ...
    def setElevation (self, *args, **kwargs)-> ErrorStatus :
      '''setElevation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setElevation(class PyDbDimension {lvalue},double)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setHorizontalRefTextRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setHorizontalRefTextRotation( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRefTextRotation(class PyDbDimension {lvalue},bool)'''
    ...
    def setHorizontalRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setHorizontalRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setInspection (self, *args, **kwargs)-> ErrorStatus :
      '''setInspection( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspection(class PyDbDimension {lvalue},bool)'''
    ...
    def setInspectionFrame (self, *args, **kwargs)-> ErrorStatus :
      '''setInspectionFrame( (Dimension)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionFrame(class PyDbDimension {lvalue},int)'''
    ...
    def setInspectionLabel (self, *args, **kwargs)-> ErrorStatus :
      '''setInspectionLabel( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setInspectionLabel(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setJogSymbolOn (self, *args, **kwargs)-> ErrorStatus :
      '''setJogSymbolOn( (RotatedDimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setJogSymbolOn(class PyDbRotatedDimension {lvalue},bool)'''
    ...
    def setJogSymbolPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setJogSymbolPosition( (RotatedDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setJogSymbolPosition(class PyDbRotatedDimension {lvalue},class AcGePoint3d)'''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs)-> ErrorStatus :
      '''setNormal( (Dimension)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbDimension {lvalue},class AcGeVector3d)'''
    ...
    def setOblique (self, *args, **kwargs)-> ErrorStatus :
      '''setOblique( (RotatedDimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOblique(class PyDbRotatedDimension {lvalue},double)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPrefix (self, *args, **kwargs)-> ErrorStatus :
      '''setPrefix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPrefix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setRotation( (RotatedDimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRotation(class PyDbRotatedDimension {lvalue},double)'''
    ...
    def setShouldParticipateInOPM (self, *args, **kwargs)-> None :
      '''setShouldParticipateInOPM( (Dimension)arg1, (bool)arg2) -> None :

    C++ signature :
        void setShouldParticipateInOPM(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuffix (self, *args, **kwargs)-> ErrorStatus :
      '''setSuffix( (Dimension)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuffix(class PyDbDimension {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setSuppressAngularTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressAngularTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressAngularTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setTextAttachment (self, *args, **kwargs)-> ErrorStatus :
      '''setTextAttachment( (Dimension)arg1, (MTextAttachmentPoint)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextAttachment(class PyDbDimension {lvalue},enum AcDbMText::AttachmentPoint)'''
    ...
    def setTextDefinedSize (self, *args, **kwargs)-> None :
      '''setTextDefinedSize( (Dimension)arg1, (float)arg2, (float)arg3) -> None :

    C++ signature :
        void setTextDefinedSize(class PyDbDimension {lvalue},double,double)'''
    ...
    def setTextLineSpacingFactor (self, *args, **kwargs)-> ErrorStatus :
      '''setTextLineSpacingFactor( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingFactor(class PyDbDimension {lvalue},double)'''
    ...
    def setTextLineSpacingStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setTextLineSpacingStyle( (Dimension)arg1, (LineSpacingStyle)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextLineSpacingStyle(class PyDbDimension {lvalue},enum AcDb::LineSpacingStyle)'''
    ...
    def setTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setTextPosition( (Dimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextPosition(class PyDbDimension {lvalue},class AcGePoint3d)'''
    ...
    def setTextRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setTextRotation( (Dimension)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextRotation(class PyDbDimension {lvalue},double)'''
    ...
    def setToleranceSuppressLeadingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressLeadingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressLeadingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressTrailingZeros (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressTrailingZeros( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressTrailingZeros(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroFeet (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressZeroFeet( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroFeet(class PyDbDimension {lvalue},bool)'''
    ...
    def setToleranceSuppressZeroInches (self, *args, **kwargs)-> ErrorStatus :
      '''setToleranceSuppressZeroInches( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setToleranceSuppressZeroInches(class PyDbDimension {lvalue},bool)'''
    ...
    def setUsingDefaultTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setUsingDefaultTextPosition( (Dimension)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUsingDefaultTextPosition(class PyDbDimension {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def setXLine1Point (self, *args, **kwargs)-> ErrorStatus :
      '''setXLine1Point( (RotatedDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXLine1Point(class PyDbRotatedDimension {lvalue},class AcGePoint3d)'''
    ...
    def setXLine2Point (self, *args, **kwargs)-> ErrorStatus :
      '''setXLine2Point( (RotatedDimension)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXLine2Point(class PyDbRotatedDimension {lvalue},class AcGePoint3d)'''
    ...
    def shouldParticipateInOPM (self, *args, **kwargs)-> bool :
      '''shouldParticipateInOPM( (Dimension)arg1) -> bool :

    C++ signature :
        bool shouldParticipateInOPM(class PyDbDimension {lvalue})'''
    ...
    def suffix (self, *args, **kwargs)-> str :
      '''suffix( (Dimension)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > suffix(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressAngularTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressAngularTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressAngularTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''suppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''suppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroFeet (self, *args, **kwargs)-> bool :
      '''suppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def suppressZeroInches (self, *args, **kwargs)-> bool :
      '''suppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool suppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def textAttachment (self, *args, **kwargs)-> MTextAttachmentPoint :
      '''textAttachment( (Dimension)arg1) -> MTextAttachmentPoint :

    C++ signature :
        enum AcDbMText::AttachmentPoint textAttachment(class PyDbDimension {lvalue})'''
    ...
    def textDefinedSize (self, *args, **kwargs)-> tuple :
      '''textDefinedSize( (Dimension)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple textDefinedSize(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingFactor (self, *args, **kwargs)-> float :
      '''textLineSpacingFactor( (Dimension)arg1) -> float :

    C++ signature :
        double textLineSpacingFactor(class PyDbDimension {lvalue})'''
    ...
    def textLineSpacingStyle (self, *args, **kwargs)-> LineSpacingStyle :
      '''textLineSpacingStyle( (Dimension)arg1) -> LineSpacingStyle :

    C++ signature :
        enum AcDb::LineSpacingStyle textLineSpacingStyle(class PyDbDimension {lvalue})'''
    ...
    def textPosition (self, *args, **kwargs)-> Point3d :
      '''textPosition( (Dimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d textPosition(class PyDbDimension {lvalue})'''
    ...
    def textRotation (self, *args, **kwargs)-> float :
      '''textRotation( (Dimension)arg1) -> float :

    C++ signature :
        double textRotation(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressLeadingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressLeadingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressLeadingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressTrailingZeros (self, *args, **kwargs)-> bool :
      '''toleranceSuppressTrailingZeros( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressTrailingZeros(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroFeet (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroFeet( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroFeet(class PyDbDimension {lvalue})'''
    ...
    def toleranceSuppressZeroInches (self, *args, **kwargs)-> bool :
      '''toleranceSuppressZeroInches( (Dimension)arg1) -> bool :

    C++ signature :
        bool toleranceSuppressZeroInches(class PyDbDimension {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def useDefaultTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''useDefaultTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useDefaultTextPosition(class PyDbDimension {lvalue})'''
    ...
    def useSetTextPosition (self, *args, **kwargs)-> ErrorStatus :
      '''useSetTextPosition( (Dimension)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useSetTextPosition(class PyDbDimension {lvalue})'''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...
    def xLine1Point (self, *args, **kwargs)-> Point3d :
      '''xLine1Point( (RotatedDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine1Point(class PyDbRotatedDimension {lvalue})'''
    ...
    def xLine2Point (self, *args, **kwargs)-> Point3d :
      '''xLine2Point( (RotatedDimension)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d xLine2Point(class PyDbRotatedDimension {lvalue})'''
    ...

class RotationAngle:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kDegrees000 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDegrees090 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDegrees180 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDegrees270 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDegreesUnknown (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class RowType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kAllRowTypes (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kDataRow (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kHeaderRow (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTitleRow (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnknownRow (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class SegType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kArc (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCoincident (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kEmpty (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kLine (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPoint (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class SequenceEnd:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> SequenceEnd :
      '''cast( (RxObject)arg1) -> SequenceEnd :

    C++ signature :
        class PyDbSequenceEnd cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> SequenceEnd :
      '''cloneFrom( (RxObject)arg1) -> SequenceEnd :

    C++ signature :
        class PyDbSequenceEnd cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class ShadePlotResLevel:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kAsDisplayed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCustom (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kMaximum (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kNormal (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPresentation (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kPreview (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class ShadePlotType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kAsDisplayed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kHidden (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kRenderPreset (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kRendered (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kVisualStyle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kWireframe (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Solid3d:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Solid3d :
      '''cast( (RxObject)arg1) -> Solid3d :

    C++ signature :
        class PyDb3dSolid cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Solid3d :
      '''cloneFrom( (RxObject)arg1) -> Solid3d :

    C++ signature :
        class PyDb3dSolid cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createBox (self, *args, **kwargs)-> ErrorStatus :
      '''createBox( (Solid3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createBox(class PyDb3dSolid {lvalue},double,double,double)'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def createFrustum (self, *args, **kwargs)-> ErrorStatus :
      '''createFrustum( (Solid3d)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createFrustum(class PyDb3dSolid {lvalue},double,double,double,double)'''
    ...
    def createPyramid (self, *args, **kwargs)-> ErrorStatus :
      '''createPyramid( (Solid3d)arg1, (float)arg2, (int)arg3, (float)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createPyramid(class PyDb3dSolid {lvalue},double,int,double)

createPyramid( (Solid3d)arg1, (float)arg2, (int)arg3, (float)arg4, (float)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createPyramid(class PyDb3dSolid {lvalue},double,int,double,double)'''
    ...
    def createSphere (self, *args, **kwargs)-> ErrorStatus :
      '''createSphere( (Solid3d)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createSphere(class PyDb3dSolid {lvalue},double)'''
    ...
    def createTorus (self, *args, **kwargs)-> ErrorStatus :
      '''createTorus( (Solid3d)arg1, (float)arg2, (float)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createTorus(class PyDb3dSolid {lvalue},double,double)'''
    ...
    def createWedge (self, *args, **kwargs)-> ErrorStatus :
      '''createWedge( (Solid3d)arg1, (float)arg2, (float)arg3, (float)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createWedge(class PyDb3dSolid {lvalue},double,double,double)'''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class StandardScaleType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def k100_1 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k10_1 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_1 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_10 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_100 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_128in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_16 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_16in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_2 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_20 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_2in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_30 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_32in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_4 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_40 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_4in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_5 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_50 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_64in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_8 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_8in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1and1_2in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1ft_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k2_1 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k3_16in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k3_32in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k3_4in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k3_8in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k3in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k4_1 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k6in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k8_1 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kCustomScale (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kScaleToFit (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class StdScaleType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def k1000_1 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k100_1 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k10_1 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_1 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_10 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_100 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_128in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_16 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_16in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_2 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_20 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_2in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_30 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_32in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_4 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_40 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_4in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_5 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_50 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_64in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_8 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1_8in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1and1_2in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1ft_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k1in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k2_1 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k3_16in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k3_32in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k3_4in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k3_8in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k3in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k4_1 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k6in_1ft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k8_1 (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kScaleToFit (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Surface:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Surface :
      '''cast( (RxObject)arg1) -> Surface :

    C++ signature :
        class PyDbSurface cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Surface :
      '''cloneFrom( (RxObject)arg1) -> Surface :

    C++ signature :
        class PyDbSurface cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class SweptSurface:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> SweptSurface :
      '''cast( (RxObject)arg1) -> SweptSurface :

    C++ signature :
        class PyDbSweptSurface cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> SweptSurface :
      '''cloneFrom( (RxObject)arg1) -> SweptSurface :

    C++ signature :
        class PyDbSweptSurface cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class SymbolTable:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def add (self, *args, **kwargs)-> ObjectId :
      '''add( (SymbolTable)arg1, (SymbolTableRecord)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId add(class PyDbSymbolTable {lvalue},class PyDbSymbolTableRecord)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> SymbolTable :
      '''cast( (RxObject)arg1) -> SymbolTable :

    C++ signature :
        class PyDbSymbolTable cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> SymbolTable :
      '''cloneFrom( (RxObject)arg1) -> SymbolTable :

    C++ signature :
        class PyDbSymbolTable cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getAt (self, *args, **kwargs)-> ObjectId :
      '''getAt( (SymbolTable)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getAt(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def has (self, *args, **kwargs)-> bool :
      '''has( (SymbolTable)arg1, (str)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

has( (SymbolTable)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class PyDbObjectId)'''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def recordIds (self, *args, **kwargs)-> list :
      '''recordIds( (SymbolTable)arg1) -> list :

    C++ signature :
        class boost::python::list recordIds(class PyDbSymbolTable {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def toDict (self, *args, **kwargs)-> dict :
      '''toDict( (SymbolTable)arg1) -> dict :

    C++ signature :
        class boost::python::dict toDict(class PyDbSymbolTable {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class SymbolTableRecord:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> SymbolTableRecord :
      '''cast( (RxObject)arg1) -> SymbolTableRecord :

    C++ signature :
        class PyDbSymbolTableRecord cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> SymbolTableRecord :
      '''cloneFrom( (RxObject)arg1) -> SymbolTableRecord :

    C++ signature :
        class PyDbSymbolTableRecord cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getName (self, *args, **kwargs)-> str :
      '''getName( (SymbolTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getName(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isDependent (self, *args, **kwargs)-> bool :
      '''isDependent( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isDependent(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isRenamable (self, *args, **kwargs)-> bool :
      '''isRenamable( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isRenamable(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isResolved (self, *args, **kwargs)-> bool :
      '''isResolved( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isResolved(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setName (self, *args, **kwargs)-> ErrorStatus :
      '''setName( (SymbolTableRecord)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setName(class PyDbSymbolTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class Table:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def alignment (self, *args, **kwargs)-> CellAlignment :
      '''alignment( (Table)arg1, (RowType)arg2) -> CellAlignment :

    C++ signature :
        enum AcDb::CellAlignment alignment(class PyDbTable {lvalue},enum AcDb::RowType)

alignment( (Table)arg1, (int)arg2, (int)arg3) -> CellAlignment :

    C++ signature :
        enum AcDb::CellAlignment alignment(class PyDbTable {lvalue},int,int)'''
    ...
    def appendAttribute (self, *args, **kwargs)-> ObjectId :
      '''appendAttribute( (BlockReference)arg1, (AttributeReference)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId appendAttribute(class PyDbBlockReference {lvalue},class PyDbAttribute {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def attachmentPoint (self, *args, **kwargs)-> Point3d :
      '''attachmentPoint( (Table)arg1, (int)arg2, (int)arg3) -> Point3d :

    C++ signature :
        class AcGePoint3d attachmentPoint(class PyDbTable {lvalue},int,int)

attachmentPoint( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> Point3d :

    C++ signature :
        class AcGePoint3d attachmentPoint(class PyDbTable {lvalue},int,int,int)'''
    ...
    def attributeIds (self, *args, **kwargs)-> list :
      '''attributeIds( (BlockReference)arg1) -> list :

    C++ signature :
        class boost::python::list attributeIds(class PyDbBlockReference {lvalue})'''
    ...
    def backgroundColor (self, *args, **kwargs)-> Color :
      '''backgroundColor( (Table)arg1, (RowType)arg2) -> Color :

    C++ signature :
        class AcCmColor backgroundColor(class PyDbTable {lvalue},enum AcDb::RowType)

backgroundColor( (Table)arg1, (int)arg2, (int)arg3) -> Color :

    C++ signature :
        class AcCmColor backgroundColor(class PyDbTable {lvalue},int,int)'''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def blockRotation (self, *args, **kwargs)-> float :
      '''blockRotation( (Table)arg1, (int)arg2, (int)arg3) -> float :

    C++ signature :
        double blockRotation(class PyDbTable {lvalue},int,int)'''
    ...
    def blockScale (self, *args, **kwargs)-> float :
      '''blockScale( (Table)arg1, (int)arg2, (int)arg3) -> float :

    C++ signature :
        double blockScale(class PyDbTable {lvalue},int,int)'''
    ...
    def blockTableRecord (self, *args, **kwargs)-> ObjectId :
      '''blockTableRecord( (BlockReference)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockTableRecord(class PyDbBlockReference {lvalue})'''
    ...
    def blockTableRecordId (self, *args, **kwargs)-> ObjectId :
      '''blockTableRecordId( (Table)arg1, (int)arg2, (int)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockTableRecordId(class PyDbTable {lvalue},int,int)

blockTableRecordId( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockTableRecordId(class PyDbTable {lvalue},int,int,int)'''
    ...
    def blockTransform (self, *args, **kwargs)-> Matrix3d :
      '''blockTransform( (BlockReference)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d blockTransform(class PyDbBlockReference {lvalue})'''
    ...
    def breakFlowDirection (self, *args, **kwargs)-> TableBreakFlowDirection :
      '''breakFlowDirection( (Table)arg1) -> TableBreakFlowDirection :

    C++ signature :
        enum AcDb::TableBreakFlowDirection breakFlowDirection(class PyDbTable {lvalue})'''
    ...
    def breakHeight (self, *args, **kwargs)-> float :
      '''breakHeight( (Table)arg1, (int)arg2) -> float :

    C++ signature :
        double breakHeight(class PyDbTable {lvalue},int)'''
    ...
    def breakOffset (self, *args, **kwargs)-> Vector3d :
      '''breakOffset( (Table)arg1, (int)arg2) -> Vector3d :

    C++ signature :
        class AcGeVector3d breakOffset(class PyDbTable {lvalue},int)'''
    ...
    def breakOption (self, *args, **kwargs)-> TableBreakOption :
      '''breakOption( (Table)arg1) -> TableBreakOption :

    C++ signature :
        enum AcDb::TableBreakOption breakOption(class PyDbTable {lvalue})'''
    ...
    def breakSpacing (self, *args, **kwargs)-> float :
      '''breakSpacing( (Table)arg1) -> float :

    C++ signature :
        double breakSpacing(class PyDbTable {lvalue})'''
    ...
    def canDelete (self, *args, **kwargs)-> bool :
      '''canDelete( (Table)arg1, (int)arg2, (int)arg3, (bool)arg4) -> bool :

    C++ signature :
        bool canDelete(class PyDbTable {lvalue},int,int,bool)'''
    ...
    def canInsert (self, *args, **kwargs)-> bool :
      '''canInsert( (Table)arg1, (int)arg2, (bool)arg3) -> bool :

    C++ signature :
        bool canInsert(class PyDbTable {lvalue},int,bool)'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Table :
      '''cast( (RxObject)arg1) -> Table :

    C++ signature :
        class PyDbTable cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def cellRange (self, *args, **kwargs)-> CellRange :
      '''cellRange( (Table)arg1) -> CellRange :

    C++ signature :
        struct AcCellRange cellRange(class PyDbTable {lvalue})'''
    ...
    def cellState (self, *args, **kwargs)-> CellState :
      '''cellState( (Table)arg1, (int)arg2, (int)arg3) -> CellState :

    C++ signature :
        enum AcDb::CellState cellState(class PyDbTable {lvalue},int,int)'''
    ...
    def cellStyle (self, *args, **kwargs)-> str :
      '''cellStyle( (Table)arg1, (int)arg2, (int)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > cellStyle(class PyDbTable {lvalue},int,int)'''
    ...
    def cellStyleOverrides (self, *args, **kwargs)-> list :
      '''cellStyleOverrides( (Table)arg1, (int)arg2, (int)arg3) -> list :

    C++ signature :
        class boost::python::list cellStyleOverrides(class PyDbTable {lvalue},int,int)'''
    ...
    def cellType (self, *args, **kwargs)-> CellType :
      '''cellType( (Table)arg1, (int)arg2, (int)arg3) -> CellType :

    C++ signature :
        enum AcDb::CellType cellType(class PyDbTable {lvalue},int,int)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def clearCellOverrides (self, *args, **kwargs)-> None :
      '''clearCellOverrides( (Table)arg1, (int)arg2, (int)arg3) -> None :

    C++ signature :
        void clearCellOverrides(class PyDbTable {lvalue},int,int)'''
    ...
    def clearSubSelection (self, *args, **kwargs)-> None :
      '''clearSubSelection( (Table)arg1) -> None :

    C++ signature :
        void clearSubSelection(class PyDbTable {lvalue})'''
    ...
    def clearTableStyleOverrides (self, *args, **kwargs)-> None :
      '''clearTableStyleOverrides( (Table)arg1) -> None :

    C++ signature :
        void clearTableStyleOverrides(class PyDbTable {lvalue})'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Table :
      '''cloneFrom( (RxObject)arg1) -> Table :

    C++ signature :
        class PyDbTable cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def columnWidth (self, *args, **kwargs)-> float :
      '''columnWidth( (Table)arg1, (int)arg2) -> float :

    C++ signature :
        double columnWidth(class PyDbTable {lvalue},int)'''
    ...
    def contentColor (self, *args, **kwargs)-> Color :
      '''contentColor( (Table)arg1, (RowType)arg2) -> Color :

    C++ signature :
        class AcCmColor contentColor(class PyDbTable {lvalue},enum AcDb::RowType)

contentColor( (Table)arg1, (int)arg2, (int)arg3) -> Color :

    C++ signature :
        class AcCmColor contentColor(class PyDbTable {lvalue},int,int)

contentColor( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> Color :

    C++ signature :
        class AcCmColor contentColor(class PyDbTable {lvalue},int,int,int)'''
    ...
    def contentLayout (self, *args, **kwargs)-> CellContentLayout :
      '''contentLayout( (Table)arg1, (int)arg2, (int)arg3) -> CellContentLayout :

    C++ signature :
        enum AcDb::CellContentLayout contentLayout(class PyDbTable {lvalue},int,int)'''
    ...
    def contentType (self, *args, **kwargs)-> CellContentType :
      '''contentType( (Table)arg1, (int)arg2, (int)arg3) -> CellContentType :

    C++ signature :
        enum AcDb::CellContentType contentType(class PyDbTable {lvalue},int,int)

contentType( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> CellContentType :

    C++ signature :
        enum AcDb::CellContentType contentType(class PyDbTable {lvalue},int,int,int)'''
    ...
    def createContent (self, *args, **kwargs)-> int :
      '''createContent( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> int :

    C++ signature :
        int createContent(class PyDbTable {lvalue},int,int,int)'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def dataFormat (self, *args, **kwargs)-> str :
      '''dataFormat( (Table)arg1, (int)arg2, (int)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dataFormat(class PyDbTable {lvalue},int,int)

dataFormat( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dataFormat(class PyDbTable {lvalue},int,int,int)'''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def deleteCellContent (self, *args, **kwargs)-> ErrorStatus :
      '''deleteCellContent( (Table)arg1, (int)arg2, (int)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus deleteCellContent(class PyDbTable {lvalue},int,int)'''
    ...
    def deleteColumns (self, *args, **kwargs)-> ErrorStatus :
      '''deleteColumns( (Table)arg1, (int)arg2, (int)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus deleteColumns(class PyDbTable {lvalue},int,int)'''
    ...
    def deleteContent (self, *args, **kwargs)-> ErrorStatus :
      '''deleteContent( (Table)arg1, (int)arg2, (int)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus deleteContent(class PyDbTable {lvalue},int,int)

deleteContent( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus deleteContent(class PyDbTable {lvalue},int,int,int)

deleteContent( (Table)arg1, (CellRange)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus deleteContent(class PyDbTable {lvalue},struct AcCellRange)'''
    ...
    def deleteRows (self, *args, **kwargs)-> ErrorStatus :
      '''deleteRows( (Table)arg1, (int)arg2, (int)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus deleteRows(class PyDbTable {lvalue},int,int)'''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def direction (self, *args, **kwargs)-> Vector3d :
      '''direction( (Table)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d direction(class PyDbTable {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def enableBreak (self, *args, **kwargs)-> ErrorStatus :
      '''enableBreak( (Table)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus enableBreak(class PyDbTable {lvalue},bool)'''
    ...
    def enableMergeAll (self, *args, **kwargs)-> ErrorStatus :
      '''enableMergeAll( (Table)arg1, (int)arg2, (int)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus enableMergeAll(class PyDbTable {lvalue},int,int,bool)'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def explodeToOwnerSpace (self, *args, **kwargs)-> ErrorStatus :
      '''explodeToOwnerSpace( (BlockReference)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus explodeToOwnerSpace(class PyDbBlockReference {lvalue})'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fieldId (self, *args, **kwargs)-> ObjectId :
      '''fieldId( (Table)arg1, (int)arg2, (int)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId fieldId(class PyDbTable {lvalue},int,int)

fieldId( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> ObjectId :

    C++ signature :
        class PyDbObjectId fieldId(class PyDbTable {lvalue},int,int,int)'''
    ...
    def flowDirection (self, *args, **kwargs)-> TableFlowDirection :
      '''flowDirection( (Table)arg1) -> TableFlowDirection :

    C++ signature :
        enum AcDb::FlowDirection flowDirection(class PyDbTable {lvalue})'''
    ...
    def generateLayout (self, *args, **kwargs)-> ErrorStatus :
      '''generateLayout( (Table)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus generateLayout(class PyDbTable {lvalue})'''
    ...
    def geomExtentsBestFit (self, *args, **kwargs)-> Extents :
      '''geomExtentsBestFit( (BlockReference)arg1) -> Extents :

    C++ signature :
        class AcDbExtents geomExtentsBestFit(class PyDbBlockReference {lvalue})

geomExtentsBestFit( (BlockReference)arg1, (Matrix3d)arg2) -> Extents :

    C++ signature :
        class AcDbExtents geomExtentsBestFit(class PyDbBlockReference {lvalue},class AcGeMatrix3d)'''
    ...
    def getBlockAttributeValue (self, *args, **kwargs)-> str :
      '''getBlockAttributeValue( (Table)arg1, (int)arg2, (int)arg3, (ObjectId)arg4) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getBlockAttributeValue(class PyDbTable {lvalue},int,int,class PyDbObjectId)

getBlockAttributeValue( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (ObjectId)arg5) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getBlockAttributeValue(class PyDbTable {lvalue},int,int,int,class PyDbObjectId)'''
    ...
    def getCellExtents (self, *args, **kwargs)-> list :
      '''getCellExtents( (Table)arg1, (int)arg2, (int)arg3, (bool)arg4) -> list :

    C++ signature :
        class boost::python::list getCellExtents(class PyDbTable {lvalue},int,int,bool)'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getDataLink (self, *args, **kwargs)-> ObjectId :
      '''getDataLink( (Table)arg1, (int)arg2, (int)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId getDataLink(class PyDbTable {lvalue},int,int)'''
    ...
    def getDataLinkRange (self, *args, **kwargs)-> CellRange :
      '''getDataLinkRange( (Table)arg1, (int)arg2, (int)arg3) -> CellRange :

    C++ signature :
        struct AcCellRange getDataLinkRange(class PyDbTable {lvalue},int,int)'''
    ...
    def getDataType (self, *args, **kwargs)-> tuple :
      '''getDataType( (Table)arg1, (RowType)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple getDataType(class PyDbTable {lvalue},enum AcDb::RowType)

getDataType( (Table)arg1, (int)arg2, (int)arg3) -> tuple :

    C++ signature :
        class boost::python::tuple getDataType(class PyDbTable {lvalue},int,int)

getDataType( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> tuple :

    C++ signature :
        class boost::python::tuple getDataType(class PyDbTable {lvalue},int,int,int)'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFormula (self, *args, **kwargs)-> str :
      '''getFormula( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getFormula(class PyDbTable {lvalue},int,int,int)'''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getGridProperty (self, *args, **kwargs)-> object :
      '''getGridProperty( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4) -> object :

    C++ signature :
        struct AcGridProperty getGridProperty(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType)'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getIterator (self, *args, **kwargs)-> list :
      '''getIterator( (Table)arg1) -> list :

    C++ signature :
        class boost::python::list getIterator(class PyDbTable {lvalue})

getIterator( (Table)arg1, (TableIteratorOption)arg2) -> list :

    C++ signature :
        class boost::python::list getIterator(class PyDbTable {lvalue},enum AcDb::TableIteratorOption)

getIterator( (Table)arg1, (CellRange)arg2 [, (TableIteratorOption)arg3]) -> list :

    C++ signature :
        class boost::python::list getIterator(class PyDbTable {lvalue},struct AcCellRange [,enum AcDb::TableIteratorOption])'''
    ...
    def getMergeRange (self, *args, **kwargs)-> CellRange :
      '''getMergeRange( (Table)arg1, (int)arg2, (int)arg3) -> CellRange :

    C++ signature :
        struct AcCellRange getMergeRange(class PyDbTable {lvalue},int,int)'''
    ...
    def getOverride (self, *args, **kwargs)-> CellProperty :
      '''getOverride( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> CellProperty :

    C++ signature :
        enum AcDb::CellProperty getOverride(class PyDbTable {lvalue},int,int,int)

getOverride( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4) -> GridProperty :

    C++ signature :
        enum AcDb::GridProperty getOverride(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType)'''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def getSubSelection (self, *args, **kwargs)-> CellRange :
      '''getSubSelection( (Table)arg1) -> CellRange :

    C++ signature :
        struct AcCellRange getSubSelection(class PyDbTable {lvalue})'''
    ...
    def gridColor (self, *args, **kwargs)-> Color :
      '''gridColor( (Table)arg1, (GridLineType)arg2, (RowType)arg3) -> Color :

    C++ signature :
        class AcCmColor gridColor(class PyDbTable {lvalue},enum AcDb::GridLineType,enum AcDb::RowType)

gridColor( (Table)arg1, (int)arg2, (int)arg3, (CellEdgeMask)arg4) -> Color :

    C++ signature :
        class AcCmColor gridColor(class PyDbTable {lvalue},int,int,enum AcDb::CellEdgeMask)

gridColor( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4) -> Color :

    C++ signature :
        class AcCmColor gridColor(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType)'''
    ...
    def gridDoubleLineSpacing (self, *args, **kwargs)-> float :
      '''gridDoubleLineSpacing( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4) -> float :

    C++ signature :
        double gridDoubleLineSpacing(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType)'''
    ...
    def gridLineStyle (self, *args, **kwargs)-> GridLineStyle :
      '''gridLineStyle( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4) -> GridLineStyle :

    C++ signature :
        enum AcDb::GridLineStyle gridLineStyle(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType)'''
    ...
    def gridLineWeight (self, *args, **kwargs)-> LineWeight :
      '''gridLineWeight( (Table)arg1, (GridLineType)arg2, (RowType)arg3) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight gridLineWeight(class PyDbTable {lvalue},enum AcDb::GridLineType,enum AcDb::RowType)

gridLineWeight( (Table)arg1, (int)arg2, (int)arg3, (CellEdgeMask)arg4) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight gridLineWeight(class PyDbTable {lvalue},int,int,enum AcDb::CellEdgeMask)

gridLineWeight( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight gridLineWeight(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType)'''
    ...
    def gridLinetype (self, *args, **kwargs)-> ObjectId :
      '''gridLinetype( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4) -> ObjectId :

    C++ signature :
        class PyDbObjectId gridLinetype(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType)'''
    ...
    def gridVisibility (self, *args, **kwargs)-> Visibility :
      '''gridVisibility( (Table)arg1, (GridLineType)arg2, (RowType)arg3) -> Visibility :

    C++ signature :
        enum AcDb::Visibility gridVisibility(class PyDbTable {lvalue},enum AcDb::GridLineType,enum AcDb::RowType)

gridVisibility( (Table)arg1, (int)arg2, (int)arg3, (CellEdgeMask)arg4) -> Visibility :

    C++ signature :
        enum AcDb::Visibility gridVisibility(class PyDbTable {lvalue},int,int,enum AcDb::CellEdgeMask)

gridVisibility( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4) -> Visibility :

    C++ signature :
        enum AcDb::Visibility gridVisibility(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType)'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasFormula (self, *args, **kwargs)-> bool :
      '''hasFormula( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> bool :

    C++ signature :
        bool hasFormula(class PyDbTable {lvalue},int,int,int)'''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def hasSubSelection (self, *args, **kwargs)-> bool :
      '''hasSubSelection( (Table)arg1) -> bool :

    C++ signature :
        bool hasSubSelection(class PyDbTable {lvalue})'''
    ...
    def height (self, *args, **kwargs)-> float :
      '''height( (Table)arg1) -> float :

    C++ signature :
        double height(class PyDbTable {lvalue})'''
    ...
    def hitTest (self, *args, **kwargs)-> tuple :
      '''hitTest( (Table)arg1, (Point3d)arg2, (Vector3d)arg3, (float)arg4, (float)arg5) -> tuple :

    C++ signature :
        class boost::python::tuple hitTest(class PyDbTable {lvalue},class AcGePoint3d,class AcGeVector3d,double,double)'''
    ...
    def horzCellMargin (self, *args, **kwargs)-> float :
      '''horzCellMargin( (Table)arg1) -> float :

    C++ signature :
        double horzCellMargin(class PyDbTable {lvalue})'''
    ...
    def insertColumns (self, *args, **kwargs)-> ErrorStatus :
      '''insertColumns( (Table)arg1, (int)arg2, (float)arg3, (int)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus insertColumns(class PyDbTable {lvalue},int,double,int)'''
    ...
    def insertColumnsAndInherit (self, *args, **kwargs)-> ErrorStatus :
      '''insertColumnsAndInherit( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus insertColumnsAndInherit(class PyDbTable {lvalue},int,int,int)'''
    ...
    def insertRows (self, *args, **kwargs)-> ErrorStatus :
      '''insertRows( (Table)arg1, (int)arg2, (float)arg3, (int)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus insertRows(class PyDbTable {lvalue},int,double,int)'''
    ...
    def insertRowsAndInherit (self, *args, **kwargs)-> ErrorStatus :
      '''insertRowsAndInherit( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus insertRowsAndInherit(class PyDbTable {lvalue},int,int,int)'''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isAutoScale (self, *args, **kwargs)-> bool :
      '''isAutoScale( (Table)arg1, (int)arg2, (int)arg3) -> bool :

    C++ signature :
        bool isAutoScale(class PyDbTable {lvalue},int,int)

isAutoScale( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> bool :

    C++ signature :
        bool isAutoScale(class PyDbTable {lvalue},int,int,int)'''
    ...
    def isBackgroundColorNone (self, *args, **kwargs)-> bool :
      '''isBackgroundColorNone( (Table)arg1, (RowType)arg2) -> bool :

    C++ signature :
        bool isBackgroundColorNone(class PyDbTable {lvalue},enum AcDb::RowType)

isBackgroundColorNone( (Table)arg1, (int)arg2, (int)arg3) -> bool :

    C++ signature :
        bool isBackgroundColorNone(class PyDbTable {lvalue},int,int)'''
    ...
    def isBreakEnabled (self, *args, **kwargs)-> bool :
      '''isBreakEnabled( (Table)arg1) -> bool :

    C++ signature :
        bool isBreakEnabled(class PyDbTable {lvalue})'''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isContentEditable (self, *args, **kwargs)-> bool :
      '''isContentEditable( (Table)arg1, (int)arg2, (int)arg3) -> bool :

    C++ signature :
        bool isContentEditable(class PyDbTable {lvalue},int,int)'''
    ...
    def isEmpty (self, *args, **kwargs)-> bool :
      '''isEmpty( (Table)arg1, (int)arg2, (int)arg3) -> bool :

    C++ signature :
        bool isEmpty(class PyDbTable {lvalue},int,int)'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isFormatEditable (self, *args, **kwargs)-> bool :
      '''isFormatEditable( (Table)arg1, (int)arg2, (int)arg3) -> bool :

    C++ signature :
        bool isFormatEditable(class PyDbTable {lvalue},int,int)'''
    ...
    def isHeaderSuppressed (self, *args, **kwargs)-> bool :
      '''isHeaderSuppressed( (Table)arg1) -> bool :

    C++ signature :
        bool isHeaderSuppressed(class PyDbTable {lvalue})'''
    ...
    def isLinked (self, *args, **kwargs)-> bool :
      '''isLinked( (Table)arg1, (int)arg2, (int)arg3) -> bool :

    C++ signature :
        bool isLinked(class PyDbTable {lvalue},int,int)'''
    ...
    def isMergeAllEnabled (self, *args, **kwargs)-> bool :
      '''isMergeAllEnabled( (Table)arg1, (int)arg2, (int)arg3) -> bool :

    C++ signature :
        bool isMergeAllEnabled(class PyDbTable {lvalue},int,int)'''
    ...
    def isMergedCell (self, *args, **kwargs)-> tuple :
      '''isMergedCell( (Table)arg1, (int)arg2, (int)arg3) -> tuple :

    C++ signature :
        class boost::python::tuple isMergedCell(class PyDbTable {lvalue},int,int)'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isRegenerateTableSuppressed (self, *args, **kwargs)-> bool :
      '''isRegenerateTableSuppressed( (Table)arg1) -> bool :

    C++ signature :
        bool isRegenerateTableSuppressed(class PyDbTable {lvalue})'''
    ...
    def isTitleSuppressed (self, *args, **kwargs)-> bool :
      '''isTitleSuppressed( (Table)arg1) -> bool :

    C++ signature :
        bool isTitleSuppressed(class PyDbTable {lvalue})'''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def margin (self, *args, **kwargs)-> float :
      '''margin( (Table)arg1, (int)arg2, (int)arg3, (CellMargin)arg4) -> float :

    C++ signature :
        double margin(class PyDbTable {lvalue},int,int,enum AcDb::CellMargin)'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def mergeCells (self, *args, **kwargs)-> ErrorStatus :
      '''mergeCells( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus mergeCells(class PyDbTable {lvalue},int,int,int,int)'''
    ...
    def minimumColumnWidth (self, *args, **kwargs)-> float :
      '''minimumColumnWidth( (Table)arg1, (int)arg2) -> float :

    C++ signature :
        double minimumColumnWidth(class PyDbTable {lvalue},int)'''
    ...
    def minimumRowHeight (self, *args, **kwargs)-> float :
      '''minimumRowHeight( (Table)arg1, (int)arg2) -> float :

    C++ signature :
        double minimumRowHeight(class PyDbTable {lvalue},int)'''
    ...
    def minimumTableHeight (self, *args, **kwargs)-> float :
      '''minimumTableHeight( (Table)arg1) -> float :

    C++ signature :
        double minimumTableHeight(class PyDbTable {lvalue})'''
    ...
    def minimumTableWidth (self, *args, **kwargs)-> float :
      '''minimumTableWidth( (Table)arg1) -> float :

    C++ signature :
        double minimumTableWidth(class PyDbTable {lvalue})'''
    ...
    def moveContent (self, *args, **kwargs)-> ErrorStatus :
      '''moveContent( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus moveContent(class PyDbTable {lvalue},int,int,int,int)'''
    ...
    def nonAnnotationBlockTransform (self, *args, **kwargs)-> Matrix3d :
      '''nonAnnotationBlockTransform( (BlockReference)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d nonAnnotationBlockTransform(class PyDbBlockReference {lvalue})'''
    ...
    def nonAnnotationScaleFactors (self, *args, **kwargs)-> Scale3d :
      '''nonAnnotationScaleFactors( (BlockReference)arg1) -> Scale3d :

    C++ signature :
        class AcGeScale3d nonAnnotationScaleFactors(class PyDbBlockReference {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (BlockReference)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbBlockReference {lvalue})'''
    ...
    def numColumns (self, *args, **kwargs)-> int :
      '''numColumns( (Table)arg1) -> int :

    C++ signature :
        unsigned int numColumns(class PyDbTable {lvalue})'''
    ...
    def numContents (self, *args, **kwargs)-> int :
      '''numContents( (Table)arg1, (int)arg2, (int)arg3) -> int :

    C++ signature :
        int numContents(class PyDbTable {lvalue},int,int)'''
    ...
    def numRows (self, *args, **kwargs)-> int :
      '''numRows( (Table)arg1) -> int :

    C++ signature :
        unsigned int numRows(class PyDbTable {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def position (self, *args, **kwargs)-> Point3d :
      '''position( (BlockReference)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDbBlockReference {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recomputeTableBlock (self, *args, **kwargs)-> ErrorStatus :
      '''recomputeTableBlock( (Table)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus recomputeTableBlock(class PyDbTable {lvalue},bool)'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeAllOverrides (self, *args, **kwargs)-> ErrorStatus :
      '''removeAllOverrides( (Table)arg1, (int)arg2, (int)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeAllOverrides(class PyDbTable {lvalue},int,int)'''
    ...
    def removeDataLink (self, *args, **kwargs)-> ErrorStatus :
      '''removeDataLink( (Table)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeDataLink(class PyDbTable {lvalue})

removeDataLink( (Table)arg1, (int)arg2, (int)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeDataLink(class PyDbTable {lvalue},int,int)'''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def rotation (self, *args, **kwargs)-> float :
      '''rotation( (Table)arg1) -> float :

    C++ signature :
        double rotation(class PyDbTable {lvalue})

rotation( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> float :

    C++ signature :
        double rotation(class PyDbTable {lvalue},int,int,int)'''
    ...
    def rowHeight (self, *args, **kwargs)-> float :
      '''rowHeight( (Table)arg1, (int)arg2) -> float :

    C++ signature :
        double rowHeight(class PyDbTable {lvalue},int)'''
    ...
    def rowType (self, *args, **kwargs)-> RowType :
      '''rowType( (Table)arg1, (int)arg2) -> RowType :

    C++ signature :
        enum AcDb::RowType rowType(class PyDbTable {lvalue},int)'''
    ...
    def scale (self, *args, **kwargs)-> float :
      '''scale( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> float :

    C++ signature :
        double scale(class PyDbTable {lvalue},int,int,int)'''
    ...
    def scaleFactors (self, *args, **kwargs)-> Scale3d :
      '''scaleFactors( (BlockReference)arg1) -> Scale3d :

    C++ signature :
        class AcGeScale3d scaleFactors(class PyDbBlockReference {lvalue})'''
    ...
    def setAlignment (self, *args, **kwargs)-> ErrorStatus :
      '''setAlignment( (Table)arg1, (CellAlignment)arg2, (RowType)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlignment(class PyDbTable {lvalue},enum AcDb::CellAlignment,enum AcDb::RowType)

setAlignment( (Table)arg1, (int)arg2, (int)arg3, (CellAlignment)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlignment(class PyDbTable {lvalue},int,int,enum AcDb::CellAlignment)'''
    ...
    def setAutoScale (self, *args, **kwargs)-> ErrorStatus :
      '''setAutoScale( (Table)arg1, (int)arg2, (int)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAutoScale(class PyDbTable {lvalue},int,int,bool)

setAutoScale( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (bool)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAutoScale(class PyDbTable {lvalue},int,int,int,bool)'''
    ...
    def setBackgroundColor (self, *args, **kwargs)-> ErrorStatus :
      '''setBackgroundColor( (Table)arg1, (Color)arg2, (RowType)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBackgroundColor(class PyDbTable {lvalue},class AcCmColor,enum AcDb::RowType)

setBackgroundColor( (Table)arg1, (int)arg2, (int)arg3, (Color)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBackgroundColor(class PyDbTable {lvalue},int,int,class AcCmColor)'''
    ...
    def setBackgroundColorNone (self, *args, **kwargs)-> ErrorStatus :
      '''setBackgroundColorNone( (Table)arg1, (bool)arg2, (RowType)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBackgroundColorNone(class PyDbTable {lvalue},bool,enum AcDb::RowType)

setBackgroundColorNone( (Table)arg1, (int)arg2, (int)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBackgroundColorNone(class PyDbTable {lvalue},int,int,bool)'''
    ...
    def setBlockAttributeValue (self, *args, **kwargs)-> ErrorStatus :
      '''setBlockAttributeValue( (Table)arg1, (int)arg2, (int)arg3, (ObjectId)arg4, (str)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockAttributeValue(class PyDbTable {lvalue},int,int,class PyDbObjectId,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setBlockAttributeValue( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (ObjectId)arg5, (str)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockAttributeValue(class PyDbTable {lvalue},int,int,int,class PyDbObjectId,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setBlockRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setBlockRotation( (Table)arg1, (int)arg2, (int)arg3, (float)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockRotation(class PyDbTable {lvalue},int,int,double)'''
    ...
    def setBlockScale (self, *args, **kwargs)-> ErrorStatus :
      '''setBlockScale( (Table)arg1, (int)arg2, (int)arg3, (float)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockScale(class PyDbTable {lvalue},int,int,double)'''
    ...
    def setBlockTableRecord (self, *args, **kwargs)-> ErrorStatus :
      '''setBlockTableRecord( (BlockReference)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockTableRecord(class PyDbBlockReference {lvalue},class PyDbObjectId)'''
    ...
    def setBlockTableRecordId (self, *args, **kwargs)-> ErrorStatus :
      '''setBlockTableRecordId( (Table)arg1, (int)arg2, (int)arg3, (ObjectId)arg4, (bool)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockTableRecordId(class PyDbTable {lvalue},int,int,class PyDbObjectId,bool)

setBlockTableRecordId( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (ObjectId)arg5, (bool)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockTableRecordId(class PyDbTable {lvalue},int,int,int,class PyDbObjectId,bool)'''
    ...
    def setBlockTransform (self, *args, **kwargs)-> ErrorStatus :
      '''setBlockTransform( (BlockReference)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBlockTransform(class PyDbBlockReference {lvalue},class AcGeMatrix3d)'''
    ...
    def setBreakFlowDirection (self, *args, **kwargs)-> ErrorStatus :
      '''setBreakFlowDirection( (Table)arg1, (TableBreakFlowDirection)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBreakFlowDirection(class PyDbTable {lvalue},enum AcDb::TableBreakFlowDirection)'''
    ...
    def setBreakHeight (self, *args, **kwargs)-> ErrorStatus :
      '''setBreakHeight( (Table)arg1, (int)arg2, (float)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBreakHeight(class PyDbTable {lvalue},int,double)'''
    ...
    def setBreakOffset (self, *args, **kwargs)-> ErrorStatus :
      '''setBreakOffset( (Table)arg1, (int)arg2, (Vector3d)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBreakOffset(class PyDbTable {lvalue},int,class AcGeVector3d)'''
    ...
    def setBreakOption (self, *args, **kwargs)-> ErrorStatus :
      '''setBreakOption( (Table)arg1, (TableBreakOption)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBreakOption(class PyDbTable {lvalue},enum AcDb::TableBreakOption)'''
    ...
    def setBreakSpacing (self, *args, **kwargs)-> ErrorStatus :
      '''setBreakSpacing( (Table)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBreakSpacing(class PyDbTable {lvalue},double)'''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setCellState (self, *args, **kwargs)-> ErrorStatus :
      '''setCellState( (Table)arg1, (int)arg2, (int)arg3, (CellState)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCellState(class PyDbTable {lvalue},int,int,enum AcDb::CellState)'''
    ...
    def setCellStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setCellStyle( (Table)arg1, (int)arg2, (int)arg3, (str)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCellStyle(class PyDbTable {lvalue},int,int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setCellType (self, *args, **kwargs)-> ErrorStatus :
      '''setCellType( (Table)arg1, (int)arg2, (int)arg3, (CellType)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCellType(class PyDbTable {lvalue},int,int,enum AcDb::CellType)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setColumnWidth (self, *args, **kwargs)-> ErrorStatus :
      '''setColumnWidth( (Table)arg1, (int)arg2, (float)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColumnWidth(class PyDbTable {lvalue},int,double)

setColumnWidth( (Table)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColumnWidth(class PyDbTable {lvalue},double)'''
    ...
    def setContentColor (self, *args, **kwargs)-> ErrorStatus :
      '''setContentColor( (Table)arg1, (Color)arg2, (RowType)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setContentColor(class PyDbTable {lvalue},class AcCmColor,enum AcDb::RowType)

setContentColor( (Table)arg1, (int)arg2, (int)arg3, (Color)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setContentColor(class PyDbTable {lvalue},int,int,class AcCmColor)

setContentColor( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (Color)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setContentColor(class PyDbTable {lvalue},int,int,int,class AcCmColor)'''
    ...
    def setContentLayout (self, *args, **kwargs)-> ErrorStatus :
      '''setContentLayout( (Table)arg1, (int)arg2, (int)arg3, (CellContentLayout)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setContentLayout(class PyDbTable {lvalue},int,int,enum AcDb::CellContentLayout)'''
    ...
    def setDataFormat (self, *args, **kwargs)-> ErrorStatus :
      '''setDataFormat( (Table)arg1, (int)arg2, (int)arg3, (str)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDataFormat(class PyDbTable {lvalue},int,int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setDataFormat( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (str)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDataFormat(class PyDbTable {lvalue},int,int,int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDataLink (self, *args, **kwargs)-> ErrorStatus :
      '''setDataLink( (Table)arg1, (CellRange)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDataLink(class PyDbTable {lvalue},struct AcCellRange,class PyDbObjectId,bool)'''
    ...
    def setDataType (self, *args, **kwargs)-> ErrorStatus :
      '''setDataType( (Table)arg1, (object)arg2, (object)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDataType(class PyDbTable {lvalue},enum AcValue::DataType,enum AcValue::UnitType)

setDataType( (Table)arg1, (object)arg2, (object)arg3, (RowType)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDataType(class PyDbTable {lvalue},enum AcValue::DataType,enum AcValue::UnitType,enum AcDb::RowType)

setDataType( (Table)arg1, (int)arg2, (int)arg3, (object)arg4, (object)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDataType(class PyDbTable {lvalue},int,int,enum AcValue::DataType,enum AcValue::UnitType)

setDataType( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (object)arg5, (object)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDataType(class PyDbTable {lvalue},int,int,int,enum AcValue::DataType,enum AcValue::UnitType)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDirection (self, *args, **kwargs)-> ErrorStatus :
      '''setDirection( (Table)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDirection(class PyDbTable {lvalue},class AcGeVector3d)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFieldId (self, *args, **kwargs)-> ErrorStatus :
      '''setFieldId( (Table)arg1, (int)arg2, (int)arg3, (ObjectId)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFieldId(class PyDbTable {lvalue},int,int,class PyDbObjectId)

setFieldId( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (ObjectId)arg5, (object)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFieldId(class PyDbTable {lvalue},int,int,int,class PyDbObjectId,enum AcDb::CellOption)'''
    ...
    def setFlowDirection (self, *args, **kwargs)-> ErrorStatus :
      '''setFlowDirection( (Table)arg1, (TableFlowDirection)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFlowDirection(class PyDbTable {lvalue},enum AcDb::FlowDirection)'''
    ...
    def setFormat (self, *args, **kwargs)-> ErrorStatus :
      '''setFormat( (Table)arg1, (int)arg2, (int)arg3, (str)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFormat(class PyDbTable {lvalue},int,int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setFormula (self, *args, **kwargs)-> ErrorStatus :
      '''setFormula( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (str)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFormula(class PyDbTable {lvalue},int,int,int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setGridColor (self, *args, **kwargs)-> ErrorStatus :
      '''setGridColor( (Table)arg1, (Color)arg2, (int)arg3, (int)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridColor(class PyDbTable {lvalue},class AcCmColor,int,int)

setGridColor( (Table)arg1, (int)arg2, (int)arg3, (CellEdgeMask)arg4, (Color)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridColor(class PyDbTable {lvalue},int,int,enum AcDb::CellEdgeMask,class AcCmColor)

setGridColor( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4, (Color)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridColor(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType,class AcCmColor)'''
    ...
    def setGridDoubleLineSpacing (self, *args, **kwargs)-> ErrorStatus :
      '''setGridDoubleLineSpacing( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4, (float)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridDoubleLineSpacing(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType,double)'''
    ...
    def setGridLineStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setGridLineStyle( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4, (GridLineStyle)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridLineStyle(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType,enum AcDb::GridLineStyle)'''
    ...
    def setGridLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setGridLineWeight( (Table)arg1, (LineWeight)arg2, (int)arg3, (int)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridLineWeight(class PyDbTable {lvalue},enum AcDb::LineWeight,int,int)

setGridLineWeight( (Table)arg1, (int)arg2, (int)arg3, (CellEdgeMask)arg4, (LineWeight)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridLineWeight(class PyDbTable {lvalue},int,int,enum AcDb::CellEdgeMask,enum AcDb::LineWeight)

setGridLineWeight( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4, (LineWeight)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridLineWeight(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType,enum AcDb::LineWeight)'''
    ...
    def setGridLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setGridLinetype( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4, (ObjectId)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridLinetype(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType,class PyDbObjectId)'''
    ...
    def setGridProperty (self, *args, **kwargs)-> ErrorStatus :
      '''setGridProperty( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4, (object)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridProperty(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType,struct AcGridProperty)

setGridProperty( (Table)arg1, (CellRange)arg2, (GridLineType)arg3, (object)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridProperty(class PyDbTable {lvalue},struct AcCellRange,enum AcDb::GridLineType,struct AcGridProperty)'''
    ...
    def setGridVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setGridVisibility( (Table)arg1, (Visibility)arg2, (int)arg3, (int)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridVisibility(class PyDbTable {lvalue},enum AcDb::Visibility,int,int)

setGridVisibility( (Table)arg1, (int)arg2, (int)arg3, (CellEdgeMask)arg4, (Visibility)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridVisibility(class PyDbTable {lvalue},int,int,enum AcDb::CellEdgeMask,enum AcDb::Visibility)'''
    ...
    def setGridVisibility3 (self, *args, **kwargs)-> ErrorStatus :
      '''setGridVisibility3( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4, (Visibility)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridVisibility3(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType,enum AcDb::Visibility)'''
    ...
    def setHeight (self, *args, **kwargs)-> ErrorStatus :
      '''setHeight( (Table)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHeight(class PyDbTable {lvalue},double)'''
    ...
    def setHorzCellMargin (self, *args, **kwargs)-> ErrorStatus :
      '''setHorzCellMargin( (Table)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorzCellMargin(class PyDbTable {lvalue},double)'''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMargin (self, *args, **kwargs)-> ErrorStatus :
      '''setMargin( (Table)arg1, (int)arg2, (int)arg3, (CellMargin)arg4, (float)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMargin(class PyDbTable {lvalue},int,int,enum AcDb::CellMargin,double)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs)-> ErrorStatus :
      '''setNormal( (Table)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbTable {lvalue},class AcGeVector3d)'''
    ...
    def setOverride (self, *args, **kwargs)-> ErrorStatus :
      '''setOverride( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (CellProperty)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOverride(class PyDbTable {lvalue},int,int,int,enum AcDb::CellProperty)

setOverride( (Table)arg1, (int)arg2, (int)arg3, (GridLineType)arg4, (GridProperty)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOverride(class PyDbTable {lvalue},int,int,enum AcDb::GridLineType,enum AcDb::GridProperty)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setPosition( (Table)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPosition(class PyDbTable {lvalue},class AcGePoint3d)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setRecomputeTableBlock (self, *args, **kwargs)-> None :
      '''setRecomputeTableBlock( (Table)arg1, (bool)arg2) -> None :

    C++ signature :
        void setRecomputeTableBlock(class PyDbTable {lvalue},bool)'''
    ...
    def setRegen (self, *args, **kwargs)-> None :
      '''setRegen( (Table)arg1) -> None :

    C++ signature :
        void setRegen(class PyDbTable {lvalue})'''
    ...
    def setRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setRotation( (Table)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRotation(class PyDbTable {lvalue},double)

setRotation( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (float)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRotation(class PyDbTable {lvalue},int,int,int,double)'''
    ...
    def setRowHeight (self, *args, **kwargs)-> ErrorStatus :
      '''setRowHeight( (Table)arg1, (int)arg2, (float)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRowHeight(class PyDbTable {lvalue},int,double)

setRowHeight( (Table)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRowHeight(class PyDbTable {lvalue},double)'''
    ...
    def setScale (self, *args, **kwargs)-> ErrorStatus :
      '''setScale( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (float)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setScale(class PyDbTable {lvalue},int,int,int,double)'''
    ...
    def setScaleFactors (self, *args, **kwargs)-> ErrorStatus :
      '''setScaleFactors( (BlockReference)arg1, (Scale3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setScaleFactors(class PyDbBlockReference {lvalue},class AcGeScale3d)'''
    ...
    def setSize (self, *args, **kwargs)-> ErrorStatus :
      '''setSize( (Table)arg1, (int)arg2, (int)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSize(class PyDbTable {lvalue},int,int)'''
    ...
    def setSubSelection (self, *args, **kwargs)-> ErrorStatus :
      '''setSubSelection( (Table)arg1, (CellRange)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSubSelection(class PyDbTable {lvalue},struct AcCellRange)'''
    ...
    def setTableStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setTableStyle( (Table)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTableStyle(class PyDbTable {lvalue},class PyDbObjectId)'''
    ...
    def setTextHeight (self, *args, **kwargs)-> ErrorStatus :
      '''setTextHeight( (Table)arg1, (float)arg2, (RowType)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextHeight(class PyDbTable {lvalue},double,enum AcDb::RowType)

setTextHeight( (Table)arg1, (int)arg2, (int)arg3, (float)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextHeight(class PyDbTable {lvalue},int,int,double)

setTextHeight( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (float)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextHeight(class PyDbTable {lvalue},int,int,int,double)'''
    ...
    def setTextRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setTextRotation( (Table)arg1, (int)arg2, (int)arg3, (RotationAngle)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextRotation(class PyDbTable {lvalue},int,int,enum AcDb::RotationAngle)'''
    ...
    def setTextString (self, *args, **kwargs)-> ErrorStatus :
      '''setTextString( (Table)arg1, (int)arg2, (int)arg3, (str)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextString(class PyDbTable {lvalue},int,int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setTextString( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (str)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextString(class PyDbTable {lvalue},int,int,int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setTextStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setTextStyle( (Table)arg1, (ObjectId)arg2, (RowType)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextStyle(class PyDbTable {lvalue},class PyDbObjectId,enum AcDb::RowType)

setTextStyle( (Table)arg1, (int)arg2, (int)arg3, (ObjectId)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextStyle(class PyDbTable {lvalue},int,int,class PyDbObjectId)

setTextStyle( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (ObjectId)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextStyle(class PyDbTable {lvalue},int,int,int,class PyDbObjectId)'''
    ...
    def setVertCellMargin (self, *args, **kwargs)-> ErrorStatus :
      '''setVertCellMargin( (Table)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVertCellMargin(class PyDbTable {lvalue},double)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setWidth (self, *args, **kwargs)-> ErrorStatus :
      '''setWidth( (Table)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setWidth(class PyDbTable {lvalue},double)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def suppressHeaderRow (self, *args, **kwargs)-> ErrorStatus :
      '''suppressHeaderRow( (Table)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus suppressHeaderRow(class PyDbTable {lvalue},bool)'''
    ...
    def suppressInvisibleGrid (self, *args, **kwargs)-> None :
      '''suppressInvisibleGrid( (Table)arg1, (bool)arg2) -> None :

    C++ signature :
        void suppressInvisibleGrid(class PyDbTable {lvalue},bool)'''
    ...
    def suppressRegenerateTable (self, *args, **kwargs)-> None :
      '''suppressRegenerateTable( (Table)arg1, (bool)arg2) -> None :

    C++ signature :
        void suppressRegenerateTable(class PyDbTable {lvalue},bool)'''
    ...
    def suppressTitleRow (self, *args, **kwargs)-> ErrorStatus :
      '''suppressTitleRow( (Table)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus suppressTitleRow(class PyDbTable {lvalue},bool)'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def tableStyle (self, *args, **kwargs)-> ObjectId :
      '''tableStyle( (Table)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId tableStyle(class PyDbTable {lvalue})'''
    ...
    def tableStyleOverrides (self, *args, **kwargs)-> list :
      '''tableStyleOverrides( (Table)arg1) -> list :

    C++ signature :
        class boost::python::list tableStyleOverrides(class PyDbTable {lvalue})'''
    ...
    def textHeight (self, *args, **kwargs)-> float :
      '''textHeight( (Table)arg1, (RowType)arg2) -> float :

    C++ signature :
        double textHeight(class PyDbTable {lvalue},enum AcDb::RowType)

textHeight( (Table)arg1, (int)arg2, (int)arg3) -> float :

    C++ signature :
        double textHeight(class PyDbTable {lvalue},int,int)

textHeight( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> float :

    C++ signature :
        double textHeight(class PyDbTable {lvalue},int,int,int)'''
    ...
    def textRotation (self, *args, **kwargs)-> RotationAngle :
      '''textRotation( (Table)arg1, (int)arg2, (int)arg3) -> RotationAngle :

    C++ signature :
        enum AcDb::RotationAngle textRotation(class PyDbTable {lvalue},int,int)'''
    ...
    def textString (self, *args, **kwargs)-> str :
      '''textString( (Table)arg1, (int)arg2, (int)arg3) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > textString(class PyDbTable {lvalue},int,int)

textString( (Table)arg1, (int)arg2, (int)arg3, (object)arg4) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > textString(class PyDbTable {lvalue},int,int,enum AcValue::FormatOption)

textString( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > textString(class PyDbTable {lvalue},int,int,int)

textString( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (object)arg5) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > textString(class PyDbTable {lvalue},int,int,int,enum AcValue::FormatOption)'''
    ...
    def textStyle (self, *args, **kwargs)-> ObjectId :
      '''textStyle( (Table)arg1, (RowType)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyle(class PyDbTable {lvalue},enum AcDb::RowType)

textStyle( (Table)arg1, (int)arg2, (int)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyle(class PyDbTable {lvalue},int,int)

textStyle( (Table)arg1, (int)arg2, (int)arg3, (int)arg4) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyle(class PyDbTable {lvalue},int,int,int)'''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def treatAsAcDbBlockRefForExplode (self, *args, **kwargs)-> bool :
      '''treatAsAcDbBlockRefForExplode( (BlockReference)arg1) -> bool :

    C++ signature :
        bool treatAsAcDbBlockRefForExplode(class PyDbBlockReference {lvalue})'''
    ...
    def unmergeCells (self, *args, **kwargs)-> ErrorStatus :
      '''unmergeCells( (Table)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus unmergeCells(class PyDbTable {lvalue},int,int,int,int)'''
    ...
    def updateDataLink (self, *args, **kwargs)-> ErrorStatus :
      '''updateDataLink( (Table)arg1, (UpdateDirection)arg2, (UpdateOption)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus updateDataLink(class PyDbTable {lvalue},enum AcDb::UpdateDirection,enum AcDb::UpdateOption)

updateDataLink( (Table)arg1, (int)arg2, (int)arg3, (UpdateDirection)arg4, (UpdateOption)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus updateDataLink(class PyDbTable {lvalue},int,int,enum AcDb::UpdateDirection,enum AcDb::UpdateOption)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def vertCellMargin (self, *args, **kwargs)-> float :
      '''vertCellMargin( (Table)arg1) -> float :

    C++ signature :
        double vertCellMargin(class PyDbTable {lvalue})'''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def width (self, *args, **kwargs)-> float :
      '''width( (Table)arg1) -> float :

    C++ signature :
        double width(class PyDbTable {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class TableBreakFlowDirection:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kTableBreakFlowDownOrUp (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableBreakFlowLeft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableIteratorNone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class TableBreakOption:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kTableBreakAllowManualHeights (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableBreakAllowManualPositions (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableBreakEnableBreaking (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableBreakNone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableBreakRepeatBottomLabels (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableBreakRepeatTopLabels (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class TableFlowDirection:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kExactly (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTtoB (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class TableHitItem:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kTableHitCell (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableHitColumnIndicator (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableHitGridLine (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableHitNone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableHitRowIndicator (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class TableIteratorOption:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kTableIteratorIterateColumns (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableIteratorIterateDataLinks (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableIteratorIterateRows (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableIteratorIterateSelection (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableIteratorNone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableIteratorReverseOrder (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableIteratorSkipMerged (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableIteratorSkipReadOnlyContent (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTableIteratorSkipReadOnlyFormat (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class TableStyle:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def alignment (self, *args, **kwargs)-> CellAlignment :
      '''alignment( (TableStyle)arg1, (RowType)arg2) -> CellAlignment :

    C++ signature :
        enum AcDb::CellAlignment alignment(class PyDbTableStyle {lvalue},enum AcDb::RowType)

alignment( (TableStyle)arg1, (str)arg2) -> CellAlignment :

    C++ signature :
        enum AcDb::CellAlignment alignment(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def backgroundColor (self, *args, **kwargs)-> Color :
      '''backgroundColor( (TableStyle)arg1, (RowType)arg2) -> Color :

    C++ signature :
        class AcCmColor backgroundColor(class PyDbTableStyle {lvalue},enum AcDb::RowType)

backgroundColor( (TableStyle)arg1, (str)arg2) -> Color :

    C++ signature :
        class AcCmColor backgroundColor(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def bitFlags (self, *args, **kwargs)-> int :
      '''bitFlags( (TableStyle)arg1) -> int :

    C++ signature :
        unsigned int bitFlags(class PyDbTableStyle {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> TableStyle :
      '''cast( (RxObject)arg1) -> TableStyle :

    C++ signature :
        class PyDbTableStyle cast(class PyRxObject)'''
    ...
    def cellClass (self, *args, **kwargs)-> int :
      '''cellClass( (TableStyle)arg1, (str)arg2) -> int :

    C++ signature :
        int cellClass(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> TableStyle :
      '''cloneFrom( (RxObject)arg1) -> TableStyle :

    C++ signature :
        class PyDbTableStyle cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (TableStyle)arg1, (RowType)arg2) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbTableStyle {lvalue},enum AcDb::RowType)

color( (TableStyle)arg1, (str)arg2) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def copyCellStyle (self, *args, **kwargs)-> ErrorStatus :
      '''copyCellStyle( (TableStyle)arg1, (str)arg2, (str)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus copyCellStyle(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def createCellStyle (self, *args, **kwargs)-> str :
      '''createCellStyle( (TableStyle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > createCellStyle(class PyDbTableStyle {lvalue})

createCellStyle( (TableStyle)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createCellStyle(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

createCellStyle( (TableStyle)arg1, (str)arg2, (str)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus createCellStyle(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def deleteCellStyle (self, *args, **kwargs)-> ErrorStatus :
      '''deleteCellStyle( (TableStyle)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus deleteCellStyle(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def description (self, *args, **kwargs)-> str :
      '''description( (TableStyle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > description(class PyDbTableStyle {lvalue})'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def enableMergeAll (self, *args, **kwargs)-> ErrorStatus :
      '''enableMergeAll( (TableStyle)arg1, (bool)arg2, (str)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus enableMergeAll(class PyDbTableStyle {lvalue},bool,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def flowDirection (self, *args, **kwargs)-> TableFlowDirection :
      '''flowDirection( (TableStyle)arg1) -> TableFlowDirection :

    C++ signature :
        enum AcDb::FlowDirection flowDirection(class PyDbTableStyle {lvalue})'''
    ...
    def format (self, *args, **kwargs)-> str :
      '''format( (TableStyle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > format(class PyDbTableStyle {lvalue})

format( (TableStyle)arg1, (RowType)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > format(class PyDbTableStyle {lvalue},enum AcDb::RowType)

format( (TableStyle)arg1, (str)arg2) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > format(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getCellStyles (self, *args, **kwargs)-> list :
      '''getCellStyles( (TableStyle)arg1) -> list :

    C++ signature :
        class boost::python::list getCellStyles(class PyDbTableStyle {lvalue})'''
    ...
    def getDataType (self, *args, **kwargs)-> tuple :
      '''getDataType( (TableStyle)arg1, (RowType)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple getDataType(class PyDbTableStyle {lvalue},enum AcDb::RowType)

getDataType( (TableStyle)arg1, (str)arg2) -> tuple :

    C++ signature :
        class boost::python::tuple getDataType(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGridProperty (self, *args, **kwargs)-> object :
      '''getGridProperty( (TableStyle)arg1, (GridLineType)arg2, (str)arg3) -> object :

    C++ signature :
        struct AcGridProperty getGridProperty(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getName (self, *args, **kwargs)-> str :
      '''getName( (TableStyle)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getName(class PyDbTableStyle {lvalue})'''
    ...
    def getTemplate (self, *args, **kwargs)-> ObjectId :
      '''getTemplate( (TableStyle)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getTemplate(class PyDbTableStyle {lvalue})'''
    ...
    def gridColor (self, *args, **kwargs)-> Color :
      '''gridColor( (TableStyle)arg1, (GridLineType)arg2, (RowType)arg3) -> Color :

    C++ signature :
        class AcCmColor gridColor(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,enum AcDb::RowType)

gridColor( (TableStyle)arg1, (GridLineType)arg2, (str)arg3) -> Color :

    C++ signature :
        class AcCmColor gridColor(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def gridDoubleLineSpacing (self, *args, **kwargs)-> float :
      '''gridDoubleLineSpacing( (TableStyle)arg1, (GridLineType)arg2, (str)arg3) -> float :

    C++ signature :
        double gridDoubleLineSpacing(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def gridLineStyle (self, *args, **kwargs)-> GridLineStyle :
      '''gridLineStyle( (TableStyle)arg1, (GridLineType)arg2, (str)arg3) -> GridLineStyle :

    C++ signature :
        enum AcDb::GridLineStyle gridLineStyle(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def gridLineWeight (self, *args, **kwargs)-> LineWeight :
      '''gridLineWeight( (TableStyle)arg1, (GridLineType)arg2, (RowType)arg3) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight gridLineWeight(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,enum AcDb::RowType)

gridLineWeight( (TableStyle)arg1, (GridLineType)arg2, (str)arg3) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight gridLineWeight(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def gridLinetype (self, *args, **kwargs)-> ObjectId :
      '''gridLinetype( (TableStyle)arg1, (GridLineType)arg2, (str)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId gridLinetype(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def gridVisibility (self, *args, **kwargs)-> Visibility :
      '''gridVisibility( (TableStyle)arg1, (GridLineType)arg2, (RowType)arg3) -> Visibility :

    C++ signature :
        enum AcDb::Visibility gridVisibility(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,enum AcDb::RowType)

gridVisibility( (TableStyle)arg1, (GridLineType)arg2, (str)arg3) -> Visibility :

    C++ signature :
        enum AcDb::Visibility gridVisibility(class PyDbTableStyle {lvalue},enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def horzCellMargin (self, *args, **kwargs)-> float :
      '''horzCellMargin( (TableStyle)arg1) -> float :

    C++ signature :
        double horzCellMargin(class PyDbTableStyle {lvalue})'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isBackgroundColorNone (self, *args, **kwargs)-> bool :
      '''isBackgroundColorNone( (TableStyle)arg1, (RowType)arg2) -> bool :

    C++ signature :
        bool isBackgroundColorNone(class PyDbTableStyle {lvalue},enum AcDb::RowType)'''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCellStyleInUse (self, *args, **kwargs)-> bool :
      '''isCellStyleInUse( (TableStyle)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isCellStyleInUse(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isHeaderSuppressed (self, *args, **kwargs)-> bool :
      '''isHeaderSuppressed( (TableStyle)arg1) -> bool :

    C++ signature :
        bool isHeaderSuppressed(class PyDbTableStyle {lvalue})'''
    ...
    def isMergeAllEnabled (self, *args, **kwargs)-> bool :
      '''isMergeAllEnabled( (TableStyle)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isMergeAllEnabled(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTitleSuppressed (self, *args, **kwargs)-> bool :
      '''isTitleSuppressed( (TableStyle)arg1) -> bool :

    C++ signature :
        bool isTitleSuppressed(class PyDbTableStyle {lvalue})'''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def margin (self, *args, **kwargs)-> float :
      '''margin( (TableStyle)arg1, (CellMargin)arg2, (str)arg3) -> float :

    C++ signature :
        double margin(class PyDbTableStyle {lvalue},enum AcDb::CellMargin,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def numCellStyles (self, *args, **kwargs)-> int :
      '''numCellStyles( (TableStyle)arg1) -> int :

    C++ signature :
        int numCellStyles(class PyDbTableStyle {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def postTableStyleToDb (self, *args, **kwargs)-> ObjectId :
      '''postTableStyleToDb( (TableStyle)arg1, (Database)arg2, (str)arg3) -> ObjectId :

    C++ signature :
        class PyDbObjectId postTableStyleToDb(class PyDbTableStyle {lvalue},class PyDbDatabase {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removeTemplate (self, *args, **kwargs)-> ObjectId :
      '''removeTemplate( (TableStyle)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId removeTemplate(class PyDbTableStyle {lvalue})'''
    ...
    def renameCellStyle (self, *args, **kwargs)-> ErrorStatus :
      '''renameCellStyle( (TableStyle)arg1, (str)arg2, (str)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus renameCellStyle(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def rotation (self, *args, **kwargs)-> float :
      '''rotation( (TableStyle)arg1, (str)arg2) -> float :

    C++ signature :
        double rotation(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setAlignment (self, *args, **kwargs)-> ErrorStatus :
      '''setAlignment( (TableStyle)arg1, (CellAlignment)arg2, (RowType)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlignment(class PyDbTableStyle {lvalue},enum AcDb::CellAlignment,enum AcDb::RowType)

setAlignment( (TableStyle)arg1, (CellAlignment)arg2, (str)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlignment(class PyDbTableStyle {lvalue},enum AcDb::CellAlignment,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setBackgroundColor (self, *args, **kwargs)-> ErrorStatus :
      '''setBackgroundColor( (TableStyle)arg1, (Color)arg2, (RowType)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBackgroundColor(class PyDbTableStyle {lvalue},class AcCmColor,enum AcDb::RowType)

setBackgroundColor( (TableStyle)arg1, (Color)arg2, (str)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBackgroundColor(class PyDbTableStyle {lvalue},class AcCmColor,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setBackgroundColorNone (self, *args, **kwargs)-> ErrorStatus :
      '''setBackgroundColorNone( (TableStyle)arg1, (bool)arg2, (RowType)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBackgroundColorNone(class PyDbTableStyle {lvalue},bool,enum AcDb::RowType)'''
    ...
    def setBitFlags (self, *args, **kwargs)-> ErrorStatus :
      '''setBitFlags( (TableStyle)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBitFlags(class PyDbTableStyle {lvalue},unsigned int)'''
    ...
    def setCellClass (self, *args, **kwargs)-> ErrorStatus :
      '''setCellClass( (TableStyle)arg1, (int)arg2, (str)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCellClass(class PyDbTableStyle {lvalue},int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (TableStyle)arg1, (Color)arg2, (RowType)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbTableStyle {lvalue},class AcCmColor,enum AcDb::RowType)

setColor( (TableStyle)arg1, (Color)arg2, (str)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbTableStyle {lvalue},class AcCmColor,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDataType (self, *args, **kwargs)-> ErrorStatus :
      '''setDataType( (TableStyle)arg1, (object)arg2, (object)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDataType(class PyDbTableStyle {lvalue},enum AcValue::DataType,enum AcValue::UnitType)

setDataType( (TableStyle)arg1, (object)arg2, (object)arg3, (RowType)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDataType(class PyDbTableStyle {lvalue},enum AcValue::DataType,enum AcValue::UnitType,enum AcDb::RowType)

setDataType( (TableStyle)arg1, (object)arg2, (object)arg3, (str)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDataType(class PyDbTableStyle {lvalue},enum AcValue::DataType,enum AcValue::UnitType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setDescription (self, *args, **kwargs)-> ErrorStatus :
      '''setDescription( (TableStyle)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDescription(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFlowDirection (self, *args, **kwargs)-> ErrorStatus :
      '''setFlowDirection( (TableStyle)arg1, (TableFlowDirection)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFlowDirection(class PyDbTableStyle {lvalue},enum AcDb::FlowDirection)'''
    ...
    def setFormat (self, *args, **kwargs)-> ErrorStatus :
      '''setFormat( (TableStyle)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFormat(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setFormat( (TableStyle)arg1, (str)arg2, (RowType)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFormat(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,enum AcDb::RowType)

setFormat( (TableStyle)arg1, (str)arg2, (str)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFormat(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setGridColor (self, *args, **kwargs)-> ErrorStatus :
      '''setGridColor( (TableStyle)arg1, (Color)arg2, (GridLineType)arg3, (RowType)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridColor(class PyDbTableStyle {lvalue},class AcCmColor,enum AcDb::GridLineType,enum AcDb::RowType)

setGridColor( (TableStyle)arg1, (Color)arg2, (GridLineType)arg3, (str)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridColor(class PyDbTableStyle {lvalue},class AcCmColor,enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setGridDoubleLineSpacing (self, *args, **kwargs)-> ErrorStatus :
      '''setGridDoubleLineSpacing( (TableStyle)arg1, (float)arg2, (GridLineType)arg3, (str)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridDoubleLineSpacing(class PyDbTableStyle {lvalue},double,enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setGridLineStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setGridLineStyle( (TableStyle)arg1, (GridLineStyle)arg2, (GridLineType)arg3, (str)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridLineStyle(class PyDbTableStyle {lvalue},enum AcDb::GridLineStyle,enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setGridLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setGridLineWeight( (TableStyle)arg1, (LineWeight)arg2, (GridLineType)arg3, (RowType)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridLineWeight(class PyDbTableStyle {lvalue},enum AcDb::LineWeight,enum AcDb::GridLineType,enum AcDb::RowType)

setGridLineWeight( (TableStyle)arg1, (LineWeight)arg2, (GridLineType)arg3, (str)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridLineWeight(class PyDbTableStyle {lvalue},enum AcDb::LineWeight,enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setGridLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setGridLinetype( (TableStyle)arg1, (ObjectId)arg2, (GridLineType)arg3, (str)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridLinetype(class PyDbTableStyle {lvalue},class PyDbObjectId,enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setGridProperty (self, *args, **kwargs)-> ErrorStatus :
      '''setGridProperty( (TableStyle)arg1, (object)arg2, (GridLineType)arg3, (str)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridProperty(class PyDbTableStyle {lvalue},struct AcGridProperty,enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setGridVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setGridVisibility( (TableStyle)arg1, (Visibility)arg2, (GridLineType)arg3, (RowType)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridVisibility(class PyDbTableStyle {lvalue},enum AcDb::Visibility,enum AcDb::GridLineType,enum AcDb::RowType)

setGridVisibility( (TableStyle)arg1, (Visibility)arg2, (GridLineType)arg3, (str)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridVisibility(class PyDbTableStyle {lvalue},enum AcDb::Visibility,enum AcDb::GridLineType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setHorzCellMargin (self, *args, **kwargs)-> ErrorStatus :
      '''setHorzCellMargin( (TableStyle)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorzCellMargin(class PyDbTableStyle {lvalue},double)'''
    ...
    def setMargin (self, *args, **kwargs)-> ErrorStatus :
      '''setMargin( (TableStyle)arg1, (CellMargin)arg2, (float)arg3, (str)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMargin(class PyDbTableStyle {lvalue},enum AcDb::CellMargin,double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setName (self, *args, **kwargs)-> ErrorStatus :
      '''setName( (TableStyle)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setName(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setRotation( (TableStyle)arg1, (float)arg2, (str)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRotation(class PyDbTableStyle {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setTemplate (self, *args, **kwargs)-> ErrorStatus :
      '''setTemplate( (TableStyle)arg1, (ObjectId)arg2, (MergeCellStyleOption)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTemplate(class PyDbTableStyle {lvalue},class PyDbObjectId,enum AcDb::MergeCellStyleOption)'''
    ...
    def setTextHeight (self, *args, **kwargs)-> ErrorStatus :
      '''setTextHeight( (TableStyle)arg1, (float)arg2, (RowType)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextHeight(class PyDbTableStyle {lvalue},double,enum AcDb::RowType)

setTextHeight( (TableStyle)arg1, (float)arg2, (str)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextHeight(class PyDbTableStyle {lvalue},double,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setTextStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setTextStyle( (TableStyle)arg1, (ObjectId)arg2, (RowType)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextStyle(class PyDbTableStyle {lvalue},class PyDbObjectId,enum AcDb::RowType)

setTextStyle( (TableStyle)arg1, (ObjectId)arg2, (str)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextStyle(class PyDbTableStyle {lvalue},class PyDbObjectId,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setVertCellMargin (self, *args, **kwargs)-> ErrorStatus :
      '''setVertCellMargin( (TableStyle)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVertCellMargin(class PyDbTableStyle {lvalue},double)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def suppressHeaderRow (self, *args, **kwargs)-> ErrorStatus :
      '''suppressHeaderRow( (TableStyle)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus suppressHeaderRow(class PyDbTableStyle {lvalue},bool)'''
    ...
    def suppressTitleRow (self, *args, **kwargs)-> ErrorStatus :
      '''suppressTitleRow( (TableStyle)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus suppressTitleRow(class PyDbTableStyle {lvalue},bool)'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def textHeight (self, *args, **kwargs)-> float :
      '''textHeight( (TableStyle)arg1, (RowType)arg2) -> float :

    C++ signature :
        double textHeight(class PyDbTableStyle {lvalue},enum AcDb::RowType)

textHeight( (TableStyle)arg1, (str)arg2) -> float :

    C++ signature :
        double textHeight(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def textStyle (self, *args, **kwargs)-> ObjectId :
      '''textStyle( (TableStyle)arg1, (RowType)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyle(class PyDbTableStyle {lvalue},enum AcDb::RowType)

textStyle( (TableStyle)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyle(class PyDbTableStyle {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def vertCellMargin (self, *args, **kwargs)-> float :
      '''vertCellMargin( (TableStyle)arg1) -> float :

    C++ signature :
        double vertCellMargin(class PyDbTableStyle {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class Text:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2, (str)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

__init__( (object)arg1, (Point3d)arg2, (str)arg3, (ObjectId)arg4, (float)arg5, (float)arg6) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class PyDbObjectId {lvalue},double,double)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def adjustAlignment (self, *args, **kwargs)-> ErrorStatus :
      '''adjustAlignment( (Text)arg1, (Database)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus adjustAlignment(class PyDbText {lvalue},class PyDbDatabase)'''
    ...
    def alignmentPoint (self, *args, **kwargs)-> Point3d :
      '''alignmentPoint( (Text)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d alignmentPoint(class PyDbText {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Text :
      '''cast( (RxObject)arg1) -> Text :

    C++ signature :
        class PyDbText cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Text :
      '''cloneFrom( (RxObject)arg1) -> Text :

    C++ signature :
        class PyDbText cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def convertFieldToText (self, *args, **kwargs)-> ErrorStatus :
      '''convertFieldToText( (Text)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus convertFieldToText(class PyDbText {lvalue})'''
    ...
    def correctSpelling (self, *args, **kwargs)-> int :
      '''correctSpelling( (Text)arg1) -> int :

    C++ signature :
        int correctSpelling(class PyDbText {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getBoundingPoints (self, *args, **kwargs)-> list :
      '''getBoundingPoints( (Text)arg1) -> list :

    C++ signature :
        class boost::python::list getBoundingPoints(class PyDbText {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def height (self, *args, **kwargs)-> float :
      '''height( (Text)arg1) -> float :

    C++ signature :
        double height(class PyDbText {lvalue})'''
    ...
    def hitTest (self, *args, **kwargs)-> bool :
      '''hitTest( (Text)arg1, (Point3d)arg2) -> bool :

    C++ signature :
        bool hitTest(class PyDbText {lvalue},class AcGePoint3d)'''
    ...
    def horizontalMode (self, *args, **kwargs)-> TextHorzMode :
      '''horizontalMode( (Text)arg1) -> TextHorzMode :

    C++ signature :
        enum AcDb::TextHorzMode horizontalMode(class PyDbText {lvalue})'''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isDefaultAlignment (self, *args, **kwargs)-> bool :
      '''isDefaultAlignment( (Text)arg1) -> bool :

    C++ signature :
        bool isDefaultAlignment(class PyDbText {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isMirroredInX (self, *args, **kwargs)-> bool :
      '''isMirroredInX( (Text)arg1) -> bool :

    C++ signature :
        bool isMirroredInX(class PyDbText {lvalue})'''
    ...
    def isMirroredInY (self, *args, **kwargs)-> bool :
      '''isMirroredInY( (Text)arg1) -> bool :

    C++ signature :
        bool isMirroredInY(class PyDbText {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def justification (self, *args, **kwargs)-> TextAlignment :
      '''justification( (Text)arg1) -> TextAlignment :

    C++ signature :
        enum AcDbText::AcTextAlignment justification(class PyDbText {lvalue})'''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def mirrorInX (self, *args, **kwargs)-> ErrorStatus :
      '''mirrorInX( (Text)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus mirrorInX(class PyDbText {lvalue},bool)'''
    ...
    def mirrorInY (self, *args, **kwargs)-> ErrorStatus :
      '''mirrorInY( (Text)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus mirrorInY(class PyDbText {lvalue},bool)'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (Text)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbText {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def oblique (self, *args, **kwargs)-> float :
      '''oblique( (Text)arg1) -> float :

    C++ signature :
        double oblique(class PyDbText {lvalue})'''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def position (self, *args, **kwargs)-> Point3d :
      '''position( (Text)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDbText {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def rotation (self, *args, **kwargs)-> float :
      '''rotation( (Text)arg1) -> float :

    C++ signature :
        double rotation(class PyDbText {lvalue})'''
    ...
    def setAlignmentPoint (self, *args, **kwargs)-> ErrorStatus :
      '''setAlignmentPoint( (Text)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAlignmentPoint(class PyDbText {lvalue},class AcGePoint3d)'''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setHeight (self, *args, **kwargs)-> ErrorStatus :
      '''setHeight( (Text)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHeight(class PyDbText {lvalue},double)'''
    ...
    def setHorizontalMode (self, *args, **kwargs)-> ErrorStatus :
      '''setHorizontalMode( (Text)arg1, (TextHorzMode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHorizontalMode(class PyDbText {lvalue},enum AcDb::TextHorzMode)'''
    ...
    def setJustification (self, *args, **kwargs)-> ErrorStatus :
      '''setJustification( (Text)arg1, (TextAlignment)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setJustification(class PyDbText {lvalue},enum AcDbText::AcTextAlignment)'''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs)-> ErrorStatus :
      '''setNormal( (Text)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbText {lvalue},class AcGeVector3d)'''
    ...
    def setOblique (self, *args, **kwargs)-> ErrorStatus :
      '''setOblique( (Text)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOblique(class PyDbText {lvalue},double)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setPosition( (Text)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPosition(class PyDbText {lvalue},class AcGePoint3d)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setRotation( (Text)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRotation(class PyDbText {lvalue},double)'''
    ...
    def setTextString (self, *args, **kwargs)-> ErrorStatus :
      '''setTextString( (Text)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextString(class PyDbText {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setTextStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setTextStyle( (Text)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextStyle(class PyDbText {lvalue},class PyDbObjectId)'''
    ...
    def setThickness (self, *args, **kwargs)-> ErrorStatus :
      '''setThickness( (Text)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setThickness(class PyDbText {lvalue},double)'''
    ...
    def setVerticalMode (self, *args, **kwargs)-> ErrorStatus :
      '''setVerticalMode( (Text)arg1, (TextHorzMode)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVerticalMode(class PyDbText {lvalue},enum AcDb::TextVertMode)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setWidthFactor (self, *args, **kwargs)-> ErrorStatus :
      '''setWidthFactor( (Text)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setWidthFactor(class PyDbText {lvalue},double)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def textString (self, *args, **kwargs)-> str :
      '''textString( (Text)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > textString(class PyDbText {lvalue})'''
    ...
    def textStyle (self, *args, **kwargs)-> ObjectId :
      '''textStyle( (Text)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId textStyle(class PyDbText {lvalue})'''
    ...
    def thickness (self, *args, **kwargs)-> float :
      '''thickness( (Text)arg1) -> float :

    C++ signature :
        double thickness(class PyDbText {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def verticalMode (self, *args, **kwargs)-> TextHorzMode :
      '''verticalMode( (Text)arg1) -> TextHorzMode :

    C++ signature :
        enum AcDb::TextVertMode verticalMode(class PyDbText {lvalue})'''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def widthFactor (self, *args, **kwargs)-> float :
      '''widthFactor( (Text)arg1) -> float :

    C++ signature :
        double widthFactor(class PyDbText {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class TextAlignment:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kTextAlignmentAligned (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextAlignmentBottomCenter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextAlignmentBottomLeft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextAlignmentBottomRight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextAlignmentCenter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextAlignmentFit (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextAlignmentLeft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextAlignmentMiddle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextAlignmentMiddleCenter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextAlignmentMiddleLeft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextAlignmentMiddleRight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextAlignmentRight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextAlignmentTopCenter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextAlignmentTopLeft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextAlignmentTopRight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class TextHorzMode:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kTextAlign (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextCenter (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextFit (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextLeft (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextMid (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kTextRight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class TextStyleTableRecord:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def bigFontFileName (self, *args, **kwargs)-> str :
      '''bigFontFileName( (TextStyleTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > bigFontFileName(class PyDbTextStyleTableRecord {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> TextStyleTableRecord :
      '''cast( (RxObject)arg1) -> TextStyleTableRecord :

    C++ signature :
        class PyDbTextStyleTableRecord cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> TextStyleTableRecord :
      '''cloneFrom( (RxObject)arg1) -> TextStyleTableRecord :

    C++ signature :
        class PyDbTextStyleTableRecord cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fileName (self, *args, **kwargs)-> str :
      '''fileName( (TextStyleTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > fileName(class PyDbTextStyleTableRecord {lvalue})'''
    ...
    def flagBits (self, *args, **kwargs)-> int :
      '''flagBits( (TextStyleTableRecord)arg1) -> int :

    C++ signature :
        unsigned char flagBits(class PyDbTextStyleTableRecord {lvalue})'''
    ...
    def font (self, *args, **kwargs)-> tuple :
      '''font( (TextStyleTableRecord)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple font(class PyDbTextStyleTableRecord {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getName (self, *args, **kwargs)-> str :
      '''getName( (SymbolTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getName(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isDependent (self, *args, **kwargs)-> bool :
      '''isDependent( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isDependent(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isRenamable (self, *args, **kwargs)-> bool :
      '''isRenamable( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isRenamable(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isResolved (self, *args, **kwargs)-> bool :
      '''isResolved( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isResolved(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isShapeFile (self, *args, **kwargs)-> bool :
      '''isShapeFile( (TextStyleTableRecord)arg1) -> bool :

    C++ signature :
        bool isShapeFile(class PyDbTextStyleTableRecord {lvalue})'''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isVertical (self, *args, **kwargs)-> bool :
      '''isVertical( (TextStyleTableRecord)arg1) -> bool :

    C++ signature :
        bool isVertical(class PyDbTextStyleTableRecord {lvalue})'''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def obliquingAngle (self, *args, **kwargs)-> float :
      '''obliquingAngle( (TextStyleTableRecord)arg1) -> float :

    C++ signature :
        double obliquingAngle(class PyDbTextStyleTableRecord {lvalue})'''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def priorSize (self, *args, **kwargs)-> float :
      '''priorSize( (TextStyleTableRecord)arg1) -> float :

    C++ signature :
        double priorSize(class PyDbTextStyleTableRecord {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setBigFontFileName (self, *args, **kwargs)-> ErrorStatus :
      '''setBigFontFileName( (TextStyleTableRecord)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBigFontFileName(class PyDbTextStyleTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFileName (self, *args, **kwargs)-> ErrorStatus :
      '''setFileName( (TextStyleTableRecord)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFileName(class PyDbTextStyleTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setFlagBits (self, *args, **kwargs)-> None :
      '''setFlagBits( (TextStyleTableRecord)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlagBits(class PyDbTextStyleTableRecord {lvalue},unsigned char)'''
    ...
    def setFont (self, *args, **kwargs)-> ErrorStatus :
      '''setFont( (TextStyleTableRecord)arg1, (str)arg2, (bool)arg3, (bool)arg4, (int)arg5, (int)arg6, (int)arg7, (bool)arg8) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFont(class PyDbTextStyleTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool,int,int,int,bool)'''
    ...
    def setIsShapeFile (self, *args, **kwargs)-> None :
      '''setIsShapeFile( (TextStyleTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsShapeFile(class PyDbTextStyleTableRecord {lvalue},bool)'''
    ...
    def setIsVertical (self, *args, **kwargs)-> None :
      '''setIsVertical( (TextStyleTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsVertical(class PyDbTextStyleTableRecord {lvalue},bool)'''
    ...
    def setName (self, *args, **kwargs)-> ErrorStatus :
      '''setName( (SymbolTableRecord)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setName(class PyDbSymbolTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setObliquingAngle (self, *args, **kwargs)-> ErrorStatus :
      '''setObliquingAngle( (TextStyleTableRecord)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setObliquingAngle(class PyDbTextStyleTableRecord {lvalue},double)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPriorSize (self, *args, **kwargs)-> ErrorStatus :
      '''setPriorSize( (TextStyleTableRecord)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPriorSize(class PyDbTextStyleTableRecord {lvalue},double)'''
    ...
    def setTextSize (self, *args, **kwargs)-> ErrorStatus :
      '''setTextSize( (TextStyleTableRecord)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTextSize(class PyDbTextStyleTableRecord {lvalue},double)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def setXScale (self, *args, **kwargs)-> ErrorStatus :
      '''setXScale( (TextStyleTableRecord)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXScale(class PyDbTextStyleTableRecord {lvalue},double)'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def textSize (self, *args, **kwargs)-> float :
      '''textSize( (TextStyleTableRecord)arg1) -> float :

    C++ signature :
        double textSize(class PyDbTextStyleTableRecord {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...
    def xScale (self, *args, **kwargs)-> float :
      '''xScale( (TextStyleTableRecord)arg1) -> float :

    C++ signature :
        double xScale(class PyDbTextStyleTableRecord {lvalue})'''
    ...

class Transaction:
    def __init__ (self, *args, **kwargs)-> None:
      '''Raises an exception
This class cannot be instantiated from Python'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def getAllObjects (self, *args, **kwargs)-> list :
      '''getAllObjects( (Transaction)arg1) -> list :

    C++ signature :
        class boost::python::list getAllObjects(class PyTransaction {lvalue})'''
    ...
    def getObject (self, *args, **kwargs)-> DbObject :
      '''getObject( (Transaction)arg1, (ObjectId)arg2) -> DbObject :

    C++ signature :
        class PyDbObject getObject(class PyTransaction {lvalue},class PyDbObjectId)

getObject( (Transaction)arg1, (ObjectId)arg2, (OpenMode)arg3) -> DbObject :

    C++ signature :
        class PyDbObject getObject(class PyTransaction {lvalue},class PyDbObjectId,enum AcDb::OpenMode)

getObject( (Transaction)arg1, (ObjectId)arg2, (OpenMode)arg3, (bool)arg4) -> DbObject :

    C++ signature :
        class PyDbObject getObject(class PyTransaction {lvalue},class PyDbObjectId,enum AcDb::OpenMode,bool)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (RxObject)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyRxObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def numOpenedObjects (self, *args, **kwargs)-> int :
      '''numOpenedObjects( (TransactionManager)arg1) -> int :

    C++ signature :
        int numOpenedObjects(class PyDbTransactionManager {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...

class TransactionManager:
    def __init__ (self: TransactionManager)-> None :
      '''                             '''
    ...
    def abortTransaction (self: TransactionManager)-> ErrorStatus :
      '''                             '''
    ...
    def addNewlyCreatedDBRObject (self: TransactionManager,obj: DbObject,add: bool=True)-> ErrorStatus :
      '''                             '''
    ...
    def className ()-> str :
      '''                             '''
    ...
    def desc ()-> RxClass :
      '''                             '''
    ...
    def endTransaction (self: TransactionManager)-> ErrorStatus :
      '''                             '''
    ...
    def getAllObjects (self: TransactionManager)-> list :
      '''                             '''
    ...
    def getObject (self: TransactionManager,id: ObjectId,mode: OpenMode=OpenMode.kForRead,openErasedObject: bool=False)-> DbObject :
      '''                             '''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (RxObject)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyRxObject {lvalue})'''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def numActiveTransactions (self: TransactionManager)-> int :
      '''                             '''
    ...
    def numOpenedObjects (self: TransactionManager)-> int :
      '''                             '''
    ...
    def queueForGraphicsFlush (self: TransactionManager)-> ErrorStatus :
      '''                             '''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def startTransaction (self: TransactionManager)-> Transaction :
      '''                             '''
    ...
    def topTransaction (self: TransactionManager)-> Transaction :
      '''                             '''
    ...

class Transparency:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (int)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,unsigned char)

__init__( (object)arg1, (float)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,double)'''
    ...
    def alpha (self, *args, **kwargs)-> int :
      '''alpha( (Transparency)arg1) -> int :

    C++ signature :
        unsigned char alpha(class AcCmTransparency {lvalue})'''
    ...
    def alphaPercent (self, *args, **kwargs)-> float :
      '''alphaPercent( (Transparency)arg1) -> float :

    C++ signature :
        double alphaPercent(class AcCmTransparency {lvalue})'''
    ...
    def isByAlpha (self, *args, **kwargs)-> bool :
      '''isByAlpha( (Transparency)arg1) -> bool :

    C++ signature :
        bool isByAlpha(class AcCmTransparency {lvalue})'''
    ...
    def isByBlock (self, *args, **kwargs)-> bool :
      '''isByBlock( (Transparency)arg1) -> bool :

    C++ signature :
        bool isByBlock(class AcCmTransparency {lvalue})'''
    ...
    def isByLayer (self, *args, **kwargs)-> bool :
      '''isByLayer( (Transparency)arg1) -> bool :

    C++ signature :
        bool isByLayer(class AcCmTransparency {lvalue})'''
    ...
    def isClear (self, *args, **kwargs)-> bool :
      '''isClear( (Transparency)arg1) -> bool :

    C++ signature :
        bool isClear(class AcCmTransparency {lvalue})'''
    ...
    def isInvalid (self, *args, **kwargs)-> bool :
      '''isInvalid( (Transparency)arg1) -> bool :

    C++ signature :
        bool isInvalid(class AcCmTransparency {lvalue})'''
    ...
    def isSolid (self, *args, **kwargs)-> bool :
      '''isSolid( (Transparency)arg1) -> bool :

    C++ signature :
        bool isSolid(class AcCmTransparency {lvalue})'''
    ...
    def setAlpha (self, *args, **kwargs)-> None :
      '''setAlpha( (Transparency)arg1, (int)arg2) -> None :

    C++ signature :
        void setAlpha(class AcCmTransparency {lvalue},unsigned char)'''
    ...
    def setAlphaPercent (self, *args, **kwargs)-> None :
      '''setAlphaPercent( (Transparency)arg1, (float)arg2) -> None :

    C++ signature :
        void setAlphaPercent(class AcCmTransparency {lvalue},double)'''
    ...

class TransparencyMethod:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kByAlpha (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kByBlock (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kByLayer (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kErrorValue (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class UCSTable:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def add (self, *args, **kwargs)-> ObjectId :
      '''add( (UCSTable)arg1, (UCSTableRecord)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId add(class PyDbUCSTable {lvalue},class PyDbUCSTableRecord)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> UCSTable :
      '''cast( (RxObject)arg1) -> UCSTable :

    C++ signature :
        class PyDbUCSTable cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> UCSTable :
      '''cloneFrom( (RxObject)arg1) -> UCSTable :

    C++ signature :
        class PyDbUCSTable cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getAt (self, *args, **kwargs)-> ObjectId :
      '''getAt( (SymbolTable)arg1, (str)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId getAt(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def has (self, *args, **kwargs)-> bool :
      '''has( (SymbolTable)arg1, (str)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

has( (SymbolTable)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool has(class PyDbSymbolTable {lvalue},class PyDbObjectId)'''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def recordIds (self, *args, **kwargs)-> list :
      '''recordIds( (SymbolTable)arg1) -> list :

    C++ signature :
        class boost::python::list recordIds(class PyDbSymbolTable {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def toDict (self, *args, **kwargs)-> dict :
      '''toDict( (SymbolTable)arg1) -> dict :

    C++ signature :
        class boost::python::dict toDict(class PyDbSymbolTable {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class UCSTableRecord:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> UCSTableRecord :
      '''cast( (RxObject)arg1) -> UCSTableRecord :

    C++ signature :
        class PyDbUCSTableRecord cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> UCSTableRecord :
      '''cloneFrom( (RxObject)arg1) -> UCSTableRecord :

    C++ signature :
        class PyDbUCSTableRecord cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getName (self, *args, **kwargs)-> str :
      '''getName( (SymbolTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getName(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isDependent (self, *args, **kwargs)-> bool :
      '''isDependent( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isDependent(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isRenamable (self, *args, **kwargs)-> bool :
      '''isRenamable( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isRenamable(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isResolved (self, *args, **kwargs)-> bool :
      '''isResolved( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isResolved(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def origin (self, *args, **kwargs)-> Point3d :
      '''origin( (UCSTableRecord)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d origin(class PyDbUCSTableRecord {lvalue})'''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setName (self, *args, **kwargs)-> ErrorStatus :
      '''setName( (SymbolTableRecord)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setName(class PyDbSymbolTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOrigin (self, *args, **kwargs)-> None :
      '''setOrigin( (UCSTableRecord)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setOrigin(class PyDbUCSTableRecord {lvalue},class AcGePoint3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setUcsBaseOrigin (self, *args, **kwargs)-> ErrorStatus :
      '''setUcsBaseOrigin( (UCSTableRecord)arg1, (Point3d)arg2, (OrthographicView)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUcsBaseOrigin(class PyDbUCSTableRecord {lvalue},class AcGePoint3d,enum AcDb::OrthographicView)'''
    ...
    def setXAxis (self, *args, **kwargs)-> None :
      '''setXAxis( (UCSTableRecord)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setXAxis(class PyDbUCSTableRecord {lvalue},class AcGeVector3d)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def setYAxis (self, *args, **kwargs)-> None :
      '''setYAxis( (UCSTableRecord)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setYAxis(class PyDbUCSTableRecord {lvalue},class AcGeVector3d)'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def ucsBaseOrigin (self, *args, **kwargs)-> Point3d :
      '''ucsBaseOrigin( (UCSTableRecord)arg1, (OrthographicView)arg2) -> Point3d :

    C++ signature :
        class AcGePoint3d ucsBaseOrigin(class PyDbUCSTableRecord {lvalue},enum AcDb::OrthographicView)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def xAxis (self, *args, **kwargs)-> Vector3d :
      '''xAxis( (UCSTableRecord)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d xAxis(class PyDbUCSTableRecord {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...
    def yAxis (self, *args, **kwargs)-> Vector3d :
      '''yAxis( (UCSTableRecord)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d yAxis(class PyDbUCSTableRecord {lvalue})'''
    ...

class UnderlayDefinition:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> UnderlayDefinition :
      '''cast( (RxObject)arg1) -> UnderlayDefinition :

    C++ signature :
        class PyDbUnderlayDefinition cast(class PyRxObject)'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> UnderlayDefinition :
      '''cloneFrom( (RxObject)arg1) -> UnderlayDefinition :

    C++ signature :
        class PyDbUnderlayDefinition cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def dictionaryKey (self, *args, **kwargs)-> str :
      '''dictionaryKey( (RxClass)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > dictionaryKey(class PyRxClass)'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getActiveFileName (self, *args, **kwargs)-> str :
      '''getActiveFileName( (UnderlayDefinition)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getActiveFileName(class PyDbUnderlayDefinition {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getItemName (self, *args, **kwargs)-> str :
      '''getItemName( (UnderlayDefinition)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getItemName(class PyDbUnderlayDefinition {lvalue})'''
    ...
    def getSourceFileName (self, *args, **kwargs)-> str :
      '''getSourceFileName( (UnderlayDefinition)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getSourceFileName(class PyDbUnderlayDefinition {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isLoaded (self, *args, **kwargs)-> bool :
      '''isLoaded( (UnderlayDefinition)arg1) -> bool :

    C++ signature :
        bool isLoaded(class PyDbUnderlayDefinition {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def load (self, *args, **kwargs)-> ErrorStatus :
      '''load( (UnderlayDefinition)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus load(class PyDbUnderlayDefinition {lvalue})

load( (UnderlayDefinition)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus load(class PyDbUnderlayDefinition {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setItemName (self, *args, **kwargs)-> ErrorStatus :
      '''setItemName( (UnderlayDefinition)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setItemName(class PyDbUnderlayDefinition {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setSourceFileName (self, *args, **kwargs)-> ErrorStatus :
      '''setSourceFileName( (UnderlayDefinition)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSourceFileName(class PyDbUnderlayDefinition {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def unload (self, *args, **kwargs)-> None :
      '''unload( (UnderlayDefinition)arg1) -> None :

    C++ signature :
        void unload(class PyDbUnderlayDefinition {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class UnderlayLayer:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def name (self, *args, **kwargs)-> str :
      '''name( (UnderlayLayer)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > name(class PyUnderlayLayer {lvalue})'''
    ...
    def setName (self, *args, **kwargs)-> ErrorStatus :
      '''setName( (UnderlayLayer)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setName(class PyUnderlayLayer {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setState (self, *args, **kwargs)-> ErrorStatus :
      '''setState( (UnderlayLayer)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setState(class PyUnderlayLayer {lvalue},bool)'''
    ...
    def state (self, *args, **kwargs)-> bool :
      '''state( (UnderlayLayer)arg1) -> bool :

    C++ signature :
        bool state(class PyUnderlayLayer {lvalue})'''
    ...

class UnderlayReference:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> UnderlayReference :
      '''cast( (RxObject)arg1) -> UnderlayReference :

    C++ signature :
        class PyDbUnderlayReference cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def clipBoundary (self, *args, **kwargs)-> list :
      '''clipBoundary( (UnderlayReference)arg1) -> list :

    C++ signature :
        class boost::python::list clipBoundary(class PyDbUnderlayReference {lvalue})'''
    ...
    def cloneFrom (self, *args, **kwargs)-> UnderlayReference :
      '''cloneFrom( (RxObject)arg1) -> UnderlayReference :

    C++ signature :
        class PyDbUnderlayReference cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def contrast (self, *args, **kwargs)-> int :
      '''contrast( (UnderlayReference)arg1) -> int :

    C++ signature :
        unsigned char contrast(class PyDbUnderlayReference {lvalue})'''
    ...
    def contrastDefault (self, *args, **kwargs)-> int :
      '''contrastDefault() -> int :

    C++ signature :
        unsigned char contrastDefault()'''
    ...
    def contrastLowerLimit (self, *args, **kwargs)-> int :
      '''contrastLowerLimit() -> int :

    C++ signature :
        unsigned char contrastLowerLimit()'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def definitionId (self, *args, **kwargs)-> ObjectId :
      '''definitionId( (UnderlayReference)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId definitionId(class PyDbUnderlayReference {lvalue})'''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fade (self, *args, **kwargs)-> int :
      '''fade( (UnderlayReference)arg1) -> int :

    C++ signature :
        unsigned char fade(class PyDbUnderlayReference {lvalue})'''
    ...
    def fadeDefault (self, *args, **kwargs)-> int :
      '''fadeDefault() -> int :

    C++ signature :
        unsigned char fadeDefault()'''
    ...
    def fadeLowerLimit (self, *args, **kwargs)-> int :
      '''fadeLowerLimit() -> int :

    C++ signature :
        unsigned char fadeLowerLimit()'''
    ...
    def fadeUpperLimit (self, *args, **kwargs)-> int :
      '''fadeUpperLimit() -> int :

    C++ signature :
        unsigned char fadeUpperLimit()'''
    ...
    def generateClipBoundaryFromPline (self, *args, **kwargs)-> ErrorStatus :
      '''generateClipBoundaryFromPline( (UnderlayReference)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus generateClipBoundaryFromPline(class PyDbUnderlayReference {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def getUnderlayLayer (self, *args, **kwargs)-> UnderlayLayer :
      '''getUnderlayLayer( (UnderlayReference)arg1, (int)arg2) -> UnderlayLayer :

    C++ signature :
        class PyUnderlayLayer getUnderlayLayer(class PyDbUnderlayReference {lvalue},int)'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def height (self, *args, **kwargs)-> float :
      '''height( (UnderlayReference)arg1) -> float :

    C++ signature :
        double height(class PyDbUnderlayReference {lvalue})'''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isAdjustedForBackground (self, *args, **kwargs)-> bool :
      '''isAdjustedForBackground( (UnderlayReference)arg1) -> bool :

    C++ signature :
        bool isAdjustedForBackground(class PyDbUnderlayReference {lvalue})'''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isClipInverted (self, *args, **kwargs)-> bool :
      '''isClipInverted( (UnderlayReference)arg1) -> bool :

    C++ signature :
        bool isClipInverted(class PyDbUnderlayReference {lvalue})'''
    ...
    def isClipped (self, *args, **kwargs)-> bool :
      '''isClipped( (UnderlayReference)arg1) -> bool :

    C++ signature :
        bool isClipped(class PyDbUnderlayReference {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isFramePlottable (self, *args, **kwargs)-> bool :
      '''isFramePlottable( (UnderlayReference)arg1) -> bool :

    C++ signature :
        bool isFramePlottable(class PyDbUnderlayReference {lvalue})'''
    ...
    def isFrameVisible (self, *args, **kwargs)-> bool :
      '''isFrameVisible( (UnderlayReference)arg1) -> bool :

    C++ signature :
        bool isFrameVisible(class PyDbUnderlayReference {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isMonochrome (self, *args, **kwargs)-> bool :
      '''isMonochrome( (UnderlayReference)arg1) -> bool :

    C++ signature :
        bool isMonochrome(class PyDbUnderlayReference {lvalue})'''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isOn (self, *args, **kwargs)-> bool :
      '''isOn( (UnderlayReference)arg1) -> bool :

    C++ signature :
        bool isOn(class PyDbUnderlayReference {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def normal (self, *args, **kwargs)-> Vector3d :
      '''normal( (UnderlayReference)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d normal(class PyDbUnderlayReference {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def position (self, *args, **kwargs)-> Point3d :
      '''position( (UnderlayReference)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDbUnderlayReference {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def rotation (self, *args, **kwargs)-> float :
      '''rotation( (UnderlayReference)arg1) -> float :

    C++ signature :
        double rotation(class PyDbUnderlayReference {lvalue})'''
    ...
    def scaleFactors (self, *args, **kwargs)-> Scale3d :
      '''scaleFactors( (UnderlayReference)arg1) -> Scale3d :

    C++ signature :
        class AcGeScale3d scaleFactors(class PyDbUnderlayReference {lvalue})'''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setClipBoundary (self, *args, **kwargs)-> ErrorStatus :
      '''setClipBoundary( (UnderlayReference)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setClipBoundary(class PyDbUnderlayReference {lvalue},class boost::python::list)'''
    ...
    def setClipInverted (self, *args, **kwargs)-> ErrorStatus :
      '''setClipInverted( (UnderlayReference)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setClipInverted(class PyDbUnderlayReference {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setContrast (self, *args, **kwargs)-> ErrorStatus :
      '''setContrast( (UnderlayReference)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setContrast(class PyDbUnderlayReference {lvalue},unsigned char)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDefinitionId (self, *args, **kwargs)-> ErrorStatus :
      '''setDefinitionId( (UnderlayReference)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDefinitionId(class PyDbUnderlayReference {lvalue},class PyDbObjectId)'''
    ...
    def setFade (self, *args, **kwargs)-> ErrorStatus :
      '''setFade( (UnderlayReference)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFade(class PyDbUnderlayReference {lvalue},unsigned char)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setHeight (self, *args, **kwargs)-> ErrorStatus :
      '''setHeight( (UnderlayReference)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHeight(class PyDbUnderlayReference {lvalue},double)'''
    ...
    def setIsAdjustedForBackground (self, *args, **kwargs)-> ErrorStatus :
      '''setIsAdjustedForBackground( (UnderlayReference)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setIsAdjustedForBackground(class PyDbUnderlayReference {lvalue},bool)'''
    ...
    def setIsClipped (self, *args, **kwargs)-> ErrorStatus :
      '''setIsClipped( (UnderlayReference)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setIsClipped(class PyDbUnderlayReference {lvalue},bool)'''
    ...
    def setIsMonochrome (self, *args, **kwargs)-> ErrorStatus :
      '''setIsMonochrome( (UnderlayReference)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setIsMonochrome(class PyDbUnderlayReference {lvalue},bool)'''
    ...
    def setIsOn (self, *args, **kwargs)-> ErrorStatus :
      '''setIsOn( (UnderlayReference)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setIsOn(class PyDbUnderlayReference {lvalue},bool)'''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setNormal (self, *args, **kwargs)-> ErrorStatus :
      '''setNormal( (UnderlayReference)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNormal(class PyDbUnderlayReference {lvalue},class AcGeVector3d)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setPosition( (UnderlayReference)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPosition(class PyDbUnderlayReference {lvalue},class AcGePoint3d)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setRotation (self, *args, **kwargs)-> ErrorStatus :
      '''setRotation( (UnderlayReference)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setRotation(class PyDbUnderlayReference {lvalue},double)'''
    ...
    def setScaleFactors (self, *args, **kwargs)-> ErrorStatus :
      '''setScaleFactors( (UnderlayReference)arg1, (Scale3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setScaleFactors(class PyDbUnderlayReference {lvalue},class AcGeScale3d)'''
    ...
    def setTransform (self, *args, **kwargs)-> ErrorStatus :
      '''setTransform( (UnderlayReference)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTransform(class PyDbUnderlayReference {lvalue},class AcGeMatrix3d)'''
    ...
    def setUnderlayLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setUnderlayLayer( (UnderlayReference)arg1, (int)arg2, (UnderlayLayer)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUnderlayLayer(class PyDbUnderlayReference {lvalue},int,class PyUnderlayLayer)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setWidth (self, *args, **kwargs)-> ErrorStatus :
      '''setWidth( (UnderlayReference)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setWidth(class PyDbUnderlayReference {lvalue},double)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def transform (self, *args, **kwargs)-> Matrix3d :
      '''transform( (UnderlayReference)arg1) -> Matrix3d :

    C++ signature :
        class AcGeMatrix3d transform(class PyDbUnderlayReference {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def underlayLayerCount (self, *args, **kwargs)-> int :
      '''underlayLayerCount( (UnderlayReference)arg1) -> int :

    C++ signature :
        unsigned int underlayLayerCount(class PyDbUnderlayReference {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def width (self, *args, **kwargs)-> float :
      '''width( (UnderlayReference)arg1) -> float :

    C++ signature :
        double width(class PyDbUnderlayReference {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class UnitsValue:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kUnitsAngstroms (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsAstronomical (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsCentimeters (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsDecimeters (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsDekameters (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsFeet (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsGigameters (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsHectometers (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsInches (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsKilometers (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsLightYears (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsMax (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsMeters (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsMicroinches (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsMicrons (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsMiles (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsMillimeters (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsMils (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsNanometers (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsParsecs (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsUSSurveyFeet (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsUSSurveyInch (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsUSSurveyMile (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsUSSurveyYard (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsUndefined (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUnitsYards (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class UpdateDirection:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kUpdateDirDataToSource (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUpdateDirSourceToData (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class UpdateOption:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kSkipFormatAfterFirstUpdate (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUpdateOptionAllowSourceUpdate (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUpdateOptionForPreview (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUpdateOptionForceFullSourceUpdate (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUpdateOptionIncludeXrefs (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUpdateOptionNone (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUpdateOptionOverwriteContentModifiedAfterUpdate (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUpdateOptionOverwriteFormatModifiedAfterUpdate (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUpdateOptionSkipFormat (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUpdateOptionUpdateColumnWidth (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kUpdateOptionUpdateRowHeight (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Vertex:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Vertex :
      '''cast( (RxObject)arg1) -> Vertex :

    C++ signature :
        class PyDbVertex cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Vertex :
      '''cloneFrom( (RxObject)arg1) -> Vertex :

    C++ signature :
        class PyDbVertex cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class Vertex2d:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d)

__init__( (object)arg1, (Point3d)arg2, (float)arg3, (float)arg4, (float)arg5, (float)arg6, (int)arg7) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class AcGePoint3d,double,double,double,double,int)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def bulge (self, *args, **kwargs)-> float :
      '''bulge( (Vertex2d)arg1) -> float :

    C++ signature :
        double bulge(class PyDb2dVertex {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Vertex2d :
      '''cast( (RxObject)arg1) -> Vertex2d :

    C++ signature :
        class PyDb2dVertex cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Vertex2d :
      '''cloneFrom( (RxObject)arg1) -> Vertex2d :

    C++ signature :
        class PyDb2dVertex cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def endWidth (self, *args, **kwargs)-> float :
      '''endWidth( (Vertex2d)arg1) -> float :

    C++ signature :
        double endWidth(class PyDb2dVertex {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def ignoreTangent (self, *args, **kwargs)-> ErrorStatus :
      '''ignoreTangent( (Vertex2d)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus ignoreTangent(class PyDb2dVertex {lvalue})'''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTangentUsed (self, *args, **kwargs)-> bool :
      '''isTangentUsed( (Vertex2d)arg1) -> bool :

    C++ signature :
        bool isTangentUsed(class PyDb2dVertex {lvalue})'''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def position (self, *args, **kwargs)-> Point3d :
      '''position( (Vertex2d)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d position(class PyDb2dVertex {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setBulge (self, *args, **kwargs)-> ErrorStatus :
      '''setBulge( (Vertex2d)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBulge(class PyDb2dVertex {lvalue},double)'''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setEndWidth (self, *args, **kwargs)-> ErrorStatus :
      '''setEndWidth( (Vertex2d)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setEndWidth(class PyDb2dVertex {lvalue},double)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPosition (self, *args, **kwargs)-> ErrorStatus :
      '''setPosition( (Vertex2d)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPosition(class PyDb2dVertex {lvalue},class AcGePoint3d)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setStartWidth (self, *args, **kwargs)-> ErrorStatus :
      '''setStartWidth( (Vertex2d)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setStartWidth(class PyDb2dVertex {lvalue},double)'''
    ...
    def setTangent (self, *args, **kwargs)-> ErrorStatus :
      '''setTangent( (Vertex2d)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTangent(class PyDb2dVertex {lvalue},double)'''
    ...
    def setTangentUsed (self, *args, **kwargs)-> ErrorStatus :
      '''setTangentUsed( (Vertex2d)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTangentUsed(class PyDb2dVertex {lvalue},bool)'''
    ...
    def setVertexIdentifier (self, *args, **kwargs)-> ErrorStatus :
      '''setVertexIdentifier( (Vertex2d)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVertexIdentifier(class PyDb2dVertex {lvalue},int)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def startWidth (self, *args, **kwargs)-> float :
      '''startWidth( (Vertex2d)arg1) -> float :

    C++ signature :
        double startWidth(class PyDb2dVertex {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def tangent (self, *args, **kwargs)-> float :
      '''tangent( (Vertex2d)arg1) -> float :

    C++ signature :
        double tangent(class PyDb2dVertex {lvalue})'''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def useTangent (self, *args, **kwargs)-> ErrorStatus :
      '''useTangent( (Vertex2d)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus useTangent(class PyDb2dVertex {lvalue})'''
    ...
    def vertexIdentifier (self, *args, **kwargs)-> int :
      '''vertexIdentifier( (Vertex2d)arg1) -> int :

    C++ signature :
        int vertexIdentifier(class PyDb2dVertex {lvalue})'''
    ...
    def vertexType (self, *args, **kwargs)-> Vertex2dType :
      '''vertexType( (Vertex2d)arg1) -> Vertex2dType :

    C++ signature :
        enum AcDb::Vertex2dType vertexType(class PyDb2dVertex {lvalue})'''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class Vertex2dType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def k2dCurveFitVertex (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k2dSplineCtlVertex (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k2dSplineFitVertex (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def k2dVertex (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class ViewTableRecord:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def ambientLightColor (self, *args, **kwargs)-> Color :
      '''ambientLightColor( (AbstractViewTableRecord)arg1) -> Color :

    C++ signature :
        class AcCmColor ambientLightColor(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def annotationScale (self, *args, **kwargs)-> AnnotationScale :
      '''annotationScale( (ViewTableRecord)arg1) -> AnnotationScale :

    C++ signature :
        class PyDbAnnotationScale annotationScale(class PyDbViewTableRecord {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def backClipDistance (self, *args, **kwargs)-> float :
      '''backClipDistance( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double backClipDistance(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def backClipEnabled (self, *args, **kwargs)-> bool :
      '''backClipEnabled( (AbstractViewTableRecord)arg1) -> bool :

    C++ signature :
        bool backClipEnabled(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def background (self, *args, **kwargs)-> ObjectId :
      '''background( (AbstractViewTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId background(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def brightness (self, *args, **kwargs)-> float :
      '''brightness( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double brightness(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def camera (self, *args, **kwargs)-> ObjectId :
      '''camera( (ViewTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId camera(class PyDbViewTableRecord {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> ViewTableRecord :
      '''cast( (RxObject)arg1) -> ViewTableRecord :

    C++ signature :
        class PyDbViewTableRecord cast(class PyRxObject)'''
    ...
    def centerPoint (self, *args, **kwargs)-> Point2d :
      '''centerPoint( (AbstractViewTableRecord)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d centerPoint(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> ViewTableRecord :
      '''cloneFrom( (RxObject)arg1) -> ViewTableRecord :

    C++ signature :
        class PyDbViewTableRecord cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def contrast (self, *args, **kwargs)-> float :
      '''contrast( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double contrast(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def defaultLightingType (self, *args, **kwargs)-> object :
      '''defaultLightingType( (AbstractViewTableRecord)arg1) -> object :

    C++ signature :
        enum AcGiViewportTraits::DefaultLightingType defaultLightingType(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def disassociateUcsFromView (self, *args, **kwargs)-> ErrorStatus :
      '''disassociateUcsFromView( (ViewTableRecord)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus disassociateUcsFromView(class PyDbViewTableRecord {lvalue})'''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def elevation (self, *args, **kwargs)-> float :
      '''elevation( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double elevation(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def frontClipAtEye (self, *args, **kwargs)-> bool :
      '''frontClipAtEye( (AbstractViewTableRecord)arg1) -> bool :

    C++ signature :
        bool frontClipAtEye(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def frontClipDistance (self, *args, **kwargs)-> float :
      '''frontClipDistance( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double frontClipDistance(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def frontClipEnabled (self, *args, **kwargs)-> bool :
      '''frontClipEnabled( (AbstractViewTableRecord)arg1) -> bool :

    C++ signature :
        bool frontClipEnabled(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def getCategoryName (self, *args, **kwargs)-> str :
      '''getCategoryName( (ViewTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getCategoryName(class PyDbViewTableRecord {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getLayerState (self, *args, **kwargs)-> str :
      '''getLayerState( (ViewTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getLayerState(class PyDbViewTableRecord {lvalue})'''
    ...
    def getLayout (self, *args, **kwargs)-> ObjectId :
      '''getLayout( (ViewTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getLayout(class PyDbViewTableRecord {lvalue})'''
    ...
    def getName (self, *args, **kwargs)-> str :
      '''getName( (SymbolTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getName(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def getUcs (self, *args, **kwargs)-> ErrorStatus :
      '''getUcs( (AbstractViewTableRecord)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getUcs(class PyDbAbstractViewTableRecord {lvalue},class AcGePoint3d {lvalue},class AcGeVector3d {lvalue},class AcGeVector3d {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def height (self, *args, **kwargs)-> float :
      '''height( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double height(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCameraPlottable (self, *args, **kwargs)-> bool :
      '''isCameraPlottable( (ViewTableRecord)arg1) -> bool :

    C++ signature :
        bool isCameraPlottable(class PyDbViewTableRecord {lvalue})'''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isDefaultLightingOn (self, *args, **kwargs)-> bool :
      '''isDefaultLightingOn( (AbstractViewTableRecord)arg1) -> bool :

    C++ signature :
        bool isDefaultLightingOn(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def isDependent (self, *args, **kwargs)-> bool :
      '''isDependent( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isDependent(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isPaperspaceView (self, *args, **kwargs)-> bool :
      '''isPaperspaceView( (ViewTableRecord)arg1) -> bool :

    C++ signature :
        bool isPaperspaceView(class PyDbViewTableRecord {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isRenamable (self, *args, **kwargs)-> bool :
      '''isRenamable( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isRenamable(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isResolved (self, *args, **kwargs)-> bool :
      '''isResolved( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isResolved(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUcsAssociatedToView (self, *args, **kwargs)-> bool :
      '''isUcsAssociatedToView( (ViewTableRecord)arg1) -> bool :

    C++ signature :
        bool isUcsAssociatedToView(class PyDbViewTableRecord {lvalue})'''
    ...
    def isUcsOrthographic (self, *args, **kwargs)-> tuple :
      '''isUcsOrthographic( (AbstractViewTableRecord)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isUcsOrthographic(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isViewAssociatedToViewport (self, *args, **kwargs)-> bool :
      '''isViewAssociatedToViewport( (ViewTableRecord)arg1) -> bool :

    C++ signature :
        bool isViewAssociatedToViewport(class PyDbViewTableRecord {lvalue})'''
    ...
    def isViewOrthographic (self, *args, **kwargs)-> tuple :
      '''isViewOrthographic( (AbstractViewTableRecord)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isViewOrthographic(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def lensLength (self, *args, **kwargs)-> float :
      '''lensLength( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double lensLength(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def liveSection (self, *args, **kwargs)-> ObjectId :
      '''liveSection( (ViewTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId liveSection(class PyDbViewTableRecord {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def perspectiveEnabled (self, *args, **kwargs)-> bool :
      '''perspectiveEnabled( (AbstractViewTableRecord)arg1) -> bool :

    C++ signature :
        bool perspectiveEnabled(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setAmbientLightColor (self, *args, **kwargs)-> ErrorStatus :
      '''setAmbientLightColor( (AbstractViewTableRecord)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAmbientLightColor(class PyDbAbstractViewTableRecord {lvalue},class AcCmColor)'''
    ...
    def setAnnotationScale (self, *args, **kwargs)-> ErrorStatus :
      '''setAnnotationScale( (ViewTableRecord)arg1, (AnnotationScale)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAnnotationScale(class PyDbViewTableRecord {lvalue},class PyDbAnnotationScale)'''
    ...
    def setBackClipDistance (self, *args, **kwargs)-> None :
      '''setBackClipDistance( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setBackClipDistance(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setBackClipEnabled (self, *args, **kwargs)-> None :
      '''setBackClipEnabled( (AbstractViewTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setBackClipEnabled(class PyDbAbstractViewTableRecord {lvalue},bool)'''
    ...
    def setBackground (self, *args, **kwargs)-> ErrorStatus :
      '''setBackground( (AbstractViewTableRecord)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBackground(class PyDbAbstractViewTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setBrightness (self, *args, **kwargs)-> ErrorStatus :
      '''setBrightness( (AbstractViewTableRecord)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBrightness(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setCamera (self, *args, **kwargs)-> ErrorStatus :
      '''setCamera( (ViewTableRecord)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCamera(class PyDbViewTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setCategoryName (self, *args, **kwargs)-> ErrorStatus :
      '''setCategoryName( (ViewTableRecord)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCategoryName(class PyDbViewTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setCenterPoint (self, *args, **kwargs)-> None :
      '''setCenterPoint( (AbstractViewTableRecord)arg1, (Point2d)arg2) -> None :

    C++ signature :
        void setCenterPoint(class PyDbAbstractViewTableRecord {lvalue},class AcGePoint2d)'''
    ...
    def setContrast (self, *args, **kwargs)-> ErrorStatus :
      '''setContrast( (AbstractViewTableRecord)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setContrast(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setDefaultLightingOn (self, *args, **kwargs)-> ErrorStatus :
      '''setDefaultLightingOn( (AbstractViewTableRecord)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDefaultLightingOn(class PyDbAbstractViewTableRecord {lvalue},bool)'''
    ...
    def setDefaultLightingType (self, *args, **kwargs)-> ErrorStatus :
      '''setDefaultLightingType( (AbstractViewTableRecord)arg1, (object)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDefaultLightingType(class PyDbAbstractViewTableRecord {lvalue},enum AcGiViewportTraits::DefaultLightingType)'''
    ...
    def setElevation (self, *args, **kwargs)-> ErrorStatus :
      '''setElevation( (AbstractViewTableRecord)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setElevation(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFrontClipAtEye (self, *args, **kwargs)-> None :
      '''setFrontClipAtEye( (AbstractViewTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setFrontClipAtEye(class PyDbAbstractViewTableRecord {lvalue},bool)'''
    ...
    def setFrontClipDistance (self, *args, **kwargs)-> None :
      '''setFrontClipDistance( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setFrontClipDistance(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setFrontClipEnabled (self, *args, **kwargs)-> None :
      '''setFrontClipEnabled( (AbstractViewTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setFrontClipEnabled(class PyDbAbstractViewTableRecord {lvalue},bool)'''
    ...
    def setHeight (self, *args, **kwargs)-> None :
      '''setHeight( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setHeight(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setIsCameraPlottable (self, *args, **kwargs)-> ErrorStatus :
      '''setIsCameraPlottable( (ViewTableRecord)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setIsCameraPlottable(class PyDbViewTableRecord {lvalue},bool)'''
    ...
    def setIsPaperspaceView (self, *args, **kwargs)-> None :
      '''setIsPaperspaceView( (ViewTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsPaperspaceView(class PyDbViewTableRecord {lvalue},bool)'''
    ...
    def setLayerState (self, *args, **kwargs)-> ErrorStatus :
      '''setLayerState( (ViewTableRecord)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayerState(class PyDbViewTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setLayout (self, *args, **kwargs)-> ErrorStatus :
      '''setLayout( (ViewTableRecord)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayout(class PyDbViewTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setLensLength (self, *args, **kwargs)-> None :
      '''setLensLength( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setLensLength(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setLiveSection (self, *args, **kwargs)-> ErrorStatus :
      '''setLiveSection( (ViewTableRecord)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLiveSection(class PyDbViewTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setName (self, *args, **kwargs)-> ErrorStatus :
      '''setName( (SymbolTableRecord)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setName(class PyDbSymbolTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setParametersFromViewport (self, *args, **kwargs)-> ErrorStatus :
      '''setParametersFromViewport( (ViewTableRecord)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setParametersFromViewport(class PyDbViewTableRecord {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def setPerspectiveEnabled (self, *args, **kwargs)-> None :
      '''setPerspectiveEnabled( (AbstractViewTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPerspectiveEnabled(class PyDbAbstractViewTableRecord {lvalue},bool)'''
    ...
    def setSun (self, *args, **kwargs)-> ErrorStatus :
      '''setSun( (ViewTableRecord)arg1, (ObjectId)arg2, (DbObject)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSun(class PyDbViewTableRecord {lvalue},class PyDbObjectId {lvalue},class PyDbObject {lvalue})

setSun( (ViewTableRecord)arg1, (ObjectId)arg2, (DbObject)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSun(class PyDbViewTableRecord {lvalue},class PyDbObjectId {lvalue},class PyDbObject {lvalue},bool)'''
    ...
    def setTarget (self, *args, **kwargs)-> None :
      '''setTarget( (AbstractViewTableRecord)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setTarget(class PyDbAbstractViewTableRecord {lvalue},class AcGePoint3d)'''
    ...
    def setUcs (self, *args, **kwargs)-> ErrorStatus :
      '''setUcs( (AbstractViewTableRecord)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUcs(class PyDbAbstractViewTableRecord {lvalue},class AcGePoint3d,class AcGeVector3d,class AcGeVector3d)

setUcs( (AbstractViewTableRecord)arg1, (OrthographicView)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUcs(class PyDbAbstractViewTableRecord {lvalue},enum AcDb::OrthographicView)

setUcs( (AbstractViewTableRecord)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUcs(class PyDbAbstractViewTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setUcsToWorld (self, *args, **kwargs)-> ErrorStatus :
      '''setUcsToWorld( (AbstractViewTableRecord)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUcsToWorld(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def setViewAssociatedToViewport (self, *args, **kwargs)-> ErrorStatus :
      '''setViewAssociatedToViewport( (ViewTableRecord)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setViewAssociatedToViewport(class PyDbViewTableRecord {lvalue},bool)'''
    ...
    def setViewDirection (self, *args, **kwargs)-> None :
      '''setViewDirection( (AbstractViewTableRecord)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setViewDirection(class PyDbAbstractViewTableRecord {lvalue},class AcGeVector3d)

setViewDirection( (AbstractViewTableRecord)arg1, (OrthographicView)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setViewDirection(class PyDbAbstractViewTableRecord {lvalue},enum AcDb::OrthographicView)'''
    ...
    def setViewTwist (self, *args, **kwargs)-> None :
      '''setViewTwist( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setViewTwist(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setVisualStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setVisualStyle( (AbstractViewTableRecord)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisualStyle(class PyDbAbstractViewTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setWidth (self, *args, **kwargs)-> None :
      '''setWidth( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setWidth(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def sunId (self, *args, **kwargs)-> ObjectId :
      '''sunId( (ViewTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId sunId(class PyDbViewTableRecord {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def target (self, *args, **kwargs)-> Point3d :
      '''target( (AbstractViewTableRecord)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d target(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def ucsName (self, *args, **kwargs)-> ObjectId :
      '''ucsName( (AbstractViewTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ucsName(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def viewDirection (self, *args, **kwargs)-> Vector3d :
      '''viewDirection( (AbstractViewTableRecord)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d viewDirection(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def viewTwist (self, *args, **kwargs)-> float :
      '''viewTwist( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double viewTwist(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def visualStyle (self, *args, **kwargs)-> ObjectId :
      '''visualStyle( (AbstractViewTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId visualStyle(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def width (self, *args, **kwargs)-> float :
      '''width( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double width(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class Viewport:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def ambientLightColor (self, *args, **kwargs)-> Color :
      '''ambientLightColor( (Viewport)arg1) -> Color :

    C++ signature :
        class AcCmColor ambientLightColor(class PyDbViewport {lvalue})'''
    ...
    def annotationScale (self, *args, **kwargs)-> AnnotationScale :
      '''annotationScale( (Viewport)arg1) -> AnnotationScale :

    C++ signature :
        class PyDbAnnotationScale annotationScale(class PyDbViewport {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def backClipDistance (self, *args, **kwargs)-> float :
      '''backClipDistance( (Viewport)arg1) -> float :

    C++ signature :
        double backClipDistance(class PyDbViewport {lvalue})'''
    ...
    def background (self, *args, **kwargs)-> ObjectId :
      '''background( (Viewport)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId background(class PyDbViewport {lvalue})'''
    ...
    def blockId (self, *args, **kwargs)-> ObjectId :
      '''blockId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId blockId(class PyDbEntity {lvalue})'''
    ...
    def brightness (self, *args, **kwargs)-> float :
      '''brightness( (Viewport)arg1) -> float :

    C++ signature :
        double brightness(class PyDbViewport {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> Viewport :
      '''cast( (RxObject)arg1) -> Viewport :

    C++ signature :
        class PyDbViewport cast(class PyRxObject)'''
    ...
    def castShadows (self, *args, **kwargs)-> bool :
      '''castShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool castShadows(class PyDbEntity {lvalue})'''
    ...
    def centerPoint (self, *args, **kwargs)-> Point3d :
      '''centerPoint( (Viewport)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d centerPoint(class PyDbViewport {lvalue})'''
    ...
    def circleSides (self, *args, **kwargs)-> int :
      '''circleSides( (Viewport)arg1) -> int :

    C++ signature :
        unsigned short circleSides(class PyDbViewport {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> Viewport :
      '''cloneFrom( (RxObject)arg1) -> Viewport :

    C++ signature :
        class PyDbViewport cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def collisionType (self, *args, **kwargs)-> CollisionType :
      '''collisionType( (Entity)arg1) -> CollisionType :

    C++ signature :
        enum AcDb::CollisionType collisionType(class PyDbEntity {lvalue})'''
    ...
    def color (self, *args, **kwargs)-> Color :
      '''color( (Entity)arg1) -> Color :

    C++ signature :
        class AcCmColor color(class PyDbEntity {lvalue})'''
    ...
    def colorIndex (self, *args, **kwargs)-> int :
      '''colorIndex( (Entity)arg1) -> int :

    C++ signature :
        unsigned short colorIndex(class PyDbEntity {lvalue})'''
    ...
    def contrast (self, *args, **kwargs)-> float :
      '''contrast( (Viewport)arg1) -> float :

    C++ signature :
        double contrast(class PyDbViewport {lvalue})'''
    ...
    def copied (self, *args, **kwargs)-> None :
      '''copied( (Viewport)arg1, (DbObject)arg2, (DbObject)arg3) -> None :

    C++ signature :
        void copied(class PyDbViewport {lvalue},class PyDbObject,class PyDbObject)'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def customScale (self, *args, **kwargs)-> float :
      '''customScale( (Viewport)arg1) -> float :

    C++ signature :
        double customScale(class PyDbViewport {lvalue})'''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def defaultLightingType (self, *args, **kwargs)-> object :
      '''defaultLightingType( (Viewport)arg1) -> object :

    C++ signature :
        enum AcGiViewportTraits::DefaultLightingType defaultLightingType(class PyDbViewport {lvalue})'''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def draw (self, *args, **kwargs)-> ErrorStatus :
      '''draw( (Entity)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus draw(class PyDbEntity {lvalue})'''
    ...
    def effectivePlotStyleSheet (self, *args, **kwargs)-> str :
      '''effectivePlotStyleSheet( (Viewport)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > effectivePlotStyleSheet(class PyDbViewport {lvalue})'''
    ...
    def elevation (self, *args, **kwargs)-> float :
      '''elevation( (Viewport)arg1) -> float :

    C++ signature :
        double elevation(class PyDbViewport {lvalue})'''
    ...
    def entityColor (self, *args, **kwargs)-> EntityColor :
      '''entityColor( (Entity)arg1) -> EntityColor :

    C++ signature :
        class AcCmEntityColor entityColor(class PyDbEntity {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def erased (self, *args, **kwargs)-> None :
      '''erased( (Viewport)arg1, (DbObject)arg2, (bool)arg3) -> None :

    C++ signature :
        void erased(class PyDbViewport {lvalue},class PyDbObject,bool)'''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def freezeLayersInViewport (self, *args, **kwargs)-> ErrorStatus :
      '''freezeLayersInViewport( (Viewport)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus freezeLayersInViewport(class PyDbViewport {lvalue},class boost::python::list)'''
    ...
    def frontClipDistance (self, *args, **kwargs)-> float :
      '''frontClipDistance( (Viewport)arg1) -> float :

    C++ signature :
        double frontClipDistance(class PyDbViewport {lvalue})'''
    ...
    def getCompoundObjectTransform (self, *args, **kwargs)-> ErrorStatus :
      '''getCompoundObjectTransform( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getCompoundObjectTransform(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getEcs (self, *args, **kwargs)-> None :
      '''getEcs( (Entity)arg1, (Matrix3d)arg2) -> None :

    C++ signature :
        void getEcs(class PyDbEntity {lvalue},class AcGeMatrix3d {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFrozenLayerList (self, *args, **kwargs)-> list :
      '''getFrozenLayerList( (Viewport)arg1) -> list :

    C++ signature :
        class boost::python::list getFrozenLayerList(class PyDbViewport {lvalue})'''
    ...
    def getGeomExtents (self, *args, **kwargs)-> ErrorStatus :
      '''getGeomExtents( (Entity)arg1, (Extents)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getGeomExtents(class PyDbEntity {lvalue},class AcDbExtents {lvalue})'''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getLabelBlock (self, *args, **kwargs)-> ObjectId :
      '''getLabelBlock( (Viewport)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getLabelBlock(class PyDbViewport {lvalue})'''
    ...
    def getModelView (self, *args, **kwargs)-> XrefObjectId :
      '''getModelView( (Viewport)arg1) -> XrefObjectId :

    C++ signature :
        class PyDbXrefObjectId getModelView(class PyDbViewport {lvalue})'''
    ...
    def getPlane (self, *args, **kwargs)-> Plane :
      '''getPlane( (Entity)arg1) -> Plane :

    C++ signature :
        class PyGePlane getPlane(class PyDbEntity {lvalue})'''
    ...
    def getPlotStyleNameId (self, *args, **kwargs)-> ObjectId :
      '''getPlotStyleNameId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getPlotStyleNameId(class PyDbEntity {lvalue})'''
    ...
    def getSheetView (self, *args, **kwargs)-> ObjectId :
      '''getSheetView( (Viewport)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId getSheetView(class PyDbViewport {lvalue})'''
    ...
    def getUcs (self, *args, **kwargs)-> ErrorStatus :
      '''getUcs( (Viewport)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getUcs(class PyDbViewport {lvalue},class AcGePoint3d {lvalue},class AcGeVector3d {lvalue},class AcGeVector3d {lvalue})'''
    ...
    def gridIncrement (self, *args, **kwargs)-> Vector2d :
      '''gridIncrement( (Viewport)arg1) -> Vector2d :

    C++ signature :
        class AcGeVector2d gridIncrement(class PyDbViewport {lvalue})'''
    ...
    def gridMajor (self, *args, **kwargs)-> int :
      '''gridMajor( (Viewport)arg1) -> int :

    C++ signature :
        unsigned short gridMajor(class PyDbViewport {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def height (self, *args, **kwargs)-> float :
      '''height( (Viewport)arg1) -> float :

    C++ signature :
        double height(class PyDbViewport {lvalue})'''
    ...
    def hiddenLinesRemoved (self, *args, **kwargs)-> bool :
      '''hiddenLinesRemoved( (Viewport)arg1) -> bool :

    C++ signature :
        bool hiddenLinesRemoved(class PyDbViewport {lvalue})'''
    ...
    def intersectWith (self, *args, **kwargs)-> ErrorStatus :
      '''intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (list)arg4, (int)arg5, (int)arg6) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class boost::python::list {lvalue},__int64,__int64)

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue})

intersectWith( (Entity)arg1, (Entity)arg2, (Intersect)arg3, (Plane)arg4, (list)arg5, (int)arg6, (int)arg7) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus intersectWith(class PyDbEntity {lvalue},class PyDbEntity,enum AcDb::Intersect,class PyGePlane,class boost::python::list {lvalue},__int64,__int64)'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isBackClipOn (self, *args, **kwargs)-> bool :
      '''isBackClipOn( (Viewport)arg1) -> bool :

    C++ signature :
        bool isBackClipOn(class PyDbViewport {lvalue})'''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isDefaultLightingOn (self, *args, **kwargs)-> bool :
      '''isDefaultLightingOn( (Viewport)arg1) -> bool :

    C++ signature :
        bool isDefaultLightingOn(class PyDbViewport {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isFastZoomOn (self, *args, **kwargs)-> bool :
      '''isFastZoomOn( (Viewport)arg1) -> bool :

    C++ signature :
        bool isFastZoomOn(class PyDbViewport {lvalue})'''
    ...
    def isFrontClipAtEyeOn (self, *args, **kwargs)-> bool :
      '''isFrontClipAtEyeOn( (Viewport)arg1) -> bool :

    C++ signature :
        bool isFrontClipAtEyeOn(class PyDbViewport {lvalue})'''
    ...
    def isFrontClipOn (self, *args, **kwargs)-> bool :
      '''isFrontClipOn( (Viewport)arg1) -> bool :

    C++ signature :
        bool isFrontClipOn(class PyDbViewport {lvalue})'''
    ...
    def isGridAdaptive (self, *args, **kwargs)-> bool :
      '''isGridAdaptive( (Viewport)arg1) -> bool :

    C++ signature :
        bool isGridAdaptive(class PyDbViewport {lvalue})'''
    ...
    def isGridBoundToLimits (self, *args, **kwargs)-> bool :
      '''isGridBoundToLimits( (Viewport)arg1) -> bool :

    C++ signature :
        bool isGridBoundToLimits(class PyDbViewport {lvalue})'''
    ...
    def isGridFollow (self, *args, **kwargs)-> bool :
      '''isGridFollow( (Viewport)arg1) -> bool :

    C++ signature :
        bool isGridFollow(class PyDbViewport {lvalue})'''
    ...
    def isGridOn (self, *args, **kwargs)-> bool :
      '''isGridOn( (Viewport)arg1) -> bool :

    C++ signature :
        bool isGridOn(class PyDbViewport {lvalue})'''
    ...
    def isGridSubdivisionRestricted (self, *args, **kwargs)-> bool :
      '''isGridSubdivisionRestricted( (Viewport)arg1) -> bool :

    C++ signature :
        bool isGridSubdivisionRestricted(class PyDbViewport {lvalue})'''
    ...
    def isLayerFrozenInViewport (self, *args, **kwargs)-> bool :
      '''isLayerFrozenInViewport( (Viewport)arg1, (ObjectId)arg2) -> bool :

    C++ signature :
        bool isLayerFrozenInViewport(class PyDbViewport {lvalue},class PyDbObjectId)'''
    ...
    def isLocked (self, *args, **kwargs)-> bool :
      '''isLocked( (Viewport)arg1) -> bool :

    C++ signature :
        bool isLocked(class PyDbViewport {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNonRectClipOn (self, *args, **kwargs)-> bool :
      '''isNonRectClipOn( (Viewport)arg1) -> bool :

    C++ signature :
        bool isNonRectClipOn(class PyDbViewport {lvalue})'''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isOn (self, *args, **kwargs)-> bool :
      '''isOn( (Viewport)arg1) -> bool :

    C++ signature :
        bool isOn(class PyDbViewport {lvalue})'''
    ...
    def isPerspectiveOn (self, *args, **kwargs)-> bool :
      '''isPerspectiveOn( (Viewport)arg1) -> bool :

    C++ signature :
        bool isPerspectiveOn(class PyDbViewport {lvalue})'''
    ...
    def isPlanar (self, *args, **kwargs)-> bool :
      '''isPlanar( (Entity)arg1) -> bool :

    C++ signature :
        bool isPlanar(class PyDbEntity {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isSnapIsometric (self, *args, **kwargs)-> bool :
      '''isSnapIsometric( (Viewport)arg1) -> bool :

    C++ signature :
        bool isSnapIsometric(class PyDbViewport {lvalue})'''
    ...
    def isSnapOn (self, *args, **kwargs)-> bool :
      '''isSnapOn( (Viewport)arg1) -> bool :

    C++ signature :
        bool isSnapOn(class PyDbViewport {lvalue})'''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransparent (self, *args, **kwargs)-> bool :
      '''isTransparent( (Viewport)arg1) -> bool :

    C++ signature :
        bool isTransparent(class PyDbViewport {lvalue})'''
    ...
    def isUcsFollowModeOn (self, *args, **kwargs)-> bool :
      '''isUcsFollowModeOn( (Viewport)arg1) -> bool :

    C++ signature :
        bool isUcsFollowModeOn(class PyDbViewport {lvalue})'''
    ...
    def isUcsIconAtOrigin (self, *args, **kwargs)-> bool :
      '''isUcsIconAtOrigin( (Viewport)arg1) -> bool :

    C++ signature :
        bool isUcsIconAtOrigin(class PyDbViewport {lvalue})'''
    ...
    def isUcsIconVisible (self, *args, **kwargs)-> bool :
      '''isUcsIconVisible( (Viewport)arg1) -> bool :

    C++ signature :
        bool isUcsIconVisible(class PyDbViewport {lvalue})'''
    ...
    def isUcsOrthographic (self, *args, **kwargs)-> tuple :
      '''isUcsOrthographic( (Viewport)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isUcsOrthographic(class PyDbViewport {lvalue})'''
    ...
    def isUcsSavedWithViewport (self, *args, **kwargs)-> bool :
      '''isUcsSavedWithViewport( (Viewport)arg1) -> bool :

    C++ signature :
        bool isUcsSavedWithViewport(class PyDbViewport {lvalue})'''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isViewOrthographic (self, *args, **kwargs)-> tuple :
      '''isViewOrthographic( (Viewport)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isViewOrthographic(class PyDbViewport {lvalue})'''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def layer (self, *args, **kwargs)-> str :
      '''layer( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > layer(class PyDbEntity {lvalue})'''
    ...
    def layerId (self, *args, **kwargs)-> ObjectId :
      '''layerId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId layerId(class PyDbEntity {lvalue})'''
    ...
    def lensLength (self, *args, **kwargs)-> float :
      '''lensLength( (Viewport)arg1) -> float :

    C++ signature :
        double lensLength(class PyDbViewport {lvalue})'''
    ...
    def lineWeight (self, *args, **kwargs)-> LineWeight :
      '''lineWeight( (Entity)arg1) -> LineWeight :

    C++ signature :
        enum AcDb::LineWeight lineWeight(class PyDbEntity {lvalue})'''
    ...
    def linetype (self, *args, **kwargs)-> str :
      '''linetype( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > linetype(class PyDbEntity {lvalue})'''
    ...
    def linetypeId (self, *args, **kwargs)-> ObjectId :
      '''linetypeId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId linetypeId(class PyDbEntity {lvalue})'''
    ...
    def linetypeScale (self, *args, **kwargs)-> float :
      '''linetypeScale( (Entity)arg1) -> float :

    C++ signature :
        double linetypeScale(class PyDbEntity {lvalue})'''
    ...
    def list (self, *args, **kwargs)-> None :
      '''list( (Entity)arg1) -> None :

    C++ signature :
        void list(class PyDbEntity {lvalue})'''
    ...
    def material (self, *args, **kwargs)-> str :
      '''material( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > material(class PyDbEntity {lvalue})'''
    ...
    def materialId (self, *args, **kwargs)-> ObjectId :
      '''materialId( (Entity)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId materialId(class PyDbEntity {lvalue})'''
    ...
    def modified (self, *args, **kwargs)-> None :
      '''modified( (Viewport)arg1, (DbObject)arg2) -> None :

    C++ signature :
        void modified(class PyDbViewport {lvalue},class PyDbObject)'''
    ...
    def nonRectClipEntityId (self, *args, **kwargs)-> ObjectId :
      '''nonRectClipEntityId( (Viewport)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId nonRectClipEntityId(class PyDbViewport {lvalue})'''
    ...
    def number (self, *args, **kwargs)-> int :
      '''number( (Viewport)arg1) -> int :

    C++ signature :
        short number(class PyDbViewport {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def plotAsRaster (self, *args, **kwargs)-> bool :
      '''plotAsRaster( (Viewport)arg1) -> bool :

    C++ signature :
        bool plotAsRaster(class PyDbViewport {lvalue})'''
    ...
    def plotStyleName (self, *args, **kwargs)-> str :
      '''plotStyleName( (Entity)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleName(class PyDbEntity {lvalue})'''
    ...
    def plotStyleSheet (self, *args, **kwargs)-> str :
      '''plotStyleSheet( (Viewport)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > plotStyleSheet(class PyDbViewport {lvalue})'''
    ...
    def plotWireframe (self, *args, **kwargs)-> bool :
      '''plotWireframe( (Viewport)arg1) -> bool :

    C++ signature :
        bool plotWireframe(class PyDbViewport {lvalue})'''
    ...
    def previousBackground (self, *args, **kwargs)-> ObjectId :
      '''previousBackground( (Viewport)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId previousBackground(class PyDbViewport {lvalue})

previousBackground( (Viewport)arg1, (object)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId previousBackground(class PyDbViewport {lvalue},enum AcGiDrawable::DrawableType)'''
    ...
    def previousBackgroundForcedSwitch (self, *args, **kwargs)-> bool :
      '''previousBackgroundForcedSwitch( (Viewport)arg1) -> bool :

    C++ signature :
        bool previousBackgroundForcedSwitch(class PyDbViewport {lvalue})'''
    ...
    def receiveShadows (self, *args, **kwargs)-> bool :
      '''receiveShadows( (Entity)arg1) -> bool :

    C++ signature :
        bool receiveShadows(class PyDbEntity {lvalue})'''
    ...
    def recordGraphicsModified (self, *args, **kwargs)-> None :
      '''recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})

recordGraphicsModified( (Entity)arg1) -> None :

    C++ signature :
        void recordGraphicsModified(class PyDbEntity {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removeHiddenLines (self, *args, **kwargs)-> ErrorStatus :
      '''removeHiddenLines( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeHiddenLines(class PyDbViewport {lvalue})

removeHiddenLines( (Viewport)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeHiddenLines(class PyDbViewport {lvalue},bool)'''
    ...
    def removeLabelBlock (self, *args, **kwargs)-> ErrorStatus :
      '''removeLabelBlock( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeLabelBlock(class PyDbViewport {lvalue})'''
    ...
    def removeModelView (self, *args, **kwargs)-> ErrorStatus :
      '''removeModelView( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeModelView(class PyDbViewport {lvalue})'''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removeSheetView (self, *args, **kwargs)-> ErrorStatus :
      '''removeSheetView( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus removeSheetView(class PyDbViewport {lvalue})'''
    ...
    def setAmbientLightColor (self, *args, **kwargs)-> ErrorStatus :
      '''setAmbientLightColor( (Viewport)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAmbientLightColor(class PyDbViewport {lvalue},class AcCmColor)'''
    ...
    def setAnnotationScale (self, *args, **kwargs)-> ErrorStatus :
      '''setAnnotationScale( (Viewport)arg1, (AnnotationScale)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAnnotationScale(class PyDbViewport {lvalue},class PyDbAnnotationScale)'''
    ...
    def setBackClipDistance (self, *args, **kwargs)-> ErrorStatus :
      '''setBackClipDistance( (Viewport)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBackClipDistance(class PyDbViewport {lvalue},double)'''
    ...
    def setBackClipOff (self, *args, **kwargs)-> ErrorStatus :
      '''setBackClipOff( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBackClipOff(class PyDbViewport {lvalue})'''
    ...
    def setBackClipOn (self, *args, **kwargs)-> ErrorStatus :
      '''setBackClipOn( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBackClipOn(class PyDbViewport {lvalue})

setBackClipOn( (Viewport)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBackClipOn(class PyDbViewport {lvalue},bool)'''
    ...
    def setBackground (self, *args, **kwargs)-> ErrorStatus :
      '''setBackground( (Viewport)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBackground(class PyDbViewport {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def setBrightness (self, *args, **kwargs)-> ErrorStatus :
      '''setBrightness( (Viewport)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBrightness(class PyDbViewport {lvalue},double)'''
    ...
    def setCastShadows (self, *args, **kwargs)-> None :
      '''setCastShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCastShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setCenterPoint (self, *args, **kwargs)-> ErrorStatus :
      '''setCenterPoint( (Viewport)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCenterPoint(class PyDbViewport {lvalue},class AcGePoint3d)'''
    ...
    def setCircleSides (self, *args, **kwargs)-> ErrorStatus :
      '''setCircleSides( (Viewport)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCircleSides(class PyDbViewport {lvalue},unsigned short)'''
    ...
    def setColor (self, *args, **kwargs)-> ErrorStatus :
      '''setColor( (Entity)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool)

setColor( (Entity)arg1, (Color)arg2, (bool)arg3, (Database)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColor(class PyDbEntity {lvalue},class AcCmColor,bool,class PyDbDatabase {lvalue})'''
    ...
    def setColorIndex (self, *args, **kwargs)-> ErrorStatus :
      '''setColorIndex( (Entity)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short)

setColorIndex( (Entity)arg1, (int)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setColorIndex(class PyDbEntity {lvalue},unsigned short,bool)'''
    ...
    def setContrast (self, *args, **kwargs)-> ErrorStatus :
      '''setContrast( (Viewport)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setContrast(class PyDbViewport {lvalue},double)'''
    ...
    def setCustomScale (self, *args, **kwargs)-> ErrorStatus :
      '''setCustomScale( (Viewport)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setCustomScale(class PyDbViewport {lvalue},double)'''
    ...
    def setDatabaseDefaults (self, *args, **kwargs)-> None :
      '''setDatabaseDefaults( (Entity)arg1) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue})

setDatabaseDefaults( (Entity)arg1, (Database)arg2) -> None :

    C++ signature :
        void setDatabaseDefaults(class PyDbEntity {lvalue},class PyDbDatabase)'''
    ...
    def setDefaultLightingOn (self, *args, **kwargs)-> ErrorStatus :
      '''setDefaultLightingOn( (Viewport)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDefaultLightingOn(class PyDbViewport {lvalue},bool)'''
    ...
    def setDefaultLightingType (self, *args, **kwargs)-> ErrorStatus :
      '''setDefaultLightingType( (Viewport)arg1, (object)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDefaultLightingType(class PyDbViewport {lvalue},enum AcGiViewportTraits::DefaultLightingType)'''
    ...
    def setElevation (self, *args, **kwargs)-> ErrorStatus :
      '''setElevation( (Viewport)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setElevation(class PyDbViewport {lvalue},double)'''
    ...
    def setFastZoomOff (self, *args, **kwargs)-> ErrorStatus :
      '''setFastZoomOff( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFastZoomOff(class PyDbViewport {lvalue})'''
    ...
    def setFastZoomOn (self, *args, **kwargs)-> ErrorStatus :
      '''setFastZoomOn( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFastZoomOn(class PyDbViewport {lvalue})

setFastZoomOn( (Viewport)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFastZoomOn(class PyDbViewport {lvalue},bool)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFrontClipAtEyeOff (self, *args, **kwargs)-> ErrorStatus :
      '''setFrontClipAtEyeOff( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFrontClipAtEyeOff(class PyDbViewport {lvalue})'''
    ...
    def setFrontClipAtEyeOn (self, *args, **kwargs)-> ErrorStatus :
      '''setFrontClipAtEyeOn( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFrontClipAtEyeOn(class PyDbViewport {lvalue})

setFrontClipAtEyeOn( (Viewport)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFrontClipAtEyeOn(class PyDbViewport {lvalue},bool)'''
    ...
    def setFrontClipDistance (self, *args, **kwargs)-> ErrorStatus :
      '''setFrontClipDistance( (Viewport)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFrontClipDistance(class PyDbViewport {lvalue},double)'''
    ...
    def setFrontClipOff (self, *args, **kwargs)-> ErrorStatus :
      '''setFrontClipOff( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFrontClipOff(class PyDbViewport {lvalue})'''
    ...
    def setFrontClipOn (self, *args, **kwargs)-> ErrorStatus :
      '''setFrontClipOn( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFrontClipOn(class PyDbViewport {lvalue})

setFrontClipOn( (Viewport)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFrontClipOn(class PyDbViewport {lvalue},bool)'''
    ...
    def setGridAdaptive (self, *args, **kwargs)-> ErrorStatus :
      '''setGridAdaptive( (Viewport)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridAdaptive(class PyDbViewport {lvalue},bool)'''
    ...
    def setGridBoundToLimits (self, *args, **kwargs)-> ErrorStatus :
      '''setGridBoundToLimits( (Viewport)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridBoundToLimits(class PyDbViewport {lvalue},bool)'''
    ...
    def setGridFollow (self, *args, **kwargs)-> ErrorStatus :
      '''setGridFollow( (Viewport)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridFollow(class PyDbViewport {lvalue},bool)'''
    ...
    def setGridIncrement (self, *args, **kwargs)-> ErrorStatus :
      '''setGridIncrement( (Viewport)arg1, (Vector2d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridIncrement(class PyDbViewport {lvalue},class AcGeVector2d)'''
    ...
    def setGridMajor (self, *args, **kwargs)-> ErrorStatus :
      '''setGridMajor( (Viewport)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridMajor(class PyDbViewport {lvalue},unsigned short)'''
    ...
    def setGridOff (self, *args, **kwargs)-> ErrorStatus :
      '''setGridOff( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridOff(class PyDbViewport {lvalue})'''
    ...
    def setGridOn (self, *args, **kwargs)-> ErrorStatus :
      '''setGridOn( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridOn(class PyDbViewport {lvalue})

setGridOn( (Viewport)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridOn(class PyDbViewport {lvalue},bool)'''
    ...
    def setGridSubdivisionRestricted (self, *args, **kwargs)-> ErrorStatus :
      '''setGridSubdivisionRestricted( (Viewport)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setGridSubdivisionRestricted(class PyDbViewport {lvalue},bool)'''
    ...
    def setHeight (self, *args, **kwargs)-> ErrorStatus :
      '''setHeight( (Viewport)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setHeight(class PyDbViewport {lvalue},double)'''
    ...
    def setIsOn (self, *args, **kwargs)-> ErrorStatus :
      '''setIsOn( (Viewport)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setIsOn(class PyDbViewport {lvalue},bool)'''
    ...
    def setLabelBlock (self, *args, **kwargs)-> ErrorStatus :
      '''setLabelBlock( (Viewport)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLabelBlock(class PyDbViewport {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def setLayer (self, *args, **kwargs)-> ErrorStatus :
      '''setLayer( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLayer( (Entity)arg1, (str)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,bool)

setLayer( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool)

setLayer( (Entity)arg1, (ObjectId)arg2, (bool)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLayer(class PyDbEntity {lvalue},class PyDbObjectId,bool,bool)'''
    ...
    def setLensLength (self, *args, **kwargs)-> ErrorStatus :
      '''setLensLength( (Viewport)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLensLength(class PyDbViewport {lvalue},double)'''
    ...
    def setLineWeight (self, *args, **kwargs)-> ErrorStatus :
      '''setLineWeight( (Entity)arg1, (LineWeight)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight)

setLineWeight( (Entity)arg1, (LineWeight)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLineWeight(class PyDbEntity {lvalue},enum AcDb::LineWeight,bool)'''
    ...
    def setLinetype (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetype( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setLinetype( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setLinetype( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId)

setLinetype( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetype(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setLinetypeScale (self, *args, **kwargs)-> ErrorStatus :
      '''setLinetypeScale( (Entity)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double)

setLinetypeScale( (Entity)arg1, (float)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLinetypeScale(class PyDbEntity {lvalue},double,bool)'''
    ...
    def setLocked (self, *args, **kwargs)-> ErrorStatus :
      '''setLocked( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLocked(class PyDbViewport {lvalue})

setLocked( (Viewport)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLocked(class PyDbViewport {lvalue},bool)'''
    ...
    def setMaterial (self, *args, **kwargs)-> ErrorStatus :
      '''setMaterial( (Entity)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)

setMaterial( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setMaterial( (Entity)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId)

setMaterial( (Entity)arg1, (ObjectId)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setMaterial(class PyDbEntity {lvalue},class PyDbObjectId,bool)'''
    ...
    def setModelView (self, *args, **kwargs)-> ErrorStatus :
      '''setModelView( (Viewport)arg1, (XrefObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setModelView(class PyDbViewport {lvalue},class PyDbXrefObjectId)'''
    ...
    def setNonRectClipEntityId (self, *args, **kwargs)-> ErrorStatus :
      '''setNonRectClipEntityId( (Viewport)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNonRectClipEntityId(class PyDbViewport {lvalue},class PyDbObjectId)'''
    ...
    def setNonRectClipOff (self, *args, **kwargs)-> ErrorStatus :
      '''setNonRectClipOff( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNonRectClipOff(class PyDbViewport {lvalue})'''
    ...
    def setNonRectClipOn (self, *args, **kwargs)-> ErrorStatus :
      '''setNonRectClipOn( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNonRectClipOn(class PyDbViewport {lvalue})

setNonRectClipOn( (Viewport)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNonRectClipOn(class PyDbViewport {lvalue},bool)'''
    ...
    def setOff (self, *args, **kwargs)-> ErrorStatus :
      '''setOff( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOff(class PyDbViewport {lvalue})

setOff( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOff(class PyDbViewport {lvalue})'''
    ...
    def setOn (self, *args, **kwargs)-> ErrorStatus :
      '''setOn( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOn(class PyDbViewport {lvalue})'''
    ...
    def setOpaque (self, *args, **kwargs)-> ErrorStatus :
      '''setOpaque( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setOpaque(class PyDbViewport {lvalue})'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPerspectiveOff (self, *args, **kwargs)-> ErrorStatus :
      '''setPerspectiveOff( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPerspectiveOff(class PyDbViewport {lvalue})'''
    ...
    def setPerspectiveOn (self, *args, **kwargs)-> ErrorStatus :
      '''setPerspectiveOn( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPerspectiveOn(class PyDbViewport {lvalue})

setPerspectiveOn( (Viewport)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPerspectiveOn(class PyDbViewport {lvalue},bool)'''
    ...
    def setPlotStyleName (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleName( (Entity)arg1, (str)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,bool)

setPlotStyleName( (Entity)arg1, (PlotStyleNameType)arg2, (ObjectId)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleName(class PyDbEntity {lvalue},enum AcDb::PlotStyleNameType,class PyDbObjectId,bool)'''
    ...
    def setPlotStyleSheet (self, *args, **kwargs)-> ErrorStatus :
      '''setPlotStyleSheet( (Viewport)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPlotStyleSheet(class PyDbViewport {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setPreviousBackground (self, *args, **kwargs)-> ErrorStatus :
      '''setPreviousBackground( (Viewport)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPreviousBackground(class PyDbViewport {lvalue},class PyDbObjectId {lvalue})

setPreviousBackground( (Viewport)arg1, (ObjectId)arg2, (object)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPreviousBackground(class PyDbViewport {lvalue},class PyDbObjectId {lvalue},enum AcGiDrawable::DrawableType)

setPreviousBackground( (Viewport)arg1, (ObjectId)arg2, (object)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPreviousBackground(class PyDbViewport {lvalue},class PyDbObjectId {lvalue},enum AcGiDrawable::DrawableType,bool)'''
    ...
    def setPropertiesFrom (self, *args, **kwargs)-> ErrorStatus :
      '''setPropertiesFrom( (Entity)arg1, (Entity)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity)

setPropertiesFrom( (Entity)arg1, (Entity)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPropertiesFrom(class PyDbEntity {lvalue},class PyDbEntity,bool)'''
    ...
    def setReceiveShadows (self, *args, **kwargs)-> None :
      '''setReceiveShadows( (Entity)arg1, (bool)arg2) -> None :

    C++ signature :
        void setReceiveShadows(class PyDbEntity {lvalue},bool)'''
    ...
    def setShadePlot (self, *args, **kwargs)-> ErrorStatus :
      '''setShadePlot( (Viewport)arg1, (VpShadePlotType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setShadePlot(class PyDbViewport {lvalue},enum AcDbViewport::ShadePlotType)

setShadePlot( (Viewport)arg1, (VpShadePlotType)arg2, (ObjectId)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setShadePlot(class PyDbViewport {lvalue},enum AcDbViewport::ShadePlotType,class PyDbObjectId)'''
    ...
    def setSheetView (self, *args, **kwargs)-> ErrorStatus :
      '''setSheetView( (Viewport)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSheetView(class PyDbViewport {lvalue},class PyDbObjectId)'''
    ...
    def setSnapAngle (self, *args, **kwargs)-> ErrorStatus :
      '''setSnapAngle( (Viewport)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSnapAngle(class PyDbViewport {lvalue},double)'''
    ...
    def setSnapBasePoint (self, *args, **kwargs)-> ErrorStatus :
      '''setSnapBasePoint( (Viewport)arg1, (Point2d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSnapBasePoint(class PyDbViewport {lvalue},class AcGePoint2d)'''
    ...
    def setSnapIncrement (self, *args, **kwargs)-> ErrorStatus :
      '''setSnapIncrement( (Viewport)arg1, (Vector2d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSnapIncrement(class PyDbViewport {lvalue},class AcGeVector2d)'''
    ...
    def setSnapIsoPair (self, *args, **kwargs)-> ErrorStatus :
      '''setSnapIsoPair( (Viewport)arg1, (int)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSnapIsoPair(class PyDbViewport {lvalue},unsigned short)'''
    ...
    def setSnapIsometric (self, *args, **kwargs)-> ErrorStatus :
      '''setSnapIsometric( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSnapIsometric(class PyDbViewport {lvalue})

setSnapIsometric( (Viewport)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSnapIsometric(class PyDbViewport {lvalue},bool)'''
    ...
    def setSnapOff (self, *args, **kwargs)-> ErrorStatus :
      '''setSnapOff( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSnapOff(class PyDbViewport {lvalue})'''
    ...
    def setSnapOn (self, *args, **kwargs)-> ErrorStatus :
      '''setSnapOn( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSnapOn(class PyDbViewport {lvalue})

setSnapOn( (Viewport)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSnapOn(class PyDbViewport {lvalue},bool)'''
    ...
    def setSnapStandard (self, *args, **kwargs)-> ErrorStatus :
      '''setSnapStandard( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSnapStandard(class PyDbViewport {lvalue})'''
    ...
    def setStandardScale (self, *args, **kwargs)-> ErrorStatus :
      '''setStandardScale( (Viewport)arg1, (StandardScaleType)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setStandardScale(class PyDbViewport {lvalue},enum AcDbViewport::StandardScaleType)'''
    ...
    def setSun (self, *args, **kwargs)-> ErrorStatus :
      '''setSun( (Viewport)arg1, (ObjectId)arg2, (DbObject)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSun(class PyDbViewport {lvalue},class PyDbObjectId {lvalue},class PyDbObject {lvalue})

setSun( (Viewport)arg1, (ObjectId)arg2, (DbObject)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSun(class PyDbViewport {lvalue},class PyDbObjectId {lvalue},class PyDbObject {lvalue},bool)'''
    ...
    def setTransparent (self, *args, **kwargs)-> ErrorStatus :
      '''setTransparent( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTransparent(class PyDbViewport {lvalue})

setTransparent( (Viewport)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTransparent(class PyDbViewport {lvalue},bool)'''
    ...
    def setTwistAngle (self, *args, **kwargs)-> ErrorStatus :
      '''setTwistAngle( (Viewport)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setTwistAngle(class PyDbViewport {lvalue},double)'''
    ...
    def setUcs (self, *args, **kwargs)-> ErrorStatus :
      '''setUcs( (Viewport)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUcs(class PyDbViewport {lvalue},class AcGePoint3d,class AcGeVector3d,class AcGeVector3d)

setUcs( (Viewport)arg1, (OrthographicView)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUcs(class PyDbViewport {lvalue},enum AcDb::OrthographicView)

setUcs( (Viewport)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUcs(class PyDbViewport {lvalue},class PyDbObjectId)'''
    ...
    def setUcsFollowModeOff (self, *args, **kwargs)-> ErrorStatus :
      '''setUcsFollowModeOff( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUcsFollowModeOff(class PyDbViewport {lvalue})'''
    ...
    def setUcsFollowModeOn (self, *args, **kwargs)-> ErrorStatus :
      '''setUcsFollowModeOn( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUcsFollowModeOn(class PyDbViewport {lvalue})

setUcsFollowModeOn( (Viewport)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUcsFollowModeOn(class PyDbViewport {lvalue},bool)'''
    ...
    def setUcsIconAtCorner (self, *args, **kwargs)-> ErrorStatus :
      '''setUcsIconAtCorner( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUcsIconAtCorner(class PyDbViewport {lvalue})'''
    ...
    def setUcsIconAtOrigin (self, *args, **kwargs)-> ErrorStatus :
      '''setUcsIconAtOrigin( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUcsIconAtOrigin(class PyDbViewport {lvalue})

setUcsIconAtOrigin( (Viewport)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUcsIconAtOrigin(class PyDbViewport {lvalue},bool)'''
    ...
    def setUcsIconInvisible (self, *args, **kwargs)-> ErrorStatus :
      '''setUcsIconInvisible( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUcsIconInvisible(class PyDbViewport {lvalue})'''
    ...
    def setUcsIconVisible (self, *args, **kwargs)-> ErrorStatus :
      '''setUcsIconVisible( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUcsIconVisible(class PyDbViewport {lvalue})

setUcsIconVisible( (Viewport)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUcsIconVisible(class PyDbViewport {lvalue},bool)'''
    ...
    def setUcsPerViewport (self, *args, **kwargs)-> None :
      '''setUcsPerViewport( (Viewport)arg1, (bool)arg2) -> None :

    C++ signature :
        void setUcsPerViewport(class PyDbViewport {lvalue},bool)'''
    ...
    def setUcsToWorld (self, *args, **kwargs)-> ErrorStatus :
      '''setUcsToWorld( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUcsToWorld(class PyDbViewport {lvalue})'''
    ...
    def setUnlocked (self, *args, **kwargs)-> ErrorStatus :
      '''setUnlocked( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUnlocked(class PyDbViewport {lvalue})'''
    ...
    def setViewCenter (self, *args, **kwargs)-> ErrorStatus :
      '''setViewCenter( (Viewport)arg1, (Point2d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setViewCenter(class PyDbViewport {lvalue},class AcGePoint2d)'''
    ...
    def setViewDirection (self, *args, **kwargs)-> ErrorStatus :
      '''setViewDirection( (Viewport)arg1, (OrthographicView)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setViewDirection(class PyDbViewport {lvalue},enum AcDb::OrthographicView)'''
    ...
    def setViewDirection1 (self, *args, **kwargs)-> ErrorStatus :
      '''setViewDirection1( (Viewport)arg1, (Vector3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setViewDirection1(class PyDbViewport {lvalue},class AcGeVector3d)'''
    ...
    def setViewHeight (self, *args, **kwargs)-> ErrorStatus :
      '''setViewHeight( (Viewport)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setViewHeight(class PyDbViewport {lvalue},double)'''
    ...
    def setViewTarget (self, *args, **kwargs)-> ErrorStatus :
      '''setViewTarget( (Viewport)arg1, (Point3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setViewTarget(class PyDbViewport {lvalue},class AcGePoint3d)'''
    ...
    def setVisibility (self, *args, **kwargs)-> ErrorStatus :
      '''setVisibility( (Entity)arg1, (Visibility)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility)

setVisibility( (Entity)arg1, (Visibility)arg2, (bool)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisibility(class PyDbEntity {lvalue},enum AcDb::Visibility,bool)'''
    ...
    def setVisualStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setVisualStyle( (Viewport)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisualStyle(class PyDbViewport {lvalue},class PyDbObjectId)'''
    ...
    def setWidth (self, *args, **kwargs)-> ErrorStatus :
      '''setWidth( (Viewport)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setWidth(class PyDbViewport {lvalue},double)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def shadePlot (self, *args, **kwargs)-> VpShadePlotType :
      '''shadePlot( (Viewport)arg1) -> VpShadePlotType :

    C++ signature :
        enum AcDbViewport::ShadePlotType shadePlot(class PyDbViewport {lvalue})'''
    ...
    def shadePlotId (self, *args, **kwargs)-> ObjectId :
      '''shadePlotId( (Viewport)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId shadePlotId(class PyDbViewport {lvalue})'''
    ...
    def showHiddenLines (self, *args, **kwargs)-> ErrorStatus :
      '''showHiddenLines( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus showHiddenLines(class PyDbViewport {lvalue})'''
    ...
    def snapAngle (self, *args, **kwargs)-> float :
      '''snapAngle( (Viewport)arg1) -> float :

    C++ signature :
        double snapAngle(class PyDbViewport {lvalue})'''
    ...
    def snapBasePoint (self, *args, **kwargs)-> Point2d :
      '''snapBasePoint( (Viewport)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d snapBasePoint(class PyDbViewport {lvalue})'''
    ...
    def snapIncrement (self, *args, **kwargs)-> Vector2d :
      '''snapIncrement( (Viewport)arg1) -> Vector2d :

    C++ signature :
        class AcGeVector2d snapIncrement(class PyDbViewport {lvalue})'''
    ...
    def snapIsoPair (self, *args, **kwargs)-> int :
      '''snapIsoPair( (Viewport)arg1) -> int :

    C++ signature :
        unsigned short snapIsoPair(class PyDbViewport {lvalue})'''
    ...
    def standardScale (self, *args, **kwargs)-> StandardScaleType :
      '''standardScale( (Viewport)arg1) -> StandardScaleType :

    C++ signature :
        enum AcDbViewport::StandardScaleType standardScale(class PyDbViewport {lvalue})'''
    ...
    def subObjModified (self, *args, **kwargs)-> None :
      '''subObjModified( (Viewport)arg1, (DbObject)arg2, (DbObject)arg3) -> None :

    C++ signature :
        void subObjModified(class PyDbViewport {lvalue},class PyDbObject,class PyDbObject)'''
    ...
    def sunId (self, *args, **kwargs)-> ObjectId :
      '''sunId( (Viewport)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId sunId(class PyDbViewport {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def syncModelView (self, *args, **kwargs)-> ErrorStatus :
      '''syncModelView( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus syncModelView(class PyDbViewport {lvalue})'''
    ...
    def thawAllLayersInViewport (self, *args, **kwargs)-> ErrorStatus :
      '''thawAllLayersInViewport( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus thawAllLayersInViewport(class PyDbViewport {lvalue})'''
    ...
    def thawLayersInViewport (self, *args, **kwargs)-> ErrorStatus :
      '''thawLayersInViewport( (Viewport)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus thawLayersInViewport(class PyDbViewport {lvalue},class boost::python::list)'''
    ...
    def transformBy (self, *args, **kwargs)-> ErrorStatus :
      '''transformBy( (Entity)arg1, (Matrix3d)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus transformBy(class PyDbEntity {lvalue},class AcGeMatrix3d)'''
    ...
    def twistAngle (self, *args, **kwargs)-> float :
      '''twistAngle( (Viewport)arg1) -> float :

    C++ signature :
        double twistAngle(class PyDbViewport {lvalue})'''
    ...
    def ucsName (self, *args, **kwargs)-> ObjectId :
      '''ucsName( (Viewport)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ucsName(class PyDbViewport {lvalue})'''
    ...
    def updateDisplay (self, *args, **kwargs)-> ErrorStatus :
      '''updateDisplay( (Viewport)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus updateDisplay(class PyDbViewport {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def viewCenter (self, *args, **kwargs)-> Point2d :
      '''viewCenter( (Viewport)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d viewCenter(class PyDbViewport {lvalue})'''
    ...
    def viewDirection (self, *args, **kwargs)-> Vector3d :
      '''viewDirection( (Viewport)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d viewDirection(class PyDbViewport {lvalue})'''
    ...
    def viewHeight (self, *args, **kwargs)-> float :
      '''viewHeight( (Viewport)arg1) -> float :

    C++ signature :
        double viewHeight(class PyDbViewport {lvalue})'''
    ...
    def viewTarget (self, *args, **kwargs)-> Point3d :
      '''viewTarget( (Viewport)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d viewTarget(class PyDbViewport {lvalue})'''
    ...
    def visibility (self, *args, **kwargs)-> Visibility :
      '''visibility( (Entity)arg1) -> Visibility :

    C++ signature :
        enum AcDb::Visibility visibility(class PyDbEntity {lvalue})'''
    ...
    def visualStyle (self, *args, **kwargs)-> ObjectId :
      '''visualStyle( (Viewport)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId visualStyle(class PyDbViewport {lvalue})'''
    ...
    def width (self, *args, **kwargs)-> float :
      '''width( (Viewport)arg1) -> float :

    C++ signature :
        double width(class PyDbViewport {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class ViewportTableRecord:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def ambientLightColor (self, *args, **kwargs)-> Color :
      '''ambientLightColor( (AbstractViewTableRecord)arg1) -> Color :

    C++ signature :
        class AcCmColor ambientLightColor(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def backClipDistance (self, *args, **kwargs)-> float :
      '''backClipDistance( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double backClipDistance(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def backClipEnabled (self, *args, **kwargs)-> bool :
      '''backClipEnabled( (AbstractViewTableRecord)arg1) -> bool :

    C++ signature :
        bool backClipEnabled(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def background (self, *args, **kwargs)-> ObjectId :
      '''background( (AbstractViewTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId background(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def brightness (self, *args, **kwargs)-> float :
      '''brightness( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double brightness(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast (self, *args, **kwargs)-> ViewportTableRecord :
      '''cast( (RxObject)arg1) -> ViewportTableRecord :

    C++ signature :
        class PyDbViewportTableRecord cast(class PyRxObject)'''
    ...
    def centerPoint (self, *args, **kwargs)-> Point2d :
      '''centerPoint( (AbstractViewTableRecord)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d centerPoint(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def circleSides (self, *args, **kwargs)-> int :
      '''circleSides( (ViewportTableRecord)arg1) -> int :

    C++ signature :
        unsigned short circleSides(class PyDbViewportTableRecord {lvalue})'''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom (self, *args, **kwargs)-> ViewportTableRecord :
      '''cloneFrom( (RxObject)arg1) -> ViewportTableRecord :

    C++ signature :
        class PyDbViewportTableRecord cloneFrom(class PyRxObject)'''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def contrast (self, *args, **kwargs)-> float :
      '''contrast( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double contrast(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def defaultLightingType (self, *args, **kwargs)-> object :
      '''defaultLightingType( (AbstractViewTableRecord)arg1) -> object :

    C++ signature :
        enum AcGiViewportTraits::DefaultLightingType defaultLightingType(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def elevation (self, *args, **kwargs)-> float :
      '''elevation( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double elevation(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def fastZoomsEnabled (self, *args, **kwargs)-> bool :
      '''fastZoomsEnabled( (ViewportTableRecord)arg1) -> bool :

    C++ signature :
        bool fastZoomsEnabled(class PyDbViewportTableRecord {lvalue})'''
    ...
    def frontClipAtEye (self, *args, **kwargs)-> bool :
      '''frontClipAtEye( (AbstractViewTableRecord)arg1) -> bool :

    C++ signature :
        bool frontClipAtEye(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def frontClipDistance (self, *args, **kwargs)-> float :
      '''frontClipDistance( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double frontClipDistance(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def frontClipEnabled (self, *args, **kwargs)-> bool :
      '''frontClipEnabled( (AbstractViewTableRecord)arg1) -> bool :

    C++ signature :
        bool frontClipEnabled(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def getName (self, *args, **kwargs)-> str :
      '''getName( (SymbolTableRecord)arg1) -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > getName(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def getUcs (self, *args, **kwargs)-> ErrorStatus :
      '''getUcs( (AbstractViewTableRecord)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getUcs(class PyDbAbstractViewTableRecord {lvalue},class AcGePoint3d {lvalue},class AcGeVector3d {lvalue},class AcGeVector3d {lvalue})'''
    ...
    def gridEnabled (self, *args, **kwargs)-> bool :
      '''gridEnabled( (ViewportTableRecord)arg1) -> bool :

    C++ signature :
        bool gridEnabled(class PyDbViewportTableRecord {lvalue})'''
    ...
    def gridIncrements (self, *args, **kwargs)-> Point2d :
      '''gridIncrements( (ViewportTableRecord)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d gridIncrements(class PyDbViewportTableRecord {lvalue})'''
    ...
    def gridMajor (self, *args, **kwargs)-> int :
      '''gridMajor( (ViewportTableRecord)arg1) -> int :

    C++ signature :
        short gridMajor(class PyDbViewportTableRecord {lvalue})'''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def height (self, *args, **kwargs)-> float :
      '''height( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double height(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def iconAtOrigin (self, *args, **kwargs)-> bool :
      '''iconAtOrigin( (ViewportTableRecord)arg1) -> bool :

    C++ signature :
        bool iconAtOrigin(class PyDbViewportTableRecord {lvalue})'''
    ...
    def iconEnabled (self, *args, **kwargs)-> bool :
      '''iconEnabled( (ViewportTableRecord)arg1) -> bool :

    C++ signature :
        bool iconEnabled(class PyDbViewportTableRecord {lvalue})'''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isDefaultLightingOn (self, *args, **kwargs)-> bool :
      '''isDefaultLightingOn( (AbstractViewTableRecord)arg1) -> bool :

    C++ signature :
        bool isDefaultLightingOn(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def isDependent (self, *args, **kwargs)-> bool :
      '''isDependent( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isDependent(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isGridAdaptive (self, *args, **kwargs)-> bool :
      '''isGridAdaptive( (ViewportTableRecord)arg1) -> bool :

    C++ signature :
        bool isGridAdaptive(class PyDbViewportTableRecord {lvalue})'''
    ...
    def isGridBoundToLimits (self, *args, **kwargs)-> bool :
      '''isGridBoundToLimits( (ViewportTableRecord)arg1) -> bool :

    C++ signature :
        bool isGridBoundToLimits(class PyDbViewportTableRecord {lvalue})'''
    ...
    def isGridFollow (self, *args, **kwargs)-> bool :
      '''isGridFollow( (ViewportTableRecord)arg1) -> bool :

    C++ signature :
        bool isGridFollow(class PyDbViewportTableRecord {lvalue})'''
    ...
    def isGridSubdivisionRestricted (self, *args, **kwargs)-> bool :
      '''isGridSubdivisionRestricted( (ViewportTableRecord)arg1) -> bool :

    C++ signature :
        bool isGridSubdivisionRestricted(class PyDbViewportTableRecord {lvalue})'''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isRenamable (self, *args, **kwargs)-> bool :
      '''isRenamable( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isRenamable(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isResolved (self, *args, **kwargs)-> bool :
      '''isResolved( (SymbolTableRecord)arg1) -> bool :

    C++ signature :
        bool isResolved(class PyDbSymbolTableRecord {lvalue})'''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUcsOrthographic (self, *args, **kwargs)-> tuple :
      '''isUcsOrthographic( (AbstractViewTableRecord)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isUcsOrthographic(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def isUcsSavedWithViewport (self, *args, **kwargs)-> bool :
      '''isUcsSavedWithViewport( (ViewportTableRecord)arg1) -> bool :

    C++ signature :
        bool isUcsSavedWithViewport(class PyDbViewportTableRecord {lvalue})'''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isViewOrthographic (self, *args, **kwargs)-> tuple :
      '''isViewOrthographic( (AbstractViewTableRecord)arg1) -> tuple :

    C++ signature :
        class boost::python::tuple isViewOrthographic(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isometricSnapEnabled (self, *args, **kwargs)-> bool :
      '''isometricSnapEnabled( (ViewportTableRecord)arg1) -> bool :

    C++ signature :
        bool isometricSnapEnabled(class PyDbViewportTableRecord {lvalue})'''
    ...
    def lensLength (self, *args, **kwargs)-> float :
      '''lensLength( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double lensLength(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def lowerLeftCorner (self, *args, **kwargs)-> Point2d :
      '''lowerLeftCorner( (ViewportTableRecord)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d lowerLeftCorner(class PyDbViewportTableRecord {lvalue})'''
    ...
    def number (self, *args, **kwargs)-> int :
      '''number( (ViewportTableRecord)arg1) -> int :

    C++ signature :
        short number(class PyDbViewportTableRecord {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def perspectiveEnabled (self, *args, **kwargs)-> bool :
      '''perspectiveEnabled( (AbstractViewTableRecord)arg1) -> bool :

    C++ signature :
        bool perspectiveEnabled(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def previousBackground (self, *args, **kwargs)-> ObjectId :
      '''previousBackground( (ViewportTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId previousBackground(class PyDbViewportTableRecord {lvalue})

previousBackground( (ViewportTableRecord)arg1, (object)arg2) -> ObjectId :

    C++ signature :
        class PyDbObjectId previousBackground(class PyDbViewportTableRecord {lvalue},enum AcGiDrawable::DrawableType)'''
    ...
    def previousBackgroundForcedSwitch (self, *args, **kwargs)-> bool :
      '''previousBackgroundForcedSwitch( (ViewportTableRecord)arg1) -> bool :

    C++ signature :
        bool previousBackgroundForcedSwitch(class PyDbViewportTableRecord {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setAmbientLightColor (self, *args, **kwargs)-> ErrorStatus :
      '''setAmbientLightColor( (AbstractViewTableRecord)arg1, (Color)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setAmbientLightColor(class PyDbAbstractViewTableRecord {lvalue},class AcCmColor)'''
    ...
    def setBackClipDistance (self, *args, **kwargs)-> None :
      '''setBackClipDistance( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setBackClipDistance(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setBackClipEnabled (self, *args, **kwargs)-> None :
      '''setBackClipEnabled( (AbstractViewTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setBackClipEnabled(class PyDbAbstractViewTableRecord {lvalue},bool)'''
    ...
    def setBackground (self, *args, **kwargs)-> ErrorStatus :
      '''setBackground( (ViewportTableRecord)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBackground(class PyDbViewportTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setBrightness (self, *args, **kwargs)-> ErrorStatus :
      '''setBrightness( (AbstractViewTableRecord)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setBrightness(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setCenterPoint (self, *args, **kwargs)-> None :
      '''setCenterPoint( (AbstractViewTableRecord)arg1, (Point2d)arg2) -> None :

    C++ signature :
        void setCenterPoint(class PyDbAbstractViewTableRecord {lvalue},class AcGePoint2d)'''
    ...
    def setCircleSides (self, *args, **kwargs)-> None :
      '''setCircleSides( (ViewportTableRecord)arg1, (int)arg2) -> None :

    C++ signature :
        void setCircleSides(class PyDbViewportTableRecord {lvalue},unsigned short)'''
    ...
    def setContrast (self, *args, **kwargs)-> ErrorStatus :
      '''setContrast( (AbstractViewTableRecord)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setContrast(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setDefaultLightingOn (self, *args, **kwargs)-> ErrorStatus :
      '''setDefaultLightingOn( (AbstractViewTableRecord)arg1, (bool)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDefaultLightingOn(class PyDbAbstractViewTableRecord {lvalue},bool)'''
    ...
    def setDefaultLightingType (self, *args, **kwargs)-> ErrorStatus :
      '''setDefaultLightingType( (AbstractViewTableRecord)arg1, (object)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setDefaultLightingType(class PyDbAbstractViewTableRecord {lvalue},enum AcGiViewportTraits::DefaultLightingType)'''
    ...
    def setElevation (self, *args, **kwargs)-> ErrorStatus :
      '''setElevation( (AbstractViewTableRecord)arg1, (float)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setElevation(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setFastZoomsEnabled (self, *args, **kwargs)-> None :
      '''setFastZoomsEnabled( (ViewportTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setFastZoomsEnabled(class PyDbViewportTableRecord {lvalue},bool)'''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFrontClipAtEye (self, *args, **kwargs)-> None :
      '''setFrontClipAtEye( (AbstractViewTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setFrontClipAtEye(class PyDbAbstractViewTableRecord {lvalue},bool)'''
    ...
    def setFrontClipDistance (self, *args, **kwargs)-> None :
      '''setFrontClipDistance( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setFrontClipDistance(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setFrontClipEnabled (self, *args, **kwargs)-> None :
      '''setFrontClipEnabled( (AbstractViewTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setFrontClipEnabled(class PyDbAbstractViewTableRecord {lvalue},bool)'''
    ...
    def setGridAdaptive (self, *args, **kwargs)-> None :
      '''setGridAdaptive( (ViewportTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setGridAdaptive(class PyDbViewportTableRecord {lvalue},bool)'''
    ...
    def setGridBoundToLimits (self, *args, **kwargs)-> None :
      '''setGridBoundToLimits( (ViewportTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setGridBoundToLimits(class PyDbViewportTableRecord {lvalue},bool)'''
    ...
    def setGridEnabled (self, *args, **kwargs)-> None :
      '''setGridEnabled( (ViewportTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setGridEnabled(class PyDbViewportTableRecord {lvalue},bool)'''
    ...
    def setGridFollow (self, *args, **kwargs)-> None :
      '''setGridFollow( (ViewportTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setGridFollow(class PyDbViewportTableRecord {lvalue},bool)'''
    ...
    def setGridIncrements (self, *args, **kwargs)-> None :
      '''setGridIncrements( (ViewportTableRecord)arg1, (Point2d)arg2) -> None :

    C++ signature :
        void setGridIncrements(class PyDbViewportTableRecord {lvalue},class AcGePoint2d)'''
    ...
    def setGridMajor (self, *args, **kwargs)-> None :
      '''setGridMajor( (ViewportTableRecord)arg1, (DxfCode)arg2) -> None :

    C++ signature :
        void setGridMajor(class PyDbViewportTableRecord {lvalue},short)'''
    ...
    def setGridSubdivisionRestricted (self, *args, **kwargs)-> None :
      '''setGridSubdivisionRestricted( (ViewportTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setGridSubdivisionRestricted(class PyDbViewportTableRecord {lvalue},bool)'''
    ...
    def setHeight (self, *args, **kwargs)-> None :
      '''setHeight( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setHeight(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setIconAtOrigin (self, *args, **kwargs)-> None :
      '''setIconAtOrigin( (ViewportTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIconAtOrigin(class PyDbViewportTableRecord {lvalue},bool)'''
    ...
    def setIconEnabled (self, *args, **kwargs)-> None :
      '''setIconEnabled( (ViewportTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIconEnabled(class PyDbViewportTableRecord {lvalue},bool)'''
    ...
    def setIsometricSnapEnabled (self, *args, **kwargs)-> None :
      '''setIsometricSnapEnabled( (ViewportTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIsometricSnapEnabled(class PyDbViewportTableRecord {lvalue},bool)'''
    ...
    def setLensLength (self, *args, **kwargs)-> None :
      '''setLensLength( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setLensLength(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setLowerLeftCorner (self, *args, **kwargs)-> None :
      '''setLowerLeftCorner( (ViewportTableRecord)arg1, (Point2d)arg2) -> None :

    C++ signature :
        void setLowerLeftCorner(class PyDbViewportTableRecord {lvalue},class AcGePoint2d)'''
    ...
    def setName (self, *args, **kwargs)-> ErrorStatus :
      '''setName( (SymbolTableRecord)arg1, (str)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setName(class PyDbSymbolTableRecord {lvalue},class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setPerspectiveEnabled (self, *args, **kwargs)-> None :
      '''setPerspectiveEnabled( (AbstractViewTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPerspectiveEnabled(class PyDbAbstractViewTableRecord {lvalue},bool)'''
    ...
    def setPreviousBackground (self, *args, **kwargs)-> ErrorStatus :
      '''setPreviousBackground( (ViewportTableRecord)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPreviousBackground(class PyDbViewportTableRecord {lvalue},class PyDbObjectId {lvalue})

setPreviousBackground( (ViewportTableRecord)arg1, (ObjectId)arg2, (object)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setPreviousBackground(class PyDbViewportTableRecord {lvalue},class PyDbObjectId {lvalue},enum AcGiDrawable::DrawableType,bool)'''
    ...
    def setSnapAngle (self, *args, **kwargs)-> None :
      '''setSnapAngle( (ViewportTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setSnapAngle(class PyDbViewportTableRecord {lvalue},double)'''
    ...
    def setSnapBase (self, *args, **kwargs)-> None :
      '''setSnapBase( (ViewportTableRecord)arg1, (Point2d)arg2) -> None :

    C++ signature :
        void setSnapBase(class PyDbViewportTableRecord {lvalue},class AcGePoint2d)'''
    ...
    def setSnapEnabled (self, *args, **kwargs)-> None :
      '''setSnapEnabled( (ViewportTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setSnapEnabled(class PyDbViewportTableRecord {lvalue},bool)'''
    ...
    def setSnapIncrements (self, *args, **kwargs)-> None :
      '''setSnapIncrements( (ViewportTableRecord)arg1, (Point2d)arg2) -> None :

    C++ signature :
        void setSnapIncrements(class PyDbViewportTableRecord {lvalue},class AcGePoint2d)'''
    ...
    def setSnapPair (self, *args, **kwargs)-> None :
      '''setSnapPair( (ViewportTableRecord)arg1, (DxfCode)arg2) -> None :

    C++ signature :
        void setSnapPair(class PyDbViewportTableRecord {lvalue},short)'''
    ...
    def setSun (self, *args, **kwargs)-> ErrorStatus :
      '''setSun( (AbstractViewTableRecord)arg1, (ObjectId)arg2, (DbObject)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSun(class PyDbAbstractViewTableRecord {lvalue},class PyDbObjectId {lvalue},class PyDbObject {lvalue})

setSun( (AbstractViewTableRecord)arg1, (ObjectId)arg2, (DbObject)arg3, (bool)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setSun(class PyDbAbstractViewTableRecord {lvalue},class PyDbObjectId {lvalue},class PyDbObject {lvalue},bool)'''
    ...
    def setTarget (self, *args, **kwargs)-> None :
      '''setTarget( (AbstractViewTableRecord)arg1, (Point3d)arg2) -> None :

    C++ signature :
        void setTarget(class PyDbAbstractViewTableRecord {lvalue},class AcGePoint3d)'''
    ...
    def setUcs (self, *args, **kwargs)-> ErrorStatus :
      '''setUcs( (AbstractViewTableRecord)arg1, (Point3d)arg2, (Vector3d)arg3, (Vector3d)arg4) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUcs(class PyDbAbstractViewTableRecord {lvalue},class AcGePoint3d,class AcGeVector3d,class AcGeVector3d)

setUcs( (AbstractViewTableRecord)arg1, (OrthographicView)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUcs(class PyDbAbstractViewTableRecord {lvalue},enum AcDb::OrthographicView)

setUcs( (AbstractViewTableRecord)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUcs(class PyDbAbstractViewTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setUcsFollowMode (self, *args, **kwargs)-> None :
      '''setUcsFollowMode( (ViewportTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setUcsFollowMode(class PyDbViewportTableRecord {lvalue},bool)'''
    ...
    def setUcsPerViewport (self, *args, **kwargs)-> None :
      '''setUcsPerViewport( (ViewportTableRecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setUcsPerViewport(class PyDbViewportTableRecord {lvalue},bool)'''
    ...
    def setUcsToWorld (self, *args, **kwargs)-> ErrorStatus :
      '''setUcsToWorld( (AbstractViewTableRecord)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setUcsToWorld(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def setUpperRightCorner (self, *args, **kwargs)-> None :
      '''setUpperRightCorner( (ViewportTableRecord)arg1, (Point2d)arg2) -> None :

    C++ signature :
        void setUpperRightCorner(class PyDbViewportTableRecord {lvalue},class AcGePoint2d)'''
    ...
    def setViewDirection (self, *args, **kwargs)-> None :
      '''setViewDirection( (AbstractViewTableRecord)arg1, (Vector3d)arg2) -> None :

    C++ signature :
        void setViewDirection(class PyDbAbstractViewTableRecord {lvalue},class AcGeVector3d)

setViewDirection( (AbstractViewTableRecord)arg1, (OrthographicView)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setViewDirection(class PyDbAbstractViewTableRecord {lvalue},enum AcDb::OrthographicView)'''
    ...
    def setViewTwist (self, *args, **kwargs)-> None :
      '''setViewTwist( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setViewTwist(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setVisualStyle (self, *args, **kwargs)-> ErrorStatus :
      '''setVisualStyle( (AbstractViewTableRecord)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setVisualStyle(class PyDbAbstractViewTableRecord {lvalue},class PyDbObjectId)'''
    ...
    def setWidth (self, *args, **kwargs)-> None :
      '''setWidth( (AbstractViewTableRecord)arg1, (float)arg2) -> None :

    C++ signature :
        void setWidth(class PyDbAbstractViewTableRecord {lvalue},double)'''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def snapAngle (self, *args, **kwargs)-> float :
      '''snapAngle( (ViewportTableRecord)arg1) -> float :

    C++ signature :
        double snapAngle(class PyDbViewportTableRecord {lvalue})'''
    ...
    def snapBase (self, *args, **kwargs)-> Point2d :
      '''snapBase( (ViewportTableRecord)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d snapBase(class PyDbViewportTableRecord {lvalue})'''
    ...
    def snapEnabled (self, *args, **kwargs)-> bool :
      '''snapEnabled( (ViewportTableRecord)arg1) -> bool :

    C++ signature :
        bool snapEnabled(class PyDbViewportTableRecord {lvalue})'''
    ...
    def snapIncrements (self, *args, **kwargs)-> Point2d :
      '''snapIncrements( (ViewportTableRecord)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d snapIncrements(class PyDbViewportTableRecord {lvalue})'''
    ...
    def snapPair (self, *args, **kwargs)-> int :
      '''snapPair( (ViewportTableRecord)arg1) -> int :

    C++ signature :
        short snapPair(class PyDbViewportTableRecord {lvalue})'''
    ...
    def sunId (self, *args, **kwargs)-> ObjectId :
      '''sunId( (AbstractViewTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId sunId(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def target (self, *args, **kwargs)-> Point3d :
      '''target( (AbstractViewTableRecord)arg1) -> Point3d :

    C++ signature :
        class AcGePoint3d target(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def ucsFollowMode (self, *args, **kwargs)-> bool :
      '''ucsFollowMode( (ViewportTableRecord)arg1) -> bool :

    C++ signature :
        bool ucsFollowMode(class PyDbViewportTableRecord {lvalue})'''
    ...
    def ucsName (self, *args, **kwargs)-> ObjectId :
      '''ucsName( (AbstractViewTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId ucsName(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def upperRightCorner (self, *args, **kwargs)-> Point2d :
      '''upperRightCorner( (ViewportTableRecord)arg1) -> Point2d :

    C++ signature :
        class AcGePoint2d upperRightCorner(class PyDbViewportTableRecord {lvalue})'''
    ...
    def viewDirection (self, *args, **kwargs)-> Vector3d :
      '''viewDirection( (AbstractViewTableRecord)arg1) -> Vector3d :

    C++ signature :
        class AcGeVector3d viewDirection(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def viewTwist (self, *args, **kwargs)-> float :
      '''viewTwist( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double viewTwist(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def visualStyle (self, *args, **kwargs)-> ObjectId :
      '''visualStyle( (AbstractViewTableRecord)arg1) -> ObjectId :

    C++ signature :
        class PyDbObjectId visualStyle(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def width (self, *args, **kwargs)-> float :
      '''width( (AbstractViewTableRecord)arg1) -> float :

    C++ signature :
        double width(class PyDbAbstractViewTableRecord {lvalue})'''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class Visibility:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kInvisible (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kVisible (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class VpShadePlotType:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kAsDisplayed (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kHidden (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kRenderPreset (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kRendered (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kVisualStyle (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kWireframe (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class Xrecord:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1, (ObjectId)arg2, (OpenMode)arg3) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64,class PyDbObjectId,enum AcDb::OpenMode)'''
    ...
    def addPersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def assertNotifyEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertReadEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def assertWriteEnabled (self: DbObject)-> None :
      '''                             '''
    ...
    def cancel (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def cast ()-> DbObject :
      '''                             '''
    ...
    def className (self, *args, **kwargs)-> str :
      '''className() -> str :

    C++ signature :
        class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > className()'''
    ...
    def cloneFrom ()-> DbObject :
      '''                             '''
    ...
    def close (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def createExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def database (self: DbObject)-> Database :
      '''                             '''
    ...
    def desc (self, *args, **kwargs)-> RxClass :
      '''desc() -> RxClass :

    C++ signature :
        class PyRxClass desc()'''
    ...
    def disableUndoRecording (self: DbObject,disable: bool)-> None :
      '''                             '''
    ...
    def downgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def downgradeToNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def erase (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def extensionDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getField (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getFieldDictionary (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def getHandle (self: DbObject)-> Handle :
      '''                             '''
    ...
    def handOverTo (self: DbObject,newObject: DbObject,keepXData: bool,keepExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def hasFields (self: DbObject)-> bool :
      '''                             '''
    ...
    def hasPersistentReactor (self: DbObject,id: ObjectId)-> bool :
      '''                             '''
    ...
    def isA (self, *args, **kwargs)-> RxClass :
      '''isA( (Drawable)arg1) -> RxClass :

    C++ signature :
        class PyRxClass isA(class PyGiDrawable {lvalue})'''
    ...
    def isAProxy (self: DbObject)-> bool :
      '''                             '''
    ...
    def isCancelling (self: DbObject)-> bool :
      '''                             '''
    ...
    def isEraseStatusToggled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isErased (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModified (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedGraphics (self: DbObject)-> bool :
      '''                             '''
    ...
    def isModifiedXData (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNewObject (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifyEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNotifying (self: DbObject)-> bool :
      '''                             '''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (RxObject)arg1) -> bool :

    C++ signature :
        bool isNull(class PyRxObject {lvalue})'''
    ...
    def isReadEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isReallyClosing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isTransactionResident (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoRecordingDisabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isUndoing (self: DbObject)-> bool :
      '''                             '''
    ...
    def isWriteEnabled (self: DbObject)-> bool :
      '''                             '''
    ...
    def isXlateReferences (self, *args, **kwargs)-> bool :
      '''isXlateReferences( (Xrecord)arg1) -> bool :

    C++ signature :
        bool isXlateReferences(class PyDbXrecord {lvalue})'''
    ...
    def mergeStyle (self, *args, **kwargs)-> DuplicateRecordCloning :
      '''mergeStyle( (Xrecord)arg1) -> DuplicateRecordCloning :

    C++ signature :
        enum AcDb::DuplicateRecordCloning mergeStyle(class PyDbXrecord {lvalue})'''
    ...
    def objectId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def ownerId (self: DbObject)-> ObjectId :
      '''                             '''
    ...
    def rbChain (self, *args, **kwargs)-> list :
      '''rbChain( (Xrecord)arg1) -> list :

    C++ signature :
        class boost::python::list rbChain(class PyDbXrecord {lvalue})

rbChain( (Xrecord)arg1, (Database)arg2) -> list :

    C++ signature :
        class boost::python::list rbChain(class PyDbXrecord {lvalue},class PyDbDatabase {lvalue})'''
    ...
    def refCount (self, *args, **kwargs)-> int :
      '''refCount( (RxObject)arg1) -> int :

    C++ signature :
        int refCount(class PyRxObject {lvalue})'''
    ...
    def releaseExtensionDictionary (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def removeField (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def removePersistentReactor (self: DbObject,id: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setField (self: DbObject,obj: Field)-> ObjectId :
      '''                             '''
    ...
    def setFromRbChain (self, *args, **kwargs)-> ErrorStatus :
      '''setFromRbChain( (Xrecord)arg1, (list)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFromRbChain(class PyDbXrecord {lvalue},class boost::python::list)

setFromRbChain( (Xrecord)arg1, (list)arg2, (Database)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setFromRbChain(class PyDbXrecord {lvalue},class boost::python::list,class PyDbDatabase {lvalue})'''
    ...
    def setMergeStyle (self, *args, **kwargs)-> None :
      '''setMergeStyle( (Xrecord)arg1, (DuplicateRecordCloning)arg2) -> None :

    C++ signature :
        void setMergeStyle(class PyDbXrecord {lvalue},enum AcDb::DuplicateRecordCloning)'''
    ...
    def setOwnerId (self: DbObject,owner: ObjectId)-> ErrorStatus :
      '''                             '''
    ...
    def setXData (self: DbObject,xdata: list)-> ErrorStatus :
      '''                             '''
    ...
    def setXlateReferences (self, *args, **kwargs)-> None :
      '''setXlateReferences( (Xrecord)arg1, (bool)arg2) -> None :

    C++ signature :
        void setXlateReferences(class PyDbXrecord {lvalue},bool)'''
    ...
    def swapIdWith (self: DbObject,otherId: DbObject,swapXdata: bool,swapExtDict: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeFromNotify (self: DbObject,wasWritable: bool)-> ErrorStatus :
      '''                             '''
    ...
    def upgradeOpen (self: DbObject)-> ErrorStatus :
      '''                             '''
    ...
    def xData (self: DbObject,appname: str)-> list :
      '''                             '''
    ...
    def xDataTransformBy (self: DbObject,xform: AcGeMatrix3d)-> ErrorStatus :
      '''                             '''
    ...

class XrefObjectId:
    def __init__ (self, *args, **kwargs)-> None :
      '''__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)

__init__( (object)arg1) -> None :

    C++ signature :
        void __init__(struct _object * __ptr64)'''
    ...
    def getLocalId (self, *args, **kwargs)-> ErrorStatus :
      '''getLocalId( (XrefObjectId)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getLocalId(class PyDbXrefObjectId {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def getXrefId (self, *args, **kwargs)-> ErrorStatus :
      '''getXrefId( (XrefObjectId)arg1, (ObjectId)arg2, (Handle)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus getXrefId(class PyDbXrefObjectId {lvalue},class PyDbObjectId {lvalue},class PyDbHandle {lvalue})'''
    ...
    def isNull (self, *args, **kwargs)-> bool :
      '''isNull( (XrefObjectId)arg1) -> bool :

    C++ signature :
        bool isNull(class PyDbXrefObjectId {lvalue})'''
    ...
    def isValid (self, *args, **kwargs)-> bool :
      '''isValid( (XrefObjectId)arg1) -> bool :

    C++ signature :
        bool isValid(class PyDbXrefObjectId {lvalue})'''
    ...
    def isXref (self, *args, **kwargs)-> bool :
      '''isXref( (XrefObjectId)arg1) -> bool :

    C++ signature :
        bool isXref(class PyDbXrefObjectId {lvalue})'''
    ...
    def resolveObjectId (self, *args, **kwargs)-> ErrorStatus :
      '''resolveObjectId( (XrefObjectId)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus resolveObjectId(class PyDbXrefObjectId {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def setLocalId (self, *args, **kwargs)-> ErrorStatus :
      '''setLocalId( (XrefObjectId)arg1, (ObjectId)arg2) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setLocalId(class PyDbXrefObjectId {lvalue},class PyDbObjectId {lvalue})'''
    ...
    def setNull (self, *args, **kwargs)-> ErrorStatus :
      '''setNull( (XrefObjectId)arg1) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setNull(class PyDbXrefObjectId {lvalue})'''
    ...
    def setXrefId (self, *args, **kwargs)-> ErrorStatus :
      '''setXrefId( (XrefObjectId)arg1, (ObjectId)arg2, (Handle)arg3) -> ErrorStatus :

    C++ signature :
        enum Acad::ErrorStatus setXrefId(class PyDbXrefObjectId {lvalue},class PyDbObjectId {lvalue},class PyDbHandle)'''
    ...

class XrefStatus:
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs)-> None:
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs)-> None:
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs)-> None:
      '''the imaginary part of a complex number'''
    ...
    def kXrfFileNotFound (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kXrfNotAnXref (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kXrfResolved (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kXrfUnloaded (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kXrfUnreferenced (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def kXrfUnresolved (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def name (self, *args, **kwargs)-> None:
      '''None'''
    ...
    def names (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs)-> None:
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs)-> None:
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs)-> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

class __loader__:
    def _ORIGIN (self, *args, **kwargs)-> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict':
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def __init__ (self, /, *args, **kwargs):
      '''Initialize self.  See help(type(self)) for accurate signature.'''
    ...
    def create_module (spec):
      '''Create a built-in module'''
    ...
    def exec_module (module):
      '''Exec a built-in module'''
    ...
    def find_module (fullname, path=None):
      '''Find the built-in module.

        If 'path' is ever specified then the search is considered a failure.

        This method is deprecated.  Use find_spec() instead.

        '''
    ...
    def find_spec (fullname, path=None, target=None):
      '''None'''
    ...
    def get_code (fullname):
      '''Return None as built-in modules do not have code objects.'''
    ...
    def get_source (fullname):
      '''Return None as built-in modules do not have source code.'''
    ...
    def is_package (fullname):
      '''Return False as built-in modules are never packages.'''
    ...
    def load_module (fullname):
      '''Load the specified module into sys.modules and return it.

    This method is deprecated.  Use loader.exec_module() instead.

    '''
    ...
    def module_repr (module):
      '''Return repr for the module.

        The method is deprecated.  The import machinery does the job itself.

        '''
    ...

function curDb:
    def curDb (*args, **kwargs)-> Database :
      '''curDb() -> Database :

    C++ signature :
        class PyDbDatabase curDb()'''
    ...
